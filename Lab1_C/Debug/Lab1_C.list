
Lab1_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a038  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  0800a1c8  0800a1c8  0001a1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a634  0800a634  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a634  0800a634  0001a634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a63c  0800a63c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a63c  0800a63c  0001a63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a640  0800a640  0001a640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800a644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000055c  200001f4  0800a838  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  0800a838  00020750  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001395f  00000000  00000000  00020267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c8a  00000000  00000000  00033bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f0  00000000  00000000  00036850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ddf  00000000  00000000  00037a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029173  00000000  00000000  0003881f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018bfc  00000000  00000000  00061992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0492  00000000  00000000  0007a58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005bc8  00000000  00000000  0016aa20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001705e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a1b0 	.word	0x0800a1b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800a1b0 	.word	0x0800a1b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000f44:	b40f      	push	{r0, r1, r2, r3}
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
	static char buffer[512];
	va_list args;
	va_start(args, fmt);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f5a:	480b      	ldr	r0, [pc, #44]	; (8000f88 <myprintf+0x44>)
 8000f5c:	f007 f822 	bl	8007fa4 <vsniprintf>
	va_end(args);
	int len = strlen(buffer);
 8000f60:	4809      	ldr	r0, [pc, #36]	; (8000f88 <myprintf+0x44>)
 8000f62:	f7ff f985 	bl	8000270 <strlen>
 8000f66:	4603      	mov	r3, r0
 8000f68:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, len, -1);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	4905      	ldr	r1, [pc, #20]	; (8000f88 <myprintf+0x44>)
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <myprintf+0x48>)
 8000f76:	f004 f9a7 	bl	80052c8 <HAL_UART_Transmit>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f84:	b004      	add	sp, #16
 8000f86:	4770      	bx	lr
 8000f88:	200003b4 	.word	0x200003b4
 8000f8c:	2000032c 	.word	0x2000032c

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 8000f96:	af02      	add	r7, sp, #8
	uint8_t flag;
	float lux;
	float temp;


	ret = HAL_I2C_Master_Transmit(&hi2c1, BH1721_ADDR_write, &BH1721_start, 1, HAL_MAX_DELAY); // Tell BH1721 to start measurements
 8000f98:	4bc8      	ldr	r3, [pc, #800]	; (80012bc <main+0x32c>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b299      	uxth	r1, r3
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	4ac6      	ldr	r2, [pc, #792]	; (80012c0 <main+0x330>)
 8000fa8:	48c6      	ldr	r0, [pc, #792]	; (80012c4 <main+0x334>)
 8000faa:	f001 f9b9 	bl	8002320 <HAL_I2C_Master_Transmit>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f887 3263 	strb.w	r3, [r7, #611]	; 0x263
	if ( ret != HAL_OK ) {
 8000fb4:	f897 3263 	ldrb.w	r3, [r7, #611]	; 0x263
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d002      	beq.n	8000fc2 <main+0x32>
		myprintf("Error!\n"); // error message in UART
 8000fbc:	48c2      	ldr	r0, [pc, #776]	; (80012c8 <main+0x338>)
 8000fbe:	f7ff ffc1 	bl	8000f44 <myprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc2:	f000 fdc9 	bl	8001b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc6:	f000 f99f 	bl	8001308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fca:	f000 fadb 	bl	8001584 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fce:	f000 faa9 	bl	8001524 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fd2:	f000 f9eb 	bl	80013ac <MX_I2C1_Init>
  MX_SPI2_Init();
 8000fd6:	f000 fa29 	bl	800142c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000fda:	f000 fa65 	bl	80014a8 <MX_SPI3_Init>
  MX_FATFS_Init();
 8000fde:	f004 fecb 	bl	8005d78 <MX_FATFS_Init>

	//some variables for FatFs
	FATFS FatFs; 	//Fatfs handle
	FRESULT fres; //Result after operations

  fres = f_mount(&FatFs, "", 1); //1=mount now
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	49b8      	ldr	r1, [pc, #736]	; (80012cc <main+0x33c>)
 8000fea:	4618      	mov	r0, r3
 8000fec:	f006 f8ec 	bl	80071c8 <f_mount>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	f887 3262 	strb.w	r3, [r7, #610]	; 0x262
  if (fres != FR_OK) {
 8000ff6:	f897 3262 	ldrb.w	r3, [r7, #610]	; 0x262
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d006      	beq.n	800100c <main+0x7c>
	  myprintf("f_mount error (%i)\r\n", fres);
 8000ffe:	f897 3262 	ldrb.w	r3, [r7, #610]	; 0x262
 8001002:	4619      	mov	r1, r3
 8001004:	48b2      	ldr	r0, [pc, #712]	; (80012d0 <main+0x340>)
 8001006:	f7ff ff9d 	bl	8000f44 <myprintf>
	  while(1);
 800100a:	e7fe      	b.n	800100a <main+0x7a>
  }

  DWORD free_clusters, free_sectors, total_sectors;
  FATFS* getFreeFs;

  fres = f_getfree("", &free_clusters, &getFreeFs);
 800100c:	1d3a      	adds	r2, r7, #4
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	4619      	mov	r1, r3
 8001014:	48ad      	ldr	r0, [pc, #692]	; (80012cc <main+0x33c>)
 8001016:	f006 f91d 	bl	8007254 <f_getfree>
 800101a:	4603      	mov	r3, r0
 800101c:	f887 3262 	strb.w	r3, [r7, #610]	; 0x262
  if (fres != FR_OK) {
 8001020:	f897 3262 	ldrb.w	r3, [r7, #610]	; 0x262
 8001024:	2b00      	cmp	r3, #0
 8001026:	d006      	beq.n	8001036 <main+0xa6>
	  myprintf("f_getfree error (%i)\r\n", fres);
 8001028:	f897 3262 	ldrb.w	r3, [r7, #610]	; 0x262
 800102c:	4619      	mov	r1, r3
 800102e:	48a9      	ldr	r0, [pc, #676]	; (80012d4 <main+0x344>)
 8001030:	f7ff ff88 	bl	8000f44 <myprintf>
	  while(1);
 8001034:	e7fe      	b.n	8001034 <main+0xa4>
  }
  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8001036:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800103a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	3b02      	subs	r3, #2
 8001044:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8001048:	f5a2 7219 	sub.w	r2, r2, #612	; 0x264
 800104c:	6812      	ldr	r2, [r2, #0]
 800104e:	8952      	ldrh	r2, [r2, #10]
 8001050:	fb02 f303 	mul.w	r3, r2, r3
 8001054:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
  free_sectors = free_clusters * getFreeFs->csize;
 8001058:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800105c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	895b      	ldrh	r3, [r3, #10]
 8001064:	461a      	mov	r2, r3
 8001066:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800106a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	fb02 f303 	mul.w	r3, r2, r3
 8001074:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258

  myprintf("SD card stats:\r\n%ld kB total drive space.\r\n%ld kB available.\r\n", total_sectors / 2, free_sectors / 2);
 8001078:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800107c:	0859      	lsrs	r1, r3, #1
 800107e:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8001082:	085b      	lsrs	r3, r3, #1
 8001084:	461a      	mov	r2, r3
 8001086:	4894      	ldr	r0, [pc, #592]	; (80012d8 <main+0x348>)
 8001088:	f7ff ff5c 	bl	8000f44 <myprintf>

  // LED on
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800108c:	2201      	movs	r2, #1
 800108e:	2120      	movs	r1, #32
 8001090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001094:	f001 f890 	bl	80021b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2110      	movs	r1, #16
 800109c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a0:	f001 f88a 	bl	80021b8 <HAL_GPIO_WritePin>

  // Configure BH1721 to do low resolution continuously
  ret = HAL_I2C_Master_Transmit(&hi2c1, BH1721_ADDR_write, &BH1721_LRC, 1, HAL_MAX_DELAY);
 80010a4:	4b85      	ldr	r3, [pc, #532]	; (80012bc <main+0x32c>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b299      	uxth	r1, r3
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	4a8a      	ldr	r2, [pc, #552]	; (80012dc <main+0x34c>)
 80010b4:	4883      	ldr	r0, [pc, #524]	; (80012c4 <main+0x334>)
 80010b6:	f001 f933 	bl	8002320 <HAL_I2C_Master_Transmit>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f887 3263 	strb.w	r3, [r7, #611]	; 0x263
  if ( ret != HAL_OK ) {
 80010c0:	f897 3263 	ldrb.w	r3, [r7, #611]	; 0x263
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <main+0x13e>
	  myprintf("Error!\n"); // error message in UART
 80010c8:	487f      	ldr	r0, [pc, #508]	; (80012c8 <main+0x338>)
 80010ca:	f7ff ff3b 	bl	8000f44 <myprintf>
  }

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // SPI3 CS on
 80010ce:	2201      	movs	r2, #1
 80010d0:	2110      	movs	r1, #16
 80010d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d6:	f001 f86f 	bl	80021b8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t *)&TC72_WR, 1, HAL_MAX_DELAY);
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	2201      	movs	r2, #1
 80010e0:	497f      	ldr	r1, [pc, #508]	; (80012e0 <main+0x350>)
 80010e2:	4880      	ldr	r0, [pc, #512]	; (80012e4 <main+0x354>)
 80010e4:	f003 fa17 	bl	8004516 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, (uint8_t *)&TC72_OP, 1, HAL_MAX_DELAY);
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	2201      	movs	r2, #1
 80010ee:	497e      	ldr	r1, [pc, #504]	; (80012e8 <main+0x358>)
 80010f0:	487c      	ldr	r0, [pc, #496]	; (80012e4 <main+0x354>)
 80010f2:	f003 fa10 	bl	8004516 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // SPI3 CS off
 80010f6:	2200      	movs	r2, #0
 80010f8:	2110      	movs	r1, #16
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fe:	f001 f85b 	bl	80021b8 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ret = HAL_I2C_Master_Receive(&hi2c1, BH1721_ADDR_read, buf, 2, HAL_MAX_DELAY); // Read 2 bytes from BH1721 into a buffer
 8001102:	4b7a      	ldr	r3, [pc, #488]	; (80012ec <main+0x35c>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b299      	uxth	r1, r3
 8001108:	f507 7211 	add.w	r2, r7, #580	; 0x244
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2302      	movs	r3, #2
 8001114:	486b      	ldr	r0, [pc, #428]	; (80012c4 <main+0x334>)
 8001116:	f001 fa1b 	bl	8002550 <HAL_I2C_Master_Receive>
 800111a:	4603      	mov	r3, r0
 800111c:	f887 3263 	strb.w	r3, [r7, #611]	; 0x263
	  if ( ret != HAL_OK ) {
 8001120:	f897 3263 	ldrb.w	r3, [r7, #611]	; 0x263
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <main+0x19e>
		  myprintf("Error!\n"); // error message in UART
 8001128:	4867      	ldr	r0, [pc, #412]	; (80012c8 <main+0x338>)
 800112a:	f7ff ff0b 	bl	8000f44 <myprintf>
	  }

	  // Convert into Lux
	  light_val = (buf[0]<<8) | buf[1];
 800112e:	f897 3244 	ldrb.w	r3, [r7, #580]	; 0x244
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21a      	sxth	r2, r3
 8001136:	f897 3245 	ldrb.w	r3, [r7, #581]	; 0x245
 800113a:	b21b      	sxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b21b      	sxth	r3, r3
 8001140:	f8a7 3256 	strh.w	r3, [r7, #598]	; 0x256
	  lux = light_val/1.2;
 8001144:	f8b7 3256 	ldrh.w	r3, [r7, #598]	; 0x256
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9eb 	bl	8000524 <__aeabi_i2d>
 800114e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001152:	4b67      	ldr	r3, [pc, #412]	; (80012f0 <main+0x360>)
 8001154:	f7ff fb7a 	bl	800084c <__aeabi_ddiv>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fd22 	bl	8000ba8 <__aeabi_d2f>
 8001164:	4603      	mov	r3, r0
 8001166:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	  myprintf("Light: %.2f lux\r\n", lux);
 800116a:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 800116e:	f7ff f9eb 	bl	8000548 <__aeabi_f2d>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	485f      	ldr	r0, [pc, #380]	; (80012f4 <main+0x364>)
 8001178:	f7ff fee4 	bl	8000f44 <myprintf>


	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // SPI3 CS on
 800117c:	2201      	movs	r2, #1
 800117e:	2110      	movs	r1, #16
 8001180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001184:	f001 f818 	bl	80021b8 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi3, (uint8_t *)&TC72_WR, 1, HAL_MAX_DELAY);
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	2201      	movs	r2, #1
 800118e:	4954      	ldr	r1, [pc, #336]	; (80012e0 <main+0x350>)
 8001190:	4854      	ldr	r0, [pc, #336]	; (80012e4 <main+0x354>)
 8001192:	f003 f9c0 	bl	8004516 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi3, (uint8_t *)&TC72_OP, 1, HAL_MAX_DELAY);
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	2201      	movs	r2, #1
 800119c:	4952      	ldr	r1, [pc, #328]	; (80012e8 <main+0x358>)
 800119e:	4851      	ldr	r0, [pc, #324]	; (80012e4 <main+0x354>)
 80011a0:	f003 f9b9 	bl	8004516 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // SPI3 CS off
 80011a4:	2200      	movs	r2, #0
 80011a6:	2110      	movs	r1, #16
 80011a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ac:	f001 f804 	bl	80021b8 <HAL_GPIO_WritePin>

	  HAL_Delay(150);
 80011b0:	2096      	movs	r0, #150	; 0x96
 80011b2:	f000 fd4d 	bl	8001c50 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // SPI3 CS on
 80011b6:	2201      	movs	r2, #1
 80011b8:	2110      	movs	r1, #16
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011be:	f000 fffb 	bl	80021b8 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi3, (uint8_t *)&TC72_RR, 1, HAL_MAX_DELAY);
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	2201      	movs	r2, #1
 80011c8:	494b      	ldr	r1, [pc, #300]	; (80012f8 <main+0x368>)
 80011ca:	4846      	ldr	r0, [pc, #280]	; (80012e4 <main+0x354>)
 80011cc:	f003 f9a3 	bl	8004516 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi3, (uint8_t *)spi_buf, 4, HAL_MAX_DELAY);
 80011d0:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	2204      	movs	r2, #4
 80011da:	4842      	ldr	r0, [pc, #264]	; (80012e4 <main+0x354>)
 80011dc:	f003 fb10 	bl	8004800 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // SPI3 CS off
 80011e0:	2200      	movs	r2, #0
 80011e2:	2110      	movs	r1, #16
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e8:	f000 ffe6 	bl	80021b8 <HAL_GPIO_WritePin>

	  myprintf("Temp Val: %x %x %x %x\r\n",spi_buf[0],
 80011ec:	f897 323c 	ldrb.w	r3, [r7, #572]	; 0x23c
 80011f0:	4619      	mov	r1, r3
			spi_buf[1],
 80011f2:	f897 323d 	ldrb.w	r3, [r7, #573]	; 0x23d
	  myprintf("Temp Val: %x %x %x %x\r\n",spi_buf[0],
 80011f6:	461a      	mov	r2, r3
			spi_buf[2],
 80011f8:	f897 323e 	ldrb.w	r3, [r7, #574]	; 0x23e
	  myprintf("Temp Val: %x %x %x %x\r\n",spi_buf[0],
 80011fc:	4618      	mov	r0, r3
			spi_buf[3]);
 80011fe:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
	  myprintf("Temp Val: %x %x %x %x\r\n",spi_buf[0],
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	4603      	mov	r3, r0
 8001206:	483d      	ldr	r0, [pc, #244]	; (80012fc <main+0x36c>)
 8001208:	f7ff fe9c 	bl	8000f44 <myprintf>

	 flag = spi_buf[2] >> 6; //right shift by 6 bits
 800120c:	f897 323e 	ldrb.w	r3, [r7, #574]	; 0x23e
 8001210:	099b      	lsrs	r3, r3, #6
 8001212:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f

	 if (spi_buf[1] >= 128) { //cause 128 means -0
 8001216:	f897 323d 	ldrb.w	r3, [r7, #573]	; 0x23d
 800121a:	b25b      	sxtb	r3, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	da22      	bge.n	8001266 <main+0x2d6>
		temp = -((spi_buf[1]) - 128)-(flag * 0.25);
 8001220:	f897 323d 	ldrb.w	r3, [r7, #573]	; 0x23d
 8001224:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f97b 	bl	8000524 <__aeabi_i2d>
 800122e:	4604      	mov	r4, r0
 8001230:	460d      	mov	r5, r1
 8001232:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f974 	bl	8000524 <__aeabi_i2d>
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <main+0x370>)
 8001242:	f7ff f9d9 	bl	80005f8 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4620      	mov	r0, r4
 800124c:	4629      	mov	r1, r5
 800124e:	f7ff f81b 	bl	8000288 <__aeabi_dsub>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f7ff fca5 	bl	8000ba8 <__aeabi_d2f>
 800125e:	4603      	mov	r3, r0
 8001260:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8001264:	e01f      	b.n	80012a6 <main+0x316>
	 }
	else {
		temp = spi_buf[1]+(flag * 0.25);
 8001266:	f897 323d 	ldrb.w	r3, [r7, #573]	; 0x23d
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f95a 	bl	8000524 <__aeabi_i2d>
 8001270:	4604      	mov	r4, r0
 8001272:	460d      	mov	r5, r1
 8001274:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f953 	bl	8000524 <__aeabi_i2d>
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <main+0x370>)
 8001284:	f7ff f9b8 	bl	80005f8 <__aeabi_dmul>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4620      	mov	r0, r4
 800128e:	4629      	mov	r1, r5
 8001290:	f7fe fffc 	bl	800028c <__adddf3>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4610      	mov	r0, r2
 800129a:	4619      	mov	r1, r3
 800129c:	f7ff fc84 	bl	8000ba8 <__aeabi_d2f>
 80012a0:	4603      	mov	r3, r0
 80012a2:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
	}
	 myprintf("Temp : %f\r\n",temp);
 80012a6:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 80012aa:	f7ff f94d 	bl	8000548 <__aeabi_f2d>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4814      	ldr	r0, [pc, #80]	; (8001304 <main+0x374>)
 80012b4:	f7ff fe46 	bl	8000f44 <myprintf>
	  ret = HAL_I2C_Master_Receive(&hi2c1, BH1721_ADDR_read, buf, 2, HAL_MAX_DELAY); // Read 2 bytes from BH1721 into a buffer
 80012b8:	e723      	b.n	8001102 <main+0x172>
 80012ba:	bf00      	nop
 80012bc:	20000001 	.word	0x20000001
 80012c0:	20000002 	.word	0x20000002
 80012c4:	20000210 	.word	0x20000210
 80012c8:	0800a1c8 	.word	0x0800a1c8
 80012cc:	0800a1d0 	.word	0x0800a1d0
 80012d0:	0800a1d4 	.word	0x0800a1d4
 80012d4:	0800a1ec 	.word	0x0800a1ec
 80012d8:	0800a204 	.word	0x0800a204
 80012dc:	20000003 	.word	0x20000003
 80012e0:	20000004 	.word	0x20000004
 80012e4:	200002c8 	.word	0x200002c8
 80012e8:	20000005 	.word	0x20000005
 80012ec:	20000000 	.word	0x20000000
 80012f0:	3ff33333 	.word	0x3ff33333
 80012f4:	0800a244 	.word	0x0800a244
 80012f8:	20000006 	.word	0x20000006
 80012fc:	0800a258 	.word	0x0800a258
 8001300:	3fd00000 	.word	0x3fd00000
 8001304:	0800a270 	.word	0x0800a270

08001308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b096      	sub	sp, #88	; 0x58
 800130c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	2244      	movs	r2, #68	; 0x44
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f006 fe52 	bl	8007fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800132a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800132e:	f001 fd3d 	bl	8002dac <HAL_PWREx_ControlVoltageScaling>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001338:	f000 f98a 	bl	8001650 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800133c:	2302      	movs	r3, #2
 800133e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001344:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001346:	2310      	movs	r3, #16
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134a:	2302      	movs	r3, #2
 800134c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800134e:	2302      	movs	r3, #2
 8001350:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001352:	2301      	movs	r3, #1
 8001354:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001356:	230a      	movs	r3, #10
 8001358:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800135a:	2307      	movs	r3, #7
 800135c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800135e:	2302      	movs	r3, #2
 8001360:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001362:	2302      	movs	r3, #2
 8001364:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4618      	mov	r0, r3
 800136c:	f001 fd74 	bl	8002e58 <HAL_RCC_OscConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001376:	f000 f96b 	bl	8001650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137a:	230f      	movs	r3, #15
 800137c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137e:	2303      	movs	r3, #3
 8001380:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800138e:	463b      	mov	r3, r7
 8001390:	2104      	movs	r1, #4
 8001392:	4618      	mov	r0, r3
 8001394:	f002 f93c 	bl	8003610 <HAL_RCC_ClockConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800139e:	f000 f957 	bl	8001650 <Error_Handler>
  }
}
 80013a2:	bf00      	nop
 80013a4:	3758      	adds	r7, #88	; 0x58
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013b0:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <MX_I2C1_Init+0x74>)
 80013b2:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <MX_I2C1_Init+0x78>)
 80013b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_I2C1_Init+0x74>)
 80013b8:	4a1b      	ldr	r2, [pc, #108]	; (8001428 <MX_I2C1_Init+0x7c>)
 80013ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <MX_I2C1_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <MX_I2C1_Init+0x74>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <MX_I2C1_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013ce:	4b14      	ldr	r3, [pc, #80]	; (8001420 <MX_I2C1_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <MX_I2C1_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_I2C1_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_I2C1_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013e6:	480e      	ldr	r0, [pc, #56]	; (8001420 <MX_I2C1_Init+0x74>)
 80013e8:	f000 fefe 	bl	80021e8 <HAL_I2C_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013f2:	f000 f92d 	bl	8001650 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013f6:	2100      	movs	r1, #0
 80013f8:	4809      	ldr	r0, [pc, #36]	; (8001420 <MX_I2C1_Init+0x74>)
 80013fa:	f001 fc31 	bl	8002c60 <HAL_I2CEx_ConfigAnalogFilter>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001404:	f000 f924 	bl	8001650 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001408:	2100      	movs	r1, #0
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_I2C1_Init+0x74>)
 800140c:	f001 fc73 	bl	8002cf6 <HAL_I2CEx_ConfigDigitalFilter>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001416:	f000 f91b 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000210 	.word	0x20000210
 8001424:	40005400 	.word	0x40005400
 8001428:	10909cec 	.word	0x10909cec

0800142c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <MX_SPI2_Init+0x74>)
 8001432:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <MX_SPI2_Init+0x78>)
 8001434:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <MX_SPI2_Init+0x74>)
 8001438:	f44f 7282 	mov.w	r2, #260	; 0x104
 800143c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <MX_SPI2_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <MX_SPI2_Init+0x74>)
 8001446:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800144a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_SPI2_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <MX_SPI2_Init+0x74>)
 8001454:	2200      	movs	r2, #0
 8001456:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_SPI2_Init+0x74>)
 800145a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800145e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_SPI2_Init+0x74>)
 8001462:	2230      	movs	r2, #48	; 0x30
 8001464:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_SPI2_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_SPI2_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MX_SPI2_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_SPI2_Init+0x74>)
 800147a:	2207      	movs	r2, #7
 800147c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <MX_SPI2_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_SPI2_Init+0x74>)
 8001486:	2208      	movs	r2, #8
 8001488:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_SPI2_Init+0x74>)
 800148c:	f002 ffa0 	bl	80043d0 <HAL_SPI_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001496:	f000 f8db 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000264 	.word	0x20000264
 80014a4:	40003800 	.word	0x40003800

080014a8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <MX_SPI3_Init+0x74>)
 80014ae:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <MX_SPI3_Init+0x78>)
 80014b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014b2:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_SPI3_Init+0x74>)
 80014b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <MX_SPI3_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <MX_SPI3_Init+0x74>)
 80014c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014c6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_SPI3_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <MX_SPI3_Init+0x74>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_SPI3_Init+0x74>)
 80014d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014da:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_SPI3_Init+0x74>)
 80014de:	2230      	movs	r2, #48	; 0x30
 80014e0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_SPI3_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_SPI3_Init+0x74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_SPI3_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_SPI3_Init+0x74>)
 80014f6:	2207      	movs	r2, #7
 80014f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_SPI3_Init+0x74>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_SPI3_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_SPI3_Init+0x74>)
 8001508:	f002 ff62 	bl	80043d0 <HAL_SPI_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001512:	f000 f89d 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200002c8 	.word	0x200002c8
 8001520:	40003c00 	.word	0x40003c00

08001524 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <MX_USART2_UART_Init+0x58>)
 800152a:	4a15      	ldr	r2, [pc, #84]	; (8001580 <MX_USART2_UART_Init+0x5c>)
 800152c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <MX_USART2_UART_Init+0x58>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_USART2_UART_Init+0x58>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_USART2_UART_Init+0x58>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_USART2_UART_Init+0x58>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <MX_USART2_UART_Init+0x58>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <MX_USART2_UART_Init+0x58>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_USART2_UART_Init+0x58>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <MX_USART2_UART_Init+0x58>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_USART2_UART_Init+0x58>)
 8001562:	2200      	movs	r2, #0
 8001564:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_USART2_UART_Init+0x58>)
 8001568:	f003 fe60 	bl	800522c <HAL_UART_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001572:	f000 f86d 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000032c 	.word	0x2000032c
 8001580:	40004400 	.word	0x40004400

08001584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <MX_GPIO_Init+0xc4>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159e:	4a2a      	ldr	r2, [pc, #168]	; (8001648 <MX_GPIO_Init+0xc4>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a6:	4b28      	ldr	r3, [pc, #160]	; (8001648 <MX_GPIO_Init+0xc4>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b2:	4b25      	ldr	r3, [pc, #148]	; (8001648 <MX_GPIO_Init+0xc4>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	4a24      	ldr	r2, [pc, #144]	; (8001648 <MX_GPIO_Init+0xc4>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015be:	4b22      	ldr	r3, [pc, #136]	; (8001648 <MX_GPIO_Init+0xc4>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <MX_GPIO_Init+0xc4>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	4a1e      	ldr	r2, [pc, #120]	; (8001648 <MX_GPIO_Init+0xc4>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <MX_GPIO_Init+0xc4>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <MX_GPIO_Init+0xc4>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	4a18      	ldr	r2, [pc, #96]	; (8001648 <MX_GPIO_Init+0xc4>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <MX_GPIO_Init+0xc4>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2120      	movs	r1, #32
 80015fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001602:	f000 fdd9 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001606:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800160a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800160c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	480b      	ldr	r0, [pc, #44]	; (800164c <MX_GPIO_Init+0xc8>)
 800161e:	f000 fc21 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001622:	2320      	movs	r3, #32
 8001624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	2301      	movs	r3, #1
 8001628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163c:	f000 fc12 	bl	8001e64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40021000 	.word	0x40021000
 800164c:	48000800 	.word	0x48000800

08001650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001654:	b672      	cpsid	i
}
 8001656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001658:	e7fe      	b.n	8001658 <Error_Handler+0x8>
	...

0800165c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_MspInit+0x44>)
 8001664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001666:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <HAL_MspInit+0x44>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6613      	str	r3, [r2, #96]	; 0x60
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <HAL_MspInit+0x44>)
 8001670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_MspInit+0x44>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_MspInit+0x44>)
 8001680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001684:	6593      	str	r3, [r2, #88]	; 0x58
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_MspInit+0x44>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000

080016a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b0ac      	sub	sp, #176	; 0xb0
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2288      	movs	r2, #136	; 0x88
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f006 fc7b 	bl	8007fc0 <memset>
  if(hi2c->Instance==I2C1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a21      	ldr	r2, [pc, #132]	; (8001754 <HAL_I2C_MspInit+0xb0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d13b      	bne.n	800174c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016d4:	2340      	movs	r3, #64	; 0x40
 80016d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016d8:	2300      	movs	r3, #0
 80016da:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4618      	mov	r0, r3
 80016e2:	f002 f9b9 	bl	8003a58 <HAL_RCCEx_PeriphCLKConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80016ec:	f7ff ffb0 	bl	8001650 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_I2C_MspInit+0xb4>)
 80016f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f4:	4a18      	ldr	r2, [pc, #96]	; (8001758 <HAL_I2C_MspInit+0xb4>)
 80016f6:	f043 0302 	orr.w	r3, r3, #2
 80016fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <HAL_I2C_MspInit+0xb4>)
 80016fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001708:	f44f 7340 	mov.w	r3, #768	; 0x300
 800170c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001710:	2312      	movs	r3, #18
 8001712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001722:	2304      	movs	r3, #4
 8001724:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001728:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800172c:	4619      	mov	r1, r3
 800172e:	480b      	ldr	r0, [pc, #44]	; (800175c <HAL_I2C_MspInit+0xb8>)
 8001730:	f000 fb98 	bl	8001e64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_I2C_MspInit+0xb4>)
 8001736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <HAL_I2C_MspInit+0xb4>)
 800173a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800173e:	6593      	str	r3, [r2, #88]	; 0x58
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_I2C_MspInit+0xb4>)
 8001742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800174c:	bf00      	nop
 800174e:	37b0      	adds	r7, #176	; 0xb0
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40005400 	.word	0x40005400
 8001758:	40021000 	.word	0x40021000
 800175c:	48000400 	.word	0x48000400

08001760 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	; 0x30
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a2e      	ldr	r2, [pc, #184]	; (8001838 <HAL_SPI_MspInit+0xd8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d129      	bne.n	80017d6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001782:	4b2e      	ldr	r3, [pc, #184]	; (800183c <HAL_SPI_MspInit+0xdc>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001786:	4a2d      	ldr	r2, [pc, #180]	; (800183c <HAL_SPI_MspInit+0xdc>)
 8001788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178c:	6593      	str	r3, [r2, #88]	; 0x58
 800178e:	4b2b      	ldr	r3, [pc, #172]	; (800183c <HAL_SPI_MspInit+0xdc>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179a:	4b28      	ldr	r3, [pc, #160]	; (800183c <HAL_SPI_MspInit+0xdc>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	4a27      	ldr	r2, [pc, #156]	; (800183c <HAL_SPI_MspInit+0xdc>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a6:	4b25      	ldr	r3, [pc, #148]	; (800183c <HAL_SPI_MspInit+0xdc>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697b      	ldr	r3, [r7, #20]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80017b2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80017b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017c4:	2305      	movs	r3, #5
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c8:	f107 031c 	add.w	r3, r7, #28
 80017cc:	4619      	mov	r1, r3
 80017ce:	481c      	ldr	r0, [pc, #112]	; (8001840 <HAL_SPI_MspInit+0xe0>)
 80017d0:	f000 fb48 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017d4:	e02c      	b.n	8001830 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <HAL_SPI_MspInit+0xe4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d127      	bne.n	8001830 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017e0:	4b16      	ldr	r3, [pc, #88]	; (800183c <HAL_SPI_MspInit+0xdc>)
 80017e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e4:	4a15      	ldr	r2, [pc, #84]	; (800183c <HAL_SPI_MspInit+0xdc>)
 80017e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ea:	6593      	str	r3, [r2, #88]	; 0x58
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <HAL_SPI_MspInit+0xdc>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f8:	4b10      	ldr	r3, [pc, #64]	; (800183c <HAL_SPI_MspInit+0xdc>)
 80017fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fc:	4a0f      	ldr	r2, [pc, #60]	; (800183c <HAL_SPI_MspInit+0xdc>)
 80017fe:	f043 0302 	orr.w	r3, r3, #2
 8001802:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001804:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_SPI_MspInit+0xdc>)
 8001806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001810:	2338      	movs	r3, #56	; 0x38
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001820:	2306      	movs	r3, #6
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <HAL_SPI_MspInit+0xe0>)
 800182c:	f000 fb1a 	bl	8001e64 <HAL_GPIO_Init>
}
 8001830:	bf00      	nop
 8001832:	3730      	adds	r7, #48	; 0x30
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40003800 	.word	0x40003800
 800183c:	40021000 	.word	0x40021000
 8001840:	48000400 	.word	0x48000400
 8001844:	40003c00 	.word	0x40003c00

08001848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b0ac      	sub	sp, #176	; 0xb0
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2288      	movs	r2, #136	; 0x88
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f006 fba9 	bl	8007fc0 <memset>
  if(huart->Instance==USART2)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a21      	ldr	r2, [pc, #132]	; (80018f8 <HAL_UART_MspInit+0xb0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d13b      	bne.n	80018f0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001878:	2302      	movs	r3, #2
 800187a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800187c:	2300      	movs	r3, #0
 800187e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4618      	mov	r0, r3
 8001886:	f002 f8e7 	bl	8003a58 <HAL_RCCEx_PeriphCLKConfig>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001890:	f7ff fede 	bl	8001650 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_UART_MspInit+0xb4>)
 8001896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001898:	4a18      	ldr	r2, [pc, #96]	; (80018fc <HAL_UART_MspInit+0xb4>)
 800189a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800189e:	6593      	str	r3, [r2, #88]	; 0x58
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <HAL_UART_MspInit+0xb4>)
 80018a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <HAL_UART_MspInit+0xb4>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b0:	4a12      	ldr	r2, [pc, #72]	; (80018fc <HAL_UART_MspInit+0xb4>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_UART_MspInit+0xb4>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018c4:	230c      	movs	r3, #12
 80018c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018dc:	2307      	movs	r3, #7
 80018de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ec:	f000 faba 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018f0:	bf00      	nop
 80018f2:	37b0      	adds	r7, #176	; 0xb0
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40004400 	.word	0x40004400
 80018fc:	40021000 	.word	0x40021000

08001900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <NMI_Handler+0x4>

08001906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <HardFault_Handler+0x4>

0800190c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <MemManage_Handler+0x4>

08001912 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <BusFault_Handler+0x4>

08001918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <UsageFault_Handler+0x4>

0800191e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194c:	f000 f960 	bl	8001c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return 1;
 8001958:	2301      	movs	r3, #1
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_kill>:

int _kill(int pid, int sig)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800196e:	f006 fb79 	bl	8008064 <__errno>
 8001972:	4603      	mov	r3, r0
 8001974:	2216      	movs	r2, #22
 8001976:	601a      	str	r2, [r3, #0]
  return -1;
 8001978:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_exit>:

void _exit (int status)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ffe7 	bl	8001964 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001996:	e7fe      	b.n	8001996 <_exit+0x12>

08001998 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e00a      	b.n	80019c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019aa:	f3af 8000 	nop.w
 80019ae:	4601      	mov	r1, r0
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	60ba      	str	r2, [r7, #8]
 80019b6:	b2ca      	uxtb	r2, r1
 80019b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	dbf0      	blt.n	80019aa <_read+0x12>
  }

  return len;
 80019c8:	687b      	ldr	r3, [r7, #4]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	e009      	b.n	80019f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	60ba      	str	r2, [r7, #8]
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3301      	adds	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	dbf1      	blt.n	80019e4 <_write+0x12>
  }
  return len;
 8001a00:	687b      	ldr	r3, [r7, #4]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_close>:

int _close(int file)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a32:	605a      	str	r2, [r3, #4]
  return 0;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_isatty>:

int _isatty(int file)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a4a:	2301      	movs	r3, #1
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a7c:	4a14      	ldr	r2, [pc, #80]	; (8001ad0 <_sbrk+0x5c>)
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <_sbrk+0x60>)
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a88:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d102      	bne.n	8001a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <_sbrk+0x64>)
 8001a92:	4a12      	ldr	r2, [pc, #72]	; (8001adc <_sbrk+0x68>)
 8001a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <_sbrk+0x64>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d207      	bcs.n	8001ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa4:	f006 fade 	bl	8008064 <__errno>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	220c      	movs	r2, #12
 8001aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab2:	e009      	b.n	8001ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <_sbrk+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <_sbrk+0x64>)
 8001ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20018000 	.word	0x20018000
 8001ad4:	00000400 	.word	0x00000400
 8001ad8:	200005b4 	.word	0x200005b4
 8001adc:	20000750 	.word	0x20000750

08001ae0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <SystemInit+0x20>)
 8001ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <SystemInit+0x20>)
 8001aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b08:	f7ff ffea 	bl	8001ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b0c:	480c      	ldr	r0, [pc, #48]	; (8001b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b0e:	490d      	ldr	r1, [pc, #52]	; (8001b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b10:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <LoopForever+0xe>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b14:	e002      	b.n	8001b1c <LoopCopyDataInit>

08001b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1a:	3304      	adds	r3, #4

08001b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b20:	d3f9      	bcc.n	8001b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b24:	4c0a      	ldr	r4, [pc, #40]	; (8001b50 <LoopForever+0x16>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b28:	e001      	b.n	8001b2e <LoopFillZerobss>

08001b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b2c:	3204      	adds	r2, #4

08001b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b30:	d3fb      	bcc.n	8001b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b32:	f006 fa9d 	bl	8008070 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b36:	f7ff fa2b 	bl	8000f90 <main>

08001b3a <LoopForever>:

LoopForever:
    b LoopForever
 8001b3a:	e7fe      	b.n	8001b3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b44:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001b48:	0800a644 	.word	0x0800a644
  ldr r2, =_sbss
 8001b4c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001b50:	20000750 	.word	0x20000750

08001b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b54:	e7fe      	b.n	8001b54 <ADC1_2_IRQHandler>
	...

08001b58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_Init+0x3c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <HAL_Init+0x3c>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6e:	2003      	movs	r0, #3
 8001b70:	f000 f944 	bl	8001dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b74:	2000      	movs	r0, #0
 8001b76:	f000 f80f 	bl	8001b98 <HAL_InitTick>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	71fb      	strb	r3, [r7, #7]
 8001b84:	e001      	b.n	8001b8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b86:	f7ff fd69 	bl	800165c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40022000 	.word	0x40022000

08001b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <HAL_InitTick+0x6c>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d023      	beq.n	8001bf4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <HAL_InitTick+0x70>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <HAL_InitTick+0x6c>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f941 	bl	8001e4a <HAL_SYSTICK_Config>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10f      	bne.n	8001bee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b0f      	cmp	r3, #15
 8001bd2:	d809      	bhi.n	8001be8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bdc:	f000 f919 	bl	8001e12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001be0:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <HAL_InitTick+0x74>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e007      	b.n	8001bf8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
 8001bec:	e004      	b.n	8001bf8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
 8001bf2:	e001      	b.n	8001bf8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000010 	.word	0x20000010
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	2000000c 	.word	0x2000000c

08001c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x20>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_IncTick+0x24>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <HAL_IncTick+0x24>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000010 	.word	0x20000010
 8001c34:	200005b8 	.word	0x200005b8

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	200005b8 	.word	0x200005b8

08001c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c58:	f7ff ffee 	bl	8001c38 <HAL_GetTick>
 8001c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c68:	d005      	beq.n	8001c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_Delay+0x44>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c76:	bf00      	nop
 8001c78:	f7ff ffde 	bl	8001c38 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d8f7      	bhi.n	8001c78 <HAL_Delay+0x28>
  {
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000010 	.word	0x20000010

08001c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cca:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	60d3      	str	r3, [r2, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db0a      	blt.n	8001d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	490c      	ldr	r1, [pc, #48]	; (8001d48 <__NVIC_SetPriority+0x4c>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d24:	e00a      	b.n	8001d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4908      	ldr	r1, [pc, #32]	; (8001d4c <__NVIC_SetPriority+0x50>)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3b04      	subs	r3, #4
 8001d34:	0112      	lsls	r2, r2, #4
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	440b      	add	r3, r1
 8001d3a:	761a      	strb	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f1c3 0307 	rsb	r3, r3, #7
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	bf28      	it	cs
 8001d6e:	2304      	movcs	r3, #4
 8001d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d902      	bls.n	8001d80 <NVIC_EncodePriority+0x30>
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3b03      	subs	r3, #3
 8001d7e:	e000      	b.n	8001d82 <NVIC_EncodePriority+0x32>
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	4313      	orrs	r3, r2
         );
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	; 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc8:	d301      	bcc.n	8001dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00f      	b.n	8001dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <SysTick_Config+0x40>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f7ff ff8e 	bl	8001cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <SysTick_Config+0x40>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <SysTick_Config+0x40>)
 8001de8:	2207      	movs	r2, #7
 8001dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	e000e010 	.word	0xe000e010

08001dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff47 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e24:	f7ff ff5c 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	6978      	ldr	r0, [r7, #20]
 8001e30:	f7ff ff8e 	bl	8001d50 <NVIC_EncodePriority>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff5d 	bl	8001cfc <__NVIC_SetPriority>
}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffb0 	bl	8001db8 <SysTick_Config>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e72:	e17f      	b.n	8002174 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	2101      	movs	r1, #1
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	4013      	ands	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 8171 	beq.w	800216e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d005      	beq.n	8001ea4 <HAL_GPIO_Init+0x40>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d130      	bne.n	8001f06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	2203      	movs	r2, #3
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eda:	2201      	movs	r2, #1
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	f003 0201 	and.w	r2, r3, #1
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d118      	bne.n	8001f44 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f18:	2201      	movs	r2, #1
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	08db      	lsrs	r3, r3, #3
 8001f2e:	f003 0201 	and.w	r2, r3, #1
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d017      	beq.n	8001f80 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d123      	bne.n	8001fd4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	08da      	lsrs	r2, r3, #3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3208      	adds	r2, #8
 8001f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	220f      	movs	r2, #15
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	08da      	lsrs	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3208      	adds	r2, #8
 8001fce:	6939      	ldr	r1, [r7, #16]
 8001fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	2203      	movs	r2, #3
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0203 	and.w	r2, r3, #3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80ac 	beq.w	800216e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002016:	4b5f      	ldr	r3, [pc, #380]	; (8002194 <HAL_GPIO_Init+0x330>)
 8002018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800201a:	4a5e      	ldr	r2, [pc, #376]	; (8002194 <HAL_GPIO_Init+0x330>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6613      	str	r3, [r2, #96]	; 0x60
 8002022:	4b5c      	ldr	r3, [pc, #368]	; (8002194 <HAL_GPIO_Init+0x330>)
 8002024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800202e:	4a5a      	ldr	r2, [pc, #360]	; (8002198 <HAL_GPIO_Init+0x334>)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	089b      	lsrs	r3, r3, #2
 8002034:	3302      	adds	r3, #2
 8002036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	220f      	movs	r2, #15
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4013      	ands	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002058:	d025      	beq.n	80020a6 <HAL_GPIO_Init+0x242>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4f      	ldr	r2, [pc, #316]	; (800219c <HAL_GPIO_Init+0x338>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d01f      	beq.n	80020a2 <HAL_GPIO_Init+0x23e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4e      	ldr	r2, [pc, #312]	; (80021a0 <HAL_GPIO_Init+0x33c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d019      	beq.n	800209e <HAL_GPIO_Init+0x23a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4d      	ldr	r2, [pc, #308]	; (80021a4 <HAL_GPIO_Init+0x340>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_GPIO_Init+0x236>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4c      	ldr	r2, [pc, #304]	; (80021a8 <HAL_GPIO_Init+0x344>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00d      	beq.n	8002096 <HAL_GPIO_Init+0x232>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4b      	ldr	r2, [pc, #300]	; (80021ac <HAL_GPIO_Init+0x348>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d007      	beq.n	8002092 <HAL_GPIO_Init+0x22e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4a      	ldr	r2, [pc, #296]	; (80021b0 <HAL_GPIO_Init+0x34c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <HAL_GPIO_Init+0x22a>
 800208a:	2306      	movs	r3, #6
 800208c:	e00c      	b.n	80020a8 <HAL_GPIO_Init+0x244>
 800208e:	2307      	movs	r3, #7
 8002090:	e00a      	b.n	80020a8 <HAL_GPIO_Init+0x244>
 8002092:	2305      	movs	r3, #5
 8002094:	e008      	b.n	80020a8 <HAL_GPIO_Init+0x244>
 8002096:	2304      	movs	r3, #4
 8002098:	e006      	b.n	80020a8 <HAL_GPIO_Init+0x244>
 800209a:	2303      	movs	r3, #3
 800209c:	e004      	b.n	80020a8 <HAL_GPIO_Init+0x244>
 800209e:	2302      	movs	r3, #2
 80020a0:	e002      	b.n	80020a8 <HAL_GPIO_Init+0x244>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_GPIO_Init+0x244>
 80020a6:	2300      	movs	r3, #0
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	f002 0203 	and.w	r2, r2, #3
 80020ae:	0092      	lsls	r2, r2, #2
 80020b0:	4093      	lsls	r3, r2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020b8:	4937      	ldr	r1, [pc, #220]	; (8002198 <HAL_GPIO_Init+0x334>)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	3302      	adds	r3, #2
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020c6:	4b3b      	ldr	r3, [pc, #236]	; (80021b4 <HAL_GPIO_Init+0x350>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020ea:	4a32      	ldr	r2, [pc, #200]	; (80021b4 <HAL_GPIO_Init+0x350>)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020f0:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <HAL_GPIO_Init+0x350>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002114:	4a27      	ldr	r2, [pc, #156]	; (80021b4 <HAL_GPIO_Init+0x350>)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800211a:	4b26      	ldr	r3, [pc, #152]	; (80021b4 <HAL_GPIO_Init+0x350>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	43db      	mvns	r3, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800213e:	4a1d      	ldr	r2, [pc, #116]	; (80021b4 <HAL_GPIO_Init+0x350>)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <HAL_GPIO_Init+0x350>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	43db      	mvns	r3, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002168:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <HAL_GPIO_Init+0x350>)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3301      	adds	r3, #1
 8002172:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa22 f303 	lsr.w	r3, r2, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	f47f ae78 	bne.w	8001e74 <HAL_GPIO_Init+0x10>
  }
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	371c      	adds	r7, #28
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40021000 	.word	0x40021000
 8002198:	40010000 	.word	0x40010000
 800219c:	48000400 	.word	0x48000400
 80021a0:	48000800 	.word	0x48000800
 80021a4:	48000c00 	.word	0x48000c00
 80021a8:	48001000 	.word	0x48001000
 80021ac:	48001400 	.word	0x48001400
 80021b0:	48001800 	.word	0x48001800
 80021b4:	40010400 	.word	0x40010400

080021b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
 80021c4:	4613      	mov	r3, r2
 80021c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c8:	787b      	ldrb	r3, [r7, #1]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021d4:	e002      	b.n	80021dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e08d      	b.n	8002316 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d106      	bne.n	8002214 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff fa48 	bl	80016a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2224      	movs	r2, #36	; 0x24
 8002218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002238:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002248:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d107      	bne.n	8002262 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	e006      	b.n	8002270 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800226e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d108      	bne.n	800228a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	e007      	b.n	800229a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002298:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691a      	ldr	r2, [r3, #16]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69d9      	ldr	r1, [r3, #28]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1a      	ldr	r2, [r3, #32]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af02      	add	r7, sp, #8
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	461a      	mov	r2, r3
 800232c:	460b      	mov	r3, r1
 800232e:	817b      	strh	r3, [r7, #10]
 8002330:	4613      	mov	r3, r2
 8002332:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b20      	cmp	r3, #32
 800233e:	f040 80fd 	bne.w	800253c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_I2C_Master_Transmit+0x30>
 800234c:	2302      	movs	r3, #2
 800234e:	e0f6      	b.n	800253e <HAL_I2C_Master_Transmit+0x21e>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002358:	f7ff fc6e 	bl	8001c38 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2319      	movs	r3, #25
 8002364:	2201      	movs	r2, #1
 8002366:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 fa0a 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e0e1      	b.n	800253e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2221      	movs	r2, #33	; 0x21
 800237e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2210      	movs	r2, #16
 8002386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	893a      	ldrh	r2, [r7, #8]
 800239a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2bff      	cmp	r3, #255	; 0xff
 80023aa:	d906      	bls.n	80023ba <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	22ff      	movs	r2, #255	; 0xff
 80023b0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80023b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	e007      	b.n	80023ca <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80023c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d024      	beq.n	800241c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	781a      	ldrb	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002406:	b2db      	uxtb	r3, r3
 8002408:	3301      	adds	r3, #1
 800240a:	b2da      	uxtb	r2, r3
 800240c:	8979      	ldrh	r1, [r7, #10]
 800240e:	4b4e      	ldr	r3, [pc, #312]	; (8002548 <HAL_I2C_Master_Transmit+0x228>)
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 fbf1 	bl	8002bfc <I2C_TransferConfig>
 800241a:	e066      	b.n	80024ea <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002420:	b2da      	uxtb	r2, r3
 8002422:	8979      	ldrh	r1, [r7, #10]
 8002424:	4b48      	ldr	r3, [pc, #288]	; (8002548 <HAL_I2C_Master_Transmit+0x228>)
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 fbe6 	bl	8002bfc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002430:	e05b      	b.n	80024ea <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	6a39      	ldr	r1, [r7, #32]
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 f9f3 	bl	8002822 <I2C_WaitOnTXISFlagUntilTimeout>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e07b      	b.n	800253e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	781a      	ldrb	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002460:	b29b      	uxth	r3, r3
 8002462:	3b01      	subs	r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d034      	beq.n	80024ea <HAL_I2C_Master_Transmit+0x1ca>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	2b00      	cmp	r3, #0
 8002486:	d130      	bne.n	80024ea <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	2200      	movs	r2, #0
 8002490:	2180      	movs	r1, #128	; 0x80
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f976 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e04d      	b.n	800253e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2bff      	cmp	r3, #255	; 0xff
 80024aa:	d90e      	bls.n	80024ca <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	22ff      	movs	r2, #255	; 0xff
 80024b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	8979      	ldrh	r1, [r7, #10]
 80024ba:	2300      	movs	r3, #0
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fb9a 	bl	8002bfc <I2C_TransferConfig>
 80024c8:	e00f      	b.n	80024ea <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	8979      	ldrh	r1, [r7, #10]
 80024dc:	2300      	movs	r3, #0
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 fb89 	bl	8002bfc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d19e      	bne.n	8002432 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	6a39      	ldr	r1, [r7, #32]
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 f9d9 	bl	80028b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e01a      	b.n	800253e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2220      	movs	r2, #32
 800250e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6859      	ldr	r1, [r3, #4]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	4b0c      	ldr	r3, [pc, #48]	; (800254c <HAL_I2C_Master_Transmit+0x22c>)
 800251c:	400b      	ands	r3, r1
 800251e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	e000      	b.n	800253e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800253c:	2302      	movs	r3, #2
  }
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	80002000 	.word	0x80002000
 800254c:	fe00e800 	.word	0xfe00e800

08002550 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af02      	add	r7, sp, #8
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	461a      	mov	r2, r3
 800255c:	460b      	mov	r3, r1
 800255e:	817b      	strh	r3, [r7, #10]
 8002560:	4613      	mov	r3, r2
 8002562:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b20      	cmp	r3, #32
 800256e:	f040 80db 	bne.w	8002728 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_I2C_Master_Receive+0x30>
 800257c:	2302      	movs	r3, #2
 800257e:	e0d4      	b.n	800272a <HAL_I2C_Master_Receive+0x1da>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002588:	f7ff fb56 	bl	8001c38 <HAL_GetTick>
 800258c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	2319      	movs	r3, #25
 8002594:	2201      	movs	r2, #1
 8002596:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f8f2 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e0bf      	b.n	800272a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2222      	movs	r2, #34	; 0x22
 80025ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2210      	movs	r2, #16
 80025b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	893a      	ldrh	r2, [r7, #8]
 80025ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2bff      	cmp	r3, #255	; 0xff
 80025da:	d90e      	bls.n	80025fa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	22ff      	movs	r2, #255	; 0xff
 80025e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	8979      	ldrh	r1, [r7, #10]
 80025ea:	4b52      	ldr	r3, [pc, #328]	; (8002734 <HAL_I2C_Master_Receive+0x1e4>)
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 fb02 	bl	8002bfc <I2C_TransferConfig>
 80025f8:	e06d      	b.n	80026d6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002608:	b2da      	uxtb	r2, r3
 800260a:	8979      	ldrh	r1, [r7, #10]
 800260c:	4b49      	ldr	r3, [pc, #292]	; (8002734 <HAL_I2C_Master_Receive+0x1e4>)
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 faf1 	bl	8002bfc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800261a:	e05c      	b.n	80026d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	6a39      	ldr	r1, [r7, #32]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f989 	bl	8002938 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e07c      	b.n	800272a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d034      	beq.n	80026d6 <HAL_I2C_Master_Receive+0x186>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	2b00      	cmp	r3, #0
 8002672:	d130      	bne.n	80026d6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	2200      	movs	r2, #0
 800267c:	2180      	movs	r1, #128	; 0x80
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 f880 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e04d      	b.n	800272a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	2bff      	cmp	r3, #255	; 0xff
 8002696:	d90e      	bls.n	80026b6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	22ff      	movs	r2, #255	; 0xff
 800269c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	8979      	ldrh	r1, [r7, #10]
 80026a6:	2300      	movs	r3, #0
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 faa4 	bl	8002bfc <I2C_TransferConfig>
 80026b4:	e00f      	b.n	80026d6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	8979      	ldrh	r1, [r7, #10]
 80026c8:	2300      	movs	r3, #0
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 fa93 	bl	8002bfc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026da:	b29b      	uxth	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d19d      	bne.n	800261c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	6a39      	ldr	r1, [r7, #32]
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f8e3 	bl	80028b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e01a      	b.n	800272a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2220      	movs	r2, #32
 80026fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6859      	ldr	r1, [r3, #4]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <HAL_I2C_Master_Receive+0x1e8>)
 8002708:	400b      	ands	r3, r1
 800270a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	e000      	b.n	800272a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002728:	2302      	movs	r3, #2
  }
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	80002400 	.word	0x80002400
 8002738:	fe00e800 	.word	0xfe00e800

0800273c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b02      	cmp	r3, #2
 8002750:	d103      	bne.n	800275a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2200      	movs	r2, #0
 8002758:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b01      	cmp	r3, #1
 8002766:	d007      	beq.n	8002778 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	619a      	str	r2, [r3, #24]
  }
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	4613      	mov	r3, r2
 8002792:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002794:	e031      	b.n	80027fa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279c:	d02d      	beq.n	80027fa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800279e:	f7ff fa4b 	bl	8001c38 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d302      	bcc.n	80027b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d122      	bne.n	80027fa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4013      	ands	r3, r2
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d113      	bne.n	80027fa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f043 0220 	orr.w	r2, r3, #32
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e00f      	b.n	800281a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699a      	ldr	r2, [r3, #24]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4013      	ands	r3, r2
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	429a      	cmp	r2, r3
 8002808:	bf0c      	ite	eq
 800280a:	2301      	moveq	r3, #1
 800280c:	2300      	movne	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	461a      	mov	r2, r3
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	429a      	cmp	r2, r3
 8002816:	d0be      	beq.n	8002796 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800282e:	e033      	b.n	8002898 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 f901 	bl	8002a3c <I2C_IsErrorOccurred>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e031      	b.n	80028a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284a:	d025      	beq.n	8002898 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284c:	f7ff f9f4 	bl	8001c38 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	429a      	cmp	r2, r3
 800285a:	d302      	bcc.n	8002862 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d11a      	bne.n	8002898 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b02      	cmp	r3, #2
 800286e:	d013      	beq.n	8002898 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002874:	f043 0220 	orr.w	r2, r3, #32
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e007      	b.n	80028a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d1c4      	bne.n	8002830 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028bc:	e02f      	b.n	800291e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f8ba 	bl	8002a3c <I2C_IsErrorOccurred>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e02d      	b.n	800292e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d2:	f7ff f9b1 	bl	8001c38 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d302      	bcc.n	80028e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d11a      	bne.n	800291e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	f003 0320 	and.w	r3, r3, #32
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	d013      	beq.n	800291e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f043 0220 	orr.w	r2, r3, #32
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e007      	b.n	800292e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	f003 0320 	and.w	r3, r3, #32
 8002928:	2b20      	cmp	r3, #32
 800292a:	d1c8      	bne.n	80028be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002944:	e06b      	b.n	8002a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 f876 	bl	8002a3c <I2C_IsErrorOccurred>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e069      	b.n	8002a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b20      	cmp	r3, #32
 8002966:	d138      	bne.n	80029da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b04      	cmp	r3, #4
 8002974:	d105      	bne.n	8002982 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	e055      	b.n	8002a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f003 0310 	and.w	r3, r3, #16
 800298c:	2b10      	cmp	r3, #16
 800298e:	d107      	bne.n	80029a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2210      	movs	r2, #16
 8002996:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2204      	movs	r2, #4
 800299c:	645a      	str	r2, [r3, #68]	; 0x44
 800299e:	e002      	b.n	80029a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2220      	movs	r2, #32
 80029ac:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80029ba:	400b      	ands	r3, r1
 80029bc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e029      	b.n	8002a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029da:	f7ff f92d 	bl	8001c38 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d302      	bcc.n	80029f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d116      	bne.n	8002a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d00f      	beq.n	8002a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f043 0220 	orr.w	r2, r3, #32
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e007      	b.n	8002a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d18c      	bne.n	8002946 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	fe00e800 	.word	0xfe00e800

08002a3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08a      	sub	sp, #40	; 0x28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d068      	beq.n	8002b3a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2210      	movs	r2, #16
 8002a6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a70:	e049      	b.n	8002b06 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a78:	d045      	beq.n	8002b06 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a7a:	f7ff f8dd 	bl	8001c38 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d302      	bcc.n	8002a90 <I2C_IsErrorOccurred+0x54>
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d13a      	bne.n	8002b06 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002aa2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab2:	d121      	bne.n	8002af8 <I2C_IsErrorOccurred+0xbc>
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aba:	d01d      	beq.n	8002af8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002abc:	7cfb      	ldrb	r3, [r7, #19]
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	d01a      	beq.n	8002af8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ad0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ad2:	f7ff f8b1 	bl	8001c38 <HAL_GetTick>
 8002ad6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ad8:	e00e      	b.n	8002af8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ada:	f7ff f8ad 	bl	8001c38 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b19      	cmp	r3, #25
 8002ae6:	d907      	bls.n	8002af8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	f043 0320 	orr.w	r3, r3, #32
 8002aee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002af6:	e006      	b.n	8002b06 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d1e9      	bne.n	8002ada <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	d003      	beq.n	8002b1c <I2C_IsErrorOccurred+0xe0>
 8002b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0aa      	beq.n	8002a72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d103      	bne.n	8002b2c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	f043 0304 	orr.w	r3, r3, #4
 8002b32:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00b      	beq.n	8002b64 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	f043 0308 	orr.w	r3, r3, #8
 8002b74:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00b      	beq.n	8002ba8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	f043 0302 	orr.w	r3, r3, #2
 8002b96:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ba0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d01c      	beq.n	8002bea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f7ff fdc3 	bl	800273c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <I2C_IsErrorOccurred+0x1bc>)
 8002bc2:	400b      	ands	r3, r1
 8002bc4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002bea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3728      	adds	r7, #40	; 0x28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	fe00e800 	.word	0xfe00e800

08002bfc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	607b      	str	r3, [r7, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	817b      	strh	r3, [r7, #10]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c0e:	897b      	ldrh	r3, [r7, #10]
 8002c10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c14:	7a7b      	ldrb	r3, [r7, #9]
 8002c16:	041b      	lsls	r3, r3, #16
 8002c18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c1c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c2a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	0d5b      	lsrs	r3, r3, #21
 8002c36:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <I2C_TransferConfig+0x60>)
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	ea02 0103 	and.w	r1, r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c4e:	bf00      	nop
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	03ff63ff 	.word	0x03ff63ff

08002c60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	d138      	bne.n	8002ce8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e032      	b.n	8002cea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2224      	movs	r2, #36	; 0x24
 8002c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0201 	bic.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6819      	ldr	r1, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	e000      	b.n	8002cea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ce8:	2302      	movs	r3, #2
  }
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d139      	bne.n	8002d80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e033      	b.n	8002d82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2224      	movs	r2, #36	; 0x24
 8002d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0201 	bic.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0201 	orr.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e000      	b.n	8002d82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
  }
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40007000 	.word	0x40007000

08002dac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dba:	d130      	bne.n	8002e1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dbc:	4b23      	ldr	r3, [pc, #140]	; (8002e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dc8:	d038      	beq.n	8002e3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dca:	4b20      	ldr	r3, [pc, #128]	; (8002e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dd2:	4a1e      	ldr	r2, [pc, #120]	; (8002e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002dda:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2232      	movs	r2, #50	; 0x32
 8002de0:	fb02 f303 	mul.w	r3, r2, r3
 8002de4:	4a1b      	ldr	r2, [pc, #108]	; (8002e54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002de6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dea:	0c9b      	lsrs	r3, r3, #18
 8002dec:	3301      	adds	r3, #1
 8002dee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002df0:	e002      	b.n	8002df8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	3b01      	subs	r3, #1
 8002df6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002df8:	4b14      	ldr	r3, [pc, #80]	; (8002e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e04:	d102      	bne.n	8002e0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f2      	bne.n	8002df2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e18:	d110      	bne.n	8002e3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e00f      	b.n	8002e3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e1e:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e2a:	d007      	beq.n	8002e3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e2c:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e34:	4a05      	ldr	r2, [pc, #20]	; (8002e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	20000008 	.word	0x20000008
 8002e54:	431bde83 	.word	0x431bde83

08002e58 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e3ca      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e6a:	4b97      	ldr	r3, [pc, #604]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e74:	4b94      	ldr	r3, [pc, #592]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 80e4 	beq.w	8003054 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x4a>
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	2b0c      	cmp	r3, #12
 8002e96:	f040 808b 	bne.w	8002fb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	f040 8087 	bne.w	8002fb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ea2:	4b89      	ldr	r3, [pc, #548]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <HAL_RCC_OscConfig+0x62>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e3a2      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1a      	ldr	r2, [r3, #32]
 8002ebe:	4b82      	ldr	r3, [pc, #520]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d004      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x7c>
 8002eca:	4b7f      	ldr	r3, [pc, #508]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ed2:	e005      	b.n	8002ee0 <HAL_RCC_OscConfig+0x88>
 8002ed4:	4b7c      	ldr	r3, [pc, #496]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eda:	091b      	lsrs	r3, r3, #4
 8002edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d223      	bcs.n	8002f2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 fd55 	bl	8003998 <RCC_SetFlashLatencyFromMSIRange>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e383      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ef8:	4b73      	ldr	r3, [pc, #460]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a72      	ldr	r2, [pc, #456]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002efe:	f043 0308 	orr.w	r3, r3, #8
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	4b70      	ldr	r3, [pc, #448]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	496d      	ldr	r1, [pc, #436]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f16:	4b6c      	ldr	r3, [pc, #432]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	4968      	ldr	r1, [pc, #416]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	604b      	str	r3, [r1, #4]
 8002f2a:	e025      	b.n	8002f78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f2c:	4b66      	ldr	r3, [pc, #408]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a65      	ldr	r2, [pc, #404]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002f32:	f043 0308 	orr.w	r3, r3, #8
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4b63      	ldr	r3, [pc, #396]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	4960      	ldr	r1, [pc, #384]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f4a:	4b5f      	ldr	r3, [pc, #380]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	495b      	ldr	r1, [pc, #364]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d109      	bne.n	8002f78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fd15 	bl	8003998 <RCC_SetFlashLatencyFromMSIRange>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e343      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f78:	f000 fc4a 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	4b52      	ldr	r3, [pc, #328]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	091b      	lsrs	r3, r3, #4
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	4950      	ldr	r1, [pc, #320]	; (80030cc <HAL_RCC_OscConfig+0x274>)
 8002f8a:	5ccb      	ldrb	r3, [r1, r3]
 8002f8c:	f003 031f 	and.w	r3, r3, #31
 8002f90:	fa22 f303 	lsr.w	r3, r2, r3
 8002f94:	4a4e      	ldr	r2, [pc, #312]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002f96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f98:	4b4e      	ldr	r3, [pc, #312]	; (80030d4 <HAL_RCC_OscConfig+0x27c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fe fdfb 	bl	8001b98 <HAL_InitTick>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d052      	beq.n	8003052 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	e327      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d032      	beq.n	800301e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fb8:	4b43      	ldr	r3, [pc, #268]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a42      	ldr	r2, [pc, #264]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fe38 	bl	8001c38 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fcc:	f7fe fe34 	bl	8001c38 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e310      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fde:	4b3a      	ldr	r3, [pc, #232]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fea:	4b37      	ldr	r3, [pc, #220]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a36      	ldr	r2, [pc, #216]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002ff0:	f043 0308 	orr.w	r3, r3, #8
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	4b34      	ldr	r3, [pc, #208]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	4931      	ldr	r1, [pc, #196]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8003004:	4313      	orrs	r3, r2
 8003006:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003008:	4b2f      	ldr	r3, [pc, #188]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	492c      	ldr	r1, [pc, #176]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8003018:	4313      	orrs	r3, r2
 800301a:	604b      	str	r3, [r1, #4]
 800301c:	e01a      	b.n	8003054 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800301e:	4b2a      	ldr	r3, [pc, #168]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a29      	ldr	r2, [pc, #164]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800302a:	f7fe fe05 	bl	8001c38 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003032:	f7fe fe01 	bl	8001c38 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e2dd      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003044:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f0      	bne.n	8003032 <HAL_RCC_OscConfig+0x1da>
 8003050:	e000      	b.n	8003054 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003052:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	d074      	beq.n	800314a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	2b08      	cmp	r3, #8
 8003064:	d005      	beq.n	8003072 <HAL_RCC_OscConfig+0x21a>
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b0c      	cmp	r3, #12
 800306a:	d10e      	bne.n	800308a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2b03      	cmp	r3, #3
 8003070:	d10b      	bne.n	800308a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003072:	4b15      	ldr	r3, [pc, #84]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d064      	beq.n	8003148 <HAL_RCC_OscConfig+0x2f0>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d160      	bne.n	8003148 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e2ba      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003092:	d106      	bne.n	80030a2 <HAL_RCC_OscConfig+0x24a>
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a0b      	ldr	r2, [pc, #44]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 800309a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	e026      	b.n	80030f0 <HAL_RCC_OscConfig+0x298>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030aa:	d115      	bne.n	80030d8 <HAL_RCC_OscConfig+0x280>
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a05      	ldr	r2, [pc, #20]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 80030b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	4b03      	ldr	r3, [pc, #12]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a02      	ldr	r2, [pc, #8]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 80030be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	e014      	b.n	80030f0 <HAL_RCC_OscConfig+0x298>
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
 80030cc:	0800a27c 	.word	0x0800a27c
 80030d0:	20000008 	.word	0x20000008
 80030d4:	2000000c 	.word	0x2000000c
 80030d8:	4ba0      	ldr	r3, [pc, #640]	; (800335c <HAL_RCC_OscConfig+0x504>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a9f      	ldr	r2, [pc, #636]	; (800335c <HAL_RCC_OscConfig+0x504>)
 80030de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b9d      	ldr	r3, [pc, #628]	; (800335c <HAL_RCC_OscConfig+0x504>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a9c      	ldr	r2, [pc, #624]	; (800335c <HAL_RCC_OscConfig+0x504>)
 80030ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d013      	beq.n	8003120 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fe fd9e 	bl	8001c38 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003100:	f7fe fd9a 	bl	8001c38 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	; 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e276      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003112:	4b92      	ldr	r3, [pc, #584]	; (800335c <HAL_RCC_OscConfig+0x504>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0x2a8>
 800311e:	e014      	b.n	800314a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fe fd8a 	bl	8001c38 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003128:	f7fe fd86 	bl	8001c38 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	; 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e262      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800313a:	4b88      	ldr	r3, [pc, #544]	; (800335c <HAL_RCC_OscConfig+0x504>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x2d0>
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d060      	beq.n	8003218 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	2b04      	cmp	r3, #4
 800315a:	d005      	beq.n	8003168 <HAL_RCC_OscConfig+0x310>
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2b0c      	cmp	r3, #12
 8003160:	d119      	bne.n	8003196 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2b02      	cmp	r3, #2
 8003166:	d116      	bne.n	8003196 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003168:	4b7c      	ldr	r3, [pc, #496]	; (800335c <HAL_RCC_OscConfig+0x504>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_RCC_OscConfig+0x328>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e23f      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003180:	4b76      	ldr	r3, [pc, #472]	; (800335c <HAL_RCC_OscConfig+0x504>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	061b      	lsls	r3, r3, #24
 800318e:	4973      	ldr	r1, [pc, #460]	; (800335c <HAL_RCC_OscConfig+0x504>)
 8003190:	4313      	orrs	r3, r2
 8003192:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003194:	e040      	b.n	8003218 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d023      	beq.n	80031e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800319e:	4b6f      	ldr	r3, [pc, #444]	; (800335c <HAL_RCC_OscConfig+0x504>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a6e      	ldr	r2, [pc, #440]	; (800335c <HAL_RCC_OscConfig+0x504>)
 80031a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031aa:	f7fe fd45 	bl	8001c38 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b2:	f7fe fd41 	bl	8001c38 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e21d      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031c4:	4b65      	ldr	r3, [pc, #404]	; (800335c <HAL_RCC_OscConfig+0x504>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d0:	4b62      	ldr	r3, [pc, #392]	; (800335c <HAL_RCC_OscConfig+0x504>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	061b      	lsls	r3, r3, #24
 80031de:	495f      	ldr	r1, [pc, #380]	; (800335c <HAL_RCC_OscConfig+0x504>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]
 80031e4:	e018      	b.n	8003218 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031e6:	4b5d      	ldr	r3, [pc, #372]	; (800335c <HAL_RCC_OscConfig+0x504>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a5c      	ldr	r2, [pc, #368]	; (800335c <HAL_RCC_OscConfig+0x504>)
 80031ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f2:	f7fe fd21 	bl	8001c38 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031fa:	f7fe fd1d 	bl	8001c38 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e1f9      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800320c:	4b53      	ldr	r3, [pc, #332]	; (800335c <HAL_RCC_OscConfig+0x504>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f0      	bne.n	80031fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b00      	cmp	r3, #0
 8003222:	d03c      	beq.n	800329e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01c      	beq.n	8003266 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800322c:	4b4b      	ldr	r3, [pc, #300]	; (800335c <HAL_RCC_OscConfig+0x504>)
 800322e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003232:	4a4a      	ldr	r2, [pc, #296]	; (800335c <HAL_RCC_OscConfig+0x504>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323c:	f7fe fcfc 	bl	8001c38 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003244:	f7fe fcf8 	bl	8001c38 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e1d4      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003256:	4b41      	ldr	r3, [pc, #260]	; (800335c <HAL_RCC_OscConfig+0x504>)
 8003258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0ef      	beq.n	8003244 <HAL_RCC_OscConfig+0x3ec>
 8003264:	e01b      	b.n	800329e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003266:	4b3d      	ldr	r3, [pc, #244]	; (800335c <HAL_RCC_OscConfig+0x504>)
 8003268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800326c:	4a3b      	ldr	r2, [pc, #236]	; (800335c <HAL_RCC_OscConfig+0x504>)
 800326e:	f023 0301 	bic.w	r3, r3, #1
 8003272:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003276:	f7fe fcdf 	bl	8001c38 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800327e:	f7fe fcdb 	bl	8001c38 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e1b7      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003290:	4b32      	ldr	r3, [pc, #200]	; (800335c <HAL_RCC_OscConfig+0x504>)
 8003292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1ef      	bne.n	800327e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80a6 	beq.w	80033f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ac:	2300      	movs	r3, #0
 80032ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032b0:	4b2a      	ldr	r3, [pc, #168]	; (800335c <HAL_RCC_OscConfig+0x504>)
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10d      	bne.n	80032d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032bc:	4b27      	ldr	r3, [pc, #156]	; (800335c <HAL_RCC_OscConfig+0x504>)
 80032be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c0:	4a26      	ldr	r2, [pc, #152]	; (800335c <HAL_RCC_OscConfig+0x504>)
 80032c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c6:	6593      	str	r3, [r2, #88]	; 0x58
 80032c8:	4b24      	ldr	r3, [pc, #144]	; (800335c <HAL_RCC_OscConfig+0x504>)
 80032ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d4:	2301      	movs	r3, #1
 80032d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032d8:	4b21      	ldr	r3, [pc, #132]	; (8003360 <HAL_RCC_OscConfig+0x508>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d118      	bne.n	8003316 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032e4:	4b1e      	ldr	r3, [pc, #120]	; (8003360 <HAL_RCC_OscConfig+0x508>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <HAL_RCC_OscConfig+0x508>)
 80032ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f0:	f7fe fca2 	bl	8001c38 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f8:	f7fe fc9e 	bl	8001c38 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e17a      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800330a:	4b15      	ldr	r3, [pc, #84]	; (8003360 <HAL_RCC_OscConfig+0x508>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d108      	bne.n	8003330 <HAL_RCC_OscConfig+0x4d8>
 800331e:	4b0f      	ldr	r3, [pc, #60]	; (800335c <HAL_RCC_OscConfig+0x504>)
 8003320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003324:	4a0d      	ldr	r2, [pc, #52]	; (800335c <HAL_RCC_OscConfig+0x504>)
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800332e:	e029      	b.n	8003384 <HAL_RCC_OscConfig+0x52c>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b05      	cmp	r3, #5
 8003336:	d115      	bne.n	8003364 <HAL_RCC_OscConfig+0x50c>
 8003338:	4b08      	ldr	r3, [pc, #32]	; (800335c <HAL_RCC_OscConfig+0x504>)
 800333a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333e:	4a07      	ldr	r2, [pc, #28]	; (800335c <HAL_RCC_OscConfig+0x504>)
 8003340:	f043 0304 	orr.w	r3, r3, #4
 8003344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <HAL_RCC_OscConfig+0x504>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334e:	4a03      	ldr	r2, [pc, #12]	; (800335c <HAL_RCC_OscConfig+0x504>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003358:	e014      	b.n	8003384 <HAL_RCC_OscConfig+0x52c>
 800335a:	bf00      	nop
 800335c:	40021000 	.word	0x40021000
 8003360:	40007000 	.word	0x40007000
 8003364:	4b9c      	ldr	r3, [pc, #624]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336a:	4a9b      	ldr	r2, [pc, #620]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 800336c:	f023 0301 	bic.w	r3, r3, #1
 8003370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003374:	4b98      	ldr	r3, [pc, #608]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337a:	4a97      	ldr	r2, [pc, #604]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 800337c:	f023 0304 	bic.w	r3, r3, #4
 8003380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d016      	beq.n	80033ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338c:	f7fe fc54 	bl	8001c38 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003392:	e00a      	b.n	80033aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003394:	f7fe fc50 	bl	8001c38 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e12a      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033aa:	4b8b      	ldr	r3, [pc, #556]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0ed      	beq.n	8003394 <HAL_RCC_OscConfig+0x53c>
 80033b8:	e015      	b.n	80033e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fe fc3d 	bl	8001c38 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033c0:	e00a      	b.n	80033d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c2:	f7fe fc39 	bl	8001c38 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e113      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033d8:	4b7f      	ldr	r3, [pc, #508]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1ed      	bne.n	80033c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033e6:	7ffb      	ldrb	r3, [r7, #31]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d105      	bne.n	80033f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ec:	4b7a      	ldr	r3, [pc, #488]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f0:	4a79      	ldr	r2, [pc, #484]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 80033f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 80fe 	beq.w	80035fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	2b02      	cmp	r3, #2
 8003408:	f040 80d0 	bne.w	80035ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800340c:	4b72      	ldr	r3, [pc, #456]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f003 0203 	and.w	r2, r3, #3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	429a      	cmp	r2, r3
 800341e:	d130      	bne.n	8003482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	3b01      	subs	r3, #1
 800342c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800342e:	429a      	cmp	r2, r3
 8003430:	d127      	bne.n	8003482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800343e:	429a      	cmp	r2, r3
 8003440:	d11f      	bne.n	8003482 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800344c:	2a07      	cmp	r2, #7
 800344e:	bf14      	ite	ne
 8003450:	2201      	movne	r2, #1
 8003452:	2200      	moveq	r2, #0
 8003454:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003456:	4293      	cmp	r3, r2
 8003458:	d113      	bne.n	8003482 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003464:	085b      	lsrs	r3, r3, #1
 8003466:	3b01      	subs	r3, #1
 8003468:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d109      	bne.n	8003482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	085b      	lsrs	r3, r3, #1
 800347a:	3b01      	subs	r3, #1
 800347c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800347e:	429a      	cmp	r2, r3
 8003480:	d06e      	beq.n	8003560 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2b0c      	cmp	r3, #12
 8003486:	d069      	beq.n	800355c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003488:	4b53      	ldr	r3, [pc, #332]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003494:	4b50      	ldr	r3, [pc, #320]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0ad      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034a4:	4b4c      	ldr	r3, [pc, #304]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a4b      	ldr	r2, [pc, #300]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 80034aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034b0:	f7fe fbc2 	bl	8001c38 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b8:	f7fe fbbe 	bl	8001c38 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e09a      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ca:	4b43      	ldr	r3, [pc, #268]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034d6:	4b40      	ldr	r3, [pc, #256]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	4b40      	ldr	r3, [pc, #256]	; (80035dc <HAL_RCC_OscConfig+0x784>)
 80034dc:	4013      	ands	r3, r2
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034e6:	3a01      	subs	r2, #1
 80034e8:	0112      	lsls	r2, r2, #4
 80034ea:	4311      	orrs	r1, r2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034f0:	0212      	lsls	r2, r2, #8
 80034f2:	4311      	orrs	r1, r2
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034f8:	0852      	lsrs	r2, r2, #1
 80034fa:	3a01      	subs	r2, #1
 80034fc:	0552      	lsls	r2, r2, #21
 80034fe:	4311      	orrs	r1, r2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003504:	0852      	lsrs	r2, r2, #1
 8003506:	3a01      	subs	r2, #1
 8003508:	0652      	lsls	r2, r2, #25
 800350a:	4311      	orrs	r1, r2
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003510:	0912      	lsrs	r2, r2, #4
 8003512:	0452      	lsls	r2, r2, #17
 8003514:	430a      	orrs	r2, r1
 8003516:	4930      	ldr	r1, [pc, #192]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 8003518:	4313      	orrs	r3, r2
 800351a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800351c:	4b2e      	ldr	r3, [pc, #184]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a2d      	ldr	r2, [pc, #180]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 8003522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003526:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003528:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4a2a      	ldr	r2, [pc, #168]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 800352e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003532:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003534:	f7fe fb80 	bl	8001c38 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353c:	f7fe fb7c 	bl	8001c38 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e058      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800354e:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800355a:	e050      	b.n	80035fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e04f      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003560:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d148      	bne.n	80035fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800356c:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a19      	ldr	r2, [pc, #100]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 8003572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003576:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003578:	4b17      	ldr	r3, [pc, #92]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a16      	ldr	r2, [pc, #88]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 800357e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003582:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003584:	f7fe fb58 	bl	8001c38 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358c:	f7fe fb54 	bl	8001c38 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e030      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800359e:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0x734>
 80035aa:	e028      	b.n	80035fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	2b0c      	cmp	r3, #12
 80035b0:	d023      	beq.n	80035fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b2:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a08      	ldr	r2, [pc, #32]	; (80035d8 <HAL_RCC_OscConfig+0x780>)
 80035b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035be:	f7fe fb3b 	bl	8001c38 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c4:	e00c      	b.n	80035e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c6:	f7fe fb37 	bl	8001c38 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d905      	bls.n	80035e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e013      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
 80035d8:	40021000 	.word	0x40021000
 80035dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e0:	4b09      	ldr	r3, [pc, #36]	; (8003608 <HAL_RCC_OscConfig+0x7b0>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ec      	bne.n	80035c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <HAL_RCC_OscConfig+0x7b0>)
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	4905      	ldr	r1, [pc, #20]	; (8003608 <HAL_RCC_OscConfig+0x7b0>)
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_RCC_OscConfig+0x7b4>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	60cb      	str	r3, [r1, #12]
 80035f8:	e001      	b.n	80035fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40021000 	.word	0x40021000
 800360c:	feeefffc 	.word	0xfeeefffc

08003610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0e7      	b.n	80037f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003624:	4b75      	ldr	r3, [pc, #468]	; (80037fc <HAL_RCC_ClockConfig+0x1ec>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d910      	bls.n	8003654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b72      	ldr	r3, [pc, #456]	; (80037fc <HAL_RCC_ClockConfig+0x1ec>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 0207 	bic.w	r2, r3, #7
 800363a:	4970      	ldr	r1, [pc, #448]	; (80037fc <HAL_RCC_ClockConfig+0x1ec>)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b6e      	ldr	r3, [pc, #440]	; (80037fc <HAL_RCC_ClockConfig+0x1ec>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0cf      	b.n	80037f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d010      	beq.n	8003682 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	4b66      	ldr	r3, [pc, #408]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800366c:	429a      	cmp	r2, r3
 800366e:	d908      	bls.n	8003682 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003670:	4b63      	ldr	r3, [pc, #396]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	4960      	ldr	r1, [pc, #384]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d04c      	beq.n	8003728 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b03      	cmp	r3, #3
 8003694:	d107      	bne.n	80036a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003696:	4b5a      	ldr	r3, [pc, #360]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d121      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e0a6      	b.n	80037f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d107      	bne.n	80036be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ae:	4b54      	ldr	r3, [pc, #336]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d115      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e09a      	b.n	80037f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036c6:	4b4e      	ldr	r3, [pc, #312]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e08e      	b.n	80037f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036d6:	4b4a      	ldr	r3, [pc, #296]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e086      	b.n	80037f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036e6:	4b46      	ldr	r3, [pc, #280]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f023 0203 	bic.w	r2, r3, #3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4943      	ldr	r1, [pc, #268]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036f8:	f7fe fa9e 	bl	8001c38 <HAL_GetTick>
 80036fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fe:	e00a      	b.n	8003716 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003700:	f7fe fa9a 	bl	8001c38 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	; 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e06e      	b.n	80037f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003716:	4b3a      	ldr	r3, [pc, #232]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 020c 	and.w	r2, r3, #12
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	429a      	cmp	r2, r3
 8003726:	d1eb      	bne.n	8003700 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d010      	beq.n	8003756 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	4b31      	ldr	r3, [pc, #196]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003740:	429a      	cmp	r2, r3
 8003742:	d208      	bcs.n	8003756 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003744:	4b2e      	ldr	r3, [pc, #184]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	492b      	ldr	r1, [pc, #172]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003756:	4b29      	ldr	r3, [pc, #164]	; (80037fc <HAL_RCC_ClockConfig+0x1ec>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d210      	bcs.n	8003786 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003764:	4b25      	ldr	r3, [pc, #148]	; (80037fc <HAL_RCC_ClockConfig+0x1ec>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f023 0207 	bic.w	r2, r3, #7
 800376c:	4923      	ldr	r1, [pc, #140]	; (80037fc <HAL_RCC_ClockConfig+0x1ec>)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	4313      	orrs	r3, r2
 8003772:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003774:	4b21      	ldr	r3, [pc, #132]	; (80037fc <HAL_RCC_ClockConfig+0x1ec>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	d001      	beq.n	8003786 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e036      	b.n	80037f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d008      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003792:	4b1b      	ldr	r3, [pc, #108]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	4918      	ldr	r1, [pc, #96]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d009      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037b0:	4b13      	ldr	r3, [pc, #76]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4910      	ldr	r1, [pc, #64]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037c4:	f000 f824 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	091b      	lsrs	r3, r3, #4
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	490b      	ldr	r1, [pc, #44]	; (8003804 <HAL_RCC_ClockConfig+0x1f4>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
 80037e0:	4a09      	ldr	r2, [pc, #36]	; (8003808 <HAL_RCC_ClockConfig+0x1f8>)
 80037e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037e4:	4b09      	ldr	r3, [pc, #36]	; (800380c <HAL_RCC_ClockConfig+0x1fc>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fe f9d5 	bl	8001b98 <HAL_InitTick>
 80037ee:	4603      	mov	r3, r0
 80037f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80037f2:	7afb      	ldrb	r3, [r7, #11]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40022000 	.word	0x40022000
 8003800:	40021000 	.word	0x40021000
 8003804:	0800a27c 	.word	0x0800a27c
 8003808:	20000008 	.word	0x20000008
 800380c:	2000000c 	.word	0x2000000c

08003810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003810:	b480      	push	{r7}
 8003812:	b089      	sub	sp, #36	; 0x24
 8003814:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800381e:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003828:	4b3b      	ldr	r3, [pc, #236]	; (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0x34>
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	2b0c      	cmp	r3, #12
 800383c:	d121      	bne.n	8003882 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d11e      	bne.n	8003882 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003844:	4b34      	ldr	r3, [pc, #208]	; (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d107      	bne.n	8003860 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003850:	4b31      	ldr	r3, [pc, #196]	; (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 8003852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	e005      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003860:	4b2d      	ldr	r3, [pc, #180]	; (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	091b      	lsrs	r3, r3, #4
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800386c:	4a2b      	ldr	r2, [pc, #172]	; (800391c <HAL_RCC_GetSysClockFreq+0x10c>)
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003874:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10d      	bne.n	8003898 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003880:	e00a      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b04      	cmp	r3, #4
 8003886:	d102      	bne.n	800388e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003888:	4b25      	ldr	r3, [pc, #148]	; (8003920 <HAL_RCC_GetSysClockFreq+0x110>)
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	e004      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b08      	cmp	r3, #8
 8003892:	d101      	bne.n	8003898 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003894:	4b23      	ldr	r3, [pc, #140]	; (8003924 <HAL_RCC_GetSysClockFreq+0x114>)
 8003896:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b0c      	cmp	r3, #12
 800389c:	d134      	bne.n	8003908 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800389e:	4b1e      	ldr	r3, [pc, #120]	; (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d003      	beq.n	80038bc <HAL_RCC_GetSysClockFreq+0xac>
 80038b4:	e005      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038b6:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <HAL_RCC_GetSysClockFreq+0x110>)
 80038b8:	617b      	str	r3, [r7, #20]
      break;
 80038ba:	e005      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <HAL_RCC_GetSysClockFreq+0x114>)
 80038be:	617b      	str	r3, [r7, #20]
      break;
 80038c0:	e002      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	617b      	str	r3, [r7, #20]
      break;
 80038c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038c8:	4b13      	ldr	r3, [pc, #76]	; (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	3301      	adds	r3, #1
 80038d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038d6:	4b10      	ldr	r3, [pc, #64]	; (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	0a1b      	lsrs	r3, r3, #8
 80038dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	fb03 f202 	mul.w	r2, r3, r2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038ee:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	0e5b      	lsrs	r3, r3, #25
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	3301      	adds	r3, #1
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	fbb2 f3f3 	udiv	r3, r2, r3
 8003906:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003908:	69bb      	ldr	r3, [r7, #24]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3724      	adds	r7, #36	; 0x24
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	0800a294 	.word	0x0800a294
 8003920:	00f42400 	.word	0x00f42400
 8003924:	007a1200 	.word	0x007a1200

08003928 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <HAL_RCC_GetHCLKFreq+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000008 	.word	0x20000008

08003940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003944:	f7ff fff0 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	0a1b      	lsrs	r3, r3, #8
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	4904      	ldr	r1, [pc, #16]	; (8003968 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003960:	4618      	mov	r0, r3
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40021000 	.word	0x40021000
 8003968:	0800a28c 	.word	0x0800a28c

0800396c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003970:	f7ff ffda 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003974:	4602      	mov	r2, r0
 8003976:	4b06      	ldr	r3, [pc, #24]	; (8003990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	0adb      	lsrs	r3, r3, #11
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	4904      	ldr	r1, [pc, #16]	; (8003994 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003982:	5ccb      	ldrb	r3, [r1, r3]
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40021000 	.word	0x40021000
 8003994:	0800a28c 	.word	0x0800a28c

08003998 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039a0:	2300      	movs	r3, #0
 80039a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039a4:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039b0:	f7ff f9ee 	bl	8002d90 <HAL_PWREx_GetVoltageRange>
 80039b4:	6178      	str	r0, [r7, #20]
 80039b6:	e014      	b.n	80039e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039b8:	4b25      	ldr	r3, [pc, #148]	; (8003a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039bc:	4a24      	ldr	r2, [pc, #144]	; (8003a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c2:	6593      	str	r3, [r2, #88]	; 0x58
 80039c4:	4b22      	ldr	r3, [pc, #136]	; (8003a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039d0:	f7ff f9de 	bl	8002d90 <HAL_PWREx_GetVoltageRange>
 80039d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039d6:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039da:	4a1d      	ldr	r2, [pc, #116]	; (8003a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e8:	d10b      	bne.n	8003a02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b80      	cmp	r3, #128	; 0x80
 80039ee:	d919      	bls.n	8003a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2ba0      	cmp	r3, #160	; 0xa0
 80039f4:	d902      	bls.n	80039fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039f6:	2302      	movs	r3, #2
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	e013      	b.n	8003a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039fc:	2301      	movs	r3, #1
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	e010      	b.n	8003a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b80      	cmp	r3, #128	; 0x80
 8003a06:	d902      	bls.n	8003a0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a08:	2303      	movs	r3, #3
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	e00a      	b.n	8003a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b80      	cmp	r3, #128	; 0x80
 8003a12:	d102      	bne.n	8003a1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a14:	2302      	movs	r3, #2
 8003a16:	613b      	str	r3, [r7, #16]
 8003a18:	e004      	b.n	8003a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b70      	cmp	r3, #112	; 0x70
 8003a1e:	d101      	bne.n	8003a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a20:	2301      	movs	r3, #1
 8003a22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a24:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f023 0207 	bic.w	r2, r3, #7
 8003a2c:	4909      	ldr	r1, [pc, #36]	; (8003a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a34:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d001      	beq.n	8003a46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40021000 	.word	0x40021000
 8003a54:	40022000 	.word	0x40022000

08003a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a60:	2300      	movs	r3, #0
 8003a62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a64:	2300      	movs	r3, #0
 8003a66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d041      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a7c:	d02a      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a82:	d824      	bhi.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a88:	d008      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a8e:	d81e      	bhi.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00a      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a98:	d010      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a9a:	e018      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a9c:	4b86      	ldr	r3, [pc, #536]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	4a85      	ldr	r2, [pc, #532]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003aa8:	e015      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3304      	adds	r3, #4
 8003aae:	2100      	movs	r1, #0
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fabb 	bl	800402c <RCCEx_PLLSAI1_Config>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003aba:	e00c      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3320      	adds	r3, #32
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fba6 	bl	8004214 <RCCEx_PLLSAI2_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003acc:	e003      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ad6:	7cfb      	ldrb	r3, [r7, #19]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10b      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003adc:	4b76      	ldr	r3, [pc, #472]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aea:	4973      	ldr	r1, [pc, #460]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003af2:	e001      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af4:	7cfb      	ldrb	r3, [r7, #19]
 8003af6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d041      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b0c:	d02a      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b12:	d824      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b18:	d008      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b1e:	d81e      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b28:	d010      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b2a:	e018      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b2c:	4b62      	ldr	r3, [pc, #392]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4a61      	ldr	r2, [pc, #388]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b36:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b38:	e015      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	2100      	movs	r1, #0
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fa73 	bl	800402c <RCCEx_PLLSAI1_Config>
 8003b46:	4603      	mov	r3, r0
 8003b48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b4a:	e00c      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3320      	adds	r3, #32
 8003b50:	2100      	movs	r1, #0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fb5e 	bl	8004214 <RCCEx_PLLSAI2_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b5c:	e003      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	74fb      	strb	r3, [r7, #19]
      break;
 8003b62:	e000      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b66:	7cfb      	ldrb	r3, [r7, #19]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10b      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b6c:	4b52      	ldr	r3, [pc, #328]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b7a:	494f      	ldr	r1, [pc, #316]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b82:	e001      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b84:	7cfb      	ldrb	r3, [r7, #19]
 8003b86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80a0 	beq.w	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b96:	2300      	movs	r3, #0
 8003b98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b9a:	4b47      	ldr	r3, [pc, #284]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003baa:	2300      	movs	r3, #0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00d      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb0:	4b41      	ldr	r3, [pc, #260]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb4:	4a40      	ldr	r2, [pc, #256]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bba:	6593      	str	r3, [r2, #88]	; 0x58
 8003bbc:	4b3e      	ldr	r3, [pc, #248]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bcc:	4b3b      	ldr	r3, [pc, #236]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a3a      	ldr	r2, [pc, #232]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bd8:	f7fe f82e 	bl	8001c38 <HAL_GetTick>
 8003bdc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bde:	e009      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be0:	f7fe f82a 	bl	8001c38 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d902      	bls.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	74fb      	strb	r3, [r7, #19]
        break;
 8003bf2:	e005      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bf4:	4b31      	ldr	r3, [pc, #196]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0ef      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c00:	7cfb      	ldrb	r3, [r7, #19]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d15c      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c06:	4b2c      	ldr	r3, [pc, #176]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01f      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d019      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c24:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c30:	4b21      	ldr	r3, [pc, #132]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c36:	4a20      	ldr	r2, [pc, #128]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c40:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c46:	4a1c      	ldr	r2, [pc, #112]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c50:	4a19      	ldr	r2, [pc, #100]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d016      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c62:	f7fd ffe9 	bl	8001c38 <HAL_GetTick>
 8003c66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c68:	e00b      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6a:	f7fd ffe5 	bl	8001c38 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d902      	bls.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	74fb      	strb	r3, [r7, #19]
            break;
 8003c80:	e006      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c82:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0ec      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003c90:	7cfb      	ldrb	r3, [r7, #19]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10c      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c96:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca6:	4904      	ldr	r1, [pc, #16]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cae:	e009      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	74bb      	strb	r3, [r7, #18]
 8003cb4:	e006      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003cb6:	bf00      	nop
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc0:	7cfb      	ldrb	r3, [r7, #19]
 8003cc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cc4:	7c7b      	ldrb	r3, [r7, #17]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d105      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cca:	4b9e      	ldr	r3, [pc, #632]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cce:	4a9d      	ldr	r2, [pc, #628]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ce2:	4b98      	ldr	r3, [pc, #608]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce8:	f023 0203 	bic.w	r2, r3, #3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	4994      	ldr	r1, [pc, #592]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d04:	4b8f      	ldr	r3, [pc, #572]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0a:	f023 020c 	bic.w	r2, r3, #12
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	498c      	ldr	r1, [pc, #560]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d26:	4b87      	ldr	r3, [pc, #540]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	4983      	ldr	r1, [pc, #524]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d48:	4b7e      	ldr	r3, [pc, #504]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	497b      	ldr	r1, [pc, #492]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d6a:	4b76      	ldr	r3, [pc, #472]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d78:	4972      	ldr	r1, [pc, #456]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d8c:	4b6d      	ldr	r3, [pc, #436]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9a:	496a      	ldr	r1, [pc, #424]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dae:	4b65      	ldr	r3, [pc, #404]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	4961      	ldr	r1, [pc, #388]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dd0:	4b5c      	ldr	r3, [pc, #368]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dde:	4959      	ldr	r1, [pc, #356]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003df2:	4b54      	ldr	r3, [pc, #336]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e00:	4950      	ldr	r1, [pc, #320]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e14:	4b4b      	ldr	r3, [pc, #300]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e22:	4948      	ldr	r1, [pc, #288]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e36:	4b43      	ldr	r3, [pc, #268]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e44:	493f      	ldr	r1, [pc, #252]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d028      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e58:	4b3a      	ldr	r3, [pc, #232]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e66:	4937      	ldr	r1, [pc, #220]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e76:	d106      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e78:	4b32      	ldr	r3, [pc, #200]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4a31      	ldr	r2, [pc, #196]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e82:	60d3      	str	r3, [r2, #12]
 8003e84:	e011      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e8e:	d10c      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3304      	adds	r3, #4
 8003e94:	2101      	movs	r1, #1
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 f8c8 	bl	800402c <RCCEx_PLLSAI1_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ea0:	7cfb      	ldrb	r3, [r7, #19]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003ea6:	7cfb      	ldrb	r3, [r7, #19]
 8003ea8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d028      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003eb6:	4b23      	ldr	r3, [pc, #140]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec4:	491f      	ldr	r1, [pc, #124]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ed4:	d106      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed6:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	4a1a      	ldr	r2, [pc, #104]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ee0:	60d3      	str	r3, [r2, #12]
 8003ee2:	e011      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 f899 	bl	800402c <RCCEx_PLLSAI1_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003efe:	7cfb      	ldrb	r3, [r7, #19]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f04:	7cfb      	ldrb	r3, [r7, #19]
 8003f06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d02b      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f22:	4908      	ldr	r1, [pc, #32]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f32:	d109      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f34:	4b03      	ldr	r3, [pc, #12]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4a02      	ldr	r2, [pc, #8]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f3e:	60d3      	str	r3, [r2, #12]
 8003f40:	e014      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f42:	bf00      	nop
 8003f44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f50:	d10c      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3304      	adds	r3, #4
 8003f56:	2101      	movs	r1, #1
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 f867 	bl	800402c <RCCEx_PLLSAI1_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f62:	7cfb      	ldrb	r3, [r7, #19]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f68:	7cfb      	ldrb	r3, [r7, #19]
 8003f6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d02f      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f78:	4b2b      	ldr	r3, [pc, #172]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f86:	4928      	ldr	r1, [pc, #160]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f96:	d10d      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	2102      	movs	r1, #2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 f844 	bl	800402c <RCCEx_PLLSAI1_Config>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fa8:	7cfb      	ldrb	r3, [r7, #19]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d014      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003fae:	7cfb      	ldrb	r3, [r7, #19]
 8003fb0:	74bb      	strb	r3, [r7, #18]
 8003fb2:	e011      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fbc:	d10c      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3320      	adds	r3, #32
 8003fc2:	2102      	movs	r1, #2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 f925 	bl	8004214 <RCCEx_PLLSAI2_Config>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fce:	7cfb      	ldrb	r3, [r7, #19]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
 8003fd6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003fe4:	4b10      	ldr	r3, [pc, #64]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff2:	490d      	ldr	r1, [pc, #52]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00b      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004006:	4b08      	ldr	r3, [pc, #32]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004016:	4904      	ldr	r1, [pc, #16]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800401e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40021000 	.word	0x40021000

0800402c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800403a:	4b75      	ldr	r3, [pc, #468]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d018      	beq.n	8004078 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004046:	4b72      	ldr	r3, [pc, #456]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f003 0203 	and.w	r2, r3, #3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d10d      	bne.n	8004072 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
       ||
 800405a:	2b00      	cmp	r3, #0
 800405c:	d009      	beq.n	8004072 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800405e:	4b6c      	ldr	r3, [pc, #432]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	091b      	lsrs	r3, r3, #4
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
       ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d047      	beq.n	8004102 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	73fb      	strb	r3, [r7, #15]
 8004076:	e044      	b.n	8004102 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b03      	cmp	r3, #3
 800407e:	d018      	beq.n	80040b2 <RCCEx_PLLSAI1_Config+0x86>
 8004080:	2b03      	cmp	r3, #3
 8004082:	d825      	bhi.n	80040d0 <RCCEx_PLLSAI1_Config+0xa4>
 8004084:	2b01      	cmp	r3, #1
 8004086:	d002      	beq.n	800408e <RCCEx_PLLSAI1_Config+0x62>
 8004088:	2b02      	cmp	r3, #2
 800408a:	d009      	beq.n	80040a0 <RCCEx_PLLSAI1_Config+0x74>
 800408c:	e020      	b.n	80040d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800408e:	4b60      	ldr	r3, [pc, #384]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d11d      	bne.n	80040d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800409e:	e01a      	b.n	80040d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040a0:	4b5b      	ldr	r3, [pc, #364]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d116      	bne.n	80040da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040b0:	e013      	b.n	80040da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040b2:	4b57      	ldr	r3, [pc, #348]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10f      	bne.n	80040de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040be:	4b54      	ldr	r3, [pc, #336]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040ce:	e006      	b.n	80040de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
      break;
 80040d4:	e004      	b.n	80040e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040d6:	bf00      	nop
 80040d8:	e002      	b.n	80040e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040da:	bf00      	nop
 80040dc:	e000      	b.n	80040e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040de:	bf00      	nop
    }

    if(status == HAL_OK)
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10d      	bne.n	8004102 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040e6:	4b4a      	ldr	r3, [pc, #296]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6819      	ldr	r1, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	430b      	orrs	r3, r1
 80040fc:	4944      	ldr	r1, [pc, #272]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d17d      	bne.n	8004204 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004108:	4b41      	ldr	r3, [pc, #260]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a40      	ldr	r2, [pc, #256]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800410e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004112:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004114:	f7fd fd90 	bl	8001c38 <HAL_GetTick>
 8004118:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800411a:	e009      	b.n	8004130 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800411c:	f7fd fd8c 	bl	8001c38 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d902      	bls.n	8004130 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	73fb      	strb	r3, [r7, #15]
        break;
 800412e:	e005      	b.n	800413c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004130:	4b37      	ldr	r3, [pc, #220]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1ef      	bne.n	800411c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800413c:	7bfb      	ldrb	r3, [r7, #15]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d160      	bne.n	8004204 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d111      	bne.n	800416c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004148:	4b31      	ldr	r3, [pc, #196]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6892      	ldr	r2, [r2, #8]
 8004158:	0211      	lsls	r1, r2, #8
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	68d2      	ldr	r2, [r2, #12]
 800415e:	0912      	lsrs	r2, r2, #4
 8004160:	0452      	lsls	r2, r2, #17
 8004162:	430a      	orrs	r2, r1
 8004164:	492a      	ldr	r1, [pc, #168]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004166:	4313      	orrs	r3, r2
 8004168:	610b      	str	r3, [r1, #16]
 800416a:	e027      	b.n	80041bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d112      	bne.n	8004198 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004172:	4b27      	ldr	r3, [pc, #156]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800417a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6892      	ldr	r2, [r2, #8]
 8004182:	0211      	lsls	r1, r2, #8
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6912      	ldr	r2, [r2, #16]
 8004188:	0852      	lsrs	r2, r2, #1
 800418a:	3a01      	subs	r2, #1
 800418c:	0552      	lsls	r2, r2, #21
 800418e:	430a      	orrs	r2, r1
 8004190:	491f      	ldr	r1, [pc, #124]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004192:	4313      	orrs	r3, r2
 8004194:	610b      	str	r3, [r1, #16]
 8004196:	e011      	b.n	80041bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004198:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6892      	ldr	r2, [r2, #8]
 80041a8:	0211      	lsls	r1, r2, #8
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6952      	ldr	r2, [r2, #20]
 80041ae:	0852      	lsrs	r2, r2, #1
 80041b0:	3a01      	subs	r2, #1
 80041b2:	0652      	lsls	r2, r2, #25
 80041b4:	430a      	orrs	r2, r1
 80041b6:	4916      	ldr	r1, [pc, #88]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041bc:	4b14      	ldr	r3, [pc, #80]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a13      	ldr	r2, [pc, #76]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fd fd36 	bl	8001c38 <HAL_GetTick>
 80041cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041ce:	e009      	b.n	80041e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041d0:	f7fd fd32 	bl	8001c38 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d902      	bls.n	80041e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	73fb      	strb	r3, [r7, #15]
          break;
 80041e2:	e005      	b.n	80041f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0ef      	beq.n	80041d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041f6:	4b06      	ldr	r3, [pc, #24]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	4904      	ldr	r1, [pc, #16]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004200:	4313      	orrs	r3, r2
 8004202:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004204:	7bfb      	ldrb	r3, [r7, #15]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40021000 	.word	0x40021000

08004214 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004222:	4b6a      	ldr	r3, [pc, #424]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d018      	beq.n	8004260 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800422e:	4b67      	ldr	r3, [pc, #412]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0203 	and.w	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d10d      	bne.n	800425a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
       ||
 8004242:	2b00      	cmp	r3, #0
 8004244:	d009      	beq.n	800425a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004246:	4b61      	ldr	r3, [pc, #388]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	091b      	lsrs	r3, r3, #4
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
       ||
 8004256:	429a      	cmp	r2, r3
 8004258:	d047      	beq.n	80042ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	73fb      	strb	r3, [r7, #15]
 800425e:	e044      	b.n	80042ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b03      	cmp	r3, #3
 8004266:	d018      	beq.n	800429a <RCCEx_PLLSAI2_Config+0x86>
 8004268:	2b03      	cmp	r3, #3
 800426a:	d825      	bhi.n	80042b8 <RCCEx_PLLSAI2_Config+0xa4>
 800426c:	2b01      	cmp	r3, #1
 800426e:	d002      	beq.n	8004276 <RCCEx_PLLSAI2_Config+0x62>
 8004270:	2b02      	cmp	r3, #2
 8004272:	d009      	beq.n	8004288 <RCCEx_PLLSAI2_Config+0x74>
 8004274:	e020      	b.n	80042b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004276:	4b55      	ldr	r3, [pc, #340]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d11d      	bne.n	80042be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004286:	e01a      	b.n	80042be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004288:	4b50      	ldr	r3, [pc, #320]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004290:	2b00      	cmp	r3, #0
 8004292:	d116      	bne.n	80042c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004298:	e013      	b.n	80042c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800429a:	4b4c      	ldr	r3, [pc, #304]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10f      	bne.n	80042c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042a6:	4b49      	ldr	r3, [pc, #292]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d109      	bne.n	80042c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042b6:	e006      	b.n	80042c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	73fb      	strb	r3, [r7, #15]
      break;
 80042bc:	e004      	b.n	80042c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042be:	bf00      	nop
 80042c0:	e002      	b.n	80042c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042c2:	bf00      	nop
 80042c4:	e000      	b.n	80042c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10d      	bne.n	80042ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042ce:	4b3f      	ldr	r3, [pc, #252]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6819      	ldr	r1, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	3b01      	subs	r3, #1
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	430b      	orrs	r3, r1
 80042e4:	4939      	ldr	r1, [pc, #228]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d167      	bne.n	80043c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80042f0:	4b36      	ldr	r3, [pc, #216]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a35      	ldr	r2, [pc, #212]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042fc:	f7fd fc9c 	bl	8001c38 <HAL_GetTick>
 8004300:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004302:	e009      	b.n	8004318 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004304:	f7fd fc98 	bl	8001c38 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d902      	bls.n	8004318 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	73fb      	strb	r3, [r7, #15]
        break;
 8004316:	e005      	b.n	8004324 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004318:	4b2c      	ldr	r3, [pc, #176]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1ef      	bne.n	8004304 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d14a      	bne.n	80043c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d111      	bne.n	8004354 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004330:	4b26      	ldr	r3, [pc, #152]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6892      	ldr	r2, [r2, #8]
 8004340:	0211      	lsls	r1, r2, #8
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	68d2      	ldr	r2, [r2, #12]
 8004346:	0912      	lsrs	r2, r2, #4
 8004348:	0452      	lsls	r2, r2, #17
 800434a:	430a      	orrs	r2, r1
 800434c:	491f      	ldr	r1, [pc, #124]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800434e:	4313      	orrs	r3, r2
 8004350:	614b      	str	r3, [r1, #20]
 8004352:	e011      	b.n	8004378 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004354:	4b1d      	ldr	r3, [pc, #116]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800435c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6892      	ldr	r2, [r2, #8]
 8004364:	0211      	lsls	r1, r2, #8
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6912      	ldr	r2, [r2, #16]
 800436a:	0852      	lsrs	r2, r2, #1
 800436c:	3a01      	subs	r2, #1
 800436e:	0652      	lsls	r2, r2, #25
 8004370:	430a      	orrs	r2, r1
 8004372:	4916      	ldr	r1, [pc, #88]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004374:	4313      	orrs	r3, r2
 8004376:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004378:	4b14      	ldr	r3, [pc, #80]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a13      	ldr	r2, [pc, #76]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800437e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004382:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004384:	f7fd fc58 	bl	8001c38 <HAL_GetTick>
 8004388:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800438a:	e009      	b.n	80043a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800438c:	f7fd fc54 	bl	8001c38 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d902      	bls.n	80043a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	73fb      	strb	r3, [r7, #15]
          break;
 800439e:	e005      	b.n	80043ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0ef      	beq.n	800438c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043b2:	4b06      	ldr	r3, [pc, #24]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	4904      	ldr	r1, [pc, #16]	; (80043cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000

080043d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e095      	b.n	800450e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d108      	bne.n	80043fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043f2:	d009      	beq.n	8004408 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	61da      	str	r2, [r3, #28]
 80043fa:	e005      	b.n	8004408 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fd f99c 	bl	8001760 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800443e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004448:	d902      	bls.n	8004450 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	e002      	b.n	8004456 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004454:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800445e:	d007      	beq.n	8004470 <HAL_SPI_Init+0xa0>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004468:	d002      	beq.n	8004470 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b2:	ea42 0103 	orr.w	r1, r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	0c1b      	lsrs	r3, r3, #16
 80044cc:	f003 0204 	and.w	r2, r3, #4
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	f003 0310 	and.w	r3, r3, #16
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80044ec:	ea42 0103 	orr.w	r1, r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b088      	sub	sp, #32
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	603b      	str	r3, [r7, #0]
 8004522:	4613      	mov	r3, r2
 8004524:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_SPI_Transmit+0x22>
 8004534:	2302      	movs	r3, #2
 8004536:	e15f      	b.n	80047f8 <HAL_SPI_Transmit+0x2e2>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004540:	f7fd fb7a 	bl	8001c38 <HAL_GetTick>
 8004544:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004546:	88fb      	ldrh	r3, [r7, #6]
 8004548:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b01      	cmp	r3, #1
 8004554:	d002      	beq.n	800455c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004556:	2302      	movs	r3, #2
 8004558:	77fb      	strb	r3, [r7, #31]
    goto error;
 800455a:	e148      	b.n	80047ee <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_SPI_Transmit+0x52>
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d102      	bne.n	800456e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800456c:	e13f      	b.n	80047ee <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2203      	movs	r2, #3
 8004572:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	88fa      	ldrh	r2, [r7, #6]
 8004586:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	88fa      	ldrh	r2, [r7, #6]
 800458c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b8:	d10f      	bne.n	80045da <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e4:	2b40      	cmp	r3, #64	; 0x40
 80045e6:	d007      	beq.n	80045f8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004600:	d94f      	bls.n	80046a2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <HAL_SPI_Transmit+0xfa>
 800460a:	8afb      	ldrh	r3, [r7, #22]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d142      	bne.n	8004696 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	881a      	ldrh	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	1c9a      	adds	r2, r3, #2
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004634:	e02f      	b.n	8004696 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b02      	cmp	r3, #2
 8004642:	d112      	bne.n	800466a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	881a      	ldrh	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	1c9a      	adds	r2, r3, #2
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800465e:	b29b      	uxth	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004668:	e015      	b.n	8004696 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800466a:	f7fd fae5 	bl	8001c38 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d803      	bhi.n	8004682 <HAL_SPI_Transmit+0x16c>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004680:	d102      	bne.n	8004688 <HAL_SPI_Transmit+0x172>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d106      	bne.n	8004696 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004694:	e0ab      	b.n	80047ee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800469a:	b29b      	uxth	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1ca      	bne.n	8004636 <HAL_SPI_Transmit+0x120>
 80046a0:	e080      	b.n	80047a4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_SPI_Transmit+0x19a>
 80046aa:	8afb      	ldrh	r3, [r7, #22]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d174      	bne.n	800479a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d912      	bls.n	80046e0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	881a      	ldrh	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	1c9a      	adds	r2, r3, #2
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b02      	subs	r3, #2
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046de:	e05c      	b.n	800479a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	330c      	adds	r3, #12
 80046ea:	7812      	ldrb	r2, [r2, #0]
 80046ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004706:	e048      	b.n	800479a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b02      	cmp	r3, #2
 8004714:	d12b      	bne.n	800476e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b01      	cmp	r3, #1
 800471e:	d912      	bls.n	8004746 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	881a      	ldrh	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	1c9a      	adds	r2, r3, #2
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b02      	subs	r3, #2
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004744:	e029      	b.n	800479a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	330c      	adds	r3, #12
 8004750:	7812      	ldrb	r2, [r2, #0]
 8004752:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800476c:	e015      	b.n	800479a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800476e:	f7fd fa63 	bl	8001c38 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d803      	bhi.n	8004786 <HAL_SPI_Transmit+0x270>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004784:	d102      	bne.n	800478c <HAL_SPI_Transmit+0x276>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d106      	bne.n	800479a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004798:	e029      	b.n	80047ee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1b1      	bne.n	8004708 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	6839      	ldr	r1, [r7, #0]
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 fcf9 	bl	80051a0 <SPI_EndRxTxTransaction>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d002      	beq.n	80047ba <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10a      	bne.n	80047d8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047c2:	2300      	movs	r3, #0
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	77fb      	strb	r3, [r7, #31]
 80047e4:	e003      	b.n	80047ee <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80047f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3720      	adds	r7, #32
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	4613      	mov	r3, r2
 800480e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004810:	2300      	movs	r3, #0
 8004812:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	d002      	beq.n	8004826 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004820:	2302      	movs	r3, #2
 8004822:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004824:	e11a      	b.n	8004a5c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800482e:	d112      	bne.n	8004856 <HAL_SPI_Receive+0x56>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10e      	bne.n	8004856 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2204      	movs	r2, #4
 800483c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004840:	88fa      	ldrh	r2, [r7, #6]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	4613      	mov	r3, r2
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f90e 	bl	8004a6e <HAL_SPI_TransmitReceive>
 8004852:	4603      	mov	r3, r0
 8004854:	e107      	b.n	8004a66 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_SPI_Receive+0x64>
 8004860:	2302      	movs	r3, #2
 8004862:	e100      	b.n	8004a66 <HAL_SPI_Receive+0x266>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800486c:	f7fd f9e4 	bl	8001c38 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <HAL_SPI_Receive+0x7e>
 8004878:	88fb      	ldrh	r3, [r7, #6]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d102      	bne.n	8004884 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004882:	e0eb      	b.n	8004a5c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2204      	movs	r2, #4
 8004888:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	88fa      	ldrh	r2, [r7, #6]
 800489c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	88fa      	ldrh	r2, [r7, #6]
 80048a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048ce:	d908      	bls.n	80048e2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048de:	605a      	str	r2, [r3, #4]
 80048e0:	e007      	b.n	80048f2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048f0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048fa:	d10f      	bne.n	800491c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800490a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800491a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b40      	cmp	r3, #64	; 0x40
 8004928:	d007      	beq.n	800493a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004938:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004942:	d86f      	bhi.n	8004a24 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004944:	e034      	b.n	80049b0 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b01      	cmp	r3, #1
 8004952:	d117      	bne.n	8004984 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f103 020c 	add.w	r2, r3, #12
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	7812      	ldrb	r2, [r2, #0]
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004982:	e015      	b.n	80049b0 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004984:	f7fd f958 	bl	8001c38 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d803      	bhi.n	800499c <HAL_SPI_Receive+0x19c>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499a:	d102      	bne.n	80049a2 <HAL_SPI_Receive+0x1a2>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80049ae:	e055      	b.n	8004a5c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1c4      	bne.n	8004946 <HAL_SPI_Receive+0x146>
 80049bc:	e038      	b.n	8004a30 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d115      	bne.n	80049f8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	b292      	uxth	r2, r2
 80049d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	1c9a      	adds	r2, r3, #2
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80049f6:	e015      	b.n	8004a24 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049f8:	f7fd f91e 	bl	8001c38 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d803      	bhi.n	8004a10 <HAL_SPI_Receive+0x210>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0e:	d102      	bne.n	8004a16 <HAL_SPI_Receive+0x216>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004a22:	e01b      	b.n	8004a5c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1c6      	bne.n	80049be <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	6839      	ldr	r1, [r7, #0]
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 fb5b 	bl	80050f0 <SPI_EndRxTransaction>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	75fb      	strb	r3, [r7, #23]
 8004a52:	e003      	b.n	8004a5c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b08a      	sub	sp, #40	; 0x28
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
 8004a7a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <HAL_SPI_TransmitReceive+0x26>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e20a      	b.n	8004eaa <HAL_SPI_TransmitReceive+0x43c>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a9c:	f7fd f8cc 	bl	8001c38 <HAL_GetTick>
 8004aa0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004aa8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004ab0:	887b      	ldrh	r3, [r7, #2]
 8004ab2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004ab4:	887b      	ldrh	r3, [r7, #2]
 8004ab6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ab8:	7efb      	ldrb	r3, [r7, #27]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d00e      	beq.n	8004adc <HAL_SPI_TransmitReceive+0x6e>
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ac4:	d106      	bne.n	8004ad4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <HAL_SPI_TransmitReceive+0x66>
 8004ace:	7efb      	ldrb	r3, [r7, #27]
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d003      	beq.n	8004adc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004ada:	e1e0      	b.n	8004e9e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <HAL_SPI_TransmitReceive+0x80>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <HAL_SPI_TransmitReceive+0x80>
 8004ae8:	887b      	ldrh	r3, [r7, #2]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d103      	bne.n	8004af6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004af4:	e1d3      	b.n	8004e9e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d003      	beq.n	8004b0a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2205      	movs	r2, #5
 8004b06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	887a      	ldrh	r2, [r7, #2]
 8004b1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	887a      	ldrh	r2, [r7, #2]
 8004b22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	887a      	ldrh	r2, [r7, #2]
 8004b30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	887a      	ldrh	r2, [r7, #2]
 8004b36:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b4c:	d802      	bhi.n	8004b54 <HAL_SPI_TransmitReceive+0xe6>
 8004b4e:	8a3b      	ldrh	r3, [r7, #16]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d908      	bls.n	8004b66 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b62:	605a      	str	r2, [r3, #4]
 8004b64:	e007      	b.n	8004b76 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b74:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b80:	2b40      	cmp	r3, #64	; 0x40
 8004b82:	d007      	beq.n	8004b94 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b9c:	f240 8081 	bls.w	8004ca2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <HAL_SPI_TransmitReceive+0x140>
 8004ba8:	8a7b      	ldrh	r3, [r7, #18]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d16d      	bne.n	8004c8a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	881a      	ldrh	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	1c9a      	adds	r2, r3, #2
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bd2:	e05a      	b.n	8004c8a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d11b      	bne.n	8004c1a <HAL_SPI_TransmitReceive+0x1ac>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d016      	beq.n	8004c1a <HAL_SPI_TransmitReceive+0x1ac>
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d113      	bne.n	8004c1a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf6:	881a      	ldrh	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	1c9a      	adds	r2, r3, #2
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d11c      	bne.n	8004c62 <HAL_SPI_TransmitReceive+0x1f4>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d016      	beq.n	8004c62 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	b292      	uxth	r2, r2
 8004c40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	1c9a      	adds	r2, r3, #2
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c62:	f7fc ffe9 	bl	8001c38 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d80b      	bhi.n	8004c8a <HAL_SPI_TransmitReceive+0x21c>
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c78:	d007      	beq.n	8004c8a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004c88:	e109      	b.n	8004e9e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d19f      	bne.n	8004bd4 <HAL_SPI_TransmitReceive+0x166>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d199      	bne.n	8004bd4 <HAL_SPI_TransmitReceive+0x166>
 8004ca0:	e0e3      	b.n	8004e6a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_SPI_TransmitReceive+0x244>
 8004caa:	8a7b      	ldrh	r3, [r7, #18]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	f040 80cf 	bne.w	8004e50 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d912      	bls.n	8004ce2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	881a      	ldrh	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	1c9a      	adds	r2, r3, #2
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	3b02      	subs	r3, #2
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ce0:	e0b6      	b.n	8004e50 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	330c      	adds	r3, #12
 8004cec:	7812      	ldrb	r2, [r2, #0]
 8004cee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d08:	e0a2      	b.n	8004e50 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d134      	bne.n	8004d82 <HAL_SPI_TransmitReceive+0x314>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d02f      	beq.n	8004d82 <HAL_SPI_TransmitReceive+0x314>
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d12c      	bne.n	8004d82 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d912      	bls.n	8004d58 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	881a      	ldrh	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	1c9a      	adds	r2, r3, #2
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b02      	subs	r3, #2
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d56:	e012      	b.n	8004d7e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	330c      	adds	r3, #12
 8004d62:	7812      	ldrb	r2, [r2, #0]
 8004d64:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d148      	bne.n	8004e22 <HAL_SPI_TransmitReceive+0x3b4>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d042      	beq.n	8004e22 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d923      	bls.n	8004df0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	b292      	uxth	r2, r2
 8004db4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	1c9a      	adds	r2, r3, #2
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b02      	subs	r3, #2
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d81f      	bhi.n	8004e1e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dec:	605a      	str	r2, [r3, #4]
 8004dee:	e016      	b.n	8004e1e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f103 020c 	add.w	r2, r3, #12
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	7812      	ldrb	r2, [r2, #0]
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e22:	f7fc ff09 	bl	8001c38 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d803      	bhi.n	8004e3a <HAL_SPI_TransmitReceive+0x3cc>
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e38:	d102      	bne.n	8004e40 <HAL_SPI_TransmitReceive+0x3d2>
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d107      	bne.n	8004e50 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004e4e:	e026      	b.n	8004e9e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f47f af57 	bne.w	8004d0a <HAL_SPI_TransmitReceive+0x29c>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f47f af50 	bne.w	8004d0a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f996 	bl	80051a0 <SPI_EndRxTxTransaction>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e94:	e003      	b.n	8004e9e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ea6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3728      	adds	r7, #40	; 0x28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ec4:	f7fc feb8 	bl	8001c38 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	1a9b      	subs	r3, r3, r2
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ed4:	f7fc feb0 	bl	8001c38 <HAL_GetTick>
 8004ed8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eda:	4b39      	ldr	r3, [pc, #228]	; (8004fc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	015b      	lsls	r3, r3, #5
 8004ee0:	0d1b      	lsrs	r3, r3, #20
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	fb02 f303 	mul.w	r3, r2, r3
 8004ee8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eea:	e054      	b.n	8004f96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef2:	d050      	beq.n	8004f96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ef4:	f7fc fea0 	bl	8001c38 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d902      	bls.n	8004f0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d13d      	bne.n	8004f86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f22:	d111      	bne.n	8004f48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f2c:	d004      	beq.n	8004f38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f36:	d107      	bne.n	8004f48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f50:	d10f      	bne.n	8004f72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e017      	b.n	8004fb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	bf0c      	ite	eq
 8004fa6:	2301      	moveq	r3, #1
 8004fa8:	2300      	movne	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d19b      	bne.n	8004eec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3720      	adds	r7, #32
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000008 	.word	0x20000008

08004fc4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08a      	sub	sp, #40	; 0x28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004fd6:	f7fc fe2f 	bl	8001c38 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	1a9b      	subs	r3, r3, r2
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004fe6:	f7fc fe27 	bl	8001c38 <HAL_GetTick>
 8004fea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	330c      	adds	r3, #12
 8004ff2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ff4:	4b3d      	ldr	r3, [pc, #244]	; (80050ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	00da      	lsls	r2, r3, #3
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	0d1b      	lsrs	r3, r3, #20
 8005004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005006:	fb02 f303 	mul.w	r3, r2, r3
 800500a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800500c:	e060      	b.n	80050d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005014:	d107      	bne.n	8005026 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d104      	bne.n	8005026 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005024:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502c:	d050      	beq.n	80050d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800502e:	f7fc fe03 	bl	8001c38 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800503a:	429a      	cmp	r2, r3
 800503c:	d902      	bls.n	8005044 <SPI_WaitFifoStateUntilTimeout+0x80>
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	2b00      	cmp	r3, #0
 8005042:	d13d      	bne.n	80050c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005052:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800505c:	d111      	bne.n	8005082 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005066:	d004      	beq.n	8005072 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005070:	d107      	bne.n	8005082 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005080:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800508a:	d10f      	bne.n	80050ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e010      	b.n	80050e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	4013      	ands	r3, r2
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d196      	bne.n	800500e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3728      	adds	r7, #40	; 0x28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20000008 	.word	0x20000008

080050f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005104:	d111      	bne.n	800512a <SPI_EndRxTransaction+0x3a>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800510e:	d004      	beq.n	800511a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005118:	d107      	bne.n	800512a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005128:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2200      	movs	r2, #0
 8005132:	2180      	movs	r1, #128	; 0x80
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f7ff febd 	bl	8004eb4 <SPI_WaitFlagStateUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d007      	beq.n	8005150 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005144:	f043 0220 	orr.w	r2, r3, #32
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e023      	b.n	8005198 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005158:	d11d      	bne.n	8005196 <SPI_EndRxTransaction+0xa6>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005162:	d004      	beq.n	800516e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800516c:	d113      	bne.n	8005196 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2200      	movs	r2, #0
 8005176:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f7ff ff22 	bl	8004fc4 <SPI_WaitFifoStateUntilTimeout>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d007      	beq.n	8005196 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800518a:	f043 0220 	orr.w	r2, r3, #32
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e000      	b.n	8005198 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f7ff ff03 	bl	8004fc4 <SPI_WaitFifoStateUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d007      	beq.n	80051d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c8:	f043 0220 	orr.w	r2, r3, #32
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e027      	b.n	8005224 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2200      	movs	r2, #0
 80051dc:	2180      	movs	r1, #128	; 0x80
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7ff fe68 	bl	8004eb4 <SPI_WaitFlagStateUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ee:	f043 0220 	orr.w	r2, r3, #32
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e014      	b.n	8005224 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2200      	movs	r2, #0
 8005202:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f7ff fedc 	bl	8004fc4 <SPI_WaitFifoStateUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d007      	beq.n	8005222 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005216:	f043 0220 	orr.w	r2, r3, #32
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e000      	b.n	8005224 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e040      	b.n	80052c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005242:	2b00      	cmp	r3, #0
 8005244:	d106      	bne.n	8005254 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7fc fafa 	bl	8001848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2224      	movs	r2, #36	; 0x24
 8005258:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0201 	bic.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fb6a 	bl	800594c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f8af 	bl	80053dc <UART_SetConfig>
 800527e:	4603      	mov	r3, r0
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e01b      	b.n	80052c0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689a      	ldr	r2, [r3, #8]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fbe9 	bl	8005a90 <UART_CheckIdleState>
 80052be:	4603      	mov	r3, r0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08a      	sub	sp, #40	; 0x28
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	603b      	str	r3, [r7, #0]
 80052d4:	4613      	mov	r3, r2
 80052d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d178      	bne.n	80053d2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <HAL_UART_Transmit+0x24>
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e071      	b.n	80053d4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2221      	movs	r2, #33	; 0x21
 80052fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052fe:	f7fc fc9b 	bl	8001c38 <HAL_GetTick>
 8005302:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	88fa      	ldrh	r2, [r7, #6]
 8005308:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	88fa      	ldrh	r2, [r7, #6]
 8005310:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531c:	d108      	bne.n	8005330 <HAL_UART_Transmit+0x68>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d104      	bne.n	8005330 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005326:	2300      	movs	r3, #0
 8005328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	61bb      	str	r3, [r7, #24]
 800532e:	e003      	b.n	8005338 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005334:	2300      	movs	r3, #0
 8005336:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005338:	e030      	b.n	800539c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2200      	movs	r2, #0
 8005342:	2180      	movs	r1, #128	; 0x80
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 fc4b 	bl	8005be0 <UART_WaitOnFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2220      	movs	r2, #32
 8005354:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e03c      	b.n	80053d4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10b      	bne.n	8005378 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	881a      	ldrh	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800536c:	b292      	uxth	r2, r2
 800536e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	3302      	adds	r3, #2
 8005374:	61bb      	str	r3, [r7, #24]
 8005376:	e008      	b.n	800538a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	781a      	ldrb	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	b292      	uxth	r2, r2
 8005382:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	3301      	adds	r3, #1
 8005388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1c8      	bne.n	800533a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2200      	movs	r2, #0
 80053b0:	2140      	movs	r1, #64	; 0x40
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 fc14 	bl	8005be0 <UART_WaitOnFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d004      	beq.n	80053c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2220      	movs	r2, #32
 80053c2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e005      	b.n	80053d4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2220      	movs	r2, #32
 80053cc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	e000      	b.n	80053d4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80053d2:	2302      	movs	r3, #2
  }
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3720      	adds	r7, #32
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053e0:	b08a      	sub	sp, #40	; 0x28
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	431a      	orrs	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	4313      	orrs	r3, r2
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4ba4      	ldr	r3, [pc, #656]	; (800569c <UART_SetConfig+0x2c0>)
 800540c:	4013      	ands	r3, r2
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	6812      	ldr	r2, [r2, #0]
 8005412:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005414:	430b      	orrs	r3, r1
 8005416:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a99      	ldr	r2, [pc, #612]	; (80056a0 <UART_SetConfig+0x2c4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005444:	4313      	orrs	r3, r2
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005458:	430a      	orrs	r2, r1
 800545a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a90      	ldr	r2, [pc, #576]	; (80056a4 <UART_SetConfig+0x2c8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d126      	bne.n	80054b4 <UART_SetConfig+0xd8>
 8005466:	4b90      	ldr	r3, [pc, #576]	; (80056a8 <UART_SetConfig+0x2cc>)
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	2b03      	cmp	r3, #3
 8005472:	d81b      	bhi.n	80054ac <UART_SetConfig+0xd0>
 8005474:	a201      	add	r2, pc, #4	; (adr r2, 800547c <UART_SetConfig+0xa0>)
 8005476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547a:	bf00      	nop
 800547c:	0800548d 	.word	0x0800548d
 8005480:	0800549d 	.word	0x0800549d
 8005484:	08005495 	.word	0x08005495
 8005488:	080054a5 	.word	0x080054a5
 800548c:	2301      	movs	r3, #1
 800548e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005492:	e116      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005494:	2302      	movs	r3, #2
 8005496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800549a:	e112      	b.n	80056c2 <UART_SetConfig+0x2e6>
 800549c:	2304      	movs	r3, #4
 800549e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054a2:	e10e      	b.n	80056c2 <UART_SetConfig+0x2e6>
 80054a4:	2308      	movs	r3, #8
 80054a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054aa:	e10a      	b.n	80056c2 <UART_SetConfig+0x2e6>
 80054ac:	2310      	movs	r3, #16
 80054ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054b2:	e106      	b.n	80056c2 <UART_SetConfig+0x2e6>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a7c      	ldr	r2, [pc, #496]	; (80056ac <UART_SetConfig+0x2d0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d138      	bne.n	8005530 <UART_SetConfig+0x154>
 80054be:	4b7a      	ldr	r3, [pc, #488]	; (80056a8 <UART_SetConfig+0x2cc>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c4:	f003 030c 	and.w	r3, r3, #12
 80054c8:	2b0c      	cmp	r3, #12
 80054ca:	d82d      	bhi.n	8005528 <UART_SetConfig+0x14c>
 80054cc:	a201      	add	r2, pc, #4	; (adr r2, 80054d4 <UART_SetConfig+0xf8>)
 80054ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d2:	bf00      	nop
 80054d4:	08005509 	.word	0x08005509
 80054d8:	08005529 	.word	0x08005529
 80054dc:	08005529 	.word	0x08005529
 80054e0:	08005529 	.word	0x08005529
 80054e4:	08005519 	.word	0x08005519
 80054e8:	08005529 	.word	0x08005529
 80054ec:	08005529 	.word	0x08005529
 80054f0:	08005529 	.word	0x08005529
 80054f4:	08005511 	.word	0x08005511
 80054f8:	08005529 	.word	0x08005529
 80054fc:	08005529 	.word	0x08005529
 8005500:	08005529 	.word	0x08005529
 8005504:	08005521 	.word	0x08005521
 8005508:	2300      	movs	r3, #0
 800550a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800550e:	e0d8      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005510:	2302      	movs	r3, #2
 8005512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005516:	e0d4      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005518:	2304      	movs	r3, #4
 800551a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800551e:	e0d0      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005520:	2308      	movs	r3, #8
 8005522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005526:	e0cc      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005528:	2310      	movs	r3, #16
 800552a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800552e:	e0c8      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a5e      	ldr	r2, [pc, #376]	; (80056b0 <UART_SetConfig+0x2d4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d125      	bne.n	8005586 <UART_SetConfig+0x1aa>
 800553a:	4b5b      	ldr	r3, [pc, #364]	; (80056a8 <UART_SetConfig+0x2cc>)
 800553c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005540:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005544:	2b30      	cmp	r3, #48	; 0x30
 8005546:	d016      	beq.n	8005576 <UART_SetConfig+0x19a>
 8005548:	2b30      	cmp	r3, #48	; 0x30
 800554a:	d818      	bhi.n	800557e <UART_SetConfig+0x1a2>
 800554c:	2b20      	cmp	r3, #32
 800554e:	d00a      	beq.n	8005566 <UART_SetConfig+0x18a>
 8005550:	2b20      	cmp	r3, #32
 8005552:	d814      	bhi.n	800557e <UART_SetConfig+0x1a2>
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <UART_SetConfig+0x182>
 8005558:	2b10      	cmp	r3, #16
 800555a:	d008      	beq.n	800556e <UART_SetConfig+0x192>
 800555c:	e00f      	b.n	800557e <UART_SetConfig+0x1a2>
 800555e:	2300      	movs	r3, #0
 8005560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005564:	e0ad      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005566:	2302      	movs	r3, #2
 8005568:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800556c:	e0a9      	b.n	80056c2 <UART_SetConfig+0x2e6>
 800556e:	2304      	movs	r3, #4
 8005570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005574:	e0a5      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005576:	2308      	movs	r3, #8
 8005578:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800557c:	e0a1      	b.n	80056c2 <UART_SetConfig+0x2e6>
 800557e:	2310      	movs	r3, #16
 8005580:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005584:	e09d      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a4a      	ldr	r2, [pc, #296]	; (80056b4 <UART_SetConfig+0x2d8>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d125      	bne.n	80055dc <UART_SetConfig+0x200>
 8005590:	4b45      	ldr	r3, [pc, #276]	; (80056a8 <UART_SetConfig+0x2cc>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005596:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800559a:	2bc0      	cmp	r3, #192	; 0xc0
 800559c:	d016      	beq.n	80055cc <UART_SetConfig+0x1f0>
 800559e:	2bc0      	cmp	r3, #192	; 0xc0
 80055a0:	d818      	bhi.n	80055d4 <UART_SetConfig+0x1f8>
 80055a2:	2b80      	cmp	r3, #128	; 0x80
 80055a4:	d00a      	beq.n	80055bc <UART_SetConfig+0x1e0>
 80055a6:	2b80      	cmp	r3, #128	; 0x80
 80055a8:	d814      	bhi.n	80055d4 <UART_SetConfig+0x1f8>
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <UART_SetConfig+0x1d8>
 80055ae:	2b40      	cmp	r3, #64	; 0x40
 80055b0:	d008      	beq.n	80055c4 <UART_SetConfig+0x1e8>
 80055b2:	e00f      	b.n	80055d4 <UART_SetConfig+0x1f8>
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ba:	e082      	b.n	80056c2 <UART_SetConfig+0x2e6>
 80055bc:	2302      	movs	r3, #2
 80055be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c2:	e07e      	b.n	80056c2 <UART_SetConfig+0x2e6>
 80055c4:	2304      	movs	r3, #4
 80055c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ca:	e07a      	b.n	80056c2 <UART_SetConfig+0x2e6>
 80055cc:	2308      	movs	r3, #8
 80055ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055d2:	e076      	b.n	80056c2 <UART_SetConfig+0x2e6>
 80055d4:	2310      	movs	r3, #16
 80055d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055da:	e072      	b.n	80056c2 <UART_SetConfig+0x2e6>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a35      	ldr	r2, [pc, #212]	; (80056b8 <UART_SetConfig+0x2dc>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d12a      	bne.n	800563c <UART_SetConfig+0x260>
 80055e6:	4b30      	ldr	r3, [pc, #192]	; (80056a8 <UART_SetConfig+0x2cc>)
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055f4:	d01a      	beq.n	800562c <UART_SetConfig+0x250>
 80055f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055fa:	d81b      	bhi.n	8005634 <UART_SetConfig+0x258>
 80055fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005600:	d00c      	beq.n	800561c <UART_SetConfig+0x240>
 8005602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005606:	d815      	bhi.n	8005634 <UART_SetConfig+0x258>
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <UART_SetConfig+0x238>
 800560c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005610:	d008      	beq.n	8005624 <UART_SetConfig+0x248>
 8005612:	e00f      	b.n	8005634 <UART_SetConfig+0x258>
 8005614:	2300      	movs	r3, #0
 8005616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800561a:	e052      	b.n	80056c2 <UART_SetConfig+0x2e6>
 800561c:	2302      	movs	r3, #2
 800561e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005622:	e04e      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005624:	2304      	movs	r3, #4
 8005626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800562a:	e04a      	b.n	80056c2 <UART_SetConfig+0x2e6>
 800562c:	2308      	movs	r3, #8
 800562e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005632:	e046      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005634:	2310      	movs	r3, #16
 8005636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800563a:	e042      	b.n	80056c2 <UART_SetConfig+0x2e6>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a17      	ldr	r2, [pc, #92]	; (80056a0 <UART_SetConfig+0x2c4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d13a      	bne.n	80056bc <UART_SetConfig+0x2e0>
 8005646:	4b18      	ldr	r3, [pc, #96]	; (80056a8 <UART_SetConfig+0x2cc>)
 8005648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005650:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005654:	d01a      	beq.n	800568c <UART_SetConfig+0x2b0>
 8005656:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800565a:	d81b      	bhi.n	8005694 <UART_SetConfig+0x2b8>
 800565c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005660:	d00c      	beq.n	800567c <UART_SetConfig+0x2a0>
 8005662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005666:	d815      	bhi.n	8005694 <UART_SetConfig+0x2b8>
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <UART_SetConfig+0x298>
 800566c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005670:	d008      	beq.n	8005684 <UART_SetConfig+0x2a8>
 8005672:	e00f      	b.n	8005694 <UART_SetConfig+0x2b8>
 8005674:	2300      	movs	r3, #0
 8005676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567a:	e022      	b.n	80056c2 <UART_SetConfig+0x2e6>
 800567c:	2302      	movs	r3, #2
 800567e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005682:	e01e      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005684:	2304      	movs	r3, #4
 8005686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800568a:	e01a      	b.n	80056c2 <UART_SetConfig+0x2e6>
 800568c:	2308      	movs	r3, #8
 800568e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005692:	e016      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005694:	2310      	movs	r3, #16
 8005696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800569a:	e012      	b.n	80056c2 <UART_SetConfig+0x2e6>
 800569c:	efff69f3 	.word	0xefff69f3
 80056a0:	40008000 	.word	0x40008000
 80056a4:	40013800 	.word	0x40013800
 80056a8:	40021000 	.word	0x40021000
 80056ac:	40004400 	.word	0x40004400
 80056b0:	40004800 	.word	0x40004800
 80056b4:	40004c00 	.word	0x40004c00
 80056b8:	40005000 	.word	0x40005000
 80056bc:	2310      	movs	r3, #16
 80056be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a9f      	ldr	r2, [pc, #636]	; (8005944 <UART_SetConfig+0x568>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d17a      	bne.n	80057c2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d824      	bhi.n	800571e <UART_SetConfig+0x342>
 80056d4:	a201      	add	r2, pc, #4	; (adr r2, 80056dc <UART_SetConfig+0x300>)
 80056d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056da:	bf00      	nop
 80056dc:	08005701 	.word	0x08005701
 80056e0:	0800571f 	.word	0x0800571f
 80056e4:	08005709 	.word	0x08005709
 80056e8:	0800571f 	.word	0x0800571f
 80056ec:	0800570f 	.word	0x0800570f
 80056f0:	0800571f 	.word	0x0800571f
 80056f4:	0800571f 	.word	0x0800571f
 80056f8:	0800571f 	.word	0x0800571f
 80056fc:	08005717 	.word	0x08005717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005700:	f7fe f91e 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8005704:	61f8      	str	r0, [r7, #28]
        break;
 8005706:	e010      	b.n	800572a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005708:	4b8f      	ldr	r3, [pc, #572]	; (8005948 <UART_SetConfig+0x56c>)
 800570a:	61fb      	str	r3, [r7, #28]
        break;
 800570c:	e00d      	b.n	800572a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800570e:	f7fe f87f 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 8005712:	61f8      	str	r0, [r7, #28]
        break;
 8005714:	e009      	b.n	800572a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800571a:	61fb      	str	r3, [r7, #28]
        break;
 800571c:	e005      	b.n	800572a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005728:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 80fb 	beq.w	8005928 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	4413      	add	r3, r2
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	429a      	cmp	r2, r3
 8005740:	d305      	bcc.n	800574e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	429a      	cmp	r2, r3
 800574c:	d903      	bls.n	8005756 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005754:	e0e8      	b.n	8005928 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	2200      	movs	r2, #0
 800575a:	461c      	mov	r4, r3
 800575c:	4615      	mov	r5, r2
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	022b      	lsls	r3, r5, #8
 8005768:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800576c:	0222      	lsls	r2, r4, #8
 800576e:	68f9      	ldr	r1, [r7, #12]
 8005770:	6849      	ldr	r1, [r1, #4]
 8005772:	0849      	lsrs	r1, r1, #1
 8005774:	2000      	movs	r0, #0
 8005776:	4688      	mov	r8, r1
 8005778:	4681      	mov	r9, r0
 800577a:	eb12 0a08 	adds.w	sl, r2, r8
 800577e:	eb43 0b09 	adc.w	fp, r3, r9
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005790:	4650      	mov	r0, sl
 8005792:	4659      	mov	r1, fp
 8005794:	f7fb fa58 	bl	8000c48 <__aeabi_uldivmod>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4613      	mov	r3, r2
 800579e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057a6:	d308      	bcc.n	80057ba <UART_SetConfig+0x3de>
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ae:	d204      	bcs.n	80057ba <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	60da      	str	r2, [r3, #12]
 80057b8:	e0b6      	b.n	8005928 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057c0:	e0b2      	b.n	8005928 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ca:	d15e      	bne.n	800588a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80057cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d828      	bhi.n	8005826 <UART_SetConfig+0x44a>
 80057d4:	a201      	add	r2, pc, #4	; (adr r2, 80057dc <UART_SetConfig+0x400>)
 80057d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057da:	bf00      	nop
 80057dc:	08005801 	.word	0x08005801
 80057e0:	08005809 	.word	0x08005809
 80057e4:	08005811 	.word	0x08005811
 80057e8:	08005827 	.word	0x08005827
 80057ec:	08005817 	.word	0x08005817
 80057f0:	08005827 	.word	0x08005827
 80057f4:	08005827 	.word	0x08005827
 80057f8:	08005827 	.word	0x08005827
 80057fc:	0800581f 	.word	0x0800581f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005800:	f7fe f89e 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8005804:	61f8      	str	r0, [r7, #28]
        break;
 8005806:	e014      	b.n	8005832 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005808:	f7fe f8b0 	bl	800396c <HAL_RCC_GetPCLK2Freq>
 800580c:	61f8      	str	r0, [r7, #28]
        break;
 800580e:	e010      	b.n	8005832 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005810:	4b4d      	ldr	r3, [pc, #308]	; (8005948 <UART_SetConfig+0x56c>)
 8005812:	61fb      	str	r3, [r7, #28]
        break;
 8005814:	e00d      	b.n	8005832 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005816:	f7fd fffb 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 800581a:	61f8      	str	r0, [r7, #28]
        break;
 800581c:	e009      	b.n	8005832 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800581e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005822:	61fb      	str	r3, [r7, #28]
        break;
 8005824:	e005      	b.n	8005832 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005830:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d077      	beq.n	8005928 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	005a      	lsls	r2, r3, #1
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	085b      	lsrs	r3, r3, #1
 8005842:	441a      	add	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	fbb2 f3f3 	udiv	r3, r2, r3
 800584c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	2b0f      	cmp	r3, #15
 8005852:	d916      	bls.n	8005882 <UART_SetConfig+0x4a6>
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800585a:	d212      	bcs.n	8005882 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	b29b      	uxth	r3, r3
 8005860:	f023 030f 	bic.w	r3, r3, #15
 8005864:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	085b      	lsrs	r3, r3, #1
 800586a:	b29b      	uxth	r3, r3
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	b29a      	uxth	r2, r3
 8005872:	8afb      	ldrh	r3, [r7, #22]
 8005874:	4313      	orrs	r3, r2
 8005876:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	8afa      	ldrh	r2, [r7, #22]
 800587e:	60da      	str	r2, [r3, #12]
 8005880:	e052      	b.n	8005928 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005888:	e04e      	b.n	8005928 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800588a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800588e:	2b08      	cmp	r3, #8
 8005890:	d827      	bhi.n	80058e2 <UART_SetConfig+0x506>
 8005892:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <UART_SetConfig+0x4bc>)
 8005894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005898:	080058bd 	.word	0x080058bd
 800589c:	080058c5 	.word	0x080058c5
 80058a0:	080058cd 	.word	0x080058cd
 80058a4:	080058e3 	.word	0x080058e3
 80058a8:	080058d3 	.word	0x080058d3
 80058ac:	080058e3 	.word	0x080058e3
 80058b0:	080058e3 	.word	0x080058e3
 80058b4:	080058e3 	.word	0x080058e3
 80058b8:	080058db 	.word	0x080058db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058bc:	f7fe f840 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 80058c0:	61f8      	str	r0, [r7, #28]
        break;
 80058c2:	e014      	b.n	80058ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058c4:	f7fe f852 	bl	800396c <HAL_RCC_GetPCLK2Freq>
 80058c8:	61f8      	str	r0, [r7, #28]
        break;
 80058ca:	e010      	b.n	80058ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058cc:	4b1e      	ldr	r3, [pc, #120]	; (8005948 <UART_SetConfig+0x56c>)
 80058ce:	61fb      	str	r3, [r7, #28]
        break;
 80058d0:	e00d      	b.n	80058ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058d2:	f7fd ff9d 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 80058d6:	61f8      	str	r0, [r7, #28]
        break;
 80058d8:	e009      	b.n	80058ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058de:	61fb      	str	r3, [r7, #28]
        break;
 80058e0:	e005      	b.n	80058ee <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058ec:	bf00      	nop
    }

    if (pclk != 0U)
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d019      	beq.n	8005928 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	085a      	lsrs	r2, r3, #1
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	441a      	add	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	fbb2 f3f3 	udiv	r3, r2, r3
 8005906:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	2b0f      	cmp	r3, #15
 800590c:	d909      	bls.n	8005922 <UART_SetConfig+0x546>
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005914:	d205      	bcs.n	8005922 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60da      	str	r2, [r3, #12]
 8005920:	e002      	b.n	8005928 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005934:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005938:	4618      	mov	r0, r3
 800593a:	3728      	adds	r7, #40	; 0x28
 800593c:	46bd      	mov	sp, r7
 800593e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005942:	bf00      	nop
 8005944:	40008000 	.word	0x40008000
 8005948:	00f42400 	.word	0x00f42400

0800594c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	f003 0308 	and.w	r3, r3, #8
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	f003 0304 	and.w	r3, r3, #4
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	f003 0310 	and.w	r3, r3, #16
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d01a      	beq.n	8005a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a4a:	d10a      	bne.n	8005a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	605a      	str	r2, [r3, #4]
  }
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b098      	sub	sp, #96	; 0x60
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aa0:	f7fc f8ca 	bl	8001c38 <HAL_GetTick>
 8005aa4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d12e      	bne.n	8005b12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005abc:	2200      	movs	r2, #0
 8005abe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f88c 	bl	8005be0 <UART_WaitOnFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d021      	beq.n	8005b12 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ae2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aec:	647b      	str	r3, [r7, #68]	; 0x44
 8005aee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e6      	bne.n	8005ace <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e062      	b.n	8005bd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d149      	bne.n	8005bb4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f856 	bl	8005be0 <UART_WaitOnFlagUntilTimeout>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d03c      	beq.n	8005bb4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	623b      	str	r3, [r7, #32]
   return(result);
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
 8005b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b58:	633b      	str	r3, [r7, #48]	; 0x30
 8005b5a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b60:	e841 2300 	strex	r3, r2, [r1]
 8005b64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e6      	bne.n	8005b3a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3308      	adds	r3, #8
 8005b72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0301 	bic.w	r3, r3, #1
 8005b82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3308      	adds	r3, #8
 8005b8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b8c:	61fa      	str	r2, [r7, #28]
 8005b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	69b9      	ldr	r1, [r7, #24]
 8005b92:	69fa      	ldr	r2, [r7, #28]
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	617b      	str	r3, [r7, #20]
   return(result);
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e5      	bne.n	8005b6c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e011      	b.n	8005bd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3758      	adds	r7, #88	; 0x58
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	603b      	str	r3, [r7, #0]
 8005bec:	4613      	mov	r3, r2
 8005bee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf0:	e049      	b.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf8:	d045      	beq.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bfa:	f7fc f81d 	bl	8001c38 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d302      	bcc.n	8005c10 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e048      	b.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0304 	and.w	r3, r3, #4
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d031      	beq.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	f003 0308 	and.w	r3, r3, #8
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	d110      	bne.n	8005c52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2208      	movs	r2, #8
 8005c36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f838 	bl	8005cae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2208      	movs	r2, #8
 8005c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e029      	b.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c60:	d111      	bne.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f81e 	bl	8005cae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e00f      	b.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69da      	ldr	r2, [r3, #28]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	bf0c      	ite	eq
 8005c96:	2301      	moveq	r3, #1
 8005c98:	2300      	movne	r3, #0
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	79fb      	ldrb	r3, [r7, #7]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d0a6      	beq.n	8005bf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b095      	sub	sp, #84	; 0x54
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd4:	643b      	str	r3, [r7, #64]	; 0x40
 8005cd6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cdc:	e841 2300 	strex	r3, r2, [r1]
 8005ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e6      	bne.n	8005cb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3308      	adds	r3, #8
 8005cee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	f023 0301 	bic.w	r3, r3, #1
 8005cfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3308      	adds	r3, #8
 8005d06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e5      	bne.n	8005ce8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d118      	bne.n	8005d56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f023 0310 	bic.w	r3, r3, #16
 8005d38:	647b      	str	r3, [r7, #68]	; 0x44
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d42:	61bb      	str	r3, [r7, #24]
 8005d44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	6979      	ldr	r1, [r7, #20]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e6      	bne.n	8005d24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d6a:	bf00      	nop
 8005d6c:	3754      	adds	r7, #84	; 0x54
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
	...

08005d78 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005d7c:	4904      	ldr	r1, [pc, #16]	; (8005d90 <MX_FATFS_Init+0x18>)
 8005d7e:	4805      	ldr	r0, [pc, #20]	; (8005d94 <MX_FATFS_Init+0x1c>)
 8005d80:	f001 fb6a 	bl	8007458 <FATFS_LinkDriver>
 8005d84:	4603      	mov	r3, r0
 8005d86:	461a      	mov	r2, r3
 8005d88:	4b03      	ldr	r3, [pc, #12]	; (8005d98 <MX_FATFS_Init+0x20>)
 8005d8a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005d8c:	bf00      	nop
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	200005c0 	.word	0x200005c0
 8005d94:	20000014 	.word	0x20000014
 8005d98:	200005bc 	.word	0x200005bc

08005d9c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	4603      	mov	r3, r0
 8005da4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 f9d9 	bl	8006160 <USER_SPI_initialize>
 8005dae:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fab7 	bl	8006338 <USER_SPI_status>
 8005dca:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	607a      	str	r2, [r7, #4]
 8005dde:	603b      	str	r3, [r7, #0]
 8005de0:	4603      	mov	r3, r0
 8005de2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8005de4:	7bf8      	ldrb	r0, [r7, #15]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	68b9      	ldr	r1, [r7, #8]
 8005dec:	f000 faba 	bl	8006364 <USER_SPI_read>
 8005df0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b084      	sub	sp, #16
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
 8005e06:	4603      	mov	r3, r0
 8005e08:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8005e0a:	7bf8      	ldrb	r0, [r7, #15]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	f000 fb0d 	bl	8006430 <USER_SPI_write>
 8005e16:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	4603      	mov	r3, r0
 8005e28:	603a      	str	r2, [r7, #0]
 8005e2a:	71fb      	strb	r3, [r7, #7]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	73fb      	strb	r3, [r7, #15]
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8005e34:	79b9      	ldrb	r1, [r7, #6]
 8005e36:	79fb      	ldrb	r3, [r7, #7]
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 fb74 	bl	8006528 <USER_SPI_ioctl>
 8005e40:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005e54:	f7fb fef0 	bl	8001c38 <HAL_GetTick>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	4a04      	ldr	r2, [pc, #16]	; (8005e6c <SPI_Timer_On+0x20>)
 8005e5c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8005e5e:	4a04      	ldr	r2, [pc, #16]	; (8005e70 <SPI_Timer_On+0x24>)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6013      	str	r3, [r2, #0]
}
 8005e64:	bf00      	nop
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	200005c8 	.word	0x200005c8
 8005e70:	200005cc 	.word	0x200005cc

08005e74 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005e78:	f7fb fede 	bl	8001c38 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <SPI_Timer_Status+0x24>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	1ad2      	subs	r2, r2, r3
 8005e84:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <SPI_Timer_Status+0x28>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	bf34      	ite	cc
 8005e8c:	2301      	movcc	r3, #1
 8005e8e:	2300      	movcs	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	200005c8 	.word	0x200005c8
 8005e9c:	200005cc 	.word	0x200005cc

08005ea0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af02      	add	r7, sp, #8
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005eaa:	f107 020f 	add.w	r2, r7, #15
 8005eae:	1df9      	adds	r1, r7, #7
 8005eb0:	2332      	movs	r3, #50	; 0x32
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	4804      	ldr	r0, [pc, #16]	; (8005ec8 <xchg_spi+0x28>)
 8005eb8:	f7fe fdd9 	bl	8004a6e <HAL_SPI_TransmitReceive>
    return rxDat;
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20000264 	.word	0x20000264

08005ecc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005ecc:	b590      	push	{r4, r7, lr}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	e00a      	b.n	8005ef2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	18d4      	adds	r4, r2, r3
 8005ee2:	20ff      	movs	r0, #255	; 0xff
 8005ee4:	f7ff ffdc 	bl	8005ea0 <xchg_spi>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	60fb      	str	r3, [r7, #12]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d3f0      	bcc.n	8005edc <rcvr_spi_multi+0x10>
	}
}
 8005efa:	bf00      	nop
 8005efc:	bf00      	nop
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd90      	pop	{r4, r7, pc}

08005f04 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	f04f 33ff 	mov.w	r3, #4294967295
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	4803      	ldr	r0, [pc, #12]	; (8005f28 <xmit_spi_multi+0x24>)
 8005f1a:	f7fe fafc 	bl	8004516 <HAL_SPI_Transmit>
}
 8005f1e:	bf00      	nop
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20000264 	.word	0x20000264

08005f2c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005f34:	f7fb fe80 	bl	8001c38 <HAL_GetTick>
 8005f38:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005f3e:	20ff      	movs	r0, #255	; 0xff
 8005f40:	f7ff ffae 	bl	8005ea0 <xchg_spi>
 8005f44:	4603      	mov	r3, r0
 8005f46:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
 8005f4a:	2bff      	cmp	r3, #255	; 0xff
 8005f4c:	d007      	beq.n	8005f5e <wait_ready+0x32>
 8005f4e:	f7fb fe73 	bl	8001c38 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d8ef      	bhi.n	8005f3e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
 8005f60:	2bff      	cmp	r3, #255	; 0xff
 8005f62:	bf0c      	ite	eq
 8005f64:	2301      	moveq	r3, #1
 8005f66:	2300      	movne	r3, #0
 8005f68:	b2db      	uxtb	r3, r3
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f7e:	4804      	ldr	r0, [pc, #16]	; (8005f90 <despiselect+0x1c>)
 8005f80:	f7fc f91a 	bl	80021b8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005f84:	20ff      	movs	r0, #255	; 0xff
 8005f86:	f7ff ff8b 	bl	8005ea0 <xchg_spi>

}
 8005f8a:	bf00      	nop
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	48000400 	.word	0x48000400

08005f94 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f9e:	480a      	ldr	r0, [pc, #40]	; (8005fc8 <spiselect+0x34>)
 8005fa0:	f7fc f90a 	bl	80021b8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005fa4:	20ff      	movs	r0, #255	; 0xff
 8005fa6:	f7ff ff7b 	bl	8005ea0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005faa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005fae:	f7ff ffbd 	bl	8005f2c <wait_ready>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <spiselect+0x28>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e002      	b.n	8005fc2 <spiselect+0x2e>

	despiselect();
 8005fbc:	f7ff ffda 	bl	8005f74 <despiselect>
	return 0;	/* Timeout */
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	48000400 	.word	0x48000400

08005fcc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8005fd6:	20c8      	movs	r0, #200	; 0xc8
 8005fd8:	f7ff ff38 	bl	8005e4c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005fdc:	20ff      	movs	r0, #255	; 0xff
 8005fde:	f7ff ff5f 	bl	8005ea0 <xchg_spi>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	2bff      	cmp	r3, #255	; 0xff
 8005fea:	d104      	bne.n	8005ff6 <rcvr_datablock+0x2a>
 8005fec:	f7ff ff42 	bl	8005e74 <SPI_Timer_Status>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1f2      	bne.n	8005fdc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	2bfe      	cmp	r3, #254	; 0xfe
 8005ffa:	d001      	beq.n	8006000 <rcvr_datablock+0x34>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	e00a      	b.n	8006016 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7ff ff62 	bl	8005ecc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006008:	20ff      	movs	r0, #255	; 0xff
 800600a:	f7ff ff49 	bl	8005ea0 <xchg_spi>
 800600e:	20ff      	movs	r0, #255	; 0xff
 8006010:	f7ff ff46 	bl	8005ea0 <xchg_spi>

	return 1;						/* Function succeeded */
 8006014:	2301      	movs	r3, #1
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	460b      	mov	r3, r1
 8006028:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800602a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800602e:	f7ff ff7d 	bl	8005f2c <wait_ready>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <xmit_datablock+0x1e>
 8006038:	2300      	movs	r3, #0
 800603a:	e01e      	b.n	800607a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800603c:	78fb      	ldrb	r3, [r7, #3]
 800603e:	4618      	mov	r0, r3
 8006040:	f7ff ff2e 	bl	8005ea0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006044:	78fb      	ldrb	r3, [r7, #3]
 8006046:	2bfd      	cmp	r3, #253	; 0xfd
 8006048:	d016      	beq.n	8006078 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800604a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff ff58 	bl	8005f04 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006054:	20ff      	movs	r0, #255	; 0xff
 8006056:	f7ff ff23 	bl	8005ea0 <xchg_spi>
 800605a:	20ff      	movs	r0, #255	; 0xff
 800605c:	f7ff ff20 	bl	8005ea0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006060:	20ff      	movs	r0, #255	; 0xff
 8006062:	f7ff ff1d 	bl	8005ea0 <xchg_spi>
 8006066:	4603      	mov	r3, r0
 8006068:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	f003 031f 	and.w	r3, r3, #31
 8006070:	2b05      	cmp	r3, #5
 8006072:	d001      	beq.n	8006078 <xmit_datablock+0x5a>
 8006074:	2300      	movs	r3, #0
 8006076:	e000      	b.n	800607a <xmit_datablock+0x5c>
	}
	return 1;
 8006078:	2301      	movs	r3, #1
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	4603      	mov	r3, r0
 800608a:	6039      	str	r1, [r7, #0]
 800608c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800608e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006092:	2b00      	cmp	r3, #0
 8006094:	da0e      	bge.n	80060b4 <send_cmd+0x32>
		cmd &= 0x7F;
 8006096:	79fb      	ldrb	r3, [r7, #7]
 8006098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800609c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800609e:	2100      	movs	r1, #0
 80060a0:	2037      	movs	r0, #55	; 0x37
 80060a2:	f7ff ffee 	bl	8006082 <send_cmd>
 80060a6:	4603      	mov	r3, r0
 80060a8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80060aa:	7bbb      	ldrb	r3, [r7, #14]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d901      	bls.n	80060b4 <send_cmd+0x32>
 80060b0:	7bbb      	ldrb	r3, [r7, #14]
 80060b2:	e051      	b.n	8006158 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80060b4:	79fb      	ldrb	r3, [r7, #7]
 80060b6:	2b0c      	cmp	r3, #12
 80060b8:	d008      	beq.n	80060cc <send_cmd+0x4a>
		despiselect();
 80060ba:	f7ff ff5b 	bl	8005f74 <despiselect>
		if (!spiselect()) return 0xFF;
 80060be:	f7ff ff69 	bl	8005f94 <spiselect>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <send_cmd+0x4a>
 80060c8:	23ff      	movs	r3, #255	; 0xff
 80060ca:	e045      	b.n	8006158 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80060cc:	79fb      	ldrb	r3, [r7, #7]
 80060ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff fee3 	bl	8005ea0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	0e1b      	lsrs	r3, r3, #24
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff fedd 	bl	8005ea0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	0c1b      	lsrs	r3, r3, #16
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7ff fed7 	bl	8005ea0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	0a1b      	lsrs	r3, r3, #8
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff fed1 	bl	8005ea0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	b2db      	uxtb	r3, r3
 8006102:	4618      	mov	r0, r3
 8006104:	f7ff fecc 	bl	8005ea0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006108:	2301      	movs	r3, #1
 800610a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800610c:	79fb      	ldrb	r3, [r7, #7]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <send_cmd+0x94>
 8006112:	2395      	movs	r3, #149	; 0x95
 8006114:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	2b08      	cmp	r3, #8
 800611a:	d101      	bne.n	8006120 <send_cmd+0x9e>
 800611c:	2387      	movs	r3, #135	; 0x87
 800611e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006120:	7bfb      	ldrb	r3, [r7, #15]
 8006122:	4618      	mov	r0, r3
 8006124:	f7ff febc 	bl	8005ea0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	2b0c      	cmp	r3, #12
 800612c:	d102      	bne.n	8006134 <send_cmd+0xb2>
 800612e:	20ff      	movs	r0, #255	; 0xff
 8006130:	f7ff feb6 	bl	8005ea0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006134:	230a      	movs	r3, #10
 8006136:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006138:	20ff      	movs	r0, #255	; 0xff
 800613a:	f7ff feb1 	bl	8005ea0 <xchg_spi>
 800613e:	4603      	mov	r3, r0
 8006140:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006142:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006146:	2b00      	cmp	r3, #0
 8006148:	da05      	bge.n	8006156 <send_cmd+0xd4>
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	3b01      	subs	r3, #1
 800614e:	73fb      	strb	r3, [r7, #15]
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1f0      	bne.n	8006138 <send_cmd+0xb6>

	return res;							/* Return received response */
 8006156:	7bbb      	ldrb	r3, [r7, #14]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006160:	b590      	push	{r4, r7, lr}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	4603      	mov	r3, r0
 8006168:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800616a:	79fb      	ldrb	r3, [r7, #7]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <USER_SPI_initialize+0x14>
 8006170:	2301      	movs	r3, #1
 8006172:	e0d6      	b.n	8006322 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006174:	4b6d      	ldr	r3, [pc, #436]	; (800632c <USER_SPI_initialize+0x1cc>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	b2db      	uxtb	r3, r3
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <USER_SPI_initialize+0x2a>
 8006182:	4b6a      	ldr	r3, [pc, #424]	; (800632c <USER_SPI_initialize+0x1cc>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	b2db      	uxtb	r3, r3
 8006188:	e0cb      	b.n	8006322 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800618a:	4b69      	ldr	r3, [pc, #420]	; (8006330 <USER_SPI_initialize+0x1d0>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006194:	4b66      	ldr	r3, [pc, #408]	; (8006330 <USER_SPI_initialize+0x1d0>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800619c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800619e:	230a      	movs	r3, #10
 80061a0:	73fb      	strb	r3, [r7, #15]
 80061a2:	e005      	b.n	80061b0 <USER_SPI_initialize+0x50>
 80061a4:	20ff      	movs	r0, #255	; 0xff
 80061a6:	f7ff fe7b 	bl	8005ea0 <xchg_spi>
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	73fb      	strb	r3, [r7, #15]
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1f6      	bne.n	80061a4 <USER_SPI_initialize+0x44>

	ty = 0;
 80061b6:	2300      	movs	r3, #0
 80061b8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80061ba:	2100      	movs	r1, #0
 80061bc:	2000      	movs	r0, #0
 80061be:	f7ff ff60 	bl	8006082 <send_cmd>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	f040 808b 	bne.w	80062e0 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80061ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80061ce:	f7ff fe3d 	bl	8005e4c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80061d2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80061d6:	2008      	movs	r0, #8
 80061d8:	f7ff ff53 	bl	8006082 <send_cmd>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d151      	bne.n	8006286 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80061e2:	2300      	movs	r3, #0
 80061e4:	73fb      	strb	r3, [r7, #15]
 80061e6:	e00d      	b.n	8006204 <USER_SPI_initialize+0xa4>
 80061e8:	7bfc      	ldrb	r4, [r7, #15]
 80061ea:	20ff      	movs	r0, #255	; 0xff
 80061ec:	f7ff fe58 	bl	8005ea0 <xchg_spi>
 80061f0:	4603      	mov	r3, r0
 80061f2:	461a      	mov	r2, r3
 80061f4:	f104 0310 	add.w	r3, r4, #16
 80061f8:	443b      	add	r3, r7
 80061fa:	f803 2c08 	strb.w	r2, [r3, #-8]
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
 8006200:	3301      	adds	r3, #1
 8006202:	73fb      	strb	r3, [r7, #15]
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	2b03      	cmp	r3, #3
 8006208:	d9ee      	bls.n	80061e8 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800620a:	7abb      	ldrb	r3, [r7, #10]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d167      	bne.n	80062e0 <USER_SPI_initialize+0x180>
 8006210:	7afb      	ldrb	r3, [r7, #11]
 8006212:	2baa      	cmp	r3, #170	; 0xaa
 8006214:	d164      	bne.n	80062e0 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006216:	bf00      	nop
 8006218:	f7ff fe2c 	bl	8005e74 <SPI_Timer_Status>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d007      	beq.n	8006232 <USER_SPI_initialize+0xd2>
 8006222:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006226:	20a9      	movs	r0, #169	; 0xa9
 8006228:	f7ff ff2b 	bl	8006082 <send_cmd>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1f2      	bne.n	8006218 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006232:	f7ff fe1f 	bl	8005e74 <SPI_Timer_Status>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d051      	beq.n	80062e0 <USER_SPI_initialize+0x180>
 800623c:	2100      	movs	r1, #0
 800623e:	203a      	movs	r0, #58	; 0x3a
 8006240:	f7ff ff1f 	bl	8006082 <send_cmd>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d14a      	bne.n	80062e0 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800624a:	2300      	movs	r3, #0
 800624c:	73fb      	strb	r3, [r7, #15]
 800624e:	e00d      	b.n	800626c <USER_SPI_initialize+0x10c>
 8006250:	7bfc      	ldrb	r4, [r7, #15]
 8006252:	20ff      	movs	r0, #255	; 0xff
 8006254:	f7ff fe24 	bl	8005ea0 <xchg_spi>
 8006258:	4603      	mov	r3, r0
 800625a:	461a      	mov	r2, r3
 800625c:	f104 0310 	add.w	r3, r4, #16
 8006260:	443b      	add	r3, r7
 8006262:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006266:	7bfb      	ldrb	r3, [r7, #15]
 8006268:	3301      	adds	r3, #1
 800626a:	73fb      	strb	r3, [r7, #15]
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	2b03      	cmp	r3, #3
 8006270:	d9ee      	bls.n	8006250 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006272:	7a3b      	ldrb	r3, [r7, #8]
 8006274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <USER_SPI_initialize+0x120>
 800627c:	230c      	movs	r3, #12
 800627e:	e000      	b.n	8006282 <USER_SPI_initialize+0x122>
 8006280:	2304      	movs	r3, #4
 8006282:	737b      	strb	r3, [r7, #13]
 8006284:	e02c      	b.n	80062e0 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006286:	2100      	movs	r1, #0
 8006288:	20a9      	movs	r0, #169	; 0xa9
 800628a:	f7ff fefa 	bl	8006082 <send_cmd>
 800628e:	4603      	mov	r3, r0
 8006290:	2b01      	cmp	r3, #1
 8006292:	d804      	bhi.n	800629e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006294:	2302      	movs	r3, #2
 8006296:	737b      	strb	r3, [r7, #13]
 8006298:	23a9      	movs	r3, #169	; 0xa9
 800629a:	73bb      	strb	r3, [r7, #14]
 800629c:	e003      	b.n	80062a6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800629e:	2301      	movs	r3, #1
 80062a0:	737b      	strb	r3, [r7, #13]
 80062a2:	2301      	movs	r3, #1
 80062a4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80062a6:	bf00      	nop
 80062a8:	f7ff fde4 	bl	8005e74 <SPI_Timer_Status>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d007      	beq.n	80062c2 <USER_SPI_initialize+0x162>
 80062b2:	7bbb      	ldrb	r3, [r7, #14]
 80062b4:	2100      	movs	r1, #0
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7ff fee3 	bl	8006082 <send_cmd>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1f2      	bne.n	80062a8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80062c2:	f7ff fdd7 	bl	8005e74 <SPI_Timer_Status>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d007      	beq.n	80062dc <USER_SPI_initialize+0x17c>
 80062cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062d0:	2010      	movs	r0, #16
 80062d2:	f7ff fed6 	bl	8006082 <send_cmd>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <USER_SPI_initialize+0x180>
				ty = 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80062e0:	4a14      	ldr	r2, [pc, #80]	; (8006334 <USER_SPI_initialize+0x1d4>)
 80062e2:	7b7b      	ldrb	r3, [r7, #13]
 80062e4:	7013      	strb	r3, [r2, #0]
	despiselect();
 80062e6:	f7ff fe45 	bl	8005f74 <despiselect>

	if (ty) {			/* OK */
 80062ea:	7b7b      	ldrb	r3, [r7, #13]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d012      	beq.n	8006316 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80062f0:	4b0f      	ldr	r3, [pc, #60]	; (8006330 <USER_SPI_initialize+0x1d0>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80062fa:	4b0d      	ldr	r3, [pc, #52]	; (8006330 <USER_SPI_initialize+0x1d0>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0210 	orr.w	r2, r2, #16
 8006302:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006304:	4b09      	ldr	r3, [pc, #36]	; (800632c <USER_SPI_initialize+0x1cc>)
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	b2db      	uxtb	r3, r3
 800630a:	f023 0301 	bic.w	r3, r3, #1
 800630e:	b2da      	uxtb	r2, r3
 8006310:	4b06      	ldr	r3, [pc, #24]	; (800632c <USER_SPI_initialize+0x1cc>)
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	e002      	b.n	800631c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006316:	4b05      	ldr	r3, [pc, #20]	; (800632c <USER_SPI_initialize+0x1cc>)
 8006318:	2201      	movs	r2, #1
 800631a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800631c:	4b03      	ldr	r3, [pc, #12]	; (800632c <USER_SPI_initialize+0x1cc>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	b2db      	uxtb	r3, r3
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	bd90      	pop	{r4, r7, pc}
 800632a:	bf00      	nop
 800632c:	20000028 	.word	0x20000028
 8006330:	20000264 	.word	0x20000264
 8006334:	200005c4 	.word	0x200005c4

08006338 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	4603      	mov	r3, r0
 8006340:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006342:	79fb      	ldrb	r3, [r7, #7]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <USER_SPI_status+0x14>
 8006348:	2301      	movs	r3, #1
 800634a:	e002      	b.n	8006352 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800634c:	4b04      	ldr	r3, [pc, #16]	; (8006360 <USER_SPI_status+0x28>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	b2db      	uxtb	r3, r3
}
 8006352:	4618      	mov	r0, r3
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	20000028 	.word	0x20000028

08006364 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	607a      	str	r2, [r7, #4]
 800636e:	603b      	str	r3, [r7, #0]
 8006370:	4603      	mov	r3, r0
 8006372:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d102      	bne.n	8006380 <USER_SPI_read+0x1c>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <USER_SPI_read+0x20>
 8006380:	2304      	movs	r3, #4
 8006382:	e04d      	b.n	8006420 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006384:	4b28      	ldr	r3, [pc, #160]	; (8006428 <USER_SPI_read+0xc4>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <USER_SPI_read+0x32>
 8006392:	2303      	movs	r3, #3
 8006394:	e044      	b.n	8006420 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006396:	4b25      	ldr	r3, [pc, #148]	; (800642c <USER_SPI_read+0xc8>)
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	f003 0308 	and.w	r3, r3, #8
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d102      	bne.n	80063a8 <USER_SPI_read+0x44>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	025b      	lsls	r3, r3, #9
 80063a6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d111      	bne.n	80063d2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	2011      	movs	r0, #17
 80063b2:	f7ff fe66 	bl	8006082 <send_cmd>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d129      	bne.n	8006410 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80063bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063c0:	68b8      	ldr	r0, [r7, #8]
 80063c2:	f7ff fe03 	bl	8005fcc <rcvr_datablock>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d021      	beq.n	8006410 <USER_SPI_read+0xac>
			count = 0;
 80063cc:	2300      	movs	r3, #0
 80063ce:	603b      	str	r3, [r7, #0]
 80063d0:	e01e      	b.n	8006410 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	2012      	movs	r0, #18
 80063d6:	f7ff fe54 	bl	8006082 <send_cmd>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d117      	bne.n	8006410 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80063e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063e4:	68b8      	ldr	r0, [r7, #8]
 80063e6:	f7ff fdf1 	bl	8005fcc <rcvr_datablock>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00a      	beq.n	8006406 <USER_SPI_read+0xa2>
				buff += 512;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80063f6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	603b      	str	r3, [r7, #0]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1ed      	bne.n	80063e0 <USER_SPI_read+0x7c>
 8006404:	e000      	b.n	8006408 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006406:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006408:	2100      	movs	r1, #0
 800640a:	200c      	movs	r0, #12
 800640c:	f7ff fe39 	bl	8006082 <send_cmd>
		}
	}
	despiselect();
 8006410:	f7ff fdb0 	bl	8005f74 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	bf14      	ite	ne
 800641a:	2301      	movne	r3, #1
 800641c:	2300      	moveq	r3, #0
 800641e:	b2db      	uxtb	r3, r3
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20000028 	.word	0x20000028
 800642c:	200005c4 	.word	0x200005c4

08006430 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	607a      	str	r2, [r7, #4]
 800643a:	603b      	str	r3, [r7, #0]
 800643c:	4603      	mov	r3, r0
 800643e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <USER_SPI_write+0x1c>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <USER_SPI_write+0x20>
 800644c:	2304      	movs	r3, #4
 800644e:	e063      	b.n	8006518 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006450:	4b33      	ldr	r3, [pc, #204]	; (8006520 <USER_SPI_write+0xf0>)
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	b2db      	uxtb	r3, r3
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <USER_SPI_write+0x32>
 800645e:	2303      	movs	r3, #3
 8006460:	e05a      	b.n	8006518 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006462:	4b2f      	ldr	r3, [pc, #188]	; (8006520 <USER_SPI_write+0xf0>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	b2db      	uxtb	r3, r3
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <USER_SPI_write+0x44>
 8006470:	2302      	movs	r3, #2
 8006472:	e051      	b.n	8006518 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006474:	4b2b      	ldr	r3, [pc, #172]	; (8006524 <USER_SPI_write+0xf4>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	f003 0308 	and.w	r3, r3, #8
 800647c:	2b00      	cmp	r3, #0
 800647e:	d102      	bne.n	8006486 <USER_SPI_write+0x56>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	025b      	lsls	r3, r3, #9
 8006484:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d110      	bne.n	80064ae <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800648c:	6879      	ldr	r1, [r7, #4]
 800648e:	2018      	movs	r0, #24
 8006490:	f7ff fdf7 	bl	8006082 <send_cmd>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d136      	bne.n	8006508 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800649a:	21fe      	movs	r1, #254	; 0xfe
 800649c:	68b8      	ldr	r0, [r7, #8]
 800649e:	f7ff fdbe 	bl	800601e <xmit_datablock>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d02f      	beq.n	8006508 <USER_SPI_write+0xd8>
			count = 0;
 80064a8:	2300      	movs	r3, #0
 80064aa:	603b      	str	r3, [r7, #0]
 80064ac:	e02c      	b.n	8006508 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80064ae:	4b1d      	ldr	r3, [pc, #116]	; (8006524 <USER_SPI_write+0xf4>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	f003 0306 	and.w	r3, r3, #6
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <USER_SPI_write+0x92>
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	2097      	movs	r0, #151	; 0x97
 80064be:	f7ff fde0 	bl	8006082 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	2019      	movs	r0, #25
 80064c6:	f7ff fddc 	bl	8006082 <send_cmd>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d11b      	bne.n	8006508 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80064d0:	21fc      	movs	r1, #252	; 0xfc
 80064d2:	68b8      	ldr	r0, [r7, #8]
 80064d4:	f7ff fda3 	bl	800601e <xmit_datablock>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00a      	beq.n	80064f4 <USER_SPI_write+0xc4>
				buff += 512;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80064e4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	3b01      	subs	r3, #1
 80064ea:	603b      	str	r3, [r7, #0]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1ee      	bne.n	80064d0 <USER_SPI_write+0xa0>
 80064f2:	e000      	b.n	80064f6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80064f4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80064f6:	21fd      	movs	r1, #253	; 0xfd
 80064f8:	2000      	movs	r0, #0
 80064fa:	f7ff fd90 	bl	800601e <xmit_datablock>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <USER_SPI_write+0xd8>
 8006504:	2301      	movs	r3, #1
 8006506:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006508:	f7ff fd34 	bl	8005f74 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	bf14      	ite	ne
 8006512:	2301      	movne	r3, #1
 8006514:	2300      	moveq	r3, #0
 8006516:	b2db      	uxtb	r3, r3
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20000028 	.word	0x20000028
 8006524:	200005c4 	.word	0x200005c4

08006528 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b08c      	sub	sp, #48	; 0x30
 800652c:	af00      	add	r7, sp, #0
 800652e:	4603      	mov	r3, r0
 8006530:	603a      	str	r2, [r7, #0]
 8006532:	71fb      	strb	r3, [r7, #7]
 8006534:	460b      	mov	r3, r1
 8006536:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006538:	79fb      	ldrb	r3, [r7, #7]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <USER_SPI_ioctl+0x1a>
 800653e:	2304      	movs	r3, #4
 8006540:	e15a      	b.n	80067f8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006542:	4baf      	ldr	r3, [pc, #700]	; (8006800 <USER_SPI_ioctl+0x2d8>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	b2db      	uxtb	r3, r3
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <USER_SPI_ioctl+0x2c>
 8006550:	2303      	movs	r3, #3
 8006552:	e151      	b.n	80067f8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800655a:	79bb      	ldrb	r3, [r7, #6]
 800655c:	2b04      	cmp	r3, #4
 800655e:	f200 8136 	bhi.w	80067ce <USER_SPI_ioctl+0x2a6>
 8006562:	a201      	add	r2, pc, #4	; (adr r2, 8006568 <USER_SPI_ioctl+0x40>)
 8006564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006568:	0800657d 	.word	0x0800657d
 800656c:	08006591 	.word	0x08006591
 8006570:	080067cf 	.word	0x080067cf
 8006574:	0800663d 	.word	0x0800663d
 8006578:	08006733 	.word	0x08006733
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800657c:	f7ff fd0a 	bl	8005f94 <spiselect>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 8127 	beq.w	80067d6 <USER_SPI_ioctl+0x2ae>
 8006588:	2300      	movs	r3, #0
 800658a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800658e:	e122      	b.n	80067d6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006590:	2100      	movs	r1, #0
 8006592:	2009      	movs	r0, #9
 8006594:	f7ff fd75 	bl	8006082 <send_cmd>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	f040 811d 	bne.w	80067da <USER_SPI_ioctl+0x2b2>
 80065a0:	f107 030c 	add.w	r3, r7, #12
 80065a4:	2110      	movs	r1, #16
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff fd10 	bl	8005fcc <rcvr_datablock>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 8113 	beq.w	80067da <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80065b4:	7b3b      	ldrb	r3, [r7, #12]
 80065b6:	099b      	lsrs	r3, r3, #6
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d111      	bne.n	80065e2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80065be:	7d7b      	ldrb	r3, [r7, #21]
 80065c0:	461a      	mov	r2, r3
 80065c2:	7d3b      	ldrb	r3, [r7, #20]
 80065c4:	021b      	lsls	r3, r3, #8
 80065c6:	4413      	add	r3, r2
 80065c8:	461a      	mov	r2, r3
 80065ca:	7cfb      	ldrb	r3, [r7, #19]
 80065cc:	041b      	lsls	r3, r3, #16
 80065ce:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80065d2:	4413      	add	r3, r2
 80065d4:	3301      	adds	r3, #1
 80065d6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	029a      	lsls	r2, r3, #10
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	e028      	b.n	8006634 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80065e2:	7c7b      	ldrb	r3, [r7, #17]
 80065e4:	f003 030f 	and.w	r3, r3, #15
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	7dbb      	ldrb	r3, [r7, #22]
 80065ec:	09db      	lsrs	r3, r3, #7
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	4413      	add	r3, r2
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	7d7b      	ldrb	r3, [r7, #21]
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	f003 0306 	and.w	r3, r3, #6
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	4413      	add	r3, r2
 8006602:	b2db      	uxtb	r3, r3
 8006604:	3302      	adds	r3, #2
 8006606:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800660a:	7d3b      	ldrb	r3, [r7, #20]
 800660c:	099b      	lsrs	r3, r3, #6
 800660e:	b2db      	uxtb	r3, r3
 8006610:	461a      	mov	r2, r3
 8006612:	7cfb      	ldrb	r3, [r7, #19]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	441a      	add	r2, r3
 8006618:	7cbb      	ldrb	r3, [r7, #18]
 800661a:	029b      	lsls	r3, r3, #10
 800661c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006620:	4413      	add	r3, r2
 8006622:	3301      	adds	r3, #1
 8006624:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006626:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800662a:	3b09      	subs	r3, #9
 800662c:	69fa      	ldr	r2, [r7, #28]
 800662e:	409a      	lsls	r2, r3
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800663a:	e0ce      	b.n	80067da <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800663c:	4b71      	ldr	r3, [pc, #452]	; (8006804 <USER_SPI_ioctl+0x2dc>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	d031      	beq.n	80066ac <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006648:	2100      	movs	r1, #0
 800664a:	208d      	movs	r0, #141	; 0x8d
 800664c:	f7ff fd19 	bl	8006082 <send_cmd>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	f040 80c3 	bne.w	80067de <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006658:	20ff      	movs	r0, #255	; 0xff
 800665a:	f7ff fc21 	bl	8005ea0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800665e:	f107 030c 	add.w	r3, r7, #12
 8006662:	2110      	movs	r1, #16
 8006664:	4618      	mov	r0, r3
 8006666:	f7ff fcb1 	bl	8005fcc <rcvr_datablock>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 80b6 	beq.w	80067de <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006672:	2330      	movs	r3, #48	; 0x30
 8006674:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006678:	e007      	b.n	800668a <USER_SPI_ioctl+0x162>
 800667a:	20ff      	movs	r0, #255	; 0xff
 800667c:	f7ff fc10 	bl	8005ea0 <xchg_spi>
 8006680:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006684:	3b01      	subs	r3, #1
 8006686:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800668a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1f3      	bne.n	800667a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006692:	7dbb      	ldrb	r3, [r7, #22]
 8006694:	091b      	lsrs	r3, r3, #4
 8006696:	b2db      	uxtb	r3, r3
 8006698:	461a      	mov	r2, r3
 800669a:	2310      	movs	r3, #16
 800669c:	fa03 f202 	lsl.w	r2, r3, r2
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80066aa:	e098      	b.n	80067de <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80066ac:	2100      	movs	r1, #0
 80066ae:	2009      	movs	r0, #9
 80066b0:	f7ff fce7 	bl	8006082 <send_cmd>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f040 8091 	bne.w	80067de <USER_SPI_ioctl+0x2b6>
 80066bc:	f107 030c 	add.w	r3, r7, #12
 80066c0:	2110      	movs	r1, #16
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7ff fc82 	bl	8005fcc <rcvr_datablock>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 8087 	beq.w	80067de <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80066d0:	4b4c      	ldr	r3, [pc, #304]	; (8006804 <USER_SPI_ioctl+0x2dc>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d012      	beq.n	8006702 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80066dc:	7dbb      	ldrb	r3, [r7, #22]
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80066e4:	7dfa      	ldrb	r2, [r7, #23]
 80066e6:	09d2      	lsrs	r2, r2, #7
 80066e8:	b2d2      	uxtb	r2, r2
 80066ea:	4413      	add	r3, r2
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	7e7b      	ldrb	r3, [r7, #25]
 80066f0:	099b      	lsrs	r3, r3, #6
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	fa02 f303 	lsl.w	r3, r2, r3
 80066fa:	461a      	mov	r2, r3
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	e013      	b.n	800672a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006702:	7dbb      	ldrb	r3, [r7, #22]
 8006704:	109b      	asrs	r3, r3, #2
 8006706:	b29b      	uxth	r3, r3
 8006708:	f003 031f 	and.w	r3, r3, #31
 800670c:	3301      	adds	r3, #1
 800670e:	7dfa      	ldrb	r2, [r7, #23]
 8006710:	00d2      	lsls	r2, r2, #3
 8006712:	f002 0218 	and.w	r2, r2, #24
 8006716:	7df9      	ldrb	r1, [r7, #23]
 8006718:	0949      	lsrs	r1, r1, #5
 800671a:	b2c9      	uxtb	r1, r1
 800671c:	440a      	add	r2, r1
 800671e:	3201      	adds	r2, #1
 8006720:	fb02 f303 	mul.w	r3, r2, r3
 8006724:	461a      	mov	r2, r3
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006730:	e055      	b.n	80067de <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006732:	4b34      	ldr	r3, [pc, #208]	; (8006804 <USER_SPI_ioctl+0x2dc>)
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	f003 0306 	and.w	r3, r3, #6
 800673a:	2b00      	cmp	r3, #0
 800673c:	d051      	beq.n	80067e2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800673e:	f107 020c 	add.w	r2, r7, #12
 8006742:	79fb      	ldrb	r3, [r7, #7]
 8006744:	210b      	movs	r1, #11
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff feee 	bl	8006528 <USER_SPI_ioctl>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d149      	bne.n	80067e6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006752:	7b3b      	ldrb	r3, [r7, #12]
 8006754:	099b      	lsrs	r3, r3, #6
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d104      	bne.n	8006766 <USER_SPI_ioctl+0x23e>
 800675c:	7dbb      	ldrb	r3, [r7, #22]
 800675e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006762:	2b00      	cmp	r3, #0
 8006764:	d041      	beq.n	80067ea <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	623b      	str	r3, [r7, #32]
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8006776:	4b23      	ldr	r3, [pc, #140]	; (8006804 <USER_SPI_ioctl+0x2dc>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	f003 0308 	and.w	r3, r3, #8
 800677e:	2b00      	cmp	r3, #0
 8006780:	d105      	bne.n	800678e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	025b      	lsls	r3, r3, #9
 8006786:	62bb      	str	r3, [r7, #40]	; 0x28
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	025b      	lsls	r3, r3, #9
 800678c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800678e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006790:	2020      	movs	r0, #32
 8006792:	f7ff fc76 	bl	8006082 <send_cmd>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d128      	bne.n	80067ee <USER_SPI_ioctl+0x2c6>
 800679c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800679e:	2021      	movs	r0, #33	; 0x21
 80067a0:	f7ff fc6f 	bl	8006082 <send_cmd>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d121      	bne.n	80067ee <USER_SPI_ioctl+0x2c6>
 80067aa:	2100      	movs	r1, #0
 80067ac:	2026      	movs	r0, #38	; 0x26
 80067ae:	f7ff fc68 	bl	8006082 <send_cmd>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d11a      	bne.n	80067ee <USER_SPI_ioctl+0x2c6>
 80067b8:	f247 5030 	movw	r0, #30000	; 0x7530
 80067bc:	f7ff fbb6 	bl	8005f2c <wait_ready>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d013      	beq.n	80067ee <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80067c6:	2300      	movs	r3, #0
 80067c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80067cc:	e00f      	b.n	80067ee <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80067ce:	2304      	movs	r3, #4
 80067d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80067d4:	e00c      	b.n	80067f0 <USER_SPI_ioctl+0x2c8>
		break;
 80067d6:	bf00      	nop
 80067d8:	e00a      	b.n	80067f0 <USER_SPI_ioctl+0x2c8>
		break;
 80067da:	bf00      	nop
 80067dc:	e008      	b.n	80067f0 <USER_SPI_ioctl+0x2c8>
		break;
 80067de:	bf00      	nop
 80067e0:	e006      	b.n	80067f0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80067e2:	bf00      	nop
 80067e4:	e004      	b.n	80067f0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80067e6:	bf00      	nop
 80067e8:	e002      	b.n	80067f0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80067ea:	bf00      	nop
 80067ec:	e000      	b.n	80067f0 <USER_SPI_ioctl+0x2c8>
		break;
 80067ee:	bf00      	nop
	}

	despiselect();
 80067f0:	f7ff fbc0 	bl	8005f74 <despiselect>

	return res;
 80067f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3730      	adds	r7, #48	; 0x30
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	20000028 	.word	0x20000028
 8006804:	200005c4 	.word	0x200005c4

08006808 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	4603      	mov	r3, r0
 8006810:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006812:	79fb      	ldrb	r3, [r7, #7]
 8006814:	4a08      	ldr	r2, [pc, #32]	; (8006838 <disk_status+0x30>)
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	79fa      	ldrb	r2, [r7, #7]
 8006820:	4905      	ldr	r1, [pc, #20]	; (8006838 <disk_status+0x30>)
 8006822:	440a      	add	r2, r1
 8006824:	7a12      	ldrb	r2, [r2, #8]
 8006826:	4610      	mov	r0, r2
 8006828:	4798      	blx	r3
 800682a:	4603      	mov	r3, r0
 800682c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800682e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	200005f8 	.word	0x200005f8

0800683c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	4603      	mov	r3, r0
 8006844:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800684a:	79fb      	ldrb	r3, [r7, #7]
 800684c:	4a0d      	ldr	r2, [pc, #52]	; (8006884 <disk_initialize+0x48>)
 800684e:	5cd3      	ldrb	r3, [r2, r3]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d111      	bne.n	8006878 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006854:	79fb      	ldrb	r3, [r7, #7]
 8006856:	4a0b      	ldr	r2, [pc, #44]	; (8006884 <disk_initialize+0x48>)
 8006858:	2101      	movs	r1, #1
 800685a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800685c:	79fb      	ldrb	r3, [r7, #7]
 800685e:	4a09      	ldr	r2, [pc, #36]	; (8006884 <disk_initialize+0x48>)
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	79fa      	ldrb	r2, [r7, #7]
 800686a:	4906      	ldr	r1, [pc, #24]	; (8006884 <disk_initialize+0x48>)
 800686c:	440a      	add	r2, r1
 800686e:	7a12      	ldrb	r2, [r2, #8]
 8006870:	4610      	mov	r0, r2
 8006872:	4798      	blx	r3
 8006874:	4603      	mov	r3, r0
 8006876:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006878:	7bfb      	ldrb	r3, [r7, #15]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	200005f8 	.word	0x200005f8

08006888 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006888:	b590      	push	{r4, r7, lr}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	607a      	str	r2, [r7, #4]
 8006892:	603b      	str	r3, [r7, #0]
 8006894:	4603      	mov	r3, r0
 8006896:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	4a0a      	ldr	r2, [pc, #40]	; (80068c4 <disk_read+0x3c>)
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	689c      	ldr	r4, [r3, #8]
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	4a07      	ldr	r2, [pc, #28]	; (80068c4 <disk_read+0x3c>)
 80068a8:	4413      	add	r3, r2
 80068aa:	7a18      	ldrb	r0, [r3, #8]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	68b9      	ldr	r1, [r7, #8]
 80068b2:	47a0      	blx	r4
 80068b4:	4603      	mov	r3, r0
 80068b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80068b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	371c      	adds	r7, #28
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd90      	pop	{r4, r7, pc}
 80068c2:	bf00      	nop
 80068c4:	200005f8 	.word	0x200005f8

080068c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80068c8:	b590      	push	{r4, r7, lr}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	4603      	mov	r3, r0
 80068d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
 80068da:	4a0a      	ldr	r2, [pc, #40]	; (8006904 <disk_write+0x3c>)
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	68dc      	ldr	r4, [r3, #12]
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	4a07      	ldr	r2, [pc, #28]	; (8006904 <disk_write+0x3c>)
 80068e8:	4413      	add	r3, r2
 80068ea:	7a18      	ldrb	r0, [r3, #8]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	68b9      	ldr	r1, [r7, #8]
 80068f2:	47a0      	blx	r4
 80068f4:	4603      	mov	r3, r0
 80068f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd90      	pop	{r4, r7, pc}
 8006902:	bf00      	nop
 8006904:	200005f8 	.word	0x200005f8

08006908 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	3301      	adds	r3, #1
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006918:	89fb      	ldrh	r3, [r7, #14]
 800691a:	021b      	lsls	r3, r3, #8
 800691c:	b21a      	sxth	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	b21b      	sxth	r3, r3
 8006924:	4313      	orrs	r3, r2
 8006926:	b21b      	sxth	r3, r3
 8006928:	81fb      	strh	r3, [r7, #14]
	return rv;
 800692a:	89fb      	ldrh	r3, [r7, #14]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	3303      	adds	r3, #3
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	021b      	lsls	r3, r3, #8
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	3202      	adds	r2, #2
 8006950:	7812      	ldrb	r2, [r2, #0]
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	021b      	lsls	r3, r3, #8
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	3201      	adds	r2, #1
 800695e:	7812      	ldrb	r2, [r2, #0]
 8006960:	4313      	orrs	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	7812      	ldrb	r2, [r2, #0]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006970:	68fb      	ldr	r3, [r7, #12]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
	...

08006980 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006988:	2300      	movs	r3, #0
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	e010      	b.n	80069b0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800698e:	4a0d      	ldr	r2, [pc, #52]	; (80069c4 <clear_lock+0x44>)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	4413      	add	r3, r2
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	429a      	cmp	r2, r3
 800699c:	d105      	bne.n	80069aa <clear_lock+0x2a>
 800699e:	4a09      	ldr	r2, [pc, #36]	; (80069c4 <clear_lock+0x44>)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	011b      	lsls	r3, r3, #4
 80069a4:	4413      	add	r3, r2
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	3301      	adds	r3, #1
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d9eb      	bls.n	800698e <clear_lock+0xe>
	}
}
 80069b6:	bf00      	nop
 80069b8:	bf00      	nop
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	200005d8 	.word	0x200005d8

080069c8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	78db      	ldrb	r3, [r3, #3]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d034      	beq.n	8006a46 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	7858      	ldrb	r0, [r3, #1]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069ec:	2301      	movs	r3, #1
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	f7ff ff6a 	bl	80068c8 <disk_write>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <sync_window+0x38>
			res = FR_DISK_ERR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	73fb      	strb	r3, [r7, #15]
 80069fe:	e022      	b.n	8006a46 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	1ad2      	subs	r2, r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d217      	bcs.n	8006a46 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	789b      	ldrb	r3, [r3, #2]
 8006a1a:	613b      	str	r3, [r7, #16]
 8006a1c:	e010      	b.n	8006a40 <sync_window+0x78>
					wsect += fs->fsize;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4413      	add	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	7858      	ldrb	r0, [r3, #1]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a32:	2301      	movs	r3, #1
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	f7ff ff47 	bl	80068c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	613b      	str	r3, [r7, #16]
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d8eb      	bhi.n	8006a1e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d01b      	beq.n	8006aa0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff ffad 	bl	80069c8 <sync_window>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d113      	bne.n	8006aa0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	7858      	ldrb	r0, [r3, #1]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a82:	2301      	movs	r3, #1
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	f7ff feff 	bl	8006888 <disk_read>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d004      	beq.n	8006a9a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006a90:	f04f 33ff 	mov.w	r3, #4294967295
 8006a94:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b086      	sub	sp, #24
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d904      	bls.n	8006aca <get_fat+0x20>
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d302      	bcc.n	8006ad0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006aca:	2301      	movs	r3, #1
 8006acc:	617b      	str	r3, [r7, #20]
 8006ace:	e08f      	b.n	8006bf0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b03      	cmp	r3, #3
 8006adc:	d062      	beq.n	8006ba4 <get_fat+0xfa>
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	dc7c      	bgt.n	8006bdc <get_fat+0x132>
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d002      	beq.n	8006aec <get_fat+0x42>
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d042      	beq.n	8006b70 <get_fat+0xc6>
 8006aea:	e077      	b.n	8006bdc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	085b      	lsrs	r3, r3, #1
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4413      	add	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	6a1a      	ldr	r2, [r3, #32]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	0a5b      	lsrs	r3, r3, #9
 8006b02:	4413      	add	r3, r2
 8006b04:	4619      	mov	r1, r3
 8006b06:	6938      	ldr	r0, [r7, #16]
 8006b08:	f7ff ffa2 	bl	8006a50 <move_window>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d167      	bne.n	8006be2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	60fa      	str	r2, [r7, #12]
 8006b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b24:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	6a1a      	ldr	r2, [r3, #32]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	0a5b      	lsrs	r3, r3, #9
 8006b2e:	4413      	add	r3, r2
 8006b30:	4619      	mov	r1, r3
 8006b32:	6938      	ldr	r0, [r7, #16]
 8006b34:	f7ff ff8c 	bl	8006a50 <move_window>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d153      	bne.n	8006be6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	4413      	add	r3, r2
 8006b48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	461a      	mov	r2, r3
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <get_fat+0xbc>
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	091b      	lsrs	r3, r3, #4
 8006b64:	e002      	b.n	8006b6c <get_fat+0xc2>
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b6c:	617b      	str	r3, [r7, #20]
			break;
 8006b6e:	e03f      	b.n	8006bf0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	6a1a      	ldr	r2, [r3, #32]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	0a1b      	lsrs	r3, r3, #8
 8006b78:	4413      	add	r3, r2
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6938      	ldr	r0, [r7, #16]
 8006b7e:	f7ff ff67 	bl	8006a50 <move_window>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d130      	bne.n	8006bea <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	005b      	lsls	r3, r3, #1
 8006b92:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006b96:	4413      	add	r3, r2
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7ff feb5 	bl	8006908 <ld_word>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	617b      	str	r3, [r7, #20]
			break;
 8006ba2:	e025      	b.n	8006bf0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	6a1a      	ldr	r2, [r3, #32]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	09db      	lsrs	r3, r3, #7
 8006bac:	4413      	add	r3, r2
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6938      	ldr	r0, [r7, #16]
 8006bb2:	f7ff ff4d 	bl	8006a50 <move_window>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d118      	bne.n	8006bee <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006bca:	4413      	add	r3, r2
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff feb3 	bl	8006938 <ld_dword>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006bd8:	617b      	str	r3, [r7, #20]
			break;
 8006bda:	e009      	b.n	8006bf0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006bdc:	2301      	movs	r3, #1
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	e006      	b.n	8006bf0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006be2:	bf00      	nop
 8006be4:	e004      	b.n	8006bf0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006be6:	bf00      	nop
 8006be8:	e002      	b.n	8006bf0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bea:	bf00      	nop
 8006bec:	e000      	b.n	8006bf0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006bee:	bf00      	nop
		}
	}

	return val;
 8006bf0:	697b      	ldr	r3, [r7, #20]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3718      	adds	r7, #24
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b087      	sub	sp, #28
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006c02:	f04f 33ff 	mov.w	r3, #4294967295
 8006c06:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d031      	beq.n	8006c74 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	617b      	str	r3, [r7, #20]
 8006c16:	e002      	b.n	8006c1e <get_ldnumber+0x24>
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	617b      	str	r3, [r7, #20]
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	2b20      	cmp	r3, #32
 8006c24:	d903      	bls.n	8006c2e <get_ldnumber+0x34>
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b3a      	cmp	r3, #58	; 0x3a
 8006c2c:	d1f4      	bne.n	8006c18 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b3a      	cmp	r3, #58	; 0x3a
 8006c34:	d11c      	bne.n	8006c70 <get_ldnumber+0x76>
			tp = *path;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	60fa      	str	r2, [r7, #12]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	3b30      	subs	r3, #48	; 0x30
 8006c46:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2b09      	cmp	r3, #9
 8006c4c:	d80e      	bhi.n	8006c6c <get_ldnumber+0x72>
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d10a      	bne.n	8006c6c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d107      	bne.n	8006c6c <get_ldnumber+0x72>
					vol = (int)i;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	3301      	adds	r3, #1
 8006c64:	617b      	str	r3, [r7, #20]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	e002      	b.n	8006c76 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006c70:	2300      	movs	r3, #0
 8006c72:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006c74:	693b      	ldr	r3, [r7, #16]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
	...

08006c84 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	70da      	strb	r2, [r3, #3]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff fed6 	bl	8006a50 <move_window>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <check_fs+0x2a>
 8006caa:	2304      	movs	r3, #4
 8006cac:	e038      	b.n	8006d20 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	3330      	adds	r3, #48	; 0x30
 8006cb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7ff fe26 	bl	8006908 <ld_word>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d001      	beq.n	8006ccc <check_fs+0x48>
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e029      	b.n	8006d20 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006cd2:	2be9      	cmp	r3, #233	; 0xe9
 8006cd4:	d009      	beq.n	8006cea <check_fs+0x66>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006cdc:	2beb      	cmp	r3, #235	; 0xeb
 8006cde:	d11e      	bne.n	8006d1e <check_fs+0x9a>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006ce6:	2b90      	cmp	r3, #144	; 0x90
 8006ce8:	d119      	bne.n	8006d1e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3330      	adds	r3, #48	; 0x30
 8006cee:	3336      	adds	r3, #54	; 0x36
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff fe21 	bl	8006938 <ld_dword>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006cfc:	4a0a      	ldr	r2, [pc, #40]	; (8006d28 <check_fs+0xa4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d101      	bne.n	8006d06 <check_fs+0x82>
 8006d02:	2300      	movs	r3, #0
 8006d04:	e00c      	b.n	8006d20 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3330      	adds	r3, #48	; 0x30
 8006d0a:	3352      	adds	r3, #82	; 0x52
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff fe13 	bl	8006938 <ld_dword>
 8006d12:	4603      	mov	r3, r0
 8006d14:	4a05      	ldr	r2, [pc, #20]	; (8006d2c <check_fs+0xa8>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d101      	bne.n	8006d1e <check_fs+0x9a>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e000      	b.n	8006d20 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006d1e:	2302      	movs	r3, #2
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	00544146 	.word	0x00544146
 8006d2c:	33544146 	.word	0x33544146

08006d30 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b096      	sub	sp, #88	; 0x58
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2200      	movs	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f7ff ff58 	bl	8006bfa <get_ldnumber>
 8006d4a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	da01      	bge.n	8006d56 <find_volume+0x26>
 8006d52:	230b      	movs	r3, #11
 8006d54:	e22d      	b.n	80071b2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006d56:	4aa1      	ldr	r2, [pc, #644]	; (8006fdc <find_volume+0x2ac>)
 8006d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d5e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <find_volume+0x3a>
 8006d66:	230c      	movs	r3, #12
 8006d68:	e223      	b.n	80071b2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d6e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006d70:	79fb      	ldrb	r3, [r7, #7]
 8006d72:	f023 0301 	bic.w	r3, r3, #1
 8006d76:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d01a      	beq.n	8006db6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d82:	785b      	ldrb	r3, [r3, #1]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7ff fd3f 	bl	8006808 <disk_status>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006d90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10c      	bne.n	8006db6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006d9c:	79fb      	ldrb	r3, [r7, #7]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d007      	beq.n	8006db2 <find_volume+0x82>
 8006da2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006da6:	f003 0304 	and.w	r3, r3, #4
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006dae:	230a      	movs	r3, #10
 8006db0:	e1ff      	b.n	80071b2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006db2:	2300      	movs	r3, #0
 8006db4:	e1fd      	b.n	80071b2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	785b      	ldrb	r3, [r3, #1]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7ff fd37 	bl	800683c <disk_initialize>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006dd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006de0:	2303      	movs	r3, #3
 8006de2:	e1e6      	b.n	80071b2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006de4:	79fb      	ldrb	r3, [r7, #7]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d007      	beq.n	8006dfa <find_volume+0xca>
 8006dea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006dee:	f003 0304 	and.w	r3, r3, #4
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006df6:	230a      	movs	r3, #10
 8006df8:	e1db      	b.n	80071b2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006dfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e02:	f7ff ff3f 	bl	8006c84 <check_fs>
 8006e06:	4603      	mov	r3, r0
 8006e08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006e0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d149      	bne.n	8006ea8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006e14:	2300      	movs	r3, #0
 8006e16:	643b      	str	r3, [r7, #64]	; 0x40
 8006e18:	e01e      	b.n	8006e58 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e22:	011b      	lsls	r3, r3, #4
 8006e24:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006e28:	4413      	add	r3, r2
 8006e2a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2e:	3304      	adds	r3, #4
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d006      	beq.n	8006e44 <find_volume+0x114>
 8006e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e38:	3308      	adds	r3, #8
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff fd7c 	bl	8006938 <ld_dword>
 8006e40:	4602      	mov	r2, r0
 8006e42:	e000      	b.n	8006e46 <find_volume+0x116>
 8006e44:	2200      	movs	r2, #0
 8006e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	3358      	adds	r3, #88	; 0x58
 8006e4c:	443b      	add	r3, r7
 8006e4e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e54:	3301      	adds	r3, #1
 8006e56:	643b      	str	r3, [r7, #64]	; 0x40
 8006e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d9dd      	bls.n	8006e1a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006e5e:	2300      	movs	r3, #0
 8006e60:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <find_volume+0x13e>
 8006e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	3358      	adds	r3, #88	; 0x58
 8006e74:	443b      	add	r3, r7
 8006e76:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006e7a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d005      	beq.n	8006e8e <find_volume+0x15e>
 8006e82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e86:	f7ff fefd 	bl	8006c84 <check_fs>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	e000      	b.n	8006e90 <find_volume+0x160>
 8006e8e:	2303      	movs	r3, #3
 8006e90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006e94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d905      	bls.n	8006ea8 <find_volume+0x178>
 8006e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ea4:	2b03      	cmp	r3, #3
 8006ea6:	d9e2      	bls.n	8006e6e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006ea8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d101      	bne.n	8006eb4 <find_volume+0x184>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e17e      	b.n	80071b2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006eb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d901      	bls.n	8006ec0 <find_volume+0x190>
 8006ebc:	230d      	movs	r3, #13
 8006ebe:	e178      	b.n	80071b2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec2:	3330      	adds	r3, #48	; 0x30
 8006ec4:	330b      	adds	r3, #11
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7ff fd1e 	bl	8006908 <ld_word>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed2:	d001      	beq.n	8006ed8 <find_volume+0x1a8>
 8006ed4:	230d      	movs	r3, #13
 8006ed6:	e16c      	b.n	80071b2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eda:	3330      	adds	r3, #48	; 0x30
 8006edc:	3316      	adds	r3, #22
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7ff fd12 	bl	8006908 <ld_word>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d106      	bne.n	8006efc <find_volume+0x1cc>
 8006eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef0:	3330      	adds	r3, #48	; 0x30
 8006ef2:	3324      	adds	r3, #36	; 0x24
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7ff fd1f 	bl	8006938 <ld_dword>
 8006efa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f00:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f04:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0e:	789b      	ldrb	r3, [r3, #2]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d005      	beq.n	8006f20 <find_volume+0x1f0>
 8006f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f16:	789b      	ldrb	r3, [r3, #2]
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d001      	beq.n	8006f20 <find_volume+0x1f0>
 8006f1c:	230d      	movs	r3, #13
 8006f1e:	e148      	b.n	80071b2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	789b      	ldrb	r3, [r3, #2]
 8006f24:	461a      	mov	r2, r3
 8006f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f28:	fb02 f303 	mul.w	r3, r2, r3
 8006f2c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f38:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3c:	895b      	ldrh	r3, [r3, #10]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d008      	beq.n	8006f54 <find_volume+0x224>
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	895b      	ldrh	r3, [r3, #10]
 8006f46:	461a      	mov	r2, r3
 8006f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4a:	895b      	ldrh	r3, [r3, #10]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	4013      	ands	r3, r2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <find_volume+0x228>
 8006f54:	230d      	movs	r3, #13
 8006f56:	e12c      	b.n	80071b2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5a:	3330      	adds	r3, #48	; 0x30
 8006f5c:	3311      	adds	r3, #17
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7ff fcd2 	bl	8006908 <ld_word>
 8006f64:	4603      	mov	r3, r0
 8006f66:	461a      	mov	r2, r3
 8006f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	891b      	ldrh	r3, [r3, #8]
 8006f70:	f003 030f 	and.w	r3, r3, #15
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <find_volume+0x24e>
 8006f7a:	230d      	movs	r3, #13
 8006f7c:	e119      	b.n	80071b2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f80:	3330      	adds	r3, #48	; 0x30
 8006f82:	3313      	adds	r3, #19
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7ff fcbf 	bl	8006908 <ld_word>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d106      	bne.n	8006fa2 <find_volume+0x272>
 8006f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f96:	3330      	adds	r3, #48	; 0x30
 8006f98:	3320      	adds	r3, #32
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7ff fccc 	bl	8006938 <ld_dword>
 8006fa0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa4:	3330      	adds	r3, #48	; 0x30
 8006fa6:	330e      	adds	r3, #14
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff fcad 	bl	8006908 <ld_word>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006fb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <find_volume+0x28c>
 8006fb8:	230d      	movs	r3, #13
 8006fba:	e0fa      	b.n	80071b2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006fbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc0:	4413      	add	r3, r2
 8006fc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fc4:	8912      	ldrh	r2, [r2, #8]
 8006fc6:	0912      	lsrs	r2, r2, #4
 8006fc8:	b292      	uxth	r2, r2
 8006fca:	4413      	add	r3, r2
 8006fcc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006fce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d204      	bcs.n	8006fe0 <find_volume+0x2b0>
 8006fd6:	230d      	movs	r3, #13
 8006fd8:	e0eb      	b.n	80071b2 <find_volume+0x482>
 8006fda:	bf00      	nop
 8006fdc:	200005d0 	.word	0x200005d0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fe8:	8952      	ldrh	r2, [r2, #10]
 8006fea:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fee:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <find_volume+0x2ca>
 8006ff6:	230d      	movs	r3, #13
 8006ff8:	e0db      	b.n	80071b2 <find_volume+0x482>
		fmt = FS_FAT32;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007002:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007006:	4293      	cmp	r3, r2
 8007008:	d802      	bhi.n	8007010 <find_volume+0x2e0>
 800700a:	2302      	movs	r3, #2
 800700c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007016:	4293      	cmp	r3, r2
 8007018:	d802      	bhi.n	8007020 <find_volume+0x2f0>
 800701a:	2301      	movs	r3, #1
 800701c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	1c9a      	adds	r2, r3, #2
 8007024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007026:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800702c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800702e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007032:	441a      	add	r2, r3
 8007034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007036:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007038:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703c:	441a      	add	r2, r3
 800703e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007040:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007042:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007046:	2b03      	cmp	r3, #3
 8007048:	d11e      	bne.n	8007088 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800704a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704c:	3330      	adds	r3, #48	; 0x30
 800704e:	332a      	adds	r3, #42	; 0x2a
 8007050:	4618      	mov	r0, r3
 8007052:	f7ff fc59 	bl	8006908 <ld_word>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <find_volume+0x330>
 800705c:	230d      	movs	r3, #13
 800705e:	e0a8      	b.n	80071b2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007062:	891b      	ldrh	r3, [r3, #8]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <find_volume+0x33c>
 8007068:	230d      	movs	r3, #13
 800706a:	e0a2      	b.n	80071b2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	3330      	adds	r3, #48	; 0x30
 8007070:	332c      	adds	r3, #44	; 0x2c
 8007072:	4618      	mov	r0, r3
 8007074:	f7ff fc60 	bl	8006938 <ld_dword>
 8007078:	4602      	mov	r2, r0
 800707a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800707e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	647b      	str	r3, [r7, #68]	; 0x44
 8007086:	e01f      	b.n	80070c8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708a:	891b      	ldrh	r3, [r3, #8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d101      	bne.n	8007094 <find_volume+0x364>
 8007090:	230d      	movs	r3, #13
 8007092:	e08e      	b.n	80071b2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007096:	6a1a      	ldr	r2, [r3, #32]
 8007098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800709a:	441a      	add	r2, r3
 800709c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80070a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d103      	bne.n	80070b0 <find_volume+0x380>
 80070a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	e00a      	b.n	80070c6 <find_volume+0x396>
 80070b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b2:	695a      	ldr	r2, [r3, #20]
 80070b4:	4613      	mov	r3, r2
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	4413      	add	r3, r2
 80070ba:	085a      	lsrs	r2, r3, #1
 80070bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070be:	695b      	ldr	r3, [r3, #20]
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80070c6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80070c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ca:	699a      	ldr	r2, [r3, #24]
 80070cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070ce:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80070d2:	0a5b      	lsrs	r3, r3, #9
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d201      	bcs.n	80070dc <find_volume+0x3ac>
 80070d8:	230d      	movs	r3, #13
 80070da:	e06a      	b.n	80071b2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80070dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070de:	f04f 32ff 	mov.w	r2, #4294967295
 80070e2:	611a      	str	r2, [r3, #16]
 80070e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e6:	691a      	ldr	r2, [r3, #16]
 80070e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ea:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80070ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ee:	2280      	movs	r2, #128	; 0x80
 80070f0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80070f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d149      	bne.n	800718e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80070fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fc:	3330      	adds	r3, #48	; 0x30
 80070fe:	3330      	adds	r3, #48	; 0x30
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff fc01 	bl	8006908 <ld_word>
 8007106:	4603      	mov	r3, r0
 8007108:	2b01      	cmp	r3, #1
 800710a:	d140      	bne.n	800718e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800710c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800710e:	3301      	adds	r3, #1
 8007110:	4619      	mov	r1, r3
 8007112:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007114:	f7ff fc9c 	bl	8006a50 <move_window>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d137      	bne.n	800718e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800711e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007120:	2200      	movs	r2, #0
 8007122:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007126:	3330      	adds	r3, #48	; 0x30
 8007128:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800712c:	4618      	mov	r0, r3
 800712e:	f7ff fbeb 	bl	8006908 <ld_word>
 8007132:	4603      	mov	r3, r0
 8007134:	461a      	mov	r2, r3
 8007136:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800713a:	429a      	cmp	r2, r3
 800713c:	d127      	bne.n	800718e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800713e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007140:	3330      	adds	r3, #48	; 0x30
 8007142:	4618      	mov	r0, r3
 8007144:	f7ff fbf8 	bl	8006938 <ld_dword>
 8007148:	4603      	mov	r3, r0
 800714a:	4a1c      	ldr	r2, [pc, #112]	; (80071bc <find_volume+0x48c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d11e      	bne.n	800718e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	3330      	adds	r3, #48	; 0x30
 8007154:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007158:	4618      	mov	r0, r3
 800715a:	f7ff fbed 	bl	8006938 <ld_dword>
 800715e:	4603      	mov	r3, r0
 8007160:	4a17      	ldr	r2, [pc, #92]	; (80071c0 <find_volume+0x490>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d113      	bne.n	800718e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007168:	3330      	adds	r3, #48	; 0x30
 800716a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800716e:	4618      	mov	r0, r3
 8007170:	f7ff fbe2 	bl	8006938 <ld_dword>
 8007174:	4602      	mov	r2, r0
 8007176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007178:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717c:	3330      	adds	r3, #48	; 0x30
 800717e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007182:	4618      	mov	r0, r3
 8007184:	f7ff fbd8 	bl	8006938 <ld_dword>
 8007188:	4602      	mov	r2, r0
 800718a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007190:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007194:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007196:	4b0b      	ldr	r3, [pc, #44]	; (80071c4 <find_volume+0x494>)
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	3301      	adds	r3, #1
 800719c:	b29a      	uxth	r2, r3
 800719e:	4b09      	ldr	r3, [pc, #36]	; (80071c4 <find_volume+0x494>)
 80071a0:	801a      	strh	r2, [r3, #0]
 80071a2:	4b08      	ldr	r3, [pc, #32]	; (80071c4 <find_volume+0x494>)
 80071a4:	881a      	ldrh	r2, [r3, #0]
 80071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80071aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80071ac:	f7ff fbe8 	bl	8006980 <clear_lock>
#endif
	return FR_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3758      	adds	r7, #88	; 0x58
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	41615252 	.word	0x41615252
 80071c0:	61417272 	.word	0x61417272
 80071c4:	200005d4 	.word	0x200005d4

080071c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b088      	sub	sp, #32
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	4613      	mov	r3, r2
 80071d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80071da:	f107 0310 	add.w	r3, r7, #16
 80071de:	4618      	mov	r0, r3
 80071e0:	f7ff fd0b 	bl	8006bfa <get_ldnumber>
 80071e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	da01      	bge.n	80071f0 <f_mount+0x28>
 80071ec:	230b      	movs	r3, #11
 80071ee:	e02b      	b.n	8007248 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80071f0:	4a17      	ldr	r2, [pc, #92]	; (8007250 <f_mount+0x88>)
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d005      	beq.n	800720c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007200:	69b8      	ldr	r0, [r7, #24]
 8007202:	f7ff fbbd 	bl	8006980 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2200      	movs	r2, #0
 800720a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	490d      	ldr	r1, [pc, #52]	; (8007250 <f_mount+0x88>)
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <f_mount+0x66>
 8007228:	79fb      	ldrb	r3, [r7, #7]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d001      	beq.n	8007232 <f_mount+0x6a>
 800722e:	2300      	movs	r3, #0
 8007230:	e00a      	b.n	8007248 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007232:	f107 010c 	add.w	r1, r7, #12
 8007236:	f107 0308 	add.w	r3, r7, #8
 800723a:	2200      	movs	r2, #0
 800723c:	4618      	mov	r0, r3
 800723e:	f7ff fd77 	bl	8006d30 <find_volume>
 8007242:	4603      	mov	r3, r0
 8007244:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007246:	7dfb      	ldrb	r3, [r7, #23]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3720      	adds	r7, #32
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	200005d0 	.word	0x200005d0

08007254 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b092      	sub	sp, #72	; 0x48
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007260:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007264:	f107 030c 	add.w	r3, r7, #12
 8007268:	2200      	movs	r2, #0
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff fd60 	bl	8006d30 <find_volume>
 8007270:	4603      	mov	r3, r0
 8007272:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8007276:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800727a:	2b00      	cmp	r3, #0
 800727c:	f040 8099 	bne.w	80073b2 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007288:	691a      	ldr	r2, [r3, #16]
 800728a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	3b02      	subs	r3, #2
 8007290:	429a      	cmp	r2, r3
 8007292:	d804      	bhi.n	800729e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007296:	691a      	ldr	r2, [r3, #16]
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	e089      	b.n	80073b2 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80072a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d128      	bne.n	80072fc <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80072aa:	2302      	movs	r3, #2
 80072ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b0:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80072b2:	f107 0314 	add.w	r3, r7, #20
 80072b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7ff fbf6 	bl	8006aaa <get_fat>
 80072be:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80072c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c6:	d103      	bne.n	80072d0 <f_getfree+0x7c>
 80072c8:	2301      	movs	r3, #1
 80072ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80072ce:	e063      	b.n	8007398 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80072d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d103      	bne.n	80072de <f_getfree+0x8a>
 80072d6:	2302      	movs	r3, #2
 80072d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80072dc:	e05c      	b.n	8007398 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80072de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d102      	bne.n	80072ea <f_getfree+0x96>
 80072e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072e6:	3301      	adds	r3, #1
 80072e8:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80072ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ec:	3301      	adds	r3, #1
 80072ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d3db      	bcc.n	80072b2 <f_getfree+0x5e>
 80072fa:	e04d      	b.n	8007398 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80072fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8007308:	2300      	movs	r3, #0
 800730a:	637b      	str	r3, [r7, #52]	; 0x34
 800730c:	2300      	movs	r3, #0
 800730e:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8007310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007312:	2b00      	cmp	r3, #0
 8007314:	d113      	bne.n	800733e <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731a:	1c5a      	adds	r2, r3, #1
 800731c:	63ba      	str	r2, [r7, #56]	; 0x38
 800731e:	4619      	mov	r1, r3
 8007320:	f7ff fb96 	bl	8006a50 <move_window>
 8007324:	4603      	mov	r3, r0
 8007326:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800732a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800732e:	2b00      	cmp	r3, #0
 8007330:	d131      	bne.n	8007396 <f_getfree+0x142>
							p = fs->win;
 8007332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007334:	3330      	adds	r3, #48	; 0x30
 8007336:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8007338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800733c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b02      	cmp	r3, #2
 8007344:	d10f      	bne.n	8007366 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007346:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007348:	f7ff fade 	bl	8006908 <ld_word>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d102      	bne.n	8007358 <f_getfree+0x104>
 8007352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007354:	3301      	adds	r3, #1
 8007356:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8007358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735a:	3302      	adds	r3, #2
 800735c:	633b      	str	r3, [r7, #48]	; 0x30
 800735e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007360:	3b02      	subs	r3, #2
 8007362:	637b      	str	r3, [r7, #52]	; 0x34
 8007364:	e010      	b.n	8007388 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007366:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007368:	f7ff fae6 	bl	8006938 <ld_dword>
 800736c:	4603      	mov	r3, r0
 800736e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d102      	bne.n	800737c <f_getfree+0x128>
 8007376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007378:	3301      	adds	r3, #1
 800737a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800737c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737e:	3304      	adds	r3, #4
 8007380:	633b      	str	r3, [r7, #48]	; 0x30
 8007382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007384:	3b04      	subs	r3, #4
 8007386:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8007388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800738a:	3b01      	subs	r3, #1
 800738c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800738e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1bd      	bne.n	8007310 <f_getfree+0xbc>
 8007394:	e000      	b.n	8007398 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007396:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800739c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073a2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	791a      	ldrb	r2, [r3, #4]
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	f042 0201 	orr.w	r2, r2, #1
 80073ae:	b2d2      	uxtb	r2, r2
 80073b0:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80073b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3748      	adds	r7, #72	; 0x48
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	4613      	mov	r3, r2
 80073cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80073ce:	2301      	movs	r3, #1
 80073d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80073d2:	2300      	movs	r3, #0
 80073d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80073d6:	4b1f      	ldr	r3, [pc, #124]	; (8007454 <FATFS_LinkDriverEx+0x94>)
 80073d8:	7a5b      	ldrb	r3, [r3, #9]
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d131      	bne.n	8007444 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80073e0:	4b1c      	ldr	r3, [pc, #112]	; (8007454 <FATFS_LinkDriverEx+0x94>)
 80073e2:	7a5b      	ldrb	r3, [r3, #9]
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	461a      	mov	r2, r3
 80073e8:	4b1a      	ldr	r3, [pc, #104]	; (8007454 <FATFS_LinkDriverEx+0x94>)
 80073ea:	2100      	movs	r1, #0
 80073ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80073ee:	4b19      	ldr	r3, [pc, #100]	; (8007454 <FATFS_LinkDriverEx+0x94>)
 80073f0:	7a5b      	ldrb	r3, [r3, #9]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	4a17      	ldr	r2, [pc, #92]	; (8007454 <FATFS_LinkDriverEx+0x94>)
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80073fe:	4b15      	ldr	r3, [pc, #84]	; (8007454 <FATFS_LinkDriverEx+0x94>)
 8007400:	7a5b      	ldrb	r3, [r3, #9]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	461a      	mov	r2, r3
 8007406:	4b13      	ldr	r3, [pc, #76]	; (8007454 <FATFS_LinkDriverEx+0x94>)
 8007408:	4413      	add	r3, r2
 800740a:	79fa      	ldrb	r2, [r7, #7]
 800740c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800740e:	4b11      	ldr	r3, [pc, #68]	; (8007454 <FATFS_LinkDriverEx+0x94>)
 8007410:	7a5b      	ldrb	r3, [r3, #9]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	1c5a      	adds	r2, r3, #1
 8007416:	b2d1      	uxtb	r1, r2
 8007418:	4a0e      	ldr	r2, [pc, #56]	; (8007454 <FATFS_LinkDriverEx+0x94>)
 800741a:	7251      	strb	r1, [r2, #9]
 800741c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800741e:	7dbb      	ldrb	r3, [r7, #22]
 8007420:	3330      	adds	r3, #48	; 0x30
 8007422:	b2da      	uxtb	r2, r3
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	3301      	adds	r3, #1
 800742c:	223a      	movs	r2, #58	; 0x3a
 800742e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	3302      	adds	r3, #2
 8007434:	222f      	movs	r2, #47	; 0x2f
 8007436:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	3303      	adds	r3, #3
 800743c:	2200      	movs	r2, #0
 800743e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007440:	2300      	movs	r3, #0
 8007442:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007444:	7dfb      	ldrb	r3, [r7, #23]
}
 8007446:	4618      	mov	r0, r3
 8007448:	371c      	adds	r7, #28
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	200005f8 	.word	0x200005f8

08007458 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007462:	2200      	movs	r2, #0
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff ffaa 	bl	80073c0 <FATFS_LinkDriverEx>
 800746c:	4603      	mov	r3, r0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <__cvt>:
 8007476:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800747a:	ec55 4b10 	vmov	r4, r5, d0
 800747e:	2d00      	cmp	r5, #0
 8007480:	460e      	mov	r6, r1
 8007482:	4619      	mov	r1, r3
 8007484:	462b      	mov	r3, r5
 8007486:	bfbb      	ittet	lt
 8007488:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800748c:	461d      	movlt	r5, r3
 800748e:	2300      	movge	r3, #0
 8007490:	232d      	movlt	r3, #45	; 0x2d
 8007492:	700b      	strb	r3, [r1, #0]
 8007494:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007496:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800749a:	4691      	mov	r9, r2
 800749c:	f023 0820 	bic.w	r8, r3, #32
 80074a0:	bfbc      	itt	lt
 80074a2:	4622      	movlt	r2, r4
 80074a4:	4614      	movlt	r4, r2
 80074a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074aa:	d005      	beq.n	80074b8 <__cvt+0x42>
 80074ac:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80074b0:	d100      	bne.n	80074b4 <__cvt+0x3e>
 80074b2:	3601      	adds	r6, #1
 80074b4:	2102      	movs	r1, #2
 80074b6:	e000      	b.n	80074ba <__cvt+0x44>
 80074b8:	2103      	movs	r1, #3
 80074ba:	ab03      	add	r3, sp, #12
 80074bc:	9301      	str	r3, [sp, #4]
 80074be:	ab02      	add	r3, sp, #8
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	ec45 4b10 	vmov	d0, r4, r5
 80074c6:	4653      	mov	r3, sl
 80074c8:	4632      	mov	r2, r6
 80074ca:	f000 fe81 	bl	80081d0 <_dtoa_r>
 80074ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80074d2:	4607      	mov	r7, r0
 80074d4:	d102      	bne.n	80074dc <__cvt+0x66>
 80074d6:	f019 0f01 	tst.w	r9, #1
 80074da:	d022      	beq.n	8007522 <__cvt+0xac>
 80074dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074e0:	eb07 0906 	add.w	r9, r7, r6
 80074e4:	d110      	bne.n	8007508 <__cvt+0x92>
 80074e6:	783b      	ldrb	r3, [r7, #0]
 80074e8:	2b30      	cmp	r3, #48	; 0x30
 80074ea:	d10a      	bne.n	8007502 <__cvt+0x8c>
 80074ec:	2200      	movs	r2, #0
 80074ee:	2300      	movs	r3, #0
 80074f0:	4620      	mov	r0, r4
 80074f2:	4629      	mov	r1, r5
 80074f4:	f7f9 fae8 	bl	8000ac8 <__aeabi_dcmpeq>
 80074f8:	b918      	cbnz	r0, 8007502 <__cvt+0x8c>
 80074fa:	f1c6 0601 	rsb	r6, r6, #1
 80074fe:	f8ca 6000 	str.w	r6, [sl]
 8007502:	f8da 3000 	ldr.w	r3, [sl]
 8007506:	4499      	add	r9, r3
 8007508:	2200      	movs	r2, #0
 800750a:	2300      	movs	r3, #0
 800750c:	4620      	mov	r0, r4
 800750e:	4629      	mov	r1, r5
 8007510:	f7f9 fada 	bl	8000ac8 <__aeabi_dcmpeq>
 8007514:	b108      	cbz	r0, 800751a <__cvt+0xa4>
 8007516:	f8cd 900c 	str.w	r9, [sp, #12]
 800751a:	2230      	movs	r2, #48	; 0x30
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	454b      	cmp	r3, r9
 8007520:	d307      	bcc.n	8007532 <__cvt+0xbc>
 8007522:	9b03      	ldr	r3, [sp, #12]
 8007524:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007526:	1bdb      	subs	r3, r3, r7
 8007528:	4638      	mov	r0, r7
 800752a:	6013      	str	r3, [r2, #0]
 800752c:	b004      	add	sp, #16
 800752e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007532:	1c59      	adds	r1, r3, #1
 8007534:	9103      	str	r1, [sp, #12]
 8007536:	701a      	strb	r2, [r3, #0]
 8007538:	e7f0      	b.n	800751c <__cvt+0xa6>

0800753a <__exponent>:
 800753a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800753c:	4603      	mov	r3, r0
 800753e:	2900      	cmp	r1, #0
 8007540:	bfb8      	it	lt
 8007542:	4249      	neglt	r1, r1
 8007544:	f803 2b02 	strb.w	r2, [r3], #2
 8007548:	bfb4      	ite	lt
 800754a:	222d      	movlt	r2, #45	; 0x2d
 800754c:	222b      	movge	r2, #43	; 0x2b
 800754e:	2909      	cmp	r1, #9
 8007550:	7042      	strb	r2, [r0, #1]
 8007552:	dd2a      	ble.n	80075aa <__exponent+0x70>
 8007554:	f10d 0207 	add.w	r2, sp, #7
 8007558:	4617      	mov	r7, r2
 800755a:	260a      	movs	r6, #10
 800755c:	4694      	mov	ip, r2
 800755e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007562:	fb06 1415 	mls	r4, r6, r5, r1
 8007566:	3430      	adds	r4, #48	; 0x30
 8007568:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800756c:	460c      	mov	r4, r1
 800756e:	2c63      	cmp	r4, #99	; 0x63
 8007570:	f102 32ff 	add.w	r2, r2, #4294967295
 8007574:	4629      	mov	r1, r5
 8007576:	dcf1      	bgt.n	800755c <__exponent+0x22>
 8007578:	3130      	adds	r1, #48	; 0x30
 800757a:	f1ac 0402 	sub.w	r4, ip, #2
 800757e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007582:	1c41      	adds	r1, r0, #1
 8007584:	4622      	mov	r2, r4
 8007586:	42ba      	cmp	r2, r7
 8007588:	d30a      	bcc.n	80075a0 <__exponent+0x66>
 800758a:	f10d 0209 	add.w	r2, sp, #9
 800758e:	eba2 020c 	sub.w	r2, r2, ip
 8007592:	42bc      	cmp	r4, r7
 8007594:	bf88      	it	hi
 8007596:	2200      	movhi	r2, #0
 8007598:	4413      	add	r3, r2
 800759a:	1a18      	subs	r0, r3, r0
 800759c:	b003      	add	sp, #12
 800759e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075a0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80075a4:	f801 5f01 	strb.w	r5, [r1, #1]!
 80075a8:	e7ed      	b.n	8007586 <__exponent+0x4c>
 80075aa:	2330      	movs	r3, #48	; 0x30
 80075ac:	3130      	adds	r1, #48	; 0x30
 80075ae:	7083      	strb	r3, [r0, #2]
 80075b0:	70c1      	strb	r1, [r0, #3]
 80075b2:	1d03      	adds	r3, r0, #4
 80075b4:	e7f1      	b.n	800759a <__exponent+0x60>
	...

080075b8 <_printf_float>:
 80075b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075bc:	ed2d 8b02 	vpush	{d8}
 80075c0:	b08d      	sub	sp, #52	; 0x34
 80075c2:	460c      	mov	r4, r1
 80075c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80075c8:	4616      	mov	r6, r2
 80075ca:	461f      	mov	r7, r3
 80075cc:	4605      	mov	r5, r0
 80075ce:	f000 fcff 	bl	8007fd0 <_localeconv_r>
 80075d2:	f8d0 a000 	ldr.w	sl, [r0]
 80075d6:	4650      	mov	r0, sl
 80075d8:	f7f8 fe4a 	bl	8000270 <strlen>
 80075dc:	2300      	movs	r3, #0
 80075de:	930a      	str	r3, [sp, #40]	; 0x28
 80075e0:	6823      	ldr	r3, [r4, #0]
 80075e2:	9305      	str	r3, [sp, #20]
 80075e4:	f8d8 3000 	ldr.w	r3, [r8]
 80075e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80075ec:	3307      	adds	r3, #7
 80075ee:	f023 0307 	bic.w	r3, r3, #7
 80075f2:	f103 0208 	add.w	r2, r3, #8
 80075f6:	f8c8 2000 	str.w	r2, [r8]
 80075fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007602:	9307      	str	r3, [sp, #28]
 8007604:	f8cd 8018 	str.w	r8, [sp, #24]
 8007608:	ee08 0a10 	vmov	s16, r0
 800760c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007610:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007614:	4b9e      	ldr	r3, [pc, #632]	; (8007890 <_printf_float+0x2d8>)
 8007616:	f04f 32ff 	mov.w	r2, #4294967295
 800761a:	f7f9 fa87 	bl	8000b2c <__aeabi_dcmpun>
 800761e:	bb88      	cbnz	r0, 8007684 <_printf_float+0xcc>
 8007620:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007624:	4b9a      	ldr	r3, [pc, #616]	; (8007890 <_printf_float+0x2d8>)
 8007626:	f04f 32ff 	mov.w	r2, #4294967295
 800762a:	f7f9 fa61 	bl	8000af0 <__aeabi_dcmple>
 800762e:	bb48      	cbnz	r0, 8007684 <_printf_float+0xcc>
 8007630:	2200      	movs	r2, #0
 8007632:	2300      	movs	r3, #0
 8007634:	4640      	mov	r0, r8
 8007636:	4649      	mov	r1, r9
 8007638:	f7f9 fa50 	bl	8000adc <__aeabi_dcmplt>
 800763c:	b110      	cbz	r0, 8007644 <_printf_float+0x8c>
 800763e:	232d      	movs	r3, #45	; 0x2d
 8007640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007644:	4a93      	ldr	r2, [pc, #588]	; (8007894 <_printf_float+0x2dc>)
 8007646:	4b94      	ldr	r3, [pc, #592]	; (8007898 <_printf_float+0x2e0>)
 8007648:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800764c:	bf94      	ite	ls
 800764e:	4690      	movls	r8, r2
 8007650:	4698      	movhi	r8, r3
 8007652:	2303      	movs	r3, #3
 8007654:	6123      	str	r3, [r4, #16]
 8007656:	9b05      	ldr	r3, [sp, #20]
 8007658:	f023 0304 	bic.w	r3, r3, #4
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	f04f 0900 	mov.w	r9, #0
 8007662:	9700      	str	r7, [sp, #0]
 8007664:	4633      	mov	r3, r6
 8007666:	aa0b      	add	r2, sp, #44	; 0x2c
 8007668:	4621      	mov	r1, r4
 800766a:	4628      	mov	r0, r5
 800766c:	f000 f9da 	bl	8007a24 <_printf_common>
 8007670:	3001      	adds	r0, #1
 8007672:	f040 8090 	bne.w	8007796 <_printf_float+0x1de>
 8007676:	f04f 30ff 	mov.w	r0, #4294967295
 800767a:	b00d      	add	sp, #52	; 0x34
 800767c:	ecbd 8b02 	vpop	{d8}
 8007680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007684:	4642      	mov	r2, r8
 8007686:	464b      	mov	r3, r9
 8007688:	4640      	mov	r0, r8
 800768a:	4649      	mov	r1, r9
 800768c:	f7f9 fa4e 	bl	8000b2c <__aeabi_dcmpun>
 8007690:	b140      	cbz	r0, 80076a4 <_printf_float+0xec>
 8007692:	464b      	mov	r3, r9
 8007694:	2b00      	cmp	r3, #0
 8007696:	bfbc      	itt	lt
 8007698:	232d      	movlt	r3, #45	; 0x2d
 800769a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800769e:	4a7f      	ldr	r2, [pc, #508]	; (800789c <_printf_float+0x2e4>)
 80076a0:	4b7f      	ldr	r3, [pc, #508]	; (80078a0 <_printf_float+0x2e8>)
 80076a2:	e7d1      	b.n	8007648 <_printf_float+0x90>
 80076a4:	6863      	ldr	r3, [r4, #4]
 80076a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80076aa:	9206      	str	r2, [sp, #24]
 80076ac:	1c5a      	adds	r2, r3, #1
 80076ae:	d13f      	bne.n	8007730 <_printf_float+0x178>
 80076b0:	2306      	movs	r3, #6
 80076b2:	6063      	str	r3, [r4, #4]
 80076b4:	9b05      	ldr	r3, [sp, #20]
 80076b6:	6861      	ldr	r1, [r4, #4]
 80076b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80076bc:	2300      	movs	r3, #0
 80076be:	9303      	str	r3, [sp, #12]
 80076c0:	ab0a      	add	r3, sp, #40	; 0x28
 80076c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80076c6:	ab09      	add	r3, sp, #36	; 0x24
 80076c8:	ec49 8b10 	vmov	d0, r8, r9
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	6022      	str	r2, [r4, #0]
 80076d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80076d4:	4628      	mov	r0, r5
 80076d6:	f7ff fece 	bl	8007476 <__cvt>
 80076da:	9b06      	ldr	r3, [sp, #24]
 80076dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076de:	2b47      	cmp	r3, #71	; 0x47
 80076e0:	4680      	mov	r8, r0
 80076e2:	d108      	bne.n	80076f6 <_printf_float+0x13e>
 80076e4:	1cc8      	adds	r0, r1, #3
 80076e6:	db02      	blt.n	80076ee <_printf_float+0x136>
 80076e8:	6863      	ldr	r3, [r4, #4]
 80076ea:	4299      	cmp	r1, r3
 80076ec:	dd41      	ble.n	8007772 <_printf_float+0x1ba>
 80076ee:	f1ab 0302 	sub.w	r3, fp, #2
 80076f2:	fa5f fb83 	uxtb.w	fp, r3
 80076f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80076fa:	d820      	bhi.n	800773e <_printf_float+0x186>
 80076fc:	3901      	subs	r1, #1
 80076fe:	465a      	mov	r2, fp
 8007700:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007704:	9109      	str	r1, [sp, #36]	; 0x24
 8007706:	f7ff ff18 	bl	800753a <__exponent>
 800770a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800770c:	1813      	adds	r3, r2, r0
 800770e:	2a01      	cmp	r2, #1
 8007710:	4681      	mov	r9, r0
 8007712:	6123      	str	r3, [r4, #16]
 8007714:	dc02      	bgt.n	800771c <_printf_float+0x164>
 8007716:	6822      	ldr	r2, [r4, #0]
 8007718:	07d2      	lsls	r2, r2, #31
 800771a:	d501      	bpl.n	8007720 <_printf_float+0x168>
 800771c:	3301      	adds	r3, #1
 800771e:	6123      	str	r3, [r4, #16]
 8007720:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007724:	2b00      	cmp	r3, #0
 8007726:	d09c      	beq.n	8007662 <_printf_float+0xaa>
 8007728:	232d      	movs	r3, #45	; 0x2d
 800772a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800772e:	e798      	b.n	8007662 <_printf_float+0xaa>
 8007730:	9a06      	ldr	r2, [sp, #24]
 8007732:	2a47      	cmp	r2, #71	; 0x47
 8007734:	d1be      	bne.n	80076b4 <_printf_float+0xfc>
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1bc      	bne.n	80076b4 <_printf_float+0xfc>
 800773a:	2301      	movs	r3, #1
 800773c:	e7b9      	b.n	80076b2 <_printf_float+0xfa>
 800773e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007742:	d118      	bne.n	8007776 <_printf_float+0x1be>
 8007744:	2900      	cmp	r1, #0
 8007746:	6863      	ldr	r3, [r4, #4]
 8007748:	dd0b      	ble.n	8007762 <_printf_float+0x1aa>
 800774a:	6121      	str	r1, [r4, #16]
 800774c:	b913      	cbnz	r3, 8007754 <_printf_float+0x19c>
 800774e:	6822      	ldr	r2, [r4, #0]
 8007750:	07d0      	lsls	r0, r2, #31
 8007752:	d502      	bpl.n	800775a <_printf_float+0x1a2>
 8007754:	3301      	adds	r3, #1
 8007756:	440b      	add	r3, r1
 8007758:	6123      	str	r3, [r4, #16]
 800775a:	65a1      	str	r1, [r4, #88]	; 0x58
 800775c:	f04f 0900 	mov.w	r9, #0
 8007760:	e7de      	b.n	8007720 <_printf_float+0x168>
 8007762:	b913      	cbnz	r3, 800776a <_printf_float+0x1b2>
 8007764:	6822      	ldr	r2, [r4, #0]
 8007766:	07d2      	lsls	r2, r2, #31
 8007768:	d501      	bpl.n	800776e <_printf_float+0x1b6>
 800776a:	3302      	adds	r3, #2
 800776c:	e7f4      	b.n	8007758 <_printf_float+0x1a0>
 800776e:	2301      	movs	r3, #1
 8007770:	e7f2      	b.n	8007758 <_printf_float+0x1a0>
 8007772:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007778:	4299      	cmp	r1, r3
 800777a:	db05      	blt.n	8007788 <_printf_float+0x1d0>
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	6121      	str	r1, [r4, #16]
 8007780:	07d8      	lsls	r0, r3, #31
 8007782:	d5ea      	bpl.n	800775a <_printf_float+0x1a2>
 8007784:	1c4b      	adds	r3, r1, #1
 8007786:	e7e7      	b.n	8007758 <_printf_float+0x1a0>
 8007788:	2900      	cmp	r1, #0
 800778a:	bfd4      	ite	le
 800778c:	f1c1 0202 	rsble	r2, r1, #2
 8007790:	2201      	movgt	r2, #1
 8007792:	4413      	add	r3, r2
 8007794:	e7e0      	b.n	8007758 <_printf_float+0x1a0>
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	055a      	lsls	r2, r3, #21
 800779a:	d407      	bmi.n	80077ac <_printf_float+0x1f4>
 800779c:	6923      	ldr	r3, [r4, #16]
 800779e:	4642      	mov	r2, r8
 80077a0:	4631      	mov	r1, r6
 80077a2:	4628      	mov	r0, r5
 80077a4:	47b8      	blx	r7
 80077a6:	3001      	adds	r0, #1
 80077a8:	d12c      	bne.n	8007804 <_printf_float+0x24c>
 80077aa:	e764      	b.n	8007676 <_printf_float+0xbe>
 80077ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077b0:	f240 80e0 	bls.w	8007974 <_printf_float+0x3bc>
 80077b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077b8:	2200      	movs	r2, #0
 80077ba:	2300      	movs	r3, #0
 80077bc:	f7f9 f984 	bl	8000ac8 <__aeabi_dcmpeq>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d034      	beq.n	800782e <_printf_float+0x276>
 80077c4:	4a37      	ldr	r2, [pc, #220]	; (80078a4 <_printf_float+0x2ec>)
 80077c6:	2301      	movs	r3, #1
 80077c8:	4631      	mov	r1, r6
 80077ca:	4628      	mov	r0, r5
 80077cc:	47b8      	blx	r7
 80077ce:	3001      	adds	r0, #1
 80077d0:	f43f af51 	beq.w	8007676 <_printf_float+0xbe>
 80077d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077d8:	429a      	cmp	r2, r3
 80077da:	db02      	blt.n	80077e2 <_printf_float+0x22a>
 80077dc:	6823      	ldr	r3, [r4, #0]
 80077de:	07d8      	lsls	r0, r3, #31
 80077e0:	d510      	bpl.n	8007804 <_printf_float+0x24c>
 80077e2:	ee18 3a10 	vmov	r3, s16
 80077e6:	4652      	mov	r2, sl
 80077e8:	4631      	mov	r1, r6
 80077ea:	4628      	mov	r0, r5
 80077ec:	47b8      	blx	r7
 80077ee:	3001      	adds	r0, #1
 80077f0:	f43f af41 	beq.w	8007676 <_printf_float+0xbe>
 80077f4:	f04f 0800 	mov.w	r8, #0
 80077f8:	f104 091a 	add.w	r9, r4, #26
 80077fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077fe:	3b01      	subs	r3, #1
 8007800:	4543      	cmp	r3, r8
 8007802:	dc09      	bgt.n	8007818 <_printf_float+0x260>
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	079b      	lsls	r3, r3, #30
 8007808:	f100 8107 	bmi.w	8007a1a <_printf_float+0x462>
 800780c:	68e0      	ldr	r0, [r4, #12]
 800780e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007810:	4298      	cmp	r0, r3
 8007812:	bfb8      	it	lt
 8007814:	4618      	movlt	r0, r3
 8007816:	e730      	b.n	800767a <_printf_float+0xc2>
 8007818:	2301      	movs	r3, #1
 800781a:	464a      	mov	r2, r9
 800781c:	4631      	mov	r1, r6
 800781e:	4628      	mov	r0, r5
 8007820:	47b8      	blx	r7
 8007822:	3001      	adds	r0, #1
 8007824:	f43f af27 	beq.w	8007676 <_printf_float+0xbe>
 8007828:	f108 0801 	add.w	r8, r8, #1
 800782c:	e7e6      	b.n	80077fc <_printf_float+0x244>
 800782e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007830:	2b00      	cmp	r3, #0
 8007832:	dc39      	bgt.n	80078a8 <_printf_float+0x2f0>
 8007834:	4a1b      	ldr	r2, [pc, #108]	; (80078a4 <_printf_float+0x2ec>)
 8007836:	2301      	movs	r3, #1
 8007838:	4631      	mov	r1, r6
 800783a:	4628      	mov	r0, r5
 800783c:	47b8      	blx	r7
 800783e:	3001      	adds	r0, #1
 8007840:	f43f af19 	beq.w	8007676 <_printf_float+0xbe>
 8007844:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007848:	4313      	orrs	r3, r2
 800784a:	d102      	bne.n	8007852 <_printf_float+0x29a>
 800784c:	6823      	ldr	r3, [r4, #0]
 800784e:	07d9      	lsls	r1, r3, #31
 8007850:	d5d8      	bpl.n	8007804 <_printf_float+0x24c>
 8007852:	ee18 3a10 	vmov	r3, s16
 8007856:	4652      	mov	r2, sl
 8007858:	4631      	mov	r1, r6
 800785a:	4628      	mov	r0, r5
 800785c:	47b8      	blx	r7
 800785e:	3001      	adds	r0, #1
 8007860:	f43f af09 	beq.w	8007676 <_printf_float+0xbe>
 8007864:	f04f 0900 	mov.w	r9, #0
 8007868:	f104 0a1a 	add.w	sl, r4, #26
 800786c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800786e:	425b      	negs	r3, r3
 8007870:	454b      	cmp	r3, r9
 8007872:	dc01      	bgt.n	8007878 <_printf_float+0x2c0>
 8007874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007876:	e792      	b.n	800779e <_printf_float+0x1e6>
 8007878:	2301      	movs	r3, #1
 800787a:	4652      	mov	r2, sl
 800787c:	4631      	mov	r1, r6
 800787e:	4628      	mov	r0, r5
 8007880:	47b8      	blx	r7
 8007882:	3001      	adds	r0, #1
 8007884:	f43f aef7 	beq.w	8007676 <_printf_float+0xbe>
 8007888:	f109 0901 	add.w	r9, r9, #1
 800788c:	e7ee      	b.n	800786c <_printf_float+0x2b4>
 800788e:	bf00      	nop
 8007890:	7fefffff 	.word	0x7fefffff
 8007894:	0800a2c4 	.word	0x0800a2c4
 8007898:	0800a2c8 	.word	0x0800a2c8
 800789c:	0800a2cc 	.word	0x0800a2cc
 80078a0:	0800a2d0 	.word	0x0800a2d0
 80078a4:	0800a2d4 	.word	0x0800a2d4
 80078a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078ac:	429a      	cmp	r2, r3
 80078ae:	bfa8      	it	ge
 80078b0:	461a      	movge	r2, r3
 80078b2:	2a00      	cmp	r2, #0
 80078b4:	4691      	mov	r9, r2
 80078b6:	dc37      	bgt.n	8007928 <_printf_float+0x370>
 80078b8:	f04f 0b00 	mov.w	fp, #0
 80078bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078c0:	f104 021a 	add.w	r2, r4, #26
 80078c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078c6:	9305      	str	r3, [sp, #20]
 80078c8:	eba3 0309 	sub.w	r3, r3, r9
 80078cc:	455b      	cmp	r3, fp
 80078ce:	dc33      	bgt.n	8007938 <_printf_float+0x380>
 80078d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078d4:	429a      	cmp	r2, r3
 80078d6:	db3b      	blt.n	8007950 <_printf_float+0x398>
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	07da      	lsls	r2, r3, #31
 80078dc:	d438      	bmi.n	8007950 <_printf_float+0x398>
 80078de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80078e2:	eba2 0903 	sub.w	r9, r2, r3
 80078e6:	9b05      	ldr	r3, [sp, #20]
 80078e8:	1ad2      	subs	r2, r2, r3
 80078ea:	4591      	cmp	r9, r2
 80078ec:	bfa8      	it	ge
 80078ee:	4691      	movge	r9, r2
 80078f0:	f1b9 0f00 	cmp.w	r9, #0
 80078f4:	dc35      	bgt.n	8007962 <_printf_float+0x3aa>
 80078f6:	f04f 0800 	mov.w	r8, #0
 80078fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078fe:	f104 0a1a 	add.w	sl, r4, #26
 8007902:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007906:	1a9b      	subs	r3, r3, r2
 8007908:	eba3 0309 	sub.w	r3, r3, r9
 800790c:	4543      	cmp	r3, r8
 800790e:	f77f af79 	ble.w	8007804 <_printf_float+0x24c>
 8007912:	2301      	movs	r3, #1
 8007914:	4652      	mov	r2, sl
 8007916:	4631      	mov	r1, r6
 8007918:	4628      	mov	r0, r5
 800791a:	47b8      	blx	r7
 800791c:	3001      	adds	r0, #1
 800791e:	f43f aeaa 	beq.w	8007676 <_printf_float+0xbe>
 8007922:	f108 0801 	add.w	r8, r8, #1
 8007926:	e7ec      	b.n	8007902 <_printf_float+0x34a>
 8007928:	4613      	mov	r3, r2
 800792a:	4631      	mov	r1, r6
 800792c:	4642      	mov	r2, r8
 800792e:	4628      	mov	r0, r5
 8007930:	47b8      	blx	r7
 8007932:	3001      	adds	r0, #1
 8007934:	d1c0      	bne.n	80078b8 <_printf_float+0x300>
 8007936:	e69e      	b.n	8007676 <_printf_float+0xbe>
 8007938:	2301      	movs	r3, #1
 800793a:	4631      	mov	r1, r6
 800793c:	4628      	mov	r0, r5
 800793e:	9205      	str	r2, [sp, #20]
 8007940:	47b8      	blx	r7
 8007942:	3001      	adds	r0, #1
 8007944:	f43f ae97 	beq.w	8007676 <_printf_float+0xbe>
 8007948:	9a05      	ldr	r2, [sp, #20]
 800794a:	f10b 0b01 	add.w	fp, fp, #1
 800794e:	e7b9      	b.n	80078c4 <_printf_float+0x30c>
 8007950:	ee18 3a10 	vmov	r3, s16
 8007954:	4652      	mov	r2, sl
 8007956:	4631      	mov	r1, r6
 8007958:	4628      	mov	r0, r5
 800795a:	47b8      	blx	r7
 800795c:	3001      	adds	r0, #1
 800795e:	d1be      	bne.n	80078de <_printf_float+0x326>
 8007960:	e689      	b.n	8007676 <_printf_float+0xbe>
 8007962:	9a05      	ldr	r2, [sp, #20]
 8007964:	464b      	mov	r3, r9
 8007966:	4442      	add	r2, r8
 8007968:	4631      	mov	r1, r6
 800796a:	4628      	mov	r0, r5
 800796c:	47b8      	blx	r7
 800796e:	3001      	adds	r0, #1
 8007970:	d1c1      	bne.n	80078f6 <_printf_float+0x33e>
 8007972:	e680      	b.n	8007676 <_printf_float+0xbe>
 8007974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007976:	2a01      	cmp	r2, #1
 8007978:	dc01      	bgt.n	800797e <_printf_float+0x3c6>
 800797a:	07db      	lsls	r3, r3, #31
 800797c:	d53a      	bpl.n	80079f4 <_printf_float+0x43c>
 800797e:	2301      	movs	r3, #1
 8007980:	4642      	mov	r2, r8
 8007982:	4631      	mov	r1, r6
 8007984:	4628      	mov	r0, r5
 8007986:	47b8      	blx	r7
 8007988:	3001      	adds	r0, #1
 800798a:	f43f ae74 	beq.w	8007676 <_printf_float+0xbe>
 800798e:	ee18 3a10 	vmov	r3, s16
 8007992:	4652      	mov	r2, sl
 8007994:	4631      	mov	r1, r6
 8007996:	4628      	mov	r0, r5
 8007998:	47b8      	blx	r7
 800799a:	3001      	adds	r0, #1
 800799c:	f43f ae6b 	beq.w	8007676 <_printf_float+0xbe>
 80079a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079a4:	2200      	movs	r2, #0
 80079a6:	2300      	movs	r3, #0
 80079a8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80079ac:	f7f9 f88c 	bl	8000ac8 <__aeabi_dcmpeq>
 80079b0:	b9d8      	cbnz	r0, 80079ea <_printf_float+0x432>
 80079b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80079b6:	f108 0201 	add.w	r2, r8, #1
 80079ba:	4631      	mov	r1, r6
 80079bc:	4628      	mov	r0, r5
 80079be:	47b8      	blx	r7
 80079c0:	3001      	adds	r0, #1
 80079c2:	d10e      	bne.n	80079e2 <_printf_float+0x42a>
 80079c4:	e657      	b.n	8007676 <_printf_float+0xbe>
 80079c6:	2301      	movs	r3, #1
 80079c8:	4652      	mov	r2, sl
 80079ca:	4631      	mov	r1, r6
 80079cc:	4628      	mov	r0, r5
 80079ce:	47b8      	blx	r7
 80079d0:	3001      	adds	r0, #1
 80079d2:	f43f ae50 	beq.w	8007676 <_printf_float+0xbe>
 80079d6:	f108 0801 	add.w	r8, r8, #1
 80079da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079dc:	3b01      	subs	r3, #1
 80079de:	4543      	cmp	r3, r8
 80079e0:	dcf1      	bgt.n	80079c6 <_printf_float+0x40e>
 80079e2:	464b      	mov	r3, r9
 80079e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80079e8:	e6da      	b.n	80077a0 <_printf_float+0x1e8>
 80079ea:	f04f 0800 	mov.w	r8, #0
 80079ee:	f104 0a1a 	add.w	sl, r4, #26
 80079f2:	e7f2      	b.n	80079da <_printf_float+0x422>
 80079f4:	2301      	movs	r3, #1
 80079f6:	4642      	mov	r2, r8
 80079f8:	e7df      	b.n	80079ba <_printf_float+0x402>
 80079fa:	2301      	movs	r3, #1
 80079fc:	464a      	mov	r2, r9
 80079fe:	4631      	mov	r1, r6
 8007a00:	4628      	mov	r0, r5
 8007a02:	47b8      	blx	r7
 8007a04:	3001      	adds	r0, #1
 8007a06:	f43f ae36 	beq.w	8007676 <_printf_float+0xbe>
 8007a0a:	f108 0801 	add.w	r8, r8, #1
 8007a0e:	68e3      	ldr	r3, [r4, #12]
 8007a10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a12:	1a5b      	subs	r3, r3, r1
 8007a14:	4543      	cmp	r3, r8
 8007a16:	dcf0      	bgt.n	80079fa <_printf_float+0x442>
 8007a18:	e6f8      	b.n	800780c <_printf_float+0x254>
 8007a1a:	f04f 0800 	mov.w	r8, #0
 8007a1e:	f104 0919 	add.w	r9, r4, #25
 8007a22:	e7f4      	b.n	8007a0e <_printf_float+0x456>

08007a24 <_printf_common>:
 8007a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a28:	4616      	mov	r6, r2
 8007a2a:	4699      	mov	r9, r3
 8007a2c:	688a      	ldr	r2, [r1, #8]
 8007a2e:	690b      	ldr	r3, [r1, #16]
 8007a30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a34:	4293      	cmp	r3, r2
 8007a36:	bfb8      	it	lt
 8007a38:	4613      	movlt	r3, r2
 8007a3a:	6033      	str	r3, [r6, #0]
 8007a3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a40:	4607      	mov	r7, r0
 8007a42:	460c      	mov	r4, r1
 8007a44:	b10a      	cbz	r2, 8007a4a <_printf_common+0x26>
 8007a46:	3301      	adds	r3, #1
 8007a48:	6033      	str	r3, [r6, #0]
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	0699      	lsls	r1, r3, #26
 8007a4e:	bf42      	ittt	mi
 8007a50:	6833      	ldrmi	r3, [r6, #0]
 8007a52:	3302      	addmi	r3, #2
 8007a54:	6033      	strmi	r3, [r6, #0]
 8007a56:	6825      	ldr	r5, [r4, #0]
 8007a58:	f015 0506 	ands.w	r5, r5, #6
 8007a5c:	d106      	bne.n	8007a6c <_printf_common+0x48>
 8007a5e:	f104 0a19 	add.w	sl, r4, #25
 8007a62:	68e3      	ldr	r3, [r4, #12]
 8007a64:	6832      	ldr	r2, [r6, #0]
 8007a66:	1a9b      	subs	r3, r3, r2
 8007a68:	42ab      	cmp	r3, r5
 8007a6a:	dc26      	bgt.n	8007aba <_printf_common+0x96>
 8007a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a70:	1e13      	subs	r3, r2, #0
 8007a72:	6822      	ldr	r2, [r4, #0]
 8007a74:	bf18      	it	ne
 8007a76:	2301      	movne	r3, #1
 8007a78:	0692      	lsls	r2, r2, #26
 8007a7a:	d42b      	bmi.n	8007ad4 <_printf_common+0xb0>
 8007a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a80:	4649      	mov	r1, r9
 8007a82:	4638      	mov	r0, r7
 8007a84:	47c0      	blx	r8
 8007a86:	3001      	adds	r0, #1
 8007a88:	d01e      	beq.n	8007ac8 <_printf_common+0xa4>
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	6922      	ldr	r2, [r4, #16]
 8007a8e:	f003 0306 	and.w	r3, r3, #6
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	bf02      	ittt	eq
 8007a96:	68e5      	ldreq	r5, [r4, #12]
 8007a98:	6833      	ldreq	r3, [r6, #0]
 8007a9a:	1aed      	subeq	r5, r5, r3
 8007a9c:	68a3      	ldr	r3, [r4, #8]
 8007a9e:	bf0c      	ite	eq
 8007aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007aa4:	2500      	movne	r5, #0
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	bfc4      	itt	gt
 8007aaa:	1a9b      	subgt	r3, r3, r2
 8007aac:	18ed      	addgt	r5, r5, r3
 8007aae:	2600      	movs	r6, #0
 8007ab0:	341a      	adds	r4, #26
 8007ab2:	42b5      	cmp	r5, r6
 8007ab4:	d11a      	bne.n	8007aec <_printf_common+0xc8>
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	e008      	b.n	8007acc <_printf_common+0xa8>
 8007aba:	2301      	movs	r3, #1
 8007abc:	4652      	mov	r2, sl
 8007abe:	4649      	mov	r1, r9
 8007ac0:	4638      	mov	r0, r7
 8007ac2:	47c0      	blx	r8
 8007ac4:	3001      	adds	r0, #1
 8007ac6:	d103      	bne.n	8007ad0 <_printf_common+0xac>
 8007ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8007acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad0:	3501      	adds	r5, #1
 8007ad2:	e7c6      	b.n	8007a62 <_printf_common+0x3e>
 8007ad4:	18e1      	adds	r1, r4, r3
 8007ad6:	1c5a      	adds	r2, r3, #1
 8007ad8:	2030      	movs	r0, #48	; 0x30
 8007ada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ade:	4422      	add	r2, r4
 8007ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ae8:	3302      	adds	r3, #2
 8007aea:	e7c7      	b.n	8007a7c <_printf_common+0x58>
 8007aec:	2301      	movs	r3, #1
 8007aee:	4622      	mov	r2, r4
 8007af0:	4649      	mov	r1, r9
 8007af2:	4638      	mov	r0, r7
 8007af4:	47c0      	blx	r8
 8007af6:	3001      	adds	r0, #1
 8007af8:	d0e6      	beq.n	8007ac8 <_printf_common+0xa4>
 8007afa:	3601      	adds	r6, #1
 8007afc:	e7d9      	b.n	8007ab2 <_printf_common+0x8e>
	...

08007b00 <_printf_i>:
 8007b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b04:	7e0f      	ldrb	r7, [r1, #24]
 8007b06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b08:	2f78      	cmp	r7, #120	; 0x78
 8007b0a:	4691      	mov	r9, r2
 8007b0c:	4680      	mov	r8, r0
 8007b0e:	460c      	mov	r4, r1
 8007b10:	469a      	mov	sl, r3
 8007b12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b16:	d807      	bhi.n	8007b28 <_printf_i+0x28>
 8007b18:	2f62      	cmp	r7, #98	; 0x62
 8007b1a:	d80a      	bhi.n	8007b32 <_printf_i+0x32>
 8007b1c:	2f00      	cmp	r7, #0
 8007b1e:	f000 80d4 	beq.w	8007cca <_printf_i+0x1ca>
 8007b22:	2f58      	cmp	r7, #88	; 0x58
 8007b24:	f000 80c0 	beq.w	8007ca8 <_printf_i+0x1a8>
 8007b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b30:	e03a      	b.n	8007ba8 <_printf_i+0xa8>
 8007b32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b36:	2b15      	cmp	r3, #21
 8007b38:	d8f6      	bhi.n	8007b28 <_printf_i+0x28>
 8007b3a:	a101      	add	r1, pc, #4	; (adr r1, 8007b40 <_printf_i+0x40>)
 8007b3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b40:	08007b99 	.word	0x08007b99
 8007b44:	08007bad 	.word	0x08007bad
 8007b48:	08007b29 	.word	0x08007b29
 8007b4c:	08007b29 	.word	0x08007b29
 8007b50:	08007b29 	.word	0x08007b29
 8007b54:	08007b29 	.word	0x08007b29
 8007b58:	08007bad 	.word	0x08007bad
 8007b5c:	08007b29 	.word	0x08007b29
 8007b60:	08007b29 	.word	0x08007b29
 8007b64:	08007b29 	.word	0x08007b29
 8007b68:	08007b29 	.word	0x08007b29
 8007b6c:	08007cb1 	.word	0x08007cb1
 8007b70:	08007bd9 	.word	0x08007bd9
 8007b74:	08007c6b 	.word	0x08007c6b
 8007b78:	08007b29 	.word	0x08007b29
 8007b7c:	08007b29 	.word	0x08007b29
 8007b80:	08007cd3 	.word	0x08007cd3
 8007b84:	08007b29 	.word	0x08007b29
 8007b88:	08007bd9 	.word	0x08007bd9
 8007b8c:	08007b29 	.word	0x08007b29
 8007b90:	08007b29 	.word	0x08007b29
 8007b94:	08007c73 	.word	0x08007c73
 8007b98:	682b      	ldr	r3, [r5, #0]
 8007b9a:	1d1a      	adds	r2, r3, #4
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	602a      	str	r2, [r5, #0]
 8007ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e09f      	b.n	8007cec <_printf_i+0x1ec>
 8007bac:	6820      	ldr	r0, [r4, #0]
 8007bae:	682b      	ldr	r3, [r5, #0]
 8007bb0:	0607      	lsls	r7, r0, #24
 8007bb2:	f103 0104 	add.w	r1, r3, #4
 8007bb6:	6029      	str	r1, [r5, #0]
 8007bb8:	d501      	bpl.n	8007bbe <_printf_i+0xbe>
 8007bba:	681e      	ldr	r6, [r3, #0]
 8007bbc:	e003      	b.n	8007bc6 <_printf_i+0xc6>
 8007bbe:	0646      	lsls	r6, r0, #25
 8007bc0:	d5fb      	bpl.n	8007bba <_printf_i+0xba>
 8007bc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007bc6:	2e00      	cmp	r6, #0
 8007bc8:	da03      	bge.n	8007bd2 <_printf_i+0xd2>
 8007bca:	232d      	movs	r3, #45	; 0x2d
 8007bcc:	4276      	negs	r6, r6
 8007bce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bd2:	485a      	ldr	r0, [pc, #360]	; (8007d3c <_printf_i+0x23c>)
 8007bd4:	230a      	movs	r3, #10
 8007bd6:	e012      	b.n	8007bfe <_printf_i+0xfe>
 8007bd8:	682b      	ldr	r3, [r5, #0]
 8007bda:	6820      	ldr	r0, [r4, #0]
 8007bdc:	1d19      	adds	r1, r3, #4
 8007bde:	6029      	str	r1, [r5, #0]
 8007be0:	0605      	lsls	r5, r0, #24
 8007be2:	d501      	bpl.n	8007be8 <_printf_i+0xe8>
 8007be4:	681e      	ldr	r6, [r3, #0]
 8007be6:	e002      	b.n	8007bee <_printf_i+0xee>
 8007be8:	0641      	lsls	r1, r0, #25
 8007bea:	d5fb      	bpl.n	8007be4 <_printf_i+0xe4>
 8007bec:	881e      	ldrh	r6, [r3, #0]
 8007bee:	4853      	ldr	r0, [pc, #332]	; (8007d3c <_printf_i+0x23c>)
 8007bf0:	2f6f      	cmp	r7, #111	; 0x6f
 8007bf2:	bf0c      	ite	eq
 8007bf4:	2308      	moveq	r3, #8
 8007bf6:	230a      	movne	r3, #10
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bfe:	6865      	ldr	r5, [r4, #4]
 8007c00:	60a5      	str	r5, [r4, #8]
 8007c02:	2d00      	cmp	r5, #0
 8007c04:	bfa2      	ittt	ge
 8007c06:	6821      	ldrge	r1, [r4, #0]
 8007c08:	f021 0104 	bicge.w	r1, r1, #4
 8007c0c:	6021      	strge	r1, [r4, #0]
 8007c0e:	b90e      	cbnz	r6, 8007c14 <_printf_i+0x114>
 8007c10:	2d00      	cmp	r5, #0
 8007c12:	d04b      	beq.n	8007cac <_printf_i+0x1ac>
 8007c14:	4615      	mov	r5, r2
 8007c16:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c1a:	fb03 6711 	mls	r7, r3, r1, r6
 8007c1e:	5dc7      	ldrb	r7, [r0, r7]
 8007c20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c24:	4637      	mov	r7, r6
 8007c26:	42bb      	cmp	r3, r7
 8007c28:	460e      	mov	r6, r1
 8007c2a:	d9f4      	bls.n	8007c16 <_printf_i+0x116>
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	d10b      	bne.n	8007c48 <_printf_i+0x148>
 8007c30:	6823      	ldr	r3, [r4, #0]
 8007c32:	07de      	lsls	r6, r3, #31
 8007c34:	d508      	bpl.n	8007c48 <_printf_i+0x148>
 8007c36:	6923      	ldr	r3, [r4, #16]
 8007c38:	6861      	ldr	r1, [r4, #4]
 8007c3a:	4299      	cmp	r1, r3
 8007c3c:	bfde      	ittt	le
 8007c3e:	2330      	movle	r3, #48	; 0x30
 8007c40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c48:	1b52      	subs	r2, r2, r5
 8007c4a:	6122      	str	r2, [r4, #16]
 8007c4c:	f8cd a000 	str.w	sl, [sp]
 8007c50:	464b      	mov	r3, r9
 8007c52:	aa03      	add	r2, sp, #12
 8007c54:	4621      	mov	r1, r4
 8007c56:	4640      	mov	r0, r8
 8007c58:	f7ff fee4 	bl	8007a24 <_printf_common>
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	d14a      	bne.n	8007cf6 <_printf_i+0x1f6>
 8007c60:	f04f 30ff 	mov.w	r0, #4294967295
 8007c64:	b004      	add	sp, #16
 8007c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c6a:	6823      	ldr	r3, [r4, #0]
 8007c6c:	f043 0320 	orr.w	r3, r3, #32
 8007c70:	6023      	str	r3, [r4, #0]
 8007c72:	4833      	ldr	r0, [pc, #204]	; (8007d40 <_printf_i+0x240>)
 8007c74:	2778      	movs	r7, #120	; 0x78
 8007c76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	6829      	ldr	r1, [r5, #0]
 8007c7e:	061f      	lsls	r7, r3, #24
 8007c80:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c84:	d402      	bmi.n	8007c8c <_printf_i+0x18c>
 8007c86:	065f      	lsls	r7, r3, #25
 8007c88:	bf48      	it	mi
 8007c8a:	b2b6      	uxthmi	r6, r6
 8007c8c:	07df      	lsls	r7, r3, #31
 8007c8e:	bf48      	it	mi
 8007c90:	f043 0320 	orrmi.w	r3, r3, #32
 8007c94:	6029      	str	r1, [r5, #0]
 8007c96:	bf48      	it	mi
 8007c98:	6023      	strmi	r3, [r4, #0]
 8007c9a:	b91e      	cbnz	r6, 8007ca4 <_printf_i+0x1a4>
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	f023 0320 	bic.w	r3, r3, #32
 8007ca2:	6023      	str	r3, [r4, #0]
 8007ca4:	2310      	movs	r3, #16
 8007ca6:	e7a7      	b.n	8007bf8 <_printf_i+0xf8>
 8007ca8:	4824      	ldr	r0, [pc, #144]	; (8007d3c <_printf_i+0x23c>)
 8007caa:	e7e4      	b.n	8007c76 <_printf_i+0x176>
 8007cac:	4615      	mov	r5, r2
 8007cae:	e7bd      	b.n	8007c2c <_printf_i+0x12c>
 8007cb0:	682b      	ldr	r3, [r5, #0]
 8007cb2:	6826      	ldr	r6, [r4, #0]
 8007cb4:	6961      	ldr	r1, [r4, #20]
 8007cb6:	1d18      	adds	r0, r3, #4
 8007cb8:	6028      	str	r0, [r5, #0]
 8007cba:	0635      	lsls	r5, r6, #24
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	d501      	bpl.n	8007cc4 <_printf_i+0x1c4>
 8007cc0:	6019      	str	r1, [r3, #0]
 8007cc2:	e002      	b.n	8007cca <_printf_i+0x1ca>
 8007cc4:	0670      	lsls	r0, r6, #25
 8007cc6:	d5fb      	bpl.n	8007cc0 <_printf_i+0x1c0>
 8007cc8:	8019      	strh	r1, [r3, #0]
 8007cca:	2300      	movs	r3, #0
 8007ccc:	6123      	str	r3, [r4, #16]
 8007cce:	4615      	mov	r5, r2
 8007cd0:	e7bc      	b.n	8007c4c <_printf_i+0x14c>
 8007cd2:	682b      	ldr	r3, [r5, #0]
 8007cd4:	1d1a      	adds	r2, r3, #4
 8007cd6:	602a      	str	r2, [r5, #0]
 8007cd8:	681d      	ldr	r5, [r3, #0]
 8007cda:	6862      	ldr	r2, [r4, #4]
 8007cdc:	2100      	movs	r1, #0
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f7f8 fa76 	bl	80001d0 <memchr>
 8007ce4:	b108      	cbz	r0, 8007cea <_printf_i+0x1ea>
 8007ce6:	1b40      	subs	r0, r0, r5
 8007ce8:	6060      	str	r0, [r4, #4]
 8007cea:	6863      	ldr	r3, [r4, #4]
 8007cec:	6123      	str	r3, [r4, #16]
 8007cee:	2300      	movs	r3, #0
 8007cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cf4:	e7aa      	b.n	8007c4c <_printf_i+0x14c>
 8007cf6:	6923      	ldr	r3, [r4, #16]
 8007cf8:	462a      	mov	r2, r5
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	4640      	mov	r0, r8
 8007cfe:	47d0      	blx	sl
 8007d00:	3001      	adds	r0, #1
 8007d02:	d0ad      	beq.n	8007c60 <_printf_i+0x160>
 8007d04:	6823      	ldr	r3, [r4, #0]
 8007d06:	079b      	lsls	r3, r3, #30
 8007d08:	d413      	bmi.n	8007d32 <_printf_i+0x232>
 8007d0a:	68e0      	ldr	r0, [r4, #12]
 8007d0c:	9b03      	ldr	r3, [sp, #12]
 8007d0e:	4298      	cmp	r0, r3
 8007d10:	bfb8      	it	lt
 8007d12:	4618      	movlt	r0, r3
 8007d14:	e7a6      	b.n	8007c64 <_printf_i+0x164>
 8007d16:	2301      	movs	r3, #1
 8007d18:	4632      	mov	r2, r6
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	4640      	mov	r0, r8
 8007d1e:	47d0      	blx	sl
 8007d20:	3001      	adds	r0, #1
 8007d22:	d09d      	beq.n	8007c60 <_printf_i+0x160>
 8007d24:	3501      	adds	r5, #1
 8007d26:	68e3      	ldr	r3, [r4, #12]
 8007d28:	9903      	ldr	r1, [sp, #12]
 8007d2a:	1a5b      	subs	r3, r3, r1
 8007d2c:	42ab      	cmp	r3, r5
 8007d2e:	dcf2      	bgt.n	8007d16 <_printf_i+0x216>
 8007d30:	e7eb      	b.n	8007d0a <_printf_i+0x20a>
 8007d32:	2500      	movs	r5, #0
 8007d34:	f104 0619 	add.w	r6, r4, #25
 8007d38:	e7f5      	b.n	8007d26 <_printf_i+0x226>
 8007d3a:	bf00      	nop
 8007d3c:	0800a2d6 	.word	0x0800a2d6
 8007d40:	0800a2e7 	.word	0x0800a2e7

08007d44 <std>:
 8007d44:	2300      	movs	r3, #0
 8007d46:	b510      	push	{r4, lr}
 8007d48:	4604      	mov	r4, r0
 8007d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8007d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d52:	6083      	str	r3, [r0, #8]
 8007d54:	8181      	strh	r1, [r0, #12]
 8007d56:	6643      	str	r3, [r0, #100]	; 0x64
 8007d58:	81c2      	strh	r2, [r0, #14]
 8007d5a:	6183      	str	r3, [r0, #24]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	2208      	movs	r2, #8
 8007d60:	305c      	adds	r0, #92	; 0x5c
 8007d62:	f000 f92d 	bl	8007fc0 <memset>
 8007d66:	4b0d      	ldr	r3, [pc, #52]	; (8007d9c <std+0x58>)
 8007d68:	6263      	str	r3, [r4, #36]	; 0x24
 8007d6a:	4b0d      	ldr	r3, [pc, #52]	; (8007da0 <std+0x5c>)
 8007d6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d6e:	4b0d      	ldr	r3, [pc, #52]	; (8007da4 <std+0x60>)
 8007d70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d72:	4b0d      	ldr	r3, [pc, #52]	; (8007da8 <std+0x64>)
 8007d74:	6323      	str	r3, [r4, #48]	; 0x30
 8007d76:	4b0d      	ldr	r3, [pc, #52]	; (8007dac <std+0x68>)
 8007d78:	6224      	str	r4, [r4, #32]
 8007d7a:	429c      	cmp	r4, r3
 8007d7c:	d006      	beq.n	8007d8c <std+0x48>
 8007d7e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007d82:	4294      	cmp	r4, r2
 8007d84:	d002      	beq.n	8007d8c <std+0x48>
 8007d86:	33d0      	adds	r3, #208	; 0xd0
 8007d88:	429c      	cmp	r4, r3
 8007d8a:	d105      	bne.n	8007d98 <std+0x54>
 8007d8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d94:	f000 b990 	b.w	80080b8 <__retarget_lock_init_recursive>
 8007d98:	bd10      	pop	{r4, pc}
 8007d9a:	bf00      	nop
 8007d9c:	08007ec9 	.word	0x08007ec9
 8007da0:	08007eeb 	.word	0x08007eeb
 8007da4:	08007f23 	.word	0x08007f23
 8007da8:	08007f47 	.word	0x08007f47
 8007dac:	20000604 	.word	0x20000604

08007db0 <stdio_exit_handler>:
 8007db0:	4a02      	ldr	r2, [pc, #8]	; (8007dbc <stdio_exit_handler+0xc>)
 8007db2:	4903      	ldr	r1, [pc, #12]	; (8007dc0 <stdio_exit_handler+0x10>)
 8007db4:	4803      	ldr	r0, [pc, #12]	; (8007dc4 <stdio_exit_handler+0x14>)
 8007db6:	f000 b869 	b.w	8007e8c <_fwalk_sglue>
 8007dba:	bf00      	nop
 8007dbc:	2000002c 	.word	0x2000002c
 8007dc0:	08009a69 	.word	0x08009a69
 8007dc4:	20000038 	.word	0x20000038

08007dc8 <cleanup_stdio>:
 8007dc8:	6841      	ldr	r1, [r0, #4]
 8007dca:	4b0c      	ldr	r3, [pc, #48]	; (8007dfc <cleanup_stdio+0x34>)
 8007dcc:	4299      	cmp	r1, r3
 8007dce:	b510      	push	{r4, lr}
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	d001      	beq.n	8007dd8 <cleanup_stdio+0x10>
 8007dd4:	f001 fe48 	bl	8009a68 <_fflush_r>
 8007dd8:	68a1      	ldr	r1, [r4, #8]
 8007dda:	4b09      	ldr	r3, [pc, #36]	; (8007e00 <cleanup_stdio+0x38>)
 8007ddc:	4299      	cmp	r1, r3
 8007dde:	d002      	beq.n	8007de6 <cleanup_stdio+0x1e>
 8007de0:	4620      	mov	r0, r4
 8007de2:	f001 fe41 	bl	8009a68 <_fflush_r>
 8007de6:	68e1      	ldr	r1, [r4, #12]
 8007de8:	4b06      	ldr	r3, [pc, #24]	; (8007e04 <cleanup_stdio+0x3c>)
 8007dea:	4299      	cmp	r1, r3
 8007dec:	d004      	beq.n	8007df8 <cleanup_stdio+0x30>
 8007dee:	4620      	mov	r0, r4
 8007df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007df4:	f001 be38 	b.w	8009a68 <_fflush_r>
 8007df8:	bd10      	pop	{r4, pc}
 8007dfa:	bf00      	nop
 8007dfc:	20000604 	.word	0x20000604
 8007e00:	2000066c 	.word	0x2000066c
 8007e04:	200006d4 	.word	0x200006d4

08007e08 <global_stdio_init.part.0>:
 8007e08:	b510      	push	{r4, lr}
 8007e0a:	4b0b      	ldr	r3, [pc, #44]	; (8007e38 <global_stdio_init.part.0+0x30>)
 8007e0c:	4c0b      	ldr	r4, [pc, #44]	; (8007e3c <global_stdio_init.part.0+0x34>)
 8007e0e:	4a0c      	ldr	r2, [pc, #48]	; (8007e40 <global_stdio_init.part.0+0x38>)
 8007e10:	601a      	str	r2, [r3, #0]
 8007e12:	4620      	mov	r0, r4
 8007e14:	2200      	movs	r2, #0
 8007e16:	2104      	movs	r1, #4
 8007e18:	f7ff ff94 	bl	8007d44 <std>
 8007e1c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007e20:	2201      	movs	r2, #1
 8007e22:	2109      	movs	r1, #9
 8007e24:	f7ff ff8e 	bl	8007d44 <std>
 8007e28:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e32:	2112      	movs	r1, #18
 8007e34:	f7ff bf86 	b.w	8007d44 <std>
 8007e38:	2000073c 	.word	0x2000073c
 8007e3c:	20000604 	.word	0x20000604
 8007e40:	08007db1 	.word	0x08007db1

08007e44 <__sfp_lock_acquire>:
 8007e44:	4801      	ldr	r0, [pc, #4]	; (8007e4c <__sfp_lock_acquire+0x8>)
 8007e46:	f000 b938 	b.w	80080ba <__retarget_lock_acquire_recursive>
 8007e4a:	bf00      	nop
 8007e4c:	20000745 	.word	0x20000745

08007e50 <__sfp_lock_release>:
 8007e50:	4801      	ldr	r0, [pc, #4]	; (8007e58 <__sfp_lock_release+0x8>)
 8007e52:	f000 b933 	b.w	80080bc <__retarget_lock_release_recursive>
 8007e56:	bf00      	nop
 8007e58:	20000745 	.word	0x20000745

08007e5c <__sinit>:
 8007e5c:	b510      	push	{r4, lr}
 8007e5e:	4604      	mov	r4, r0
 8007e60:	f7ff fff0 	bl	8007e44 <__sfp_lock_acquire>
 8007e64:	6a23      	ldr	r3, [r4, #32]
 8007e66:	b11b      	cbz	r3, 8007e70 <__sinit+0x14>
 8007e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e6c:	f7ff bff0 	b.w	8007e50 <__sfp_lock_release>
 8007e70:	4b04      	ldr	r3, [pc, #16]	; (8007e84 <__sinit+0x28>)
 8007e72:	6223      	str	r3, [r4, #32]
 8007e74:	4b04      	ldr	r3, [pc, #16]	; (8007e88 <__sinit+0x2c>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1f5      	bne.n	8007e68 <__sinit+0xc>
 8007e7c:	f7ff ffc4 	bl	8007e08 <global_stdio_init.part.0>
 8007e80:	e7f2      	b.n	8007e68 <__sinit+0xc>
 8007e82:	bf00      	nop
 8007e84:	08007dc9 	.word	0x08007dc9
 8007e88:	2000073c 	.word	0x2000073c

08007e8c <_fwalk_sglue>:
 8007e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e90:	4607      	mov	r7, r0
 8007e92:	4688      	mov	r8, r1
 8007e94:	4614      	mov	r4, r2
 8007e96:	2600      	movs	r6, #0
 8007e98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e9c:	f1b9 0901 	subs.w	r9, r9, #1
 8007ea0:	d505      	bpl.n	8007eae <_fwalk_sglue+0x22>
 8007ea2:	6824      	ldr	r4, [r4, #0]
 8007ea4:	2c00      	cmp	r4, #0
 8007ea6:	d1f7      	bne.n	8007e98 <_fwalk_sglue+0xc>
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eae:	89ab      	ldrh	r3, [r5, #12]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d907      	bls.n	8007ec4 <_fwalk_sglue+0x38>
 8007eb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	d003      	beq.n	8007ec4 <_fwalk_sglue+0x38>
 8007ebc:	4629      	mov	r1, r5
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	47c0      	blx	r8
 8007ec2:	4306      	orrs	r6, r0
 8007ec4:	3568      	adds	r5, #104	; 0x68
 8007ec6:	e7e9      	b.n	8007e9c <_fwalk_sglue+0x10>

08007ec8 <__sread>:
 8007ec8:	b510      	push	{r4, lr}
 8007eca:	460c      	mov	r4, r1
 8007ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed0:	f000 f8a4 	bl	800801c <_read_r>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	bfab      	itete	ge
 8007ed8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007eda:	89a3      	ldrhlt	r3, [r4, #12]
 8007edc:	181b      	addge	r3, r3, r0
 8007ede:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ee2:	bfac      	ite	ge
 8007ee4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ee6:	81a3      	strhlt	r3, [r4, #12]
 8007ee8:	bd10      	pop	{r4, pc}

08007eea <__swrite>:
 8007eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eee:	461f      	mov	r7, r3
 8007ef0:	898b      	ldrh	r3, [r1, #12]
 8007ef2:	05db      	lsls	r3, r3, #23
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	4616      	mov	r6, r2
 8007efa:	d505      	bpl.n	8007f08 <__swrite+0x1e>
 8007efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f00:	2302      	movs	r3, #2
 8007f02:	2200      	movs	r2, #0
 8007f04:	f000 f878 	bl	8007ff8 <_lseek_r>
 8007f08:	89a3      	ldrh	r3, [r4, #12]
 8007f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f12:	81a3      	strh	r3, [r4, #12]
 8007f14:	4632      	mov	r2, r6
 8007f16:	463b      	mov	r3, r7
 8007f18:	4628      	mov	r0, r5
 8007f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1e:	f000 b88f 	b.w	8008040 <_write_r>

08007f22 <__sseek>:
 8007f22:	b510      	push	{r4, lr}
 8007f24:	460c      	mov	r4, r1
 8007f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f2a:	f000 f865 	bl	8007ff8 <_lseek_r>
 8007f2e:	1c43      	adds	r3, r0, #1
 8007f30:	89a3      	ldrh	r3, [r4, #12]
 8007f32:	bf15      	itete	ne
 8007f34:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f3e:	81a3      	strheq	r3, [r4, #12]
 8007f40:	bf18      	it	ne
 8007f42:	81a3      	strhne	r3, [r4, #12]
 8007f44:	bd10      	pop	{r4, pc}

08007f46 <__sclose>:
 8007f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f4a:	f000 b845 	b.w	8007fd8 <_close_r>

08007f4e <_vsniprintf_r>:
 8007f4e:	b530      	push	{r4, r5, lr}
 8007f50:	4614      	mov	r4, r2
 8007f52:	2c00      	cmp	r4, #0
 8007f54:	b09b      	sub	sp, #108	; 0x6c
 8007f56:	4605      	mov	r5, r0
 8007f58:	461a      	mov	r2, r3
 8007f5a:	da05      	bge.n	8007f68 <_vsniprintf_r+0x1a>
 8007f5c:	238b      	movs	r3, #139	; 0x8b
 8007f5e:	6003      	str	r3, [r0, #0]
 8007f60:	f04f 30ff 	mov.w	r0, #4294967295
 8007f64:	b01b      	add	sp, #108	; 0x6c
 8007f66:	bd30      	pop	{r4, r5, pc}
 8007f68:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007f6c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007f70:	bf14      	ite	ne
 8007f72:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f76:	4623      	moveq	r3, r4
 8007f78:	9302      	str	r3, [sp, #8]
 8007f7a:	9305      	str	r3, [sp, #20]
 8007f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f80:	9100      	str	r1, [sp, #0]
 8007f82:	9104      	str	r1, [sp, #16]
 8007f84:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007f88:	4669      	mov	r1, sp
 8007f8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007f8c:	f001 fbe8 	bl	8009760 <_svfiprintf_r>
 8007f90:	1c43      	adds	r3, r0, #1
 8007f92:	bfbc      	itt	lt
 8007f94:	238b      	movlt	r3, #139	; 0x8b
 8007f96:	602b      	strlt	r3, [r5, #0]
 8007f98:	2c00      	cmp	r4, #0
 8007f9a:	d0e3      	beq.n	8007f64 <_vsniprintf_r+0x16>
 8007f9c:	9b00      	ldr	r3, [sp, #0]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	701a      	strb	r2, [r3, #0]
 8007fa2:	e7df      	b.n	8007f64 <_vsniprintf_r+0x16>

08007fa4 <vsniprintf>:
 8007fa4:	b507      	push	{r0, r1, r2, lr}
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	460a      	mov	r2, r1
 8007fac:	4601      	mov	r1, r0
 8007fae:	4803      	ldr	r0, [pc, #12]	; (8007fbc <vsniprintf+0x18>)
 8007fb0:	6800      	ldr	r0, [r0, #0]
 8007fb2:	f7ff ffcc 	bl	8007f4e <_vsniprintf_r>
 8007fb6:	b003      	add	sp, #12
 8007fb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8007fbc:	20000084 	.word	0x20000084

08007fc0 <memset>:
 8007fc0:	4402      	add	r2, r0
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d100      	bne.n	8007fca <memset+0xa>
 8007fc8:	4770      	bx	lr
 8007fca:	f803 1b01 	strb.w	r1, [r3], #1
 8007fce:	e7f9      	b.n	8007fc4 <memset+0x4>

08007fd0 <_localeconv_r>:
 8007fd0:	4800      	ldr	r0, [pc, #0]	; (8007fd4 <_localeconv_r+0x4>)
 8007fd2:	4770      	bx	lr
 8007fd4:	20000178 	.word	0x20000178

08007fd8 <_close_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4d06      	ldr	r5, [pc, #24]	; (8007ff4 <_close_r+0x1c>)
 8007fdc:	2300      	movs	r3, #0
 8007fde:	4604      	mov	r4, r0
 8007fe0:	4608      	mov	r0, r1
 8007fe2:	602b      	str	r3, [r5, #0]
 8007fe4:	f7f9 fd11 	bl	8001a0a <_close>
 8007fe8:	1c43      	adds	r3, r0, #1
 8007fea:	d102      	bne.n	8007ff2 <_close_r+0x1a>
 8007fec:	682b      	ldr	r3, [r5, #0]
 8007fee:	b103      	cbz	r3, 8007ff2 <_close_r+0x1a>
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}
 8007ff4:	20000740 	.word	0x20000740

08007ff8 <_lseek_r>:
 8007ff8:	b538      	push	{r3, r4, r5, lr}
 8007ffa:	4d07      	ldr	r5, [pc, #28]	; (8008018 <_lseek_r+0x20>)
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	4608      	mov	r0, r1
 8008000:	4611      	mov	r1, r2
 8008002:	2200      	movs	r2, #0
 8008004:	602a      	str	r2, [r5, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	f7f9 fd26 	bl	8001a58 <_lseek>
 800800c:	1c43      	adds	r3, r0, #1
 800800e:	d102      	bne.n	8008016 <_lseek_r+0x1e>
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	b103      	cbz	r3, 8008016 <_lseek_r+0x1e>
 8008014:	6023      	str	r3, [r4, #0]
 8008016:	bd38      	pop	{r3, r4, r5, pc}
 8008018:	20000740 	.word	0x20000740

0800801c <_read_r>:
 800801c:	b538      	push	{r3, r4, r5, lr}
 800801e:	4d07      	ldr	r5, [pc, #28]	; (800803c <_read_r+0x20>)
 8008020:	4604      	mov	r4, r0
 8008022:	4608      	mov	r0, r1
 8008024:	4611      	mov	r1, r2
 8008026:	2200      	movs	r2, #0
 8008028:	602a      	str	r2, [r5, #0]
 800802a:	461a      	mov	r2, r3
 800802c:	f7f9 fcb4 	bl	8001998 <_read>
 8008030:	1c43      	adds	r3, r0, #1
 8008032:	d102      	bne.n	800803a <_read_r+0x1e>
 8008034:	682b      	ldr	r3, [r5, #0]
 8008036:	b103      	cbz	r3, 800803a <_read_r+0x1e>
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	bd38      	pop	{r3, r4, r5, pc}
 800803c:	20000740 	.word	0x20000740

08008040 <_write_r>:
 8008040:	b538      	push	{r3, r4, r5, lr}
 8008042:	4d07      	ldr	r5, [pc, #28]	; (8008060 <_write_r+0x20>)
 8008044:	4604      	mov	r4, r0
 8008046:	4608      	mov	r0, r1
 8008048:	4611      	mov	r1, r2
 800804a:	2200      	movs	r2, #0
 800804c:	602a      	str	r2, [r5, #0]
 800804e:	461a      	mov	r2, r3
 8008050:	f7f9 fcbf 	bl	80019d2 <_write>
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	d102      	bne.n	800805e <_write_r+0x1e>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	b103      	cbz	r3, 800805e <_write_r+0x1e>
 800805c:	6023      	str	r3, [r4, #0]
 800805e:	bd38      	pop	{r3, r4, r5, pc}
 8008060:	20000740 	.word	0x20000740

08008064 <__errno>:
 8008064:	4b01      	ldr	r3, [pc, #4]	; (800806c <__errno+0x8>)
 8008066:	6818      	ldr	r0, [r3, #0]
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	20000084 	.word	0x20000084

08008070 <__libc_init_array>:
 8008070:	b570      	push	{r4, r5, r6, lr}
 8008072:	4d0d      	ldr	r5, [pc, #52]	; (80080a8 <__libc_init_array+0x38>)
 8008074:	4c0d      	ldr	r4, [pc, #52]	; (80080ac <__libc_init_array+0x3c>)
 8008076:	1b64      	subs	r4, r4, r5
 8008078:	10a4      	asrs	r4, r4, #2
 800807a:	2600      	movs	r6, #0
 800807c:	42a6      	cmp	r6, r4
 800807e:	d109      	bne.n	8008094 <__libc_init_array+0x24>
 8008080:	4d0b      	ldr	r5, [pc, #44]	; (80080b0 <__libc_init_array+0x40>)
 8008082:	4c0c      	ldr	r4, [pc, #48]	; (80080b4 <__libc_init_array+0x44>)
 8008084:	f002 f894 	bl	800a1b0 <_init>
 8008088:	1b64      	subs	r4, r4, r5
 800808a:	10a4      	asrs	r4, r4, #2
 800808c:	2600      	movs	r6, #0
 800808e:	42a6      	cmp	r6, r4
 8008090:	d105      	bne.n	800809e <__libc_init_array+0x2e>
 8008092:	bd70      	pop	{r4, r5, r6, pc}
 8008094:	f855 3b04 	ldr.w	r3, [r5], #4
 8008098:	4798      	blx	r3
 800809a:	3601      	adds	r6, #1
 800809c:	e7ee      	b.n	800807c <__libc_init_array+0xc>
 800809e:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a2:	4798      	blx	r3
 80080a4:	3601      	adds	r6, #1
 80080a6:	e7f2      	b.n	800808e <__libc_init_array+0x1e>
 80080a8:	0800a63c 	.word	0x0800a63c
 80080ac:	0800a63c 	.word	0x0800a63c
 80080b0:	0800a63c 	.word	0x0800a63c
 80080b4:	0800a640 	.word	0x0800a640

080080b8 <__retarget_lock_init_recursive>:
 80080b8:	4770      	bx	lr

080080ba <__retarget_lock_acquire_recursive>:
 80080ba:	4770      	bx	lr

080080bc <__retarget_lock_release_recursive>:
 80080bc:	4770      	bx	lr

080080be <quorem>:
 80080be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c2:	6903      	ldr	r3, [r0, #16]
 80080c4:	690c      	ldr	r4, [r1, #16]
 80080c6:	42a3      	cmp	r3, r4
 80080c8:	4607      	mov	r7, r0
 80080ca:	db7e      	blt.n	80081ca <quorem+0x10c>
 80080cc:	3c01      	subs	r4, #1
 80080ce:	f101 0814 	add.w	r8, r1, #20
 80080d2:	f100 0514 	add.w	r5, r0, #20
 80080d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080da:	9301      	str	r3, [sp, #4]
 80080dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080e4:	3301      	adds	r3, #1
 80080e6:	429a      	cmp	r2, r3
 80080e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80080f4:	d331      	bcc.n	800815a <quorem+0x9c>
 80080f6:	f04f 0e00 	mov.w	lr, #0
 80080fa:	4640      	mov	r0, r8
 80080fc:	46ac      	mov	ip, r5
 80080fe:	46f2      	mov	sl, lr
 8008100:	f850 2b04 	ldr.w	r2, [r0], #4
 8008104:	b293      	uxth	r3, r2
 8008106:	fb06 e303 	mla	r3, r6, r3, lr
 800810a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800810e:	0c1a      	lsrs	r2, r3, #16
 8008110:	b29b      	uxth	r3, r3
 8008112:	ebaa 0303 	sub.w	r3, sl, r3
 8008116:	f8dc a000 	ldr.w	sl, [ip]
 800811a:	fa13 f38a 	uxtah	r3, r3, sl
 800811e:	fb06 220e 	mla	r2, r6, lr, r2
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	9b00      	ldr	r3, [sp, #0]
 8008126:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800812a:	b292      	uxth	r2, r2
 800812c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008130:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008134:	f8bd 3000 	ldrh.w	r3, [sp]
 8008138:	4581      	cmp	r9, r0
 800813a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800813e:	f84c 3b04 	str.w	r3, [ip], #4
 8008142:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008146:	d2db      	bcs.n	8008100 <quorem+0x42>
 8008148:	f855 300b 	ldr.w	r3, [r5, fp]
 800814c:	b92b      	cbnz	r3, 800815a <quorem+0x9c>
 800814e:	9b01      	ldr	r3, [sp, #4]
 8008150:	3b04      	subs	r3, #4
 8008152:	429d      	cmp	r5, r3
 8008154:	461a      	mov	r2, r3
 8008156:	d32c      	bcc.n	80081b2 <quorem+0xf4>
 8008158:	613c      	str	r4, [r7, #16]
 800815a:	4638      	mov	r0, r7
 800815c:	f001 f9a6 	bl	80094ac <__mcmp>
 8008160:	2800      	cmp	r0, #0
 8008162:	db22      	blt.n	80081aa <quorem+0xec>
 8008164:	3601      	adds	r6, #1
 8008166:	4629      	mov	r1, r5
 8008168:	2000      	movs	r0, #0
 800816a:	f858 2b04 	ldr.w	r2, [r8], #4
 800816e:	f8d1 c000 	ldr.w	ip, [r1]
 8008172:	b293      	uxth	r3, r2
 8008174:	1ac3      	subs	r3, r0, r3
 8008176:	0c12      	lsrs	r2, r2, #16
 8008178:	fa13 f38c 	uxtah	r3, r3, ip
 800817c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008180:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008184:	b29b      	uxth	r3, r3
 8008186:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800818a:	45c1      	cmp	r9, r8
 800818c:	f841 3b04 	str.w	r3, [r1], #4
 8008190:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008194:	d2e9      	bcs.n	800816a <quorem+0xac>
 8008196:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800819a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800819e:	b922      	cbnz	r2, 80081aa <quorem+0xec>
 80081a0:	3b04      	subs	r3, #4
 80081a2:	429d      	cmp	r5, r3
 80081a4:	461a      	mov	r2, r3
 80081a6:	d30a      	bcc.n	80081be <quorem+0x100>
 80081a8:	613c      	str	r4, [r7, #16]
 80081aa:	4630      	mov	r0, r6
 80081ac:	b003      	add	sp, #12
 80081ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b2:	6812      	ldr	r2, [r2, #0]
 80081b4:	3b04      	subs	r3, #4
 80081b6:	2a00      	cmp	r2, #0
 80081b8:	d1ce      	bne.n	8008158 <quorem+0x9a>
 80081ba:	3c01      	subs	r4, #1
 80081bc:	e7c9      	b.n	8008152 <quorem+0x94>
 80081be:	6812      	ldr	r2, [r2, #0]
 80081c0:	3b04      	subs	r3, #4
 80081c2:	2a00      	cmp	r2, #0
 80081c4:	d1f0      	bne.n	80081a8 <quorem+0xea>
 80081c6:	3c01      	subs	r4, #1
 80081c8:	e7eb      	b.n	80081a2 <quorem+0xe4>
 80081ca:	2000      	movs	r0, #0
 80081cc:	e7ee      	b.n	80081ac <quorem+0xee>
	...

080081d0 <_dtoa_r>:
 80081d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d4:	ed2d 8b04 	vpush	{d8-d9}
 80081d8:	69c5      	ldr	r5, [r0, #28]
 80081da:	b093      	sub	sp, #76	; 0x4c
 80081dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80081e0:	ec57 6b10 	vmov	r6, r7, d0
 80081e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80081e8:	9107      	str	r1, [sp, #28]
 80081ea:	4604      	mov	r4, r0
 80081ec:	920a      	str	r2, [sp, #40]	; 0x28
 80081ee:	930d      	str	r3, [sp, #52]	; 0x34
 80081f0:	b975      	cbnz	r5, 8008210 <_dtoa_r+0x40>
 80081f2:	2010      	movs	r0, #16
 80081f4:	f000 fe2a 	bl	8008e4c <malloc>
 80081f8:	4602      	mov	r2, r0
 80081fa:	61e0      	str	r0, [r4, #28]
 80081fc:	b920      	cbnz	r0, 8008208 <_dtoa_r+0x38>
 80081fe:	4bae      	ldr	r3, [pc, #696]	; (80084b8 <_dtoa_r+0x2e8>)
 8008200:	21ef      	movs	r1, #239	; 0xef
 8008202:	48ae      	ldr	r0, [pc, #696]	; (80084bc <_dtoa_r+0x2ec>)
 8008204:	f001 fc90 	bl	8009b28 <__assert_func>
 8008208:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800820c:	6005      	str	r5, [r0, #0]
 800820e:	60c5      	str	r5, [r0, #12]
 8008210:	69e3      	ldr	r3, [r4, #28]
 8008212:	6819      	ldr	r1, [r3, #0]
 8008214:	b151      	cbz	r1, 800822c <_dtoa_r+0x5c>
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	604a      	str	r2, [r1, #4]
 800821a:	2301      	movs	r3, #1
 800821c:	4093      	lsls	r3, r2
 800821e:	608b      	str	r3, [r1, #8]
 8008220:	4620      	mov	r0, r4
 8008222:	f000 ff07 	bl	8009034 <_Bfree>
 8008226:	69e3      	ldr	r3, [r4, #28]
 8008228:	2200      	movs	r2, #0
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	1e3b      	subs	r3, r7, #0
 800822e:	bfbb      	ittet	lt
 8008230:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008234:	9303      	strlt	r3, [sp, #12]
 8008236:	2300      	movge	r3, #0
 8008238:	2201      	movlt	r2, #1
 800823a:	bfac      	ite	ge
 800823c:	f8c8 3000 	strge.w	r3, [r8]
 8008240:	f8c8 2000 	strlt.w	r2, [r8]
 8008244:	4b9e      	ldr	r3, [pc, #632]	; (80084c0 <_dtoa_r+0x2f0>)
 8008246:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800824a:	ea33 0308 	bics.w	r3, r3, r8
 800824e:	d11b      	bne.n	8008288 <_dtoa_r+0xb8>
 8008250:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008252:	f242 730f 	movw	r3, #9999	; 0x270f
 8008256:	6013      	str	r3, [r2, #0]
 8008258:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800825c:	4333      	orrs	r3, r6
 800825e:	f000 8593 	beq.w	8008d88 <_dtoa_r+0xbb8>
 8008262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008264:	b963      	cbnz	r3, 8008280 <_dtoa_r+0xb0>
 8008266:	4b97      	ldr	r3, [pc, #604]	; (80084c4 <_dtoa_r+0x2f4>)
 8008268:	e027      	b.n	80082ba <_dtoa_r+0xea>
 800826a:	4b97      	ldr	r3, [pc, #604]	; (80084c8 <_dtoa_r+0x2f8>)
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	3308      	adds	r3, #8
 8008270:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008272:	6013      	str	r3, [r2, #0]
 8008274:	9800      	ldr	r0, [sp, #0]
 8008276:	b013      	add	sp, #76	; 0x4c
 8008278:	ecbd 8b04 	vpop	{d8-d9}
 800827c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008280:	4b90      	ldr	r3, [pc, #576]	; (80084c4 <_dtoa_r+0x2f4>)
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	3303      	adds	r3, #3
 8008286:	e7f3      	b.n	8008270 <_dtoa_r+0xa0>
 8008288:	ed9d 7b02 	vldr	d7, [sp, #8]
 800828c:	2200      	movs	r2, #0
 800828e:	ec51 0b17 	vmov	r0, r1, d7
 8008292:	eeb0 8a47 	vmov.f32	s16, s14
 8008296:	eef0 8a67 	vmov.f32	s17, s15
 800829a:	2300      	movs	r3, #0
 800829c:	f7f8 fc14 	bl	8000ac8 <__aeabi_dcmpeq>
 80082a0:	4681      	mov	r9, r0
 80082a2:	b160      	cbz	r0, 80082be <_dtoa_r+0xee>
 80082a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082a6:	2301      	movs	r3, #1
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 8568 	beq.w	8008d82 <_dtoa_r+0xbb2>
 80082b2:	4b86      	ldr	r3, [pc, #536]	; (80084cc <_dtoa_r+0x2fc>)
 80082b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082b6:	6013      	str	r3, [r2, #0]
 80082b8:	3b01      	subs	r3, #1
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	e7da      	b.n	8008274 <_dtoa_r+0xa4>
 80082be:	aa10      	add	r2, sp, #64	; 0x40
 80082c0:	a911      	add	r1, sp, #68	; 0x44
 80082c2:	4620      	mov	r0, r4
 80082c4:	eeb0 0a48 	vmov.f32	s0, s16
 80082c8:	eef0 0a68 	vmov.f32	s1, s17
 80082cc:	f001 f994 	bl	80095f8 <__d2b>
 80082d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80082d4:	4682      	mov	sl, r0
 80082d6:	2d00      	cmp	r5, #0
 80082d8:	d07f      	beq.n	80083da <_dtoa_r+0x20a>
 80082da:	ee18 3a90 	vmov	r3, s17
 80082de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80082e6:	ec51 0b18 	vmov	r0, r1, d8
 80082ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80082ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80082f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80082f6:	4619      	mov	r1, r3
 80082f8:	2200      	movs	r2, #0
 80082fa:	4b75      	ldr	r3, [pc, #468]	; (80084d0 <_dtoa_r+0x300>)
 80082fc:	f7f7 ffc4 	bl	8000288 <__aeabi_dsub>
 8008300:	a367      	add	r3, pc, #412	; (adr r3, 80084a0 <_dtoa_r+0x2d0>)
 8008302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008306:	f7f8 f977 	bl	80005f8 <__aeabi_dmul>
 800830a:	a367      	add	r3, pc, #412	; (adr r3, 80084a8 <_dtoa_r+0x2d8>)
 800830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008310:	f7f7 ffbc 	bl	800028c <__adddf3>
 8008314:	4606      	mov	r6, r0
 8008316:	4628      	mov	r0, r5
 8008318:	460f      	mov	r7, r1
 800831a:	f7f8 f903 	bl	8000524 <__aeabi_i2d>
 800831e:	a364      	add	r3, pc, #400	; (adr r3, 80084b0 <_dtoa_r+0x2e0>)
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	f7f8 f968 	bl	80005f8 <__aeabi_dmul>
 8008328:	4602      	mov	r2, r0
 800832a:	460b      	mov	r3, r1
 800832c:	4630      	mov	r0, r6
 800832e:	4639      	mov	r1, r7
 8008330:	f7f7 ffac 	bl	800028c <__adddf3>
 8008334:	4606      	mov	r6, r0
 8008336:	460f      	mov	r7, r1
 8008338:	f7f8 fc0e 	bl	8000b58 <__aeabi_d2iz>
 800833c:	2200      	movs	r2, #0
 800833e:	4683      	mov	fp, r0
 8008340:	2300      	movs	r3, #0
 8008342:	4630      	mov	r0, r6
 8008344:	4639      	mov	r1, r7
 8008346:	f7f8 fbc9 	bl	8000adc <__aeabi_dcmplt>
 800834a:	b148      	cbz	r0, 8008360 <_dtoa_r+0x190>
 800834c:	4658      	mov	r0, fp
 800834e:	f7f8 f8e9 	bl	8000524 <__aeabi_i2d>
 8008352:	4632      	mov	r2, r6
 8008354:	463b      	mov	r3, r7
 8008356:	f7f8 fbb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800835a:	b908      	cbnz	r0, 8008360 <_dtoa_r+0x190>
 800835c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008360:	f1bb 0f16 	cmp.w	fp, #22
 8008364:	d857      	bhi.n	8008416 <_dtoa_r+0x246>
 8008366:	4b5b      	ldr	r3, [pc, #364]	; (80084d4 <_dtoa_r+0x304>)
 8008368:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800836c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008370:	ec51 0b18 	vmov	r0, r1, d8
 8008374:	f7f8 fbb2 	bl	8000adc <__aeabi_dcmplt>
 8008378:	2800      	cmp	r0, #0
 800837a:	d04e      	beq.n	800841a <_dtoa_r+0x24a>
 800837c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008380:	2300      	movs	r3, #0
 8008382:	930c      	str	r3, [sp, #48]	; 0x30
 8008384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008386:	1b5b      	subs	r3, r3, r5
 8008388:	1e5a      	subs	r2, r3, #1
 800838a:	bf45      	ittet	mi
 800838c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008390:	9305      	strmi	r3, [sp, #20]
 8008392:	2300      	movpl	r3, #0
 8008394:	2300      	movmi	r3, #0
 8008396:	9206      	str	r2, [sp, #24]
 8008398:	bf54      	ite	pl
 800839a:	9305      	strpl	r3, [sp, #20]
 800839c:	9306      	strmi	r3, [sp, #24]
 800839e:	f1bb 0f00 	cmp.w	fp, #0
 80083a2:	db3c      	blt.n	800841e <_dtoa_r+0x24e>
 80083a4:	9b06      	ldr	r3, [sp, #24]
 80083a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80083aa:	445b      	add	r3, fp
 80083ac:	9306      	str	r3, [sp, #24]
 80083ae:	2300      	movs	r3, #0
 80083b0:	9308      	str	r3, [sp, #32]
 80083b2:	9b07      	ldr	r3, [sp, #28]
 80083b4:	2b09      	cmp	r3, #9
 80083b6:	d868      	bhi.n	800848a <_dtoa_r+0x2ba>
 80083b8:	2b05      	cmp	r3, #5
 80083ba:	bfc4      	itt	gt
 80083bc:	3b04      	subgt	r3, #4
 80083be:	9307      	strgt	r3, [sp, #28]
 80083c0:	9b07      	ldr	r3, [sp, #28]
 80083c2:	f1a3 0302 	sub.w	r3, r3, #2
 80083c6:	bfcc      	ite	gt
 80083c8:	2500      	movgt	r5, #0
 80083ca:	2501      	movle	r5, #1
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	f200 8085 	bhi.w	80084dc <_dtoa_r+0x30c>
 80083d2:	e8df f003 	tbb	[pc, r3]
 80083d6:	3b2e      	.short	0x3b2e
 80083d8:	5839      	.short	0x5839
 80083da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80083de:	441d      	add	r5, r3
 80083e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80083e4:	2b20      	cmp	r3, #32
 80083e6:	bfc1      	itttt	gt
 80083e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083ec:	fa08 f803 	lslgt.w	r8, r8, r3
 80083f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80083f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80083f8:	bfd6      	itet	le
 80083fa:	f1c3 0320 	rsble	r3, r3, #32
 80083fe:	ea48 0003 	orrgt.w	r0, r8, r3
 8008402:	fa06 f003 	lslle.w	r0, r6, r3
 8008406:	f7f8 f87d 	bl	8000504 <__aeabi_ui2d>
 800840a:	2201      	movs	r2, #1
 800840c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008410:	3d01      	subs	r5, #1
 8008412:	920e      	str	r2, [sp, #56]	; 0x38
 8008414:	e76f      	b.n	80082f6 <_dtoa_r+0x126>
 8008416:	2301      	movs	r3, #1
 8008418:	e7b3      	b.n	8008382 <_dtoa_r+0x1b2>
 800841a:	900c      	str	r0, [sp, #48]	; 0x30
 800841c:	e7b2      	b.n	8008384 <_dtoa_r+0x1b4>
 800841e:	9b05      	ldr	r3, [sp, #20]
 8008420:	eba3 030b 	sub.w	r3, r3, fp
 8008424:	9305      	str	r3, [sp, #20]
 8008426:	f1cb 0300 	rsb	r3, fp, #0
 800842a:	9308      	str	r3, [sp, #32]
 800842c:	2300      	movs	r3, #0
 800842e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008430:	e7bf      	b.n	80083b2 <_dtoa_r+0x1e2>
 8008432:	2300      	movs	r3, #0
 8008434:	9309      	str	r3, [sp, #36]	; 0x24
 8008436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008438:	2b00      	cmp	r3, #0
 800843a:	dc52      	bgt.n	80084e2 <_dtoa_r+0x312>
 800843c:	2301      	movs	r3, #1
 800843e:	9301      	str	r3, [sp, #4]
 8008440:	9304      	str	r3, [sp, #16]
 8008442:	461a      	mov	r2, r3
 8008444:	920a      	str	r2, [sp, #40]	; 0x28
 8008446:	e00b      	b.n	8008460 <_dtoa_r+0x290>
 8008448:	2301      	movs	r3, #1
 800844a:	e7f3      	b.n	8008434 <_dtoa_r+0x264>
 800844c:	2300      	movs	r3, #0
 800844e:	9309      	str	r3, [sp, #36]	; 0x24
 8008450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008452:	445b      	add	r3, fp
 8008454:	9301      	str	r3, [sp, #4]
 8008456:	3301      	adds	r3, #1
 8008458:	2b01      	cmp	r3, #1
 800845a:	9304      	str	r3, [sp, #16]
 800845c:	bfb8      	it	lt
 800845e:	2301      	movlt	r3, #1
 8008460:	69e0      	ldr	r0, [r4, #28]
 8008462:	2100      	movs	r1, #0
 8008464:	2204      	movs	r2, #4
 8008466:	f102 0614 	add.w	r6, r2, #20
 800846a:	429e      	cmp	r6, r3
 800846c:	d93d      	bls.n	80084ea <_dtoa_r+0x31a>
 800846e:	6041      	str	r1, [r0, #4]
 8008470:	4620      	mov	r0, r4
 8008472:	f000 fd9f 	bl	8008fb4 <_Balloc>
 8008476:	9000      	str	r0, [sp, #0]
 8008478:	2800      	cmp	r0, #0
 800847a:	d139      	bne.n	80084f0 <_dtoa_r+0x320>
 800847c:	4b16      	ldr	r3, [pc, #88]	; (80084d8 <_dtoa_r+0x308>)
 800847e:	4602      	mov	r2, r0
 8008480:	f240 11af 	movw	r1, #431	; 0x1af
 8008484:	e6bd      	b.n	8008202 <_dtoa_r+0x32>
 8008486:	2301      	movs	r3, #1
 8008488:	e7e1      	b.n	800844e <_dtoa_r+0x27e>
 800848a:	2501      	movs	r5, #1
 800848c:	2300      	movs	r3, #0
 800848e:	9307      	str	r3, [sp, #28]
 8008490:	9509      	str	r5, [sp, #36]	; 0x24
 8008492:	f04f 33ff 	mov.w	r3, #4294967295
 8008496:	9301      	str	r3, [sp, #4]
 8008498:	9304      	str	r3, [sp, #16]
 800849a:	2200      	movs	r2, #0
 800849c:	2312      	movs	r3, #18
 800849e:	e7d1      	b.n	8008444 <_dtoa_r+0x274>
 80084a0:	636f4361 	.word	0x636f4361
 80084a4:	3fd287a7 	.word	0x3fd287a7
 80084a8:	8b60c8b3 	.word	0x8b60c8b3
 80084ac:	3fc68a28 	.word	0x3fc68a28
 80084b0:	509f79fb 	.word	0x509f79fb
 80084b4:	3fd34413 	.word	0x3fd34413
 80084b8:	0800a305 	.word	0x0800a305
 80084bc:	0800a31c 	.word	0x0800a31c
 80084c0:	7ff00000 	.word	0x7ff00000
 80084c4:	0800a301 	.word	0x0800a301
 80084c8:	0800a2f8 	.word	0x0800a2f8
 80084cc:	0800a2d5 	.word	0x0800a2d5
 80084d0:	3ff80000 	.word	0x3ff80000
 80084d4:	0800a408 	.word	0x0800a408
 80084d8:	0800a374 	.word	0x0800a374
 80084dc:	2301      	movs	r3, #1
 80084de:	9309      	str	r3, [sp, #36]	; 0x24
 80084e0:	e7d7      	b.n	8008492 <_dtoa_r+0x2c2>
 80084e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084e4:	9301      	str	r3, [sp, #4]
 80084e6:	9304      	str	r3, [sp, #16]
 80084e8:	e7ba      	b.n	8008460 <_dtoa_r+0x290>
 80084ea:	3101      	adds	r1, #1
 80084ec:	0052      	lsls	r2, r2, #1
 80084ee:	e7ba      	b.n	8008466 <_dtoa_r+0x296>
 80084f0:	69e3      	ldr	r3, [r4, #28]
 80084f2:	9a00      	ldr	r2, [sp, #0]
 80084f4:	601a      	str	r2, [r3, #0]
 80084f6:	9b04      	ldr	r3, [sp, #16]
 80084f8:	2b0e      	cmp	r3, #14
 80084fa:	f200 80a8 	bhi.w	800864e <_dtoa_r+0x47e>
 80084fe:	2d00      	cmp	r5, #0
 8008500:	f000 80a5 	beq.w	800864e <_dtoa_r+0x47e>
 8008504:	f1bb 0f00 	cmp.w	fp, #0
 8008508:	dd38      	ble.n	800857c <_dtoa_r+0x3ac>
 800850a:	4bc0      	ldr	r3, [pc, #768]	; (800880c <_dtoa_r+0x63c>)
 800850c:	f00b 020f 	and.w	r2, fp, #15
 8008510:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008514:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008518:	e9d3 6700 	ldrd	r6, r7, [r3]
 800851c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008520:	d019      	beq.n	8008556 <_dtoa_r+0x386>
 8008522:	4bbb      	ldr	r3, [pc, #748]	; (8008810 <_dtoa_r+0x640>)
 8008524:	ec51 0b18 	vmov	r0, r1, d8
 8008528:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800852c:	f7f8 f98e 	bl	800084c <__aeabi_ddiv>
 8008530:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008534:	f008 080f 	and.w	r8, r8, #15
 8008538:	2503      	movs	r5, #3
 800853a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008810 <_dtoa_r+0x640>
 800853e:	f1b8 0f00 	cmp.w	r8, #0
 8008542:	d10a      	bne.n	800855a <_dtoa_r+0x38a>
 8008544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008548:	4632      	mov	r2, r6
 800854a:	463b      	mov	r3, r7
 800854c:	f7f8 f97e 	bl	800084c <__aeabi_ddiv>
 8008550:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008554:	e02b      	b.n	80085ae <_dtoa_r+0x3de>
 8008556:	2502      	movs	r5, #2
 8008558:	e7ef      	b.n	800853a <_dtoa_r+0x36a>
 800855a:	f018 0f01 	tst.w	r8, #1
 800855e:	d008      	beq.n	8008572 <_dtoa_r+0x3a2>
 8008560:	4630      	mov	r0, r6
 8008562:	4639      	mov	r1, r7
 8008564:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008568:	f7f8 f846 	bl	80005f8 <__aeabi_dmul>
 800856c:	3501      	adds	r5, #1
 800856e:	4606      	mov	r6, r0
 8008570:	460f      	mov	r7, r1
 8008572:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008576:	f109 0908 	add.w	r9, r9, #8
 800857a:	e7e0      	b.n	800853e <_dtoa_r+0x36e>
 800857c:	f000 809f 	beq.w	80086be <_dtoa_r+0x4ee>
 8008580:	f1cb 0600 	rsb	r6, fp, #0
 8008584:	4ba1      	ldr	r3, [pc, #644]	; (800880c <_dtoa_r+0x63c>)
 8008586:	4fa2      	ldr	r7, [pc, #648]	; (8008810 <_dtoa_r+0x640>)
 8008588:	f006 020f 	and.w	r2, r6, #15
 800858c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008594:	ec51 0b18 	vmov	r0, r1, d8
 8008598:	f7f8 f82e 	bl	80005f8 <__aeabi_dmul>
 800859c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085a0:	1136      	asrs	r6, r6, #4
 80085a2:	2300      	movs	r3, #0
 80085a4:	2502      	movs	r5, #2
 80085a6:	2e00      	cmp	r6, #0
 80085a8:	d17e      	bne.n	80086a8 <_dtoa_r+0x4d8>
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1d0      	bne.n	8008550 <_dtoa_r+0x380>
 80085ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 8084 	beq.w	80086c2 <_dtoa_r+0x4f2>
 80085ba:	4b96      	ldr	r3, [pc, #600]	; (8008814 <_dtoa_r+0x644>)
 80085bc:	2200      	movs	r2, #0
 80085be:	4640      	mov	r0, r8
 80085c0:	4649      	mov	r1, r9
 80085c2:	f7f8 fa8b 	bl	8000adc <__aeabi_dcmplt>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d07b      	beq.n	80086c2 <_dtoa_r+0x4f2>
 80085ca:	9b04      	ldr	r3, [sp, #16]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d078      	beq.n	80086c2 <_dtoa_r+0x4f2>
 80085d0:	9b01      	ldr	r3, [sp, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	dd39      	ble.n	800864a <_dtoa_r+0x47a>
 80085d6:	4b90      	ldr	r3, [pc, #576]	; (8008818 <_dtoa_r+0x648>)
 80085d8:	2200      	movs	r2, #0
 80085da:	4640      	mov	r0, r8
 80085dc:	4649      	mov	r1, r9
 80085de:	f7f8 f80b 	bl	80005f8 <__aeabi_dmul>
 80085e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085e6:	9e01      	ldr	r6, [sp, #4]
 80085e8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80085ec:	3501      	adds	r5, #1
 80085ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80085f2:	4628      	mov	r0, r5
 80085f4:	f7f7 ff96 	bl	8000524 <__aeabi_i2d>
 80085f8:	4642      	mov	r2, r8
 80085fa:	464b      	mov	r3, r9
 80085fc:	f7f7 fffc 	bl	80005f8 <__aeabi_dmul>
 8008600:	4b86      	ldr	r3, [pc, #536]	; (800881c <_dtoa_r+0x64c>)
 8008602:	2200      	movs	r2, #0
 8008604:	f7f7 fe42 	bl	800028c <__adddf3>
 8008608:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800860c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008610:	9303      	str	r3, [sp, #12]
 8008612:	2e00      	cmp	r6, #0
 8008614:	d158      	bne.n	80086c8 <_dtoa_r+0x4f8>
 8008616:	4b82      	ldr	r3, [pc, #520]	; (8008820 <_dtoa_r+0x650>)
 8008618:	2200      	movs	r2, #0
 800861a:	4640      	mov	r0, r8
 800861c:	4649      	mov	r1, r9
 800861e:	f7f7 fe33 	bl	8000288 <__aeabi_dsub>
 8008622:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008626:	4680      	mov	r8, r0
 8008628:	4689      	mov	r9, r1
 800862a:	f7f8 fa75 	bl	8000b18 <__aeabi_dcmpgt>
 800862e:	2800      	cmp	r0, #0
 8008630:	f040 8296 	bne.w	8008b60 <_dtoa_r+0x990>
 8008634:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008638:	4640      	mov	r0, r8
 800863a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800863e:	4649      	mov	r1, r9
 8008640:	f7f8 fa4c 	bl	8000adc <__aeabi_dcmplt>
 8008644:	2800      	cmp	r0, #0
 8008646:	f040 8289 	bne.w	8008b5c <_dtoa_r+0x98c>
 800864a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800864e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008650:	2b00      	cmp	r3, #0
 8008652:	f2c0 814e 	blt.w	80088f2 <_dtoa_r+0x722>
 8008656:	f1bb 0f0e 	cmp.w	fp, #14
 800865a:	f300 814a 	bgt.w	80088f2 <_dtoa_r+0x722>
 800865e:	4b6b      	ldr	r3, [pc, #428]	; (800880c <_dtoa_r+0x63c>)
 8008660:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008664:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800866a:	2b00      	cmp	r3, #0
 800866c:	f280 80dc 	bge.w	8008828 <_dtoa_r+0x658>
 8008670:	9b04      	ldr	r3, [sp, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	f300 80d8 	bgt.w	8008828 <_dtoa_r+0x658>
 8008678:	f040 826f 	bne.w	8008b5a <_dtoa_r+0x98a>
 800867c:	4b68      	ldr	r3, [pc, #416]	; (8008820 <_dtoa_r+0x650>)
 800867e:	2200      	movs	r2, #0
 8008680:	4640      	mov	r0, r8
 8008682:	4649      	mov	r1, r9
 8008684:	f7f7 ffb8 	bl	80005f8 <__aeabi_dmul>
 8008688:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800868c:	f7f8 fa3a 	bl	8000b04 <__aeabi_dcmpge>
 8008690:	9e04      	ldr	r6, [sp, #16]
 8008692:	4637      	mov	r7, r6
 8008694:	2800      	cmp	r0, #0
 8008696:	f040 8245 	bne.w	8008b24 <_dtoa_r+0x954>
 800869a:	9d00      	ldr	r5, [sp, #0]
 800869c:	2331      	movs	r3, #49	; 0x31
 800869e:	f805 3b01 	strb.w	r3, [r5], #1
 80086a2:	f10b 0b01 	add.w	fp, fp, #1
 80086a6:	e241      	b.n	8008b2c <_dtoa_r+0x95c>
 80086a8:	07f2      	lsls	r2, r6, #31
 80086aa:	d505      	bpl.n	80086b8 <_dtoa_r+0x4e8>
 80086ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086b0:	f7f7 ffa2 	bl	80005f8 <__aeabi_dmul>
 80086b4:	3501      	adds	r5, #1
 80086b6:	2301      	movs	r3, #1
 80086b8:	1076      	asrs	r6, r6, #1
 80086ba:	3708      	adds	r7, #8
 80086bc:	e773      	b.n	80085a6 <_dtoa_r+0x3d6>
 80086be:	2502      	movs	r5, #2
 80086c0:	e775      	b.n	80085ae <_dtoa_r+0x3de>
 80086c2:	9e04      	ldr	r6, [sp, #16]
 80086c4:	465f      	mov	r7, fp
 80086c6:	e792      	b.n	80085ee <_dtoa_r+0x41e>
 80086c8:	9900      	ldr	r1, [sp, #0]
 80086ca:	4b50      	ldr	r3, [pc, #320]	; (800880c <_dtoa_r+0x63c>)
 80086cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086d0:	4431      	add	r1, r6
 80086d2:	9102      	str	r1, [sp, #8]
 80086d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086d6:	eeb0 9a47 	vmov.f32	s18, s14
 80086da:	eef0 9a67 	vmov.f32	s19, s15
 80086de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80086e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086e6:	2900      	cmp	r1, #0
 80086e8:	d044      	beq.n	8008774 <_dtoa_r+0x5a4>
 80086ea:	494e      	ldr	r1, [pc, #312]	; (8008824 <_dtoa_r+0x654>)
 80086ec:	2000      	movs	r0, #0
 80086ee:	f7f8 f8ad 	bl	800084c <__aeabi_ddiv>
 80086f2:	ec53 2b19 	vmov	r2, r3, d9
 80086f6:	f7f7 fdc7 	bl	8000288 <__aeabi_dsub>
 80086fa:	9d00      	ldr	r5, [sp, #0]
 80086fc:	ec41 0b19 	vmov	d9, r0, r1
 8008700:	4649      	mov	r1, r9
 8008702:	4640      	mov	r0, r8
 8008704:	f7f8 fa28 	bl	8000b58 <__aeabi_d2iz>
 8008708:	4606      	mov	r6, r0
 800870a:	f7f7 ff0b 	bl	8000524 <__aeabi_i2d>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	4640      	mov	r0, r8
 8008714:	4649      	mov	r1, r9
 8008716:	f7f7 fdb7 	bl	8000288 <__aeabi_dsub>
 800871a:	3630      	adds	r6, #48	; 0x30
 800871c:	f805 6b01 	strb.w	r6, [r5], #1
 8008720:	ec53 2b19 	vmov	r2, r3, d9
 8008724:	4680      	mov	r8, r0
 8008726:	4689      	mov	r9, r1
 8008728:	f7f8 f9d8 	bl	8000adc <__aeabi_dcmplt>
 800872c:	2800      	cmp	r0, #0
 800872e:	d164      	bne.n	80087fa <_dtoa_r+0x62a>
 8008730:	4642      	mov	r2, r8
 8008732:	464b      	mov	r3, r9
 8008734:	4937      	ldr	r1, [pc, #220]	; (8008814 <_dtoa_r+0x644>)
 8008736:	2000      	movs	r0, #0
 8008738:	f7f7 fda6 	bl	8000288 <__aeabi_dsub>
 800873c:	ec53 2b19 	vmov	r2, r3, d9
 8008740:	f7f8 f9cc 	bl	8000adc <__aeabi_dcmplt>
 8008744:	2800      	cmp	r0, #0
 8008746:	f040 80b6 	bne.w	80088b6 <_dtoa_r+0x6e6>
 800874a:	9b02      	ldr	r3, [sp, #8]
 800874c:	429d      	cmp	r5, r3
 800874e:	f43f af7c 	beq.w	800864a <_dtoa_r+0x47a>
 8008752:	4b31      	ldr	r3, [pc, #196]	; (8008818 <_dtoa_r+0x648>)
 8008754:	ec51 0b19 	vmov	r0, r1, d9
 8008758:	2200      	movs	r2, #0
 800875a:	f7f7 ff4d 	bl	80005f8 <__aeabi_dmul>
 800875e:	4b2e      	ldr	r3, [pc, #184]	; (8008818 <_dtoa_r+0x648>)
 8008760:	ec41 0b19 	vmov	d9, r0, r1
 8008764:	2200      	movs	r2, #0
 8008766:	4640      	mov	r0, r8
 8008768:	4649      	mov	r1, r9
 800876a:	f7f7 ff45 	bl	80005f8 <__aeabi_dmul>
 800876e:	4680      	mov	r8, r0
 8008770:	4689      	mov	r9, r1
 8008772:	e7c5      	b.n	8008700 <_dtoa_r+0x530>
 8008774:	ec51 0b17 	vmov	r0, r1, d7
 8008778:	f7f7 ff3e 	bl	80005f8 <__aeabi_dmul>
 800877c:	9b02      	ldr	r3, [sp, #8]
 800877e:	9d00      	ldr	r5, [sp, #0]
 8008780:	930f      	str	r3, [sp, #60]	; 0x3c
 8008782:	ec41 0b19 	vmov	d9, r0, r1
 8008786:	4649      	mov	r1, r9
 8008788:	4640      	mov	r0, r8
 800878a:	f7f8 f9e5 	bl	8000b58 <__aeabi_d2iz>
 800878e:	4606      	mov	r6, r0
 8008790:	f7f7 fec8 	bl	8000524 <__aeabi_i2d>
 8008794:	3630      	adds	r6, #48	; 0x30
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	4640      	mov	r0, r8
 800879c:	4649      	mov	r1, r9
 800879e:	f7f7 fd73 	bl	8000288 <__aeabi_dsub>
 80087a2:	f805 6b01 	strb.w	r6, [r5], #1
 80087a6:	9b02      	ldr	r3, [sp, #8]
 80087a8:	429d      	cmp	r5, r3
 80087aa:	4680      	mov	r8, r0
 80087ac:	4689      	mov	r9, r1
 80087ae:	f04f 0200 	mov.w	r2, #0
 80087b2:	d124      	bne.n	80087fe <_dtoa_r+0x62e>
 80087b4:	4b1b      	ldr	r3, [pc, #108]	; (8008824 <_dtoa_r+0x654>)
 80087b6:	ec51 0b19 	vmov	r0, r1, d9
 80087ba:	f7f7 fd67 	bl	800028c <__adddf3>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	4640      	mov	r0, r8
 80087c4:	4649      	mov	r1, r9
 80087c6:	f7f8 f9a7 	bl	8000b18 <__aeabi_dcmpgt>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	d173      	bne.n	80088b6 <_dtoa_r+0x6e6>
 80087ce:	ec53 2b19 	vmov	r2, r3, d9
 80087d2:	4914      	ldr	r1, [pc, #80]	; (8008824 <_dtoa_r+0x654>)
 80087d4:	2000      	movs	r0, #0
 80087d6:	f7f7 fd57 	bl	8000288 <__aeabi_dsub>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	4640      	mov	r0, r8
 80087e0:	4649      	mov	r1, r9
 80087e2:	f7f8 f97b 	bl	8000adc <__aeabi_dcmplt>
 80087e6:	2800      	cmp	r0, #0
 80087e8:	f43f af2f 	beq.w	800864a <_dtoa_r+0x47a>
 80087ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80087ee:	1e6b      	subs	r3, r5, #1
 80087f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80087f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087f6:	2b30      	cmp	r3, #48	; 0x30
 80087f8:	d0f8      	beq.n	80087ec <_dtoa_r+0x61c>
 80087fa:	46bb      	mov	fp, r7
 80087fc:	e04a      	b.n	8008894 <_dtoa_r+0x6c4>
 80087fe:	4b06      	ldr	r3, [pc, #24]	; (8008818 <_dtoa_r+0x648>)
 8008800:	f7f7 fefa 	bl	80005f8 <__aeabi_dmul>
 8008804:	4680      	mov	r8, r0
 8008806:	4689      	mov	r9, r1
 8008808:	e7bd      	b.n	8008786 <_dtoa_r+0x5b6>
 800880a:	bf00      	nop
 800880c:	0800a408 	.word	0x0800a408
 8008810:	0800a3e0 	.word	0x0800a3e0
 8008814:	3ff00000 	.word	0x3ff00000
 8008818:	40240000 	.word	0x40240000
 800881c:	401c0000 	.word	0x401c0000
 8008820:	40140000 	.word	0x40140000
 8008824:	3fe00000 	.word	0x3fe00000
 8008828:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800882c:	9d00      	ldr	r5, [sp, #0]
 800882e:	4642      	mov	r2, r8
 8008830:	464b      	mov	r3, r9
 8008832:	4630      	mov	r0, r6
 8008834:	4639      	mov	r1, r7
 8008836:	f7f8 f809 	bl	800084c <__aeabi_ddiv>
 800883a:	f7f8 f98d 	bl	8000b58 <__aeabi_d2iz>
 800883e:	9001      	str	r0, [sp, #4]
 8008840:	f7f7 fe70 	bl	8000524 <__aeabi_i2d>
 8008844:	4642      	mov	r2, r8
 8008846:	464b      	mov	r3, r9
 8008848:	f7f7 fed6 	bl	80005f8 <__aeabi_dmul>
 800884c:	4602      	mov	r2, r0
 800884e:	460b      	mov	r3, r1
 8008850:	4630      	mov	r0, r6
 8008852:	4639      	mov	r1, r7
 8008854:	f7f7 fd18 	bl	8000288 <__aeabi_dsub>
 8008858:	9e01      	ldr	r6, [sp, #4]
 800885a:	9f04      	ldr	r7, [sp, #16]
 800885c:	3630      	adds	r6, #48	; 0x30
 800885e:	f805 6b01 	strb.w	r6, [r5], #1
 8008862:	9e00      	ldr	r6, [sp, #0]
 8008864:	1bae      	subs	r6, r5, r6
 8008866:	42b7      	cmp	r7, r6
 8008868:	4602      	mov	r2, r0
 800886a:	460b      	mov	r3, r1
 800886c:	d134      	bne.n	80088d8 <_dtoa_r+0x708>
 800886e:	f7f7 fd0d 	bl	800028c <__adddf3>
 8008872:	4642      	mov	r2, r8
 8008874:	464b      	mov	r3, r9
 8008876:	4606      	mov	r6, r0
 8008878:	460f      	mov	r7, r1
 800887a:	f7f8 f94d 	bl	8000b18 <__aeabi_dcmpgt>
 800887e:	b9c8      	cbnz	r0, 80088b4 <_dtoa_r+0x6e4>
 8008880:	4642      	mov	r2, r8
 8008882:	464b      	mov	r3, r9
 8008884:	4630      	mov	r0, r6
 8008886:	4639      	mov	r1, r7
 8008888:	f7f8 f91e 	bl	8000ac8 <__aeabi_dcmpeq>
 800888c:	b110      	cbz	r0, 8008894 <_dtoa_r+0x6c4>
 800888e:	9b01      	ldr	r3, [sp, #4]
 8008890:	07db      	lsls	r3, r3, #31
 8008892:	d40f      	bmi.n	80088b4 <_dtoa_r+0x6e4>
 8008894:	4651      	mov	r1, sl
 8008896:	4620      	mov	r0, r4
 8008898:	f000 fbcc 	bl	8009034 <_Bfree>
 800889c:	2300      	movs	r3, #0
 800889e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088a0:	702b      	strb	r3, [r5, #0]
 80088a2:	f10b 0301 	add.w	r3, fp, #1
 80088a6:	6013      	str	r3, [r2, #0]
 80088a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f43f ace2 	beq.w	8008274 <_dtoa_r+0xa4>
 80088b0:	601d      	str	r5, [r3, #0]
 80088b2:	e4df      	b.n	8008274 <_dtoa_r+0xa4>
 80088b4:	465f      	mov	r7, fp
 80088b6:	462b      	mov	r3, r5
 80088b8:	461d      	mov	r5, r3
 80088ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088be:	2a39      	cmp	r2, #57	; 0x39
 80088c0:	d106      	bne.n	80088d0 <_dtoa_r+0x700>
 80088c2:	9a00      	ldr	r2, [sp, #0]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d1f7      	bne.n	80088b8 <_dtoa_r+0x6e8>
 80088c8:	9900      	ldr	r1, [sp, #0]
 80088ca:	2230      	movs	r2, #48	; 0x30
 80088cc:	3701      	adds	r7, #1
 80088ce:	700a      	strb	r2, [r1, #0]
 80088d0:	781a      	ldrb	r2, [r3, #0]
 80088d2:	3201      	adds	r2, #1
 80088d4:	701a      	strb	r2, [r3, #0]
 80088d6:	e790      	b.n	80087fa <_dtoa_r+0x62a>
 80088d8:	4ba3      	ldr	r3, [pc, #652]	; (8008b68 <_dtoa_r+0x998>)
 80088da:	2200      	movs	r2, #0
 80088dc:	f7f7 fe8c 	bl	80005f8 <__aeabi_dmul>
 80088e0:	2200      	movs	r2, #0
 80088e2:	2300      	movs	r3, #0
 80088e4:	4606      	mov	r6, r0
 80088e6:	460f      	mov	r7, r1
 80088e8:	f7f8 f8ee 	bl	8000ac8 <__aeabi_dcmpeq>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d09e      	beq.n	800882e <_dtoa_r+0x65e>
 80088f0:	e7d0      	b.n	8008894 <_dtoa_r+0x6c4>
 80088f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088f4:	2a00      	cmp	r2, #0
 80088f6:	f000 80ca 	beq.w	8008a8e <_dtoa_r+0x8be>
 80088fa:	9a07      	ldr	r2, [sp, #28]
 80088fc:	2a01      	cmp	r2, #1
 80088fe:	f300 80ad 	bgt.w	8008a5c <_dtoa_r+0x88c>
 8008902:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008904:	2a00      	cmp	r2, #0
 8008906:	f000 80a5 	beq.w	8008a54 <_dtoa_r+0x884>
 800890a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800890e:	9e08      	ldr	r6, [sp, #32]
 8008910:	9d05      	ldr	r5, [sp, #20]
 8008912:	9a05      	ldr	r2, [sp, #20]
 8008914:	441a      	add	r2, r3
 8008916:	9205      	str	r2, [sp, #20]
 8008918:	9a06      	ldr	r2, [sp, #24]
 800891a:	2101      	movs	r1, #1
 800891c:	441a      	add	r2, r3
 800891e:	4620      	mov	r0, r4
 8008920:	9206      	str	r2, [sp, #24]
 8008922:	f000 fc3d 	bl	80091a0 <__i2b>
 8008926:	4607      	mov	r7, r0
 8008928:	b165      	cbz	r5, 8008944 <_dtoa_r+0x774>
 800892a:	9b06      	ldr	r3, [sp, #24]
 800892c:	2b00      	cmp	r3, #0
 800892e:	dd09      	ble.n	8008944 <_dtoa_r+0x774>
 8008930:	42ab      	cmp	r3, r5
 8008932:	9a05      	ldr	r2, [sp, #20]
 8008934:	bfa8      	it	ge
 8008936:	462b      	movge	r3, r5
 8008938:	1ad2      	subs	r2, r2, r3
 800893a:	9205      	str	r2, [sp, #20]
 800893c:	9a06      	ldr	r2, [sp, #24]
 800893e:	1aed      	subs	r5, r5, r3
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	9306      	str	r3, [sp, #24]
 8008944:	9b08      	ldr	r3, [sp, #32]
 8008946:	b1f3      	cbz	r3, 8008986 <_dtoa_r+0x7b6>
 8008948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800894a:	2b00      	cmp	r3, #0
 800894c:	f000 80a3 	beq.w	8008a96 <_dtoa_r+0x8c6>
 8008950:	2e00      	cmp	r6, #0
 8008952:	dd10      	ble.n	8008976 <_dtoa_r+0x7a6>
 8008954:	4639      	mov	r1, r7
 8008956:	4632      	mov	r2, r6
 8008958:	4620      	mov	r0, r4
 800895a:	f000 fce1 	bl	8009320 <__pow5mult>
 800895e:	4652      	mov	r2, sl
 8008960:	4601      	mov	r1, r0
 8008962:	4607      	mov	r7, r0
 8008964:	4620      	mov	r0, r4
 8008966:	f000 fc31 	bl	80091cc <__multiply>
 800896a:	4651      	mov	r1, sl
 800896c:	4680      	mov	r8, r0
 800896e:	4620      	mov	r0, r4
 8008970:	f000 fb60 	bl	8009034 <_Bfree>
 8008974:	46c2      	mov	sl, r8
 8008976:	9b08      	ldr	r3, [sp, #32]
 8008978:	1b9a      	subs	r2, r3, r6
 800897a:	d004      	beq.n	8008986 <_dtoa_r+0x7b6>
 800897c:	4651      	mov	r1, sl
 800897e:	4620      	mov	r0, r4
 8008980:	f000 fcce 	bl	8009320 <__pow5mult>
 8008984:	4682      	mov	sl, r0
 8008986:	2101      	movs	r1, #1
 8008988:	4620      	mov	r0, r4
 800898a:	f000 fc09 	bl	80091a0 <__i2b>
 800898e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008990:	2b00      	cmp	r3, #0
 8008992:	4606      	mov	r6, r0
 8008994:	f340 8081 	ble.w	8008a9a <_dtoa_r+0x8ca>
 8008998:	461a      	mov	r2, r3
 800899a:	4601      	mov	r1, r0
 800899c:	4620      	mov	r0, r4
 800899e:	f000 fcbf 	bl	8009320 <__pow5mult>
 80089a2:	9b07      	ldr	r3, [sp, #28]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	4606      	mov	r6, r0
 80089a8:	dd7a      	ble.n	8008aa0 <_dtoa_r+0x8d0>
 80089aa:	f04f 0800 	mov.w	r8, #0
 80089ae:	6933      	ldr	r3, [r6, #16]
 80089b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80089b4:	6918      	ldr	r0, [r3, #16]
 80089b6:	f000 fba5 	bl	8009104 <__hi0bits>
 80089ba:	f1c0 0020 	rsb	r0, r0, #32
 80089be:	9b06      	ldr	r3, [sp, #24]
 80089c0:	4418      	add	r0, r3
 80089c2:	f010 001f 	ands.w	r0, r0, #31
 80089c6:	f000 8094 	beq.w	8008af2 <_dtoa_r+0x922>
 80089ca:	f1c0 0320 	rsb	r3, r0, #32
 80089ce:	2b04      	cmp	r3, #4
 80089d0:	f340 8085 	ble.w	8008ade <_dtoa_r+0x90e>
 80089d4:	9b05      	ldr	r3, [sp, #20]
 80089d6:	f1c0 001c 	rsb	r0, r0, #28
 80089da:	4403      	add	r3, r0
 80089dc:	9305      	str	r3, [sp, #20]
 80089de:	9b06      	ldr	r3, [sp, #24]
 80089e0:	4403      	add	r3, r0
 80089e2:	4405      	add	r5, r0
 80089e4:	9306      	str	r3, [sp, #24]
 80089e6:	9b05      	ldr	r3, [sp, #20]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	dd05      	ble.n	80089f8 <_dtoa_r+0x828>
 80089ec:	4651      	mov	r1, sl
 80089ee:	461a      	mov	r2, r3
 80089f0:	4620      	mov	r0, r4
 80089f2:	f000 fcef 	bl	80093d4 <__lshift>
 80089f6:	4682      	mov	sl, r0
 80089f8:	9b06      	ldr	r3, [sp, #24]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	dd05      	ble.n	8008a0a <_dtoa_r+0x83a>
 80089fe:	4631      	mov	r1, r6
 8008a00:	461a      	mov	r2, r3
 8008a02:	4620      	mov	r0, r4
 8008a04:	f000 fce6 	bl	80093d4 <__lshift>
 8008a08:	4606      	mov	r6, r0
 8008a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d072      	beq.n	8008af6 <_dtoa_r+0x926>
 8008a10:	4631      	mov	r1, r6
 8008a12:	4650      	mov	r0, sl
 8008a14:	f000 fd4a 	bl	80094ac <__mcmp>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	da6c      	bge.n	8008af6 <_dtoa_r+0x926>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	4651      	mov	r1, sl
 8008a20:	220a      	movs	r2, #10
 8008a22:	4620      	mov	r0, r4
 8008a24:	f000 fb28 	bl	8009078 <__multadd>
 8008a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a2e:	4682      	mov	sl, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 81b0 	beq.w	8008d96 <_dtoa_r+0xbc6>
 8008a36:	2300      	movs	r3, #0
 8008a38:	4639      	mov	r1, r7
 8008a3a:	220a      	movs	r2, #10
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	f000 fb1b 	bl	8009078 <__multadd>
 8008a42:	9b01      	ldr	r3, [sp, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	4607      	mov	r7, r0
 8008a48:	f300 8096 	bgt.w	8008b78 <_dtoa_r+0x9a8>
 8008a4c:	9b07      	ldr	r3, [sp, #28]
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	dc59      	bgt.n	8008b06 <_dtoa_r+0x936>
 8008a52:	e091      	b.n	8008b78 <_dtoa_r+0x9a8>
 8008a54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a5a:	e758      	b.n	800890e <_dtoa_r+0x73e>
 8008a5c:	9b04      	ldr	r3, [sp, #16]
 8008a5e:	1e5e      	subs	r6, r3, #1
 8008a60:	9b08      	ldr	r3, [sp, #32]
 8008a62:	42b3      	cmp	r3, r6
 8008a64:	bfbf      	itttt	lt
 8008a66:	9b08      	ldrlt	r3, [sp, #32]
 8008a68:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008a6a:	9608      	strlt	r6, [sp, #32]
 8008a6c:	1af3      	sublt	r3, r6, r3
 8008a6e:	bfb4      	ite	lt
 8008a70:	18d2      	addlt	r2, r2, r3
 8008a72:	1b9e      	subge	r6, r3, r6
 8008a74:	9b04      	ldr	r3, [sp, #16]
 8008a76:	bfbc      	itt	lt
 8008a78:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008a7a:	2600      	movlt	r6, #0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	bfb7      	itett	lt
 8008a80:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008a84:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008a88:	1a9d      	sublt	r5, r3, r2
 8008a8a:	2300      	movlt	r3, #0
 8008a8c:	e741      	b.n	8008912 <_dtoa_r+0x742>
 8008a8e:	9e08      	ldr	r6, [sp, #32]
 8008a90:	9d05      	ldr	r5, [sp, #20]
 8008a92:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008a94:	e748      	b.n	8008928 <_dtoa_r+0x758>
 8008a96:	9a08      	ldr	r2, [sp, #32]
 8008a98:	e770      	b.n	800897c <_dtoa_r+0x7ac>
 8008a9a:	9b07      	ldr	r3, [sp, #28]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	dc19      	bgt.n	8008ad4 <_dtoa_r+0x904>
 8008aa0:	9b02      	ldr	r3, [sp, #8]
 8008aa2:	b9bb      	cbnz	r3, 8008ad4 <_dtoa_r+0x904>
 8008aa4:	9b03      	ldr	r3, [sp, #12]
 8008aa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008aaa:	b99b      	cbnz	r3, 8008ad4 <_dtoa_r+0x904>
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ab2:	0d1b      	lsrs	r3, r3, #20
 8008ab4:	051b      	lsls	r3, r3, #20
 8008ab6:	b183      	cbz	r3, 8008ada <_dtoa_r+0x90a>
 8008ab8:	9b05      	ldr	r3, [sp, #20]
 8008aba:	3301      	adds	r3, #1
 8008abc:	9305      	str	r3, [sp, #20]
 8008abe:	9b06      	ldr	r3, [sp, #24]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	9306      	str	r3, [sp, #24]
 8008ac4:	f04f 0801 	mov.w	r8, #1
 8008ac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f47f af6f 	bne.w	80089ae <_dtoa_r+0x7de>
 8008ad0:	2001      	movs	r0, #1
 8008ad2:	e774      	b.n	80089be <_dtoa_r+0x7ee>
 8008ad4:	f04f 0800 	mov.w	r8, #0
 8008ad8:	e7f6      	b.n	8008ac8 <_dtoa_r+0x8f8>
 8008ada:	4698      	mov	r8, r3
 8008adc:	e7f4      	b.n	8008ac8 <_dtoa_r+0x8f8>
 8008ade:	d082      	beq.n	80089e6 <_dtoa_r+0x816>
 8008ae0:	9a05      	ldr	r2, [sp, #20]
 8008ae2:	331c      	adds	r3, #28
 8008ae4:	441a      	add	r2, r3
 8008ae6:	9205      	str	r2, [sp, #20]
 8008ae8:	9a06      	ldr	r2, [sp, #24]
 8008aea:	441a      	add	r2, r3
 8008aec:	441d      	add	r5, r3
 8008aee:	9206      	str	r2, [sp, #24]
 8008af0:	e779      	b.n	80089e6 <_dtoa_r+0x816>
 8008af2:	4603      	mov	r3, r0
 8008af4:	e7f4      	b.n	8008ae0 <_dtoa_r+0x910>
 8008af6:	9b04      	ldr	r3, [sp, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	dc37      	bgt.n	8008b6c <_dtoa_r+0x99c>
 8008afc:	9b07      	ldr	r3, [sp, #28]
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	dd34      	ble.n	8008b6c <_dtoa_r+0x99c>
 8008b02:	9b04      	ldr	r3, [sp, #16]
 8008b04:	9301      	str	r3, [sp, #4]
 8008b06:	9b01      	ldr	r3, [sp, #4]
 8008b08:	b963      	cbnz	r3, 8008b24 <_dtoa_r+0x954>
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	2205      	movs	r2, #5
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 fab2 	bl	8009078 <__multadd>
 8008b14:	4601      	mov	r1, r0
 8008b16:	4606      	mov	r6, r0
 8008b18:	4650      	mov	r0, sl
 8008b1a:	f000 fcc7 	bl	80094ac <__mcmp>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	f73f adbb 	bgt.w	800869a <_dtoa_r+0x4ca>
 8008b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b26:	9d00      	ldr	r5, [sp, #0]
 8008b28:	ea6f 0b03 	mvn.w	fp, r3
 8008b2c:	f04f 0800 	mov.w	r8, #0
 8008b30:	4631      	mov	r1, r6
 8008b32:	4620      	mov	r0, r4
 8008b34:	f000 fa7e 	bl	8009034 <_Bfree>
 8008b38:	2f00      	cmp	r7, #0
 8008b3a:	f43f aeab 	beq.w	8008894 <_dtoa_r+0x6c4>
 8008b3e:	f1b8 0f00 	cmp.w	r8, #0
 8008b42:	d005      	beq.n	8008b50 <_dtoa_r+0x980>
 8008b44:	45b8      	cmp	r8, r7
 8008b46:	d003      	beq.n	8008b50 <_dtoa_r+0x980>
 8008b48:	4641      	mov	r1, r8
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f000 fa72 	bl	8009034 <_Bfree>
 8008b50:	4639      	mov	r1, r7
 8008b52:	4620      	mov	r0, r4
 8008b54:	f000 fa6e 	bl	8009034 <_Bfree>
 8008b58:	e69c      	b.n	8008894 <_dtoa_r+0x6c4>
 8008b5a:	2600      	movs	r6, #0
 8008b5c:	4637      	mov	r7, r6
 8008b5e:	e7e1      	b.n	8008b24 <_dtoa_r+0x954>
 8008b60:	46bb      	mov	fp, r7
 8008b62:	4637      	mov	r7, r6
 8008b64:	e599      	b.n	800869a <_dtoa_r+0x4ca>
 8008b66:	bf00      	nop
 8008b68:	40240000 	.word	0x40240000
 8008b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	f000 80c8 	beq.w	8008d04 <_dtoa_r+0xb34>
 8008b74:	9b04      	ldr	r3, [sp, #16]
 8008b76:	9301      	str	r3, [sp, #4]
 8008b78:	2d00      	cmp	r5, #0
 8008b7a:	dd05      	ble.n	8008b88 <_dtoa_r+0x9b8>
 8008b7c:	4639      	mov	r1, r7
 8008b7e:	462a      	mov	r2, r5
 8008b80:	4620      	mov	r0, r4
 8008b82:	f000 fc27 	bl	80093d4 <__lshift>
 8008b86:	4607      	mov	r7, r0
 8008b88:	f1b8 0f00 	cmp.w	r8, #0
 8008b8c:	d05b      	beq.n	8008c46 <_dtoa_r+0xa76>
 8008b8e:	6879      	ldr	r1, [r7, #4]
 8008b90:	4620      	mov	r0, r4
 8008b92:	f000 fa0f 	bl	8008fb4 <_Balloc>
 8008b96:	4605      	mov	r5, r0
 8008b98:	b928      	cbnz	r0, 8008ba6 <_dtoa_r+0x9d6>
 8008b9a:	4b83      	ldr	r3, [pc, #524]	; (8008da8 <_dtoa_r+0xbd8>)
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008ba2:	f7ff bb2e 	b.w	8008202 <_dtoa_r+0x32>
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	3202      	adds	r2, #2
 8008baa:	0092      	lsls	r2, r2, #2
 8008bac:	f107 010c 	add.w	r1, r7, #12
 8008bb0:	300c      	adds	r0, #12
 8008bb2:	f000 ffab 	bl	8009b0c <memcpy>
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	4629      	mov	r1, r5
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f000 fc0a 	bl	80093d4 <__lshift>
 8008bc0:	9b00      	ldr	r3, [sp, #0]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	9304      	str	r3, [sp, #16]
 8008bc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bca:	4413      	add	r3, r2
 8008bcc:	9308      	str	r3, [sp, #32]
 8008bce:	9b02      	ldr	r3, [sp, #8]
 8008bd0:	f003 0301 	and.w	r3, r3, #1
 8008bd4:	46b8      	mov	r8, r7
 8008bd6:	9306      	str	r3, [sp, #24]
 8008bd8:	4607      	mov	r7, r0
 8008bda:	9b04      	ldr	r3, [sp, #16]
 8008bdc:	4631      	mov	r1, r6
 8008bde:	3b01      	subs	r3, #1
 8008be0:	4650      	mov	r0, sl
 8008be2:	9301      	str	r3, [sp, #4]
 8008be4:	f7ff fa6b 	bl	80080be <quorem>
 8008be8:	4641      	mov	r1, r8
 8008bea:	9002      	str	r0, [sp, #8]
 8008bec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008bf0:	4650      	mov	r0, sl
 8008bf2:	f000 fc5b 	bl	80094ac <__mcmp>
 8008bf6:	463a      	mov	r2, r7
 8008bf8:	9005      	str	r0, [sp, #20]
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f000 fc71 	bl	80094e4 <__mdiff>
 8008c02:	68c2      	ldr	r2, [r0, #12]
 8008c04:	4605      	mov	r5, r0
 8008c06:	bb02      	cbnz	r2, 8008c4a <_dtoa_r+0xa7a>
 8008c08:	4601      	mov	r1, r0
 8008c0a:	4650      	mov	r0, sl
 8008c0c:	f000 fc4e 	bl	80094ac <__mcmp>
 8008c10:	4602      	mov	r2, r0
 8008c12:	4629      	mov	r1, r5
 8008c14:	4620      	mov	r0, r4
 8008c16:	9209      	str	r2, [sp, #36]	; 0x24
 8008c18:	f000 fa0c 	bl	8009034 <_Bfree>
 8008c1c:	9b07      	ldr	r3, [sp, #28]
 8008c1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c20:	9d04      	ldr	r5, [sp, #16]
 8008c22:	ea43 0102 	orr.w	r1, r3, r2
 8008c26:	9b06      	ldr	r3, [sp, #24]
 8008c28:	4319      	orrs	r1, r3
 8008c2a:	d110      	bne.n	8008c4e <_dtoa_r+0xa7e>
 8008c2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c30:	d029      	beq.n	8008c86 <_dtoa_r+0xab6>
 8008c32:	9b05      	ldr	r3, [sp, #20]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	dd02      	ble.n	8008c3e <_dtoa_r+0xa6e>
 8008c38:	9b02      	ldr	r3, [sp, #8]
 8008c3a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008c3e:	9b01      	ldr	r3, [sp, #4]
 8008c40:	f883 9000 	strb.w	r9, [r3]
 8008c44:	e774      	b.n	8008b30 <_dtoa_r+0x960>
 8008c46:	4638      	mov	r0, r7
 8008c48:	e7ba      	b.n	8008bc0 <_dtoa_r+0x9f0>
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	e7e1      	b.n	8008c12 <_dtoa_r+0xa42>
 8008c4e:	9b05      	ldr	r3, [sp, #20]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	db04      	blt.n	8008c5e <_dtoa_r+0xa8e>
 8008c54:	9907      	ldr	r1, [sp, #28]
 8008c56:	430b      	orrs	r3, r1
 8008c58:	9906      	ldr	r1, [sp, #24]
 8008c5a:	430b      	orrs	r3, r1
 8008c5c:	d120      	bne.n	8008ca0 <_dtoa_r+0xad0>
 8008c5e:	2a00      	cmp	r2, #0
 8008c60:	dded      	ble.n	8008c3e <_dtoa_r+0xa6e>
 8008c62:	4651      	mov	r1, sl
 8008c64:	2201      	movs	r2, #1
 8008c66:	4620      	mov	r0, r4
 8008c68:	f000 fbb4 	bl	80093d4 <__lshift>
 8008c6c:	4631      	mov	r1, r6
 8008c6e:	4682      	mov	sl, r0
 8008c70:	f000 fc1c 	bl	80094ac <__mcmp>
 8008c74:	2800      	cmp	r0, #0
 8008c76:	dc03      	bgt.n	8008c80 <_dtoa_r+0xab0>
 8008c78:	d1e1      	bne.n	8008c3e <_dtoa_r+0xa6e>
 8008c7a:	f019 0f01 	tst.w	r9, #1
 8008c7e:	d0de      	beq.n	8008c3e <_dtoa_r+0xa6e>
 8008c80:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c84:	d1d8      	bne.n	8008c38 <_dtoa_r+0xa68>
 8008c86:	9a01      	ldr	r2, [sp, #4]
 8008c88:	2339      	movs	r3, #57	; 0x39
 8008c8a:	7013      	strb	r3, [r2, #0]
 8008c8c:	462b      	mov	r3, r5
 8008c8e:	461d      	mov	r5, r3
 8008c90:	3b01      	subs	r3, #1
 8008c92:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c96:	2a39      	cmp	r2, #57	; 0x39
 8008c98:	d06c      	beq.n	8008d74 <_dtoa_r+0xba4>
 8008c9a:	3201      	adds	r2, #1
 8008c9c:	701a      	strb	r2, [r3, #0]
 8008c9e:	e747      	b.n	8008b30 <_dtoa_r+0x960>
 8008ca0:	2a00      	cmp	r2, #0
 8008ca2:	dd07      	ble.n	8008cb4 <_dtoa_r+0xae4>
 8008ca4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008ca8:	d0ed      	beq.n	8008c86 <_dtoa_r+0xab6>
 8008caa:	9a01      	ldr	r2, [sp, #4]
 8008cac:	f109 0301 	add.w	r3, r9, #1
 8008cb0:	7013      	strb	r3, [r2, #0]
 8008cb2:	e73d      	b.n	8008b30 <_dtoa_r+0x960>
 8008cb4:	9b04      	ldr	r3, [sp, #16]
 8008cb6:	9a08      	ldr	r2, [sp, #32]
 8008cb8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d043      	beq.n	8008d48 <_dtoa_r+0xb78>
 8008cc0:	4651      	mov	r1, sl
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	220a      	movs	r2, #10
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f000 f9d6 	bl	8009078 <__multadd>
 8008ccc:	45b8      	cmp	r8, r7
 8008cce:	4682      	mov	sl, r0
 8008cd0:	f04f 0300 	mov.w	r3, #0
 8008cd4:	f04f 020a 	mov.w	r2, #10
 8008cd8:	4641      	mov	r1, r8
 8008cda:	4620      	mov	r0, r4
 8008cdc:	d107      	bne.n	8008cee <_dtoa_r+0xb1e>
 8008cde:	f000 f9cb 	bl	8009078 <__multadd>
 8008ce2:	4680      	mov	r8, r0
 8008ce4:	4607      	mov	r7, r0
 8008ce6:	9b04      	ldr	r3, [sp, #16]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	9304      	str	r3, [sp, #16]
 8008cec:	e775      	b.n	8008bda <_dtoa_r+0xa0a>
 8008cee:	f000 f9c3 	bl	8009078 <__multadd>
 8008cf2:	4639      	mov	r1, r7
 8008cf4:	4680      	mov	r8, r0
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	220a      	movs	r2, #10
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f000 f9bc 	bl	8009078 <__multadd>
 8008d00:	4607      	mov	r7, r0
 8008d02:	e7f0      	b.n	8008ce6 <_dtoa_r+0xb16>
 8008d04:	9b04      	ldr	r3, [sp, #16]
 8008d06:	9301      	str	r3, [sp, #4]
 8008d08:	9d00      	ldr	r5, [sp, #0]
 8008d0a:	4631      	mov	r1, r6
 8008d0c:	4650      	mov	r0, sl
 8008d0e:	f7ff f9d6 	bl	80080be <quorem>
 8008d12:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008d16:	9b00      	ldr	r3, [sp, #0]
 8008d18:	f805 9b01 	strb.w	r9, [r5], #1
 8008d1c:	1aea      	subs	r2, r5, r3
 8008d1e:	9b01      	ldr	r3, [sp, #4]
 8008d20:	4293      	cmp	r3, r2
 8008d22:	dd07      	ble.n	8008d34 <_dtoa_r+0xb64>
 8008d24:	4651      	mov	r1, sl
 8008d26:	2300      	movs	r3, #0
 8008d28:	220a      	movs	r2, #10
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f000 f9a4 	bl	8009078 <__multadd>
 8008d30:	4682      	mov	sl, r0
 8008d32:	e7ea      	b.n	8008d0a <_dtoa_r+0xb3a>
 8008d34:	9b01      	ldr	r3, [sp, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	bfc8      	it	gt
 8008d3a:	461d      	movgt	r5, r3
 8008d3c:	9b00      	ldr	r3, [sp, #0]
 8008d3e:	bfd8      	it	le
 8008d40:	2501      	movle	r5, #1
 8008d42:	441d      	add	r5, r3
 8008d44:	f04f 0800 	mov.w	r8, #0
 8008d48:	4651      	mov	r1, sl
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	f000 fb41 	bl	80093d4 <__lshift>
 8008d52:	4631      	mov	r1, r6
 8008d54:	4682      	mov	sl, r0
 8008d56:	f000 fba9 	bl	80094ac <__mcmp>
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	dc96      	bgt.n	8008c8c <_dtoa_r+0xabc>
 8008d5e:	d102      	bne.n	8008d66 <_dtoa_r+0xb96>
 8008d60:	f019 0f01 	tst.w	r9, #1
 8008d64:	d192      	bne.n	8008c8c <_dtoa_r+0xabc>
 8008d66:	462b      	mov	r3, r5
 8008d68:	461d      	mov	r5, r3
 8008d6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d6e:	2a30      	cmp	r2, #48	; 0x30
 8008d70:	d0fa      	beq.n	8008d68 <_dtoa_r+0xb98>
 8008d72:	e6dd      	b.n	8008b30 <_dtoa_r+0x960>
 8008d74:	9a00      	ldr	r2, [sp, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d189      	bne.n	8008c8e <_dtoa_r+0xabe>
 8008d7a:	f10b 0b01 	add.w	fp, fp, #1
 8008d7e:	2331      	movs	r3, #49	; 0x31
 8008d80:	e796      	b.n	8008cb0 <_dtoa_r+0xae0>
 8008d82:	4b0a      	ldr	r3, [pc, #40]	; (8008dac <_dtoa_r+0xbdc>)
 8008d84:	f7ff ba99 	b.w	80082ba <_dtoa_r+0xea>
 8008d88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f47f aa6d 	bne.w	800826a <_dtoa_r+0x9a>
 8008d90:	4b07      	ldr	r3, [pc, #28]	; (8008db0 <_dtoa_r+0xbe0>)
 8008d92:	f7ff ba92 	b.w	80082ba <_dtoa_r+0xea>
 8008d96:	9b01      	ldr	r3, [sp, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	dcb5      	bgt.n	8008d08 <_dtoa_r+0xb38>
 8008d9c:	9b07      	ldr	r3, [sp, #28]
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	f73f aeb1 	bgt.w	8008b06 <_dtoa_r+0x936>
 8008da4:	e7b0      	b.n	8008d08 <_dtoa_r+0xb38>
 8008da6:	bf00      	nop
 8008da8:	0800a374 	.word	0x0800a374
 8008dac:	0800a2d4 	.word	0x0800a2d4
 8008db0:	0800a2f8 	.word	0x0800a2f8

08008db4 <_free_r>:
 8008db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008db6:	2900      	cmp	r1, #0
 8008db8:	d044      	beq.n	8008e44 <_free_r+0x90>
 8008dba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dbe:	9001      	str	r0, [sp, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f1a1 0404 	sub.w	r4, r1, #4
 8008dc6:	bfb8      	it	lt
 8008dc8:	18e4      	addlt	r4, r4, r3
 8008dca:	f000 f8e7 	bl	8008f9c <__malloc_lock>
 8008dce:	4a1e      	ldr	r2, [pc, #120]	; (8008e48 <_free_r+0x94>)
 8008dd0:	9801      	ldr	r0, [sp, #4]
 8008dd2:	6813      	ldr	r3, [r2, #0]
 8008dd4:	b933      	cbnz	r3, 8008de4 <_free_r+0x30>
 8008dd6:	6063      	str	r3, [r4, #4]
 8008dd8:	6014      	str	r4, [r2, #0]
 8008dda:	b003      	add	sp, #12
 8008ddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008de0:	f000 b8e2 	b.w	8008fa8 <__malloc_unlock>
 8008de4:	42a3      	cmp	r3, r4
 8008de6:	d908      	bls.n	8008dfa <_free_r+0x46>
 8008de8:	6825      	ldr	r5, [r4, #0]
 8008dea:	1961      	adds	r1, r4, r5
 8008dec:	428b      	cmp	r3, r1
 8008dee:	bf01      	itttt	eq
 8008df0:	6819      	ldreq	r1, [r3, #0]
 8008df2:	685b      	ldreq	r3, [r3, #4]
 8008df4:	1949      	addeq	r1, r1, r5
 8008df6:	6021      	streq	r1, [r4, #0]
 8008df8:	e7ed      	b.n	8008dd6 <_free_r+0x22>
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	b10b      	cbz	r3, 8008e04 <_free_r+0x50>
 8008e00:	42a3      	cmp	r3, r4
 8008e02:	d9fa      	bls.n	8008dfa <_free_r+0x46>
 8008e04:	6811      	ldr	r1, [r2, #0]
 8008e06:	1855      	adds	r5, r2, r1
 8008e08:	42a5      	cmp	r5, r4
 8008e0a:	d10b      	bne.n	8008e24 <_free_r+0x70>
 8008e0c:	6824      	ldr	r4, [r4, #0]
 8008e0e:	4421      	add	r1, r4
 8008e10:	1854      	adds	r4, r2, r1
 8008e12:	42a3      	cmp	r3, r4
 8008e14:	6011      	str	r1, [r2, #0]
 8008e16:	d1e0      	bne.n	8008dda <_free_r+0x26>
 8008e18:	681c      	ldr	r4, [r3, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	6053      	str	r3, [r2, #4]
 8008e1e:	440c      	add	r4, r1
 8008e20:	6014      	str	r4, [r2, #0]
 8008e22:	e7da      	b.n	8008dda <_free_r+0x26>
 8008e24:	d902      	bls.n	8008e2c <_free_r+0x78>
 8008e26:	230c      	movs	r3, #12
 8008e28:	6003      	str	r3, [r0, #0]
 8008e2a:	e7d6      	b.n	8008dda <_free_r+0x26>
 8008e2c:	6825      	ldr	r5, [r4, #0]
 8008e2e:	1961      	adds	r1, r4, r5
 8008e30:	428b      	cmp	r3, r1
 8008e32:	bf04      	itt	eq
 8008e34:	6819      	ldreq	r1, [r3, #0]
 8008e36:	685b      	ldreq	r3, [r3, #4]
 8008e38:	6063      	str	r3, [r4, #4]
 8008e3a:	bf04      	itt	eq
 8008e3c:	1949      	addeq	r1, r1, r5
 8008e3e:	6021      	streq	r1, [r4, #0]
 8008e40:	6054      	str	r4, [r2, #4]
 8008e42:	e7ca      	b.n	8008dda <_free_r+0x26>
 8008e44:	b003      	add	sp, #12
 8008e46:	bd30      	pop	{r4, r5, pc}
 8008e48:	20000748 	.word	0x20000748

08008e4c <malloc>:
 8008e4c:	4b02      	ldr	r3, [pc, #8]	; (8008e58 <malloc+0xc>)
 8008e4e:	4601      	mov	r1, r0
 8008e50:	6818      	ldr	r0, [r3, #0]
 8008e52:	f000 b823 	b.w	8008e9c <_malloc_r>
 8008e56:	bf00      	nop
 8008e58:	20000084 	.word	0x20000084

08008e5c <sbrk_aligned>:
 8008e5c:	b570      	push	{r4, r5, r6, lr}
 8008e5e:	4e0e      	ldr	r6, [pc, #56]	; (8008e98 <sbrk_aligned+0x3c>)
 8008e60:	460c      	mov	r4, r1
 8008e62:	6831      	ldr	r1, [r6, #0]
 8008e64:	4605      	mov	r5, r0
 8008e66:	b911      	cbnz	r1, 8008e6e <sbrk_aligned+0x12>
 8008e68:	f000 fe40 	bl	8009aec <_sbrk_r>
 8008e6c:	6030      	str	r0, [r6, #0]
 8008e6e:	4621      	mov	r1, r4
 8008e70:	4628      	mov	r0, r5
 8008e72:	f000 fe3b 	bl	8009aec <_sbrk_r>
 8008e76:	1c43      	adds	r3, r0, #1
 8008e78:	d00a      	beq.n	8008e90 <sbrk_aligned+0x34>
 8008e7a:	1cc4      	adds	r4, r0, #3
 8008e7c:	f024 0403 	bic.w	r4, r4, #3
 8008e80:	42a0      	cmp	r0, r4
 8008e82:	d007      	beq.n	8008e94 <sbrk_aligned+0x38>
 8008e84:	1a21      	subs	r1, r4, r0
 8008e86:	4628      	mov	r0, r5
 8008e88:	f000 fe30 	bl	8009aec <_sbrk_r>
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	d101      	bne.n	8008e94 <sbrk_aligned+0x38>
 8008e90:	f04f 34ff 	mov.w	r4, #4294967295
 8008e94:	4620      	mov	r0, r4
 8008e96:	bd70      	pop	{r4, r5, r6, pc}
 8008e98:	2000074c 	.word	0x2000074c

08008e9c <_malloc_r>:
 8008e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ea0:	1ccd      	adds	r5, r1, #3
 8008ea2:	f025 0503 	bic.w	r5, r5, #3
 8008ea6:	3508      	adds	r5, #8
 8008ea8:	2d0c      	cmp	r5, #12
 8008eaa:	bf38      	it	cc
 8008eac:	250c      	movcc	r5, #12
 8008eae:	2d00      	cmp	r5, #0
 8008eb0:	4607      	mov	r7, r0
 8008eb2:	db01      	blt.n	8008eb8 <_malloc_r+0x1c>
 8008eb4:	42a9      	cmp	r1, r5
 8008eb6:	d905      	bls.n	8008ec4 <_malloc_r+0x28>
 8008eb8:	230c      	movs	r3, #12
 8008eba:	603b      	str	r3, [r7, #0]
 8008ebc:	2600      	movs	r6, #0
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ec4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008f98 <_malloc_r+0xfc>
 8008ec8:	f000 f868 	bl	8008f9c <__malloc_lock>
 8008ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8008ed0:	461c      	mov	r4, r3
 8008ed2:	bb5c      	cbnz	r4, 8008f2c <_malloc_r+0x90>
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	4638      	mov	r0, r7
 8008ed8:	f7ff ffc0 	bl	8008e5c <sbrk_aligned>
 8008edc:	1c43      	adds	r3, r0, #1
 8008ede:	4604      	mov	r4, r0
 8008ee0:	d155      	bne.n	8008f8e <_malloc_r+0xf2>
 8008ee2:	f8d8 4000 	ldr.w	r4, [r8]
 8008ee6:	4626      	mov	r6, r4
 8008ee8:	2e00      	cmp	r6, #0
 8008eea:	d145      	bne.n	8008f78 <_malloc_r+0xdc>
 8008eec:	2c00      	cmp	r4, #0
 8008eee:	d048      	beq.n	8008f82 <_malloc_r+0xe6>
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	4631      	mov	r1, r6
 8008ef4:	4638      	mov	r0, r7
 8008ef6:	eb04 0903 	add.w	r9, r4, r3
 8008efa:	f000 fdf7 	bl	8009aec <_sbrk_r>
 8008efe:	4581      	cmp	r9, r0
 8008f00:	d13f      	bne.n	8008f82 <_malloc_r+0xe6>
 8008f02:	6821      	ldr	r1, [r4, #0]
 8008f04:	1a6d      	subs	r5, r5, r1
 8008f06:	4629      	mov	r1, r5
 8008f08:	4638      	mov	r0, r7
 8008f0a:	f7ff ffa7 	bl	8008e5c <sbrk_aligned>
 8008f0e:	3001      	adds	r0, #1
 8008f10:	d037      	beq.n	8008f82 <_malloc_r+0xe6>
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	442b      	add	r3, r5
 8008f16:	6023      	str	r3, [r4, #0]
 8008f18:	f8d8 3000 	ldr.w	r3, [r8]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d038      	beq.n	8008f92 <_malloc_r+0xf6>
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	42a2      	cmp	r2, r4
 8008f24:	d12b      	bne.n	8008f7e <_malloc_r+0xe2>
 8008f26:	2200      	movs	r2, #0
 8008f28:	605a      	str	r2, [r3, #4]
 8008f2a:	e00f      	b.n	8008f4c <_malloc_r+0xb0>
 8008f2c:	6822      	ldr	r2, [r4, #0]
 8008f2e:	1b52      	subs	r2, r2, r5
 8008f30:	d41f      	bmi.n	8008f72 <_malloc_r+0xd6>
 8008f32:	2a0b      	cmp	r2, #11
 8008f34:	d917      	bls.n	8008f66 <_malloc_r+0xca>
 8008f36:	1961      	adds	r1, r4, r5
 8008f38:	42a3      	cmp	r3, r4
 8008f3a:	6025      	str	r5, [r4, #0]
 8008f3c:	bf18      	it	ne
 8008f3e:	6059      	strne	r1, [r3, #4]
 8008f40:	6863      	ldr	r3, [r4, #4]
 8008f42:	bf08      	it	eq
 8008f44:	f8c8 1000 	streq.w	r1, [r8]
 8008f48:	5162      	str	r2, [r4, r5]
 8008f4a:	604b      	str	r3, [r1, #4]
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	f104 060b 	add.w	r6, r4, #11
 8008f52:	f000 f829 	bl	8008fa8 <__malloc_unlock>
 8008f56:	f026 0607 	bic.w	r6, r6, #7
 8008f5a:	1d23      	adds	r3, r4, #4
 8008f5c:	1af2      	subs	r2, r6, r3
 8008f5e:	d0ae      	beq.n	8008ebe <_malloc_r+0x22>
 8008f60:	1b9b      	subs	r3, r3, r6
 8008f62:	50a3      	str	r3, [r4, r2]
 8008f64:	e7ab      	b.n	8008ebe <_malloc_r+0x22>
 8008f66:	42a3      	cmp	r3, r4
 8008f68:	6862      	ldr	r2, [r4, #4]
 8008f6a:	d1dd      	bne.n	8008f28 <_malloc_r+0x8c>
 8008f6c:	f8c8 2000 	str.w	r2, [r8]
 8008f70:	e7ec      	b.n	8008f4c <_malloc_r+0xb0>
 8008f72:	4623      	mov	r3, r4
 8008f74:	6864      	ldr	r4, [r4, #4]
 8008f76:	e7ac      	b.n	8008ed2 <_malloc_r+0x36>
 8008f78:	4634      	mov	r4, r6
 8008f7a:	6876      	ldr	r6, [r6, #4]
 8008f7c:	e7b4      	b.n	8008ee8 <_malloc_r+0x4c>
 8008f7e:	4613      	mov	r3, r2
 8008f80:	e7cc      	b.n	8008f1c <_malloc_r+0x80>
 8008f82:	230c      	movs	r3, #12
 8008f84:	603b      	str	r3, [r7, #0]
 8008f86:	4638      	mov	r0, r7
 8008f88:	f000 f80e 	bl	8008fa8 <__malloc_unlock>
 8008f8c:	e797      	b.n	8008ebe <_malloc_r+0x22>
 8008f8e:	6025      	str	r5, [r4, #0]
 8008f90:	e7dc      	b.n	8008f4c <_malloc_r+0xb0>
 8008f92:	605b      	str	r3, [r3, #4]
 8008f94:	deff      	udf	#255	; 0xff
 8008f96:	bf00      	nop
 8008f98:	20000748 	.word	0x20000748

08008f9c <__malloc_lock>:
 8008f9c:	4801      	ldr	r0, [pc, #4]	; (8008fa4 <__malloc_lock+0x8>)
 8008f9e:	f7ff b88c 	b.w	80080ba <__retarget_lock_acquire_recursive>
 8008fa2:	bf00      	nop
 8008fa4:	20000744 	.word	0x20000744

08008fa8 <__malloc_unlock>:
 8008fa8:	4801      	ldr	r0, [pc, #4]	; (8008fb0 <__malloc_unlock+0x8>)
 8008faa:	f7ff b887 	b.w	80080bc <__retarget_lock_release_recursive>
 8008fae:	bf00      	nop
 8008fb0:	20000744 	.word	0x20000744

08008fb4 <_Balloc>:
 8008fb4:	b570      	push	{r4, r5, r6, lr}
 8008fb6:	69c6      	ldr	r6, [r0, #28]
 8008fb8:	4604      	mov	r4, r0
 8008fba:	460d      	mov	r5, r1
 8008fbc:	b976      	cbnz	r6, 8008fdc <_Balloc+0x28>
 8008fbe:	2010      	movs	r0, #16
 8008fc0:	f7ff ff44 	bl	8008e4c <malloc>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	61e0      	str	r0, [r4, #28]
 8008fc8:	b920      	cbnz	r0, 8008fd4 <_Balloc+0x20>
 8008fca:	4b18      	ldr	r3, [pc, #96]	; (800902c <_Balloc+0x78>)
 8008fcc:	4818      	ldr	r0, [pc, #96]	; (8009030 <_Balloc+0x7c>)
 8008fce:	216b      	movs	r1, #107	; 0x6b
 8008fd0:	f000 fdaa 	bl	8009b28 <__assert_func>
 8008fd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fd8:	6006      	str	r6, [r0, #0]
 8008fda:	60c6      	str	r6, [r0, #12]
 8008fdc:	69e6      	ldr	r6, [r4, #28]
 8008fde:	68f3      	ldr	r3, [r6, #12]
 8008fe0:	b183      	cbz	r3, 8009004 <_Balloc+0x50>
 8008fe2:	69e3      	ldr	r3, [r4, #28]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fea:	b9b8      	cbnz	r0, 800901c <_Balloc+0x68>
 8008fec:	2101      	movs	r1, #1
 8008fee:	fa01 f605 	lsl.w	r6, r1, r5
 8008ff2:	1d72      	adds	r2, r6, #5
 8008ff4:	0092      	lsls	r2, r2, #2
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f000 fdb4 	bl	8009b64 <_calloc_r>
 8008ffc:	b160      	cbz	r0, 8009018 <_Balloc+0x64>
 8008ffe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009002:	e00e      	b.n	8009022 <_Balloc+0x6e>
 8009004:	2221      	movs	r2, #33	; 0x21
 8009006:	2104      	movs	r1, #4
 8009008:	4620      	mov	r0, r4
 800900a:	f000 fdab 	bl	8009b64 <_calloc_r>
 800900e:	69e3      	ldr	r3, [r4, #28]
 8009010:	60f0      	str	r0, [r6, #12]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e4      	bne.n	8008fe2 <_Balloc+0x2e>
 8009018:	2000      	movs	r0, #0
 800901a:	bd70      	pop	{r4, r5, r6, pc}
 800901c:	6802      	ldr	r2, [r0, #0]
 800901e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009022:	2300      	movs	r3, #0
 8009024:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009028:	e7f7      	b.n	800901a <_Balloc+0x66>
 800902a:	bf00      	nop
 800902c:	0800a305 	.word	0x0800a305
 8009030:	0800a385 	.word	0x0800a385

08009034 <_Bfree>:
 8009034:	b570      	push	{r4, r5, r6, lr}
 8009036:	69c6      	ldr	r6, [r0, #28]
 8009038:	4605      	mov	r5, r0
 800903a:	460c      	mov	r4, r1
 800903c:	b976      	cbnz	r6, 800905c <_Bfree+0x28>
 800903e:	2010      	movs	r0, #16
 8009040:	f7ff ff04 	bl	8008e4c <malloc>
 8009044:	4602      	mov	r2, r0
 8009046:	61e8      	str	r0, [r5, #28]
 8009048:	b920      	cbnz	r0, 8009054 <_Bfree+0x20>
 800904a:	4b09      	ldr	r3, [pc, #36]	; (8009070 <_Bfree+0x3c>)
 800904c:	4809      	ldr	r0, [pc, #36]	; (8009074 <_Bfree+0x40>)
 800904e:	218f      	movs	r1, #143	; 0x8f
 8009050:	f000 fd6a 	bl	8009b28 <__assert_func>
 8009054:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009058:	6006      	str	r6, [r0, #0]
 800905a:	60c6      	str	r6, [r0, #12]
 800905c:	b13c      	cbz	r4, 800906e <_Bfree+0x3a>
 800905e:	69eb      	ldr	r3, [r5, #28]
 8009060:	6862      	ldr	r2, [r4, #4]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009068:	6021      	str	r1, [r4, #0]
 800906a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800906e:	bd70      	pop	{r4, r5, r6, pc}
 8009070:	0800a305 	.word	0x0800a305
 8009074:	0800a385 	.word	0x0800a385

08009078 <__multadd>:
 8009078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800907c:	690d      	ldr	r5, [r1, #16]
 800907e:	4607      	mov	r7, r0
 8009080:	460c      	mov	r4, r1
 8009082:	461e      	mov	r6, r3
 8009084:	f101 0c14 	add.w	ip, r1, #20
 8009088:	2000      	movs	r0, #0
 800908a:	f8dc 3000 	ldr.w	r3, [ip]
 800908e:	b299      	uxth	r1, r3
 8009090:	fb02 6101 	mla	r1, r2, r1, r6
 8009094:	0c1e      	lsrs	r6, r3, #16
 8009096:	0c0b      	lsrs	r3, r1, #16
 8009098:	fb02 3306 	mla	r3, r2, r6, r3
 800909c:	b289      	uxth	r1, r1
 800909e:	3001      	adds	r0, #1
 80090a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80090a4:	4285      	cmp	r5, r0
 80090a6:	f84c 1b04 	str.w	r1, [ip], #4
 80090aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090ae:	dcec      	bgt.n	800908a <__multadd+0x12>
 80090b0:	b30e      	cbz	r6, 80090f6 <__multadd+0x7e>
 80090b2:	68a3      	ldr	r3, [r4, #8]
 80090b4:	42ab      	cmp	r3, r5
 80090b6:	dc19      	bgt.n	80090ec <__multadd+0x74>
 80090b8:	6861      	ldr	r1, [r4, #4]
 80090ba:	4638      	mov	r0, r7
 80090bc:	3101      	adds	r1, #1
 80090be:	f7ff ff79 	bl	8008fb4 <_Balloc>
 80090c2:	4680      	mov	r8, r0
 80090c4:	b928      	cbnz	r0, 80090d2 <__multadd+0x5a>
 80090c6:	4602      	mov	r2, r0
 80090c8:	4b0c      	ldr	r3, [pc, #48]	; (80090fc <__multadd+0x84>)
 80090ca:	480d      	ldr	r0, [pc, #52]	; (8009100 <__multadd+0x88>)
 80090cc:	21ba      	movs	r1, #186	; 0xba
 80090ce:	f000 fd2b 	bl	8009b28 <__assert_func>
 80090d2:	6922      	ldr	r2, [r4, #16]
 80090d4:	3202      	adds	r2, #2
 80090d6:	f104 010c 	add.w	r1, r4, #12
 80090da:	0092      	lsls	r2, r2, #2
 80090dc:	300c      	adds	r0, #12
 80090de:	f000 fd15 	bl	8009b0c <memcpy>
 80090e2:	4621      	mov	r1, r4
 80090e4:	4638      	mov	r0, r7
 80090e6:	f7ff ffa5 	bl	8009034 <_Bfree>
 80090ea:	4644      	mov	r4, r8
 80090ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090f0:	3501      	adds	r5, #1
 80090f2:	615e      	str	r6, [r3, #20]
 80090f4:	6125      	str	r5, [r4, #16]
 80090f6:	4620      	mov	r0, r4
 80090f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090fc:	0800a374 	.word	0x0800a374
 8009100:	0800a385 	.word	0x0800a385

08009104 <__hi0bits>:
 8009104:	0c03      	lsrs	r3, r0, #16
 8009106:	041b      	lsls	r3, r3, #16
 8009108:	b9d3      	cbnz	r3, 8009140 <__hi0bits+0x3c>
 800910a:	0400      	lsls	r0, r0, #16
 800910c:	2310      	movs	r3, #16
 800910e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009112:	bf04      	itt	eq
 8009114:	0200      	lsleq	r0, r0, #8
 8009116:	3308      	addeq	r3, #8
 8009118:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800911c:	bf04      	itt	eq
 800911e:	0100      	lsleq	r0, r0, #4
 8009120:	3304      	addeq	r3, #4
 8009122:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009126:	bf04      	itt	eq
 8009128:	0080      	lsleq	r0, r0, #2
 800912a:	3302      	addeq	r3, #2
 800912c:	2800      	cmp	r0, #0
 800912e:	db05      	blt.n	800913c <__hi0bits+0x38>
 8009130:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009134:	f103 0301 	add.w	r3, r3, #1
 8009138:	bf08      	it	eq
 800913a:	2320      	moveq	r3, #32
 800913c:	4618      	mov	r0, r3
 800913e:	4770      	bx	lr
 8009140:	2300      	movs	r3, #0
 8009142:	e7e4      	b.n	800910e <__hi0bits+0xa>

08009144 <__lo0bits>:
 8009144:	6803      	ldr	r3, [r0, #0]
 8009146:	f013 0207 	ands.w	r2, r3, #7
 800914a:	d00c      	beq.n	8009166 <__lo0bits+0x22>
 800914c:	07d9      	lsls	r1, r3, #31
 800914e:	d422      	bmi.n	8009196 <__lo0bits+0x52>
 8009150:	079a      	lsls	r2, r3, #30
 8009152:	bf49      	itett	mi
 8009154:	085b      	lsrmi	r3, r3, #1
 8009156:	089b      	lsrpl	r3, r3, #2
 8009158:	6003      	strmi	r3, [r0, #0]
 800915a:	2201      	movmi	r2, #1
 800915c:	bf5c      	itt	pl
 800915e:	6003      	strpl	r3, [r0, #0]
 8009160:	2202      	movpl	r2, #2
 8009162:	4610      	mov	r0, r2
 8009164:	4770      	bx	lr
 8009166:	b299      	uxth	r1, r3
 8009168:	b909      	cbnz	r1, 800916e <__lo0bits+0x2a>
 800916a:	0c1b      	lsrs	r3, r3, #16
 800916c:	2210      	movs	r2, #16
 800916e:	b2d9      	uxtb	r1, r3
 8009170:	b909      	cbnz	r1, 8009176 <__lo0bits+0x32>
 8009172:	3208      	adds	r2, #8
 8009174:	0a1b      	lsrs	r3, r3, #8
 8009176:	0719      	lsls	r1, r3, #28
 8009178:	bf04      	itt	eq
 800917a:	091b      	lsreq	r3, r3, #4
 800917c:	3204      	addeq	r2, #4
 800917e:	0799      	lsls	r1, r3, #30
 8009180:	bf04      	itt	eq
 8009182:	089b      	lsreq	r3, r3, #2
 8009184:	3202      	addeq	r2, #2
 8009186:	07d9      	lsls	r1, r3, #31
 8009188:	d403      	bmi.n	8009192 <__lo0bits+0x4e>
 800918a:	085b      	lsrs	r3, r3, #1
 800918c:	f102 0201 	add.w	r2, r2, #1
 8009190:	d003      	beq.n	800919a <__lo0bits+0x56>
 8009192:	6003      	str	r3, [r0, #0]
 8009194:	e7e5      	b.n	8009162 <__lo0bits+0x1e>
 8009196:	2200      	movs	r2, #0
 8009198:	e7e3      	b.n	8009162 <__lo0bits+0x1e>
 800919a:	2220      	movs	r2, #32
 800919c:	e7e1      	b.n	8009162 <__lo0bits+0x1e>
	...

080091a0 <__i2b>:
 80091a0:	b510      	push	{r4, lr}
 80091a2:	460c      	mov	r4, r1
 80091a4:	2101      	movs	r1, #1
 80091a6:	f7ff ff05 	bl	8008fb4 <_Balloc>
 80091aa:	4602      	mov	r2, r0
 80091ac:	b928      	cbnz	r0, 80091ba <__i2b+0x1a>
 80091ae:	4b05      	ldr	r3, [pc, #20]	; (80091c4 <__i2b+0x24>)
 80091b0:	4805      	ldr	r0, [pc, #20]	; (80091c8 <__i2b+0x28>)
 80091b2:	f240 1145 	movw	r1, #325	; 0x145
 80091b6:	f000 fcb7 	bl	8009b28 <__assert_func>
 80091ba:	2301      	movs	r3, #1
 80091bc:	6144      	str	r4, [r0, #20]
 80091be:	6103      	str	r3, [r0, #16]
 80091c0:	bd10      	pop	{r4, pc}
 80091c2:	bf00      	nop
 80091c4:	0800a374 	.word	0x0800a374
 80091c8:	0800a385 	.word	0x0800a385

080091cc <__multiply>:
 80091cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d0:	4691      	mov	r9, r2
 80091d2:	690a      	ldr	r2, [r1, #16]
 80091d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80091d8:	429a      	cmp	r2, r3
 80091da:	bfb8      	it	lt
 80091dc:	460b      	movlt	r3, r1
 80091de:	460c      	mov	r4, r1
 80091e0:	bfbc      	itt	lt
 80091e2:	464c      	movlt	r4, r9
 80091e4:	4699      	movlt	r9, r3
 80091e6:	6927      	ldr	r7, [r4, #16]
 80091e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80091ec:	68a3      	ldr	r3, [r4, #8]
 80091ee:	6861      	ldr	r1, [r4, #4]
 80091f0:	eb07 060a 	add.w	r6, r7, sl
 80091f4:	42b3      	cmp	r3, r6
 80091f6:	b085      	sub	sp, #20
 80091f8:	bfb8      	it	lt
 80091fa:	3101      	addlt	r1, #1
 80091fc:	f7ff feda 	bl	8008fb4 <_Balloc>
 8009200:	b930      	cbnz	r0, 8009210 <__multiply+0x44>
 8009202:	4602      	mov	r2, r0
 8009204:	4b44      	ldr	r3, [pc, #272]	; (8009318 <__multiply+0x14c>)
 8009206:	4845      	ldr	r0, [pc, #276]	; (800931c <__multiply+0x150>)
 8009208:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800920c:	f000 fc8c 	bl	8009b28 <__assert_func>
 8009210:	f100 0514 	add.w	r5, r0, #20
 8009214:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009218:	462b      	mov	r3, r5
 800921a:	2200      	movs	r2, #0
 800921c:	4543      	cmp	r3, r8
 800921e:	d321      	bcc.n	8009264 <__multiply+0x98>
 8009220:	f104 0314 	add.w	r3, r4, #20
 8009224:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009228:	f109 0314 	add.w	r3, r9, #20
 800922c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009230:	9202      	str	r2, [sp, #8]
 8009232:	1b3a      	subs	r2, r7, r4
 8009234:	3a15      	subs	r2, #21
 8009236:	f022 0203 	bic.w	r2, r2, #3
 800923a:	3204      	adds	r2, #4
 800923c:	f104 0115 	add.w	r1, r4, #21
 8009240:	428f      	cmp	r7, r1
 8009242:	bf38      	it	cc
 8009244:	2204      	movcc	r2, #4
 8009246:	9201      	str	r2, [sp, #4]
 8009248:	9a02      	ldr	r2, [sp, #8]
 800924a:	9303      	str	r3, [sp, #12]
 800924c:	429a      	cmp	r2, r3
 800924e:	d80c      	bhi.n	800926a <__multiply+0x9e>
 8009250:	2e00      	cmp	r6, #0
 8009252:	dd03      	ble.n	800925c <__multiply+0x90>
 8009254:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009258:	2b00      	cmp	r3, #0
 800925a:	d05b      	beq.n	8009314 <__multiply+0x148>
 800925c:	6106      	str	r6, [r0, #16]
 800925e:	b005      	add	sp, #20
 8009260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009264:	f843 2b04 	str.w	r2, [r3], #4
 8009268:	e7d8      	b.n	800921c <__multiply+0x50>
 800926a:	f8b3 a000 	ldrh.w	sl, [r3]
 800926e:	f1ba 0f00 	cmp.w	sl, #0
 8009272:	d024      	beq.n	80092be <__multiply+0xf2>
 8009274:	f104 0e14 	add.w	lr, r4, #20
 8009278:	46a9      	mov	r9, r5
 800927a:	f04f 0c00 	mov.w	ip, #0
 800927e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009282:	f8d9 1000 	ldr.w	r1, [r9]
 8009286:	fa1f fb82 	uxth.w	fp, r2
 800928a:	b289      	uxth	r1, r1
 800928c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009290:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009294:	f8d9 2000 	ldr.w	r2, [r9]
 8009298:	4461      	add	r1, ip
 800929a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800929e:	fb0a c20b 	mla	r2, sl, fp, ip
 80092a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80092a6:	b289      	uxth	r1, r1
 80092a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80092ac:	4577      	cmp	r7, lr
 80092ae:	f849 1b04 	str.w	r1, [r9], #4
 80092b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80092b6:	d8e2      	bhi.n	800927e <__multiply+0xb2>
 80092b8:	9a01      	ldr	r2, [sp, #4]
 80092ba:	f845 c002 	str.w	ip, [r5, r2]
 80092be:	9a03      	ldr	r2, [sp, #12]
 80092c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092c4:	3304      	adds	r3, #4
 80092c6:	f1b9 0f00 	cmp.w	r9, #0
 80092ca:	d021      	beq.n	8009310 <__multiply+0x144>
 80092cc:	6829      	ldr	r1, [r5, #0]
 80092ce:	f104 0c14 	add.w	ip, r4, #20
 80092d2:	46ae      	mov	lr, r5
 80092d4:	f04f 0a00 	mov.w	sl, #0
 80092d8:	f8bc b000 	ldrh.w	fp, [ip]
 80092dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80092e0:	fb09 220b 	mla	r2, r9, fp, r2
 80092e4:	4452      	add	r2, sl
 80092e6:	b289      	uxth	r1, r1
 80092e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80092ec:	f84e 1b04 	str.w	r1, [lr], #4
 80092f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80092f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80092f8:	f8be 1000 	ldrh.w	r1, [lr]
 80092fc:	fb09 110a 	mla	r1, r9, sl, r1
 8009300:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009304:	4567      	cmp	r7, ip
 8009306:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800930a:	d8e5      	bhi.n	80092d8 <__multiply+0x10c>
 800930c:	9a01      	ldr	r2, [sp, #4]
 800930e:	50a9      	str	r1, [r5, r2]
 8009310:	3504      	adds	r5, #4
 8009312:	e799      	b.n	8009248 <__multiply+0x7c>
 8009314:	3e01      	subs	r6, #1
 8009316:	e79b      	b.n	8009250 <__multiply+0x84>
 8009318:	0800a374 	.word	0x0800a374
 800931c:	0800a385 	.word	0x0800a385

08009320 <__pow5mult>:
 8009320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009324:	4615      	mov	r5, r2
 8009326:	f012 0203 	ands.w	r2, r2, #3
 800932a:	4606      	mov	r6, r0
 800932c:	460f      	mov	r7, r1
 800932e:	d007      	beq.n	8009340 <__pow5mult+0x20>
 8009330:	4c25      	ldr	r4, [pc, #148]	; (80093c8 <__pow5mult+0xa8>)
 8009332:	3a01      	subs	r2, #1
 8009334:	2300      	movs	r3, #0
 8009336:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800933a:	f7ff fe9d 	bl	8009078 <__multadd>
 800933e:	4607      	mov	r7, r0
 8009340:	10ad      	asrs	r5, r5, #2
 8009342:	d03d      	beq.n	80093c0 <__pow5mult+0xa0>
 8009344:	69f4      	ldr	r4, [r6, #28]
 8009346:	b97c      	cbnz	r4, 8009368 <__pow5mult+0x48>
 8009348:	2010      	movs	r0, #16
 800934a:	f7ff fd7f 	bl	8008e4c <malloc>
 800934e:	4602      	mov	r2, r0
 8009350:	61f0      	str	r0, [r6, #28]
 8009352:	b928      	cbnz	r0, 8009360 <__pow5mult+0x40>
 8009354:	4b1d      	ldr	r3, [pc, #116]	; (80093cc <__pow5mult+0xac>)
 8009356:	481e      	ldr	r0, [pc, #120]	; (80093d0 <__pow5mult+0xb0>)
 8009358:	f240 11b3 	movw	r1, #435	; 0x1b3
 800935c:	f000 fbe4 	bl	8009b28 <__assert_func>
 8009360:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009364:	6004      	str	r4, [r0, #0]
 8009366:	60c4      	str	r4, [r0, #12]
 8009368:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800936c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009370:	b94c      	cbnz	r4, 8009386 <__pow5mult+0x66>
 8009372:	f240 2171 	movw	r1, #625	; 0x271
 8009376:	4630      	mov	r0, r6
 8009378:	f7ff ff12 	bl	80091a0 <__i2b>
 800937c:	2300      	movs	r3, #0
 800937e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009382:	4604      	mov	r4, r0
 8009384:	6003      	str	r3, [r0, #0]
 8009386:	f04f 0900 	mov.w	r9, #0
 800938a:	07eb      	lsls	r3, r5, #31
 800938c:	d50a      	bpl.n	80093a4 <__pow5mult+0x84>
 800938e:	4639      	mov	r1, r7
 8009390:	4622      	mov	r2, r4
 8009392:	4630      	mov	r0, r6
 8009394:	f7ff ff1a 	bl	80091cc <__multiply>
 8009398:	4639      	mov	r1, r7
 800939a:	4680      	mov	r8, r0
 800939c:	4630      	mov	r0, r6
 800939e:	f7ff fe49 	bl	8009034 <_Bfree>
 80093a2:	4647      	mov	r7, r8
 80093a4:	106d      	asrs	r5, r5, #1
 80093a6:	d00b      	beq.n	80093c0 <__pow5mult+0xa0>
 80093a8:	6820      	ldr	r0, [r4, #0]
 80093aa:	b938      	cbnz	r0, 80093bc <__pow5mult+0x9c>
 80093ac:	4622      	mov	r2, r4
 80093ae:	4621      	mov	r1, r4
 80093b0:	4630      	mov	r0, r6
 80093b2:	f7ff ff0b 	bl	80091cc <__multiply>
 80093b6:	6020      	str	r0, [r4, #0]
 80093b8:	f8c0 9000 	str.w	r9, [r0]
 80093bc:	4604      	mov	r4, r0
 80093be:	e7e4      	b.n	800938a <__pow5mult+0x6a>
 80093c0:	4638      	mov	r0, r7
 80093c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093c6:	bf00      	nop
 80093c8:	0800a4d0 	.word	0x0800a4d0
 80093cc:	0800a305 	.word	0x0800a305
 80093d0:	0800a385 	.word	0x0800a385

080093d4 <__lshift>:
 80093d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d8:	460c      	mov	r4, r1
 80093da:	6849      	ldr	r1, [r1, #4]
 80093dc:	6923      	ldr	r3, [r4, #16]
 80093de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093e2:	68a3      	ldr	r3, [r4, #8]
 80093e4:	4607      	mov	r7, r0
 80093e6:	4691      	mov	r9, r2
 80093e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093ec:	f108 0601 	add.w	r6, r8, #1
 80093f0:	42b3      	cmp	r3, r6
 80093f2:	db0b      	blt.n	800940c <__lshift+0x38>
 80093f4:	4638      	mov	r0, r7
 80093f6:	f7ff fddd 	bl	8008fb4 <_Balloc>
 80093fa:	4605      	mov	r5, r0
 80093fc:	b948      	cbnz	r0, 8009412 <__lshift+0x3e>
 80093fe:	4602      	mov	r2, r0
 8009400:	4b28      	ldr	r3, [pc, #160]	; (80094a4 <__lshift+0xd0>)
 8009402:	4829      	ldr	r0, [pc, #164]	; (80094a8 <__lshift+0xd4>)
 8009404:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009408:	f000 fb8e 	bl	8009b28 <__assert_func>
 800940c:	3101      	adds	r1, #1
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	e7ee      	b.n	80093f0 <__lshift+0x1c>
 8009412:	2300      	movs	r3, #0
 8009414:	f100 0114 	add.w	r1, r0, #20
 8009418:	f100 0210 	add.w	r2, r0, #16
 800941c:	4618      	mov	r0, r3
 800941e:	4553      	cmp	r3, sl
 8009420:	db33      	blt.n	800948a <__lshift+0xb6>
 8009422:	6920      	ldr	r0, [r4, #16]
 8009424:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009428:	f104 0314 	add.w	r3, r4, #20
 800942c:	f019 091f 	ands.w	r9, r9, #31
 8009430:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009434:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009438:	d02b      	beq.n	8009492 <__lshift+0xbe>
 800943a:	f1c9 0e20 	rsb	lr, r9, #32
 800943e:	468a      	mov	sl, r1
 8009440:	2200      	movs	r2, #0
 8009442:	6818      	ldr	r0, [r3, #0]
 8009444:	fa00 f009 	lsl.w	r0, r0, r9
 8009448:	4310      	orrs	r0, r2
 800944a:	f84a 0b04 	str.w	r0, [sl], #4
 800944e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009452:	459c      	cmp	ip, r3
 8009454:	fa22 f20e 	lsr.w	r2, r2, lr
 8009458:	d8f3      	bhi.n	8009442 <__lshift+0x6e>
 800945a:	ebac 0304 	sub.w	r3, ip, r4
 800945e:	3b15      	subs	r3, #21
 8009460:	f023 0303 	bic.w	r3, r3, #3
 8009464:	3304      	adds	r3, #4
 8009466:	f104 0015 	add.w	r0, r4, #21
 800946a:	4584      	cmp	ip, r0
 800946c:	bf38      	it	cc
 800946e:	2304      	movcc	r3, #4
 8009470:	50ca      	str	r2, [r1, r3]
 8009472:	b10a      	cbz	r2, 8009478 <__lshift+0xa4>
 8009474:	f108 0602 	add.w	r6, r8, #2
 8009478:	3e01      	subs	r6, #1
 800947a:	4638      	mov	r0, r7
 800947c:	612e      	str	r6, [r5, #16]
 800947e:	4621      	mov	r1, r4
 8009480:	f7ff fdd8 	bl	8009034 <_Bfree>
 8009484:	4628      	mov	r0, r5
 8009486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800948a:	f842 0f04 	str.w	r0, [r2, #4]!
 800948e:	3301      	adds	r3, #1
 8009490:	e7c5      	b.n	800941e <__lshift+0x4a>
 8009492:	3904      	subs	r1, #4
 8009494:	f853 2b04 	ldr.w	r2, [r3], #4
 8009498:	f841 2f04 	str.w	r2, [r1, #4]!
 800949c:	459c      	cmp	ip, r3
 800949e:	d8f9      	bhi.n	8009494 <__lshift+0xc0>
 80094a0:	e7ea      	b.n	8009478 <__lshift+0xa4>
 80094a2:	bf00      	nop
 80094a4:	0800a374 	.word	0x0800a374
 80094a8:	0800a385 	.word	0x0800a385

080094ac <__mcmp>:
 80094ac:	b530      	push	{r4, r5, lr}
 80094ae:	6902      	ldr	r2, [r0, #16]
 80094b0:	690c      	ldr	r4, [r1, #16]
 80094b2:	1b12      	subs	r2, r2, r4
 80094b4:	d10e      	bne.n	80094d4 <__mcmp+0x28>
 80094b6:	f100 0314 	add.w	r3, r0, #20
 80094ba:	3114      	adds	r1, #20
 80094bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80094c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80094c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80094c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80094cc:	42a5      	cmp	r5, r4
 80094ce:	d003      	beq.n	80094d8 <__mcmp+0x2c>
 80094d0:	d305      	bcc.n	80094de <__mcmp+0x32>
 80094d2:	2201      	movs	r2, #1
 80094d4:	4610      	mov	r0, r2
 80094d6:	bd30      	pop	{r4, r5, pc}
 80094d8:	4283      	cmp	r3, r0
 80094da:	d3f3      	bcc.n	80094c4 <__mcmp+0x18>
 80094dc:	e7fa      	b.n	80094d4 <__mcmp+0x28>
 80094de:	f04f 32ff 	mov.w	r2, #4294967295
 80094e2:	e7f7      	b.n	80094d4 <__mcmp+0x28>

080094e4 <__mdiff>:
 80094e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e8:	460c      	mov	r4, r1
 80094ea:	4606      	mov	r6, r0
 80094ec:	4611      	mov	r1, r2
 80094ee:	4620      	mov	r0, r4
 80094f0:	4690      	mov	r8, r2
 80094f2:	f7ff ffdb 	bl	80094ac <__mcmp>
 80094f6:	1e05      	subs	r5, r0, #0
 80094f8:	d110      	bne.n	800951c <__mdiff+0x38>
 80094fa:	4629      	mov	r1, r5
 80094fc:	4630      	mov	r0, r6
 80094fe:	f7ff fd59 	bl	8008fb4 <_Balloc>
 8009502:	b930      	cbnz	r0, 8009512 <__mdiff+0x2e>
 8009504:	4b3a      	ldr	r3, [pc, #232]	; (80095f0 <__mdiff+0x10c>)
 8009506:	4602      	mov	r2, r0
 8009508:	f240 2137 	movw	r1, #567	; 0x237
 800950c:	4839      	ldr	r0, [pc, #228]	; (80095f4 <__mdiff+0x110>)
 800950e:	f000 fb0b 	bl	8009b28 <__assert_func>
 8009512:	2301      	movs	r3, #1
 8009514:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951c:	bfa4      	itt	ge
 800951e:	4643      	movge	r3, r8
 8009520:	46a0      	movge	r8, r4
 8009522:	4630      	mov	r0, r6
 8009524:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009528:	bfa6      	itte	ge
 800952a:	461c      	movge	r4, r3
 800952c:	2500      	movge	r5, #0
 800952e:	2501      	movlt	r5, #1
 8009530:	f7ff fd40 	bl	8008fb4 <_Balloc>
 8009534:	b920      	cbnz	r0, 8009540 <__mdiff+0x5c>
 8009536:	4b2e      	ldr	r3, [pc, #184]	; (80095f0 <__mdiff+0x10c>)
 8009538:	4602      	mov	r2, r0
 800953a:	f240 2145 	movw	r1, #581	; 0x245
 800953e:	e7e5      	b.n	800950c <__mdiff+0x28>
 8009540:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009544:	6926      	ldr	r6, [r4, #16]
 8009546:	60c5      	str	r5, [r0, #12]
 8009548:	f104 0914 	add.w	r9, r4, #20
 800954c:	f108 0514 	add.w	r5, r8, #20
 8009550:	f100 0e14 	add.w	lr, r0, #20
 8009554:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009558:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800955c:	f108 0210 	add.w	r2, r8, #16
 8009560:	46f2      	mov	sl, lr
 8009562:	2100      	movs	r1, #0
 8009564:	f859 3b04 	ldr.w	r3, [r9], #4
 8009568:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800956c:	fa11 f88b 	uxtah	r8, r1, fp
 8009570:	b299      	uxth	r1, r3
 8009572:	0c1b      	lsrs	r3, r3, #16
 8009574:	eba8 0801 	sub.w	r8, r8, r1
 8009578:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800957c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009580:	fa1f f888 	uxth.w	r8, r8
 8009584:	1419      	asrs	r1, r3, #16
 8009586:	454e      	cmp	r6, r9
 8009588:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800958c:	f84a 3b04 	str.w	r3, [sl], #4
 8009590:	d8e8      	bhi.n	8009564 <__mdiff+0x80>
 8009592:	1b33      	subs	r3, r6, r4
 8009594:	3b15      	subs	r3, #21
 8009596:	f023 0303 	bic.w	r3, r3, #3
 800959a:	3304      	adds	r3, #4
 800959c:	3415      	adds	r4, #21
 800959e:	42a6      	cmp	r6, r4
 80095a0:	bf38      	it	cc
 80095a2:	2304      	movcc	r3, #4
 80095a4:	441d      	add	r5, r3
 80095a6:	4473      	add	r3, lr
 80095a8:	469e      	mov	lr, r3
 80095aa:	462e      	mov	r6, r5
 80095ac:	4566      	cmp	r6, ip
 80095ae:	d30e      	bcc.n	80095ce <__mdiff+0xea>
 80095b0:	f10c 0203 	add.w	r2, ip, #3
 80095b4:	1b52      	subs	r2, r2, r5
 80095b6:	f022 0203 	bic.w	r2, r2, #3
 80095ba:	3d03      	subs	r5, #3
 80095bc:	45ac      	cmp	ip, r5
 80095be:	bf38      	it	cc
 80095c0:	2200      	movcc	r2, #0
 80095c2:	4413      	add	r3, r2
 80095c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80095c8:	b17a      	cbz	r2, 80095ea <__mdiff+0x106>
 80095ca:	6107      	str	r7, [r0, #16]
 80095cc:	e7a4      	b.n	8009518 <__mdiff+0x34>
 80095ce:	f856 8b04 	ldr.w	r8, [r6], #4
 80095d2:	fa11 f288 	uxtah	r2, r1, r8
 80095d6:	1414      	asrs	r4, r2, #16
 80095d8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80095dc:	b292      	uxth	r2, r2
 80095de:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80095e2:	f84e 2b04 	str.w	r2, [lr], #4
 80095e6:	1421      	asrs	r1, r4, #16
 80095e8:	e7e0      	b.n	80095ac <__mdiff+0xc8>
 80095ea:	3f01      	subs	r7, #1
 80095ec:	e7ea      	b.n	80095c4 <__mdiff+0xe0>
 80095ee:	bf00      	nop
 80095f0:	0800a374 	.word	0x0800a374
 80095f4:	0800a385 	.word	0x0800a385

080095f8 <__d2b>:
 80095f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095fc:	460f      	mov	r7, r1
 80095fe:	2101      	movs	r1, #1
 8009600:	ec59 8b10 	vmov	r8, r9, d0
 8009604:	4616      	mov	r6, r2
 8009606:	f7ff fcd5 	bl	8008fb4 <_Balloc>
 800960a:	4604      	mov	r4, r0
 800960c:	b930      	cbnz	r0, 800961c <__d2b+0x24>
 800960e:	4602      	mov	r2, r0
 8009610:	4b24      	ldr	r3, [pc, #144]	; (80096a4 <__d2b+0xac>)
 8009612:	4825      	ldr	r0, [pc, #148]	; (80096a8 <__d2b+0xb0>)
 8009614:	f240 310f 	movw	r1, #783	; 0x30f
 8009618:	f000 fa86 	bl	8009b28 <__assert_func>
 800961c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009620:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009624:	bb2d      	cbnz	r5, 8009672 <__d2b+0x7a>
 8009626:	9301      	str	r3, [sp, #4]
 8009628:	f1b8 0300 	subs.w	r3, r8, #0
 800962c:	d026      	beq.n	800967c <__d2b+0x84>
 800962e:	4668      	mov	r0, sp
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	f7ff fd87 	bl	8009144 <__lo0bits>
 8009636:	e9dd 1200 	ldrd	r1, r2, [sp]
 800963a:	b1e8      	cbz	r0, 8009678 <__d2b+0x80>
 800963c:	f1c0 0320 	rsb	r3, r0, #32
 8009640:	fa02 f303 	lsl.w	r3, r2, r3
 8009644:	430b      	orrs	r3, r1
 8009646:	40c2      	lsrs	r2, r0
 8009648:	6163      	str	r3, [r4, #20]
 800964a:	9201      	str	r2, [sp, #4]
 800964c:	9b01      	ldr	r3, [sp, #4]
 800964e:	61a3      	str	r3, [r4, #24]
 8009650:	2b00      	cmp	r3, #0
 8009652:	bf14      	ite	ne
 8009654:	2202      	movne	r2, #2
 8009656:	2201      	moveq	r2, #1
 8009658:	6122      	str	r2, [r4, #16]
 800965a:	b1bd      	cbz	r5, 800968c <__d2b+0x94>
 800965c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009660:	4405      	add	r5, r0
 8009662:	603d      	str	r5, [r7, #0]
 8009664:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009668:	6030      	str	r0, [r6, #0]
 800966a:	4620      	mov	r0, r4
 800966c:	b003      	add	sp, #12
 800966e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009676:	e7d6      	b.n	8009626 <__d2b+0x2e>
 8009678:	6161      	str	r1, [r4, #20]
 800967a:	e7e7      	b.n	800964c <__d2b+0x54>
 800967c:	a801      	add	r0, sp, #4
 800967e:	f7ff fd61 	bl	8009144 <__lo0bits>
 8009682:	9b01      	ldr	r3, [sp, #4]
 8009684:	6163      	str	r3, [r4, #20]
 8009686:	3020      	adds	r0, #32
 8009688:	2201      	movs	r2, #1
 800968a:	e7e5      	b.n	8009658 <__d2b+0x60>
 800968c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009690:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009694:	6038      	str	r0, [r7, #0]
 8009696:	6918      	ldr	r0, [r3, #16]
 8009698:	f7ff fd34 	bl	8009104 <__hi0bits>
 800969c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096a0:	e7e2      	b.n	8009668 <__d2b+0x70>
 80096a2:	bf00      	nop
 80096a4:	0800a374 	.word	0x0800a374
 80096a8:	0800a385 	.word	0x0800a385

080096ac <__ssputs_r>:
 80096ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b0:	688e      	ldr	r6, [r1, #8]
 80096b2:	461f      	mov	r7, r3
 80096b4:	42be      	cmp	r6, r7
 80096b6:	680b      	ldr	r3, [r1, #0]
 80096b8:	4682      	mov	sl, r0
 80096ba:	460c      	mov	r4, r1
 80096bc:	4690      	mov	r8, r2
 80096be:	d82c      	bhi.n	800971a <__ssputs_r+0x6e>
 80096c0:	898a      	ldrh	r2, [r1, #12]
 80096c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096c6:	d026      	beq.n	8009716 <__ssputs_r+0x6a>
 80096c8:	6965      	ldr	r5, [r4, #20]
 80096ca:	6909      	ldr	r1, [r1, #16]
 80096cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096d0:	eba3 0901 	sub.w	r9, r3, r1
 80096d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096d8:	1c7b      	adds	r3, r7, #1
 80096da:	444b      	add	r3, r9
 80096dc:	106d      	asrs	r5, r5, #1
 80096de:	429d      	cmp	r5, r3
 80096e0:	bf38      	it	cc
 80096e2:	461d      	movcc	r5, r3
 80096e4:	0553      	lsls	r3, r2, #21
 80096e6:	d527      	bpl.n	8009738 <__ssputs_r+0x8c>
 80096e8:	4629      	mov	r1, r5
 80096ea:	f7ff fbd7 	bl	8008e9c <_malloc_r>
 80096ee:	4606      	mov	r6, r0
 80096f0:	b360      	cbz	r0, 800974c <__ssputs_r+0xa0>
 80096f2:	6921      	ldr	r1, [r4, #16]
 80096f4:	464a      	mov	r2, r9
 80096f6:	f000 fa09 	bl	8009b0c <memcpy>
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009704:	81a3      	strh	r3, [r4, #12]
 8009706:	6126      	str	r6, [r4, #16]
 8009708:	6165      	str	r5, [r4, #20]
 800970a:	444e      	add	r6, r9
 800970c:	eba5 0509 	sub.w	r5, r5, r9
 8009710:	6026      	str	r6, [r4, #0]
 8009712:	60a5      	str	r5, [r4, #8]
 8009714:	463e      	mov	r6, r7
 8009716:	42be      	cmp	r6, r7
 8009718:	d900      	bls.n	800971c <__ssputs_r+0x70>
 800971a:	463e      	mov	r6, r7
 800971c:	6820      	ldr	r0, [r4, #0]
 800971e:	4632      	mov	r2, r6
 8009720:	4641      	mov	r1, r8
 8009722:	f000 f9c9 	bl	8009ab8 <memmove>
 8009726:	68a3      	ldr	r3, [r4, #8]
 8009728:	1b9b      	subs	r3, r3, r6
 800972a:	60a3      	str	r3, [r4, #8]
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	4433      	add	r3, r6
 8009730:	6023      	str	r3, [r4, #0]
 8009732:	2000      	movs	r0, #0
 8009734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009738:	462a      	mov	r2, r5
 800973a:	f000 fa3b 	bl	8009bb4 <_realloc_r>
 800973e:	4606      	mov	r6, r0
 8009740:	2800      	cmp	r0, #0
 8009742:	d1e0      	bne.n	8009706 <__ssputs_r+0x5a>
 8009744:	6921      	ldr	r1, [r4, #16]
 8009746:	4650      	mov	r0, sl
 8009748:	f7ff fb34 	bl	8008db4 <_free_r>
 800974c:	230c      	movs	r3, #12
 800974e:	f8ca 3000 	str.w	r3, [sl]
 8009752:	89a3      	ldrh	r3, [r4, #12]
 8009754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009758:	81a3      	strh	r3, [r4, #12]
 800975a:	f04f 30ff 	mov.w	r0, #4294967295
 800975e:	e7e9      	b.n	8009734 <__ssputs_r+0x88>

08009760 <_svfiprintf_r>:
 8009760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009764:	4698      	mov	r8, r3
 8009766:	898b      	ldrh	r3, [r1, #12]
 8009768:	061b      	lsls	r3, r3, #24
 800976a:	b09d      	sub	sp, #116	; 0x74
 800976c:	4607      	mov	r7, r0
 800976e:	460d      	mov	r5, r1
 8009770:	4614      	mov	r4, r2
 8009772:	d50e      	bpl.n	8009792 <_svfiprintf_r+0x32>
 8009774:	690b      	ldr	r3, [r1, #16]
 8009776:	b963      	cbnz	r3, 8009792 <_svfiprintf_r+0x32>
 8009778:	2140      	movs	r1, #64	; 0x40
 800977a:	f7ff fb8f 	bl	8008e9c <_malloc_r>
 800977e:	6028      	str	r0, [r5, #0]
 8009780:	6128      	str	r0, [r5, #16]
 8009782:	b920      	cbnz	r0, 800978e <_svfiprintf_r+0x2e>
 8009784:	230c      	movs	r3, #12
 8009786:	603b      	str	r3, [r7, #0]
 8009788:	f04f 30ff 	mov.w	r0, #4294967295
 800978c:	e0d0      	b.n	8009930 <_svfiprintf_r+0x1d0>
 800978e:	2340      	movs	r3, #64	; 0x40
 8009790:	616b      	str	r3, [r5, #20]
 8009792:	2300      	movs	r3, #0
 8009794:	9309      	str	r3, [sp, #36]	; 0x24
 8009796:	2320      	movs	r3, #32
 8009798:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800979c:	f8cd 800c 	str.w	r8, [sp, #12]
 80097a0:	2330      	movs	r3, #48	; 0x30
 80097a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009948 <_svfiprintf_r+0x1e8>
 80097a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097aa:	f04f 0901 	mov.w	r9, #1
 80097ae:	4623      	mov	r3, r4
 80097b0:	469a      	mov	sl, r3
 80097b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097b6:	b10a      	cbz	r2, 80097bc <_svfiprintf_r+0x5c>
 80097b8:	2a25      	cmp	r2, #37	; 0x25
 80097ba:	d1f9      	bne.n	80097b0 <_svfiprintf_r+0x50>
 80097bc:	ebba 0b04 	subs.w	fp, sl, r4
 80097c0:	d00b      	beq.n	80097da <_svfiprintf_r+0x7a>
 80097c2:	465b      	mov	r3, fp
 80097c4:	4622      	mov	r2, r4
 80097c6:	4629      	mov	r1, r5
 80097c8:	4638      	mov	r0, r7
 80097ca:	f7ff ff6f 	bl	80096ac <__ssputs_r>
 80097ce:	3001      	adds	r0, #1
 80097d0:	f000 80a9 	beq.w	8009926 <_svfiprintf_r+0x1c6>
 80097d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097d6:	445a      	add	r2, fp
 80097d8:	9209      	str	r2, [sp, #36]	; 0x24
 80097da:	f89a 3000 	ldrb.w	r3, [sl]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f000 80a1 	beq.w	8009926 <_svfiprintf_r+0x1c6>
 80097e4:	2300      	movs	r3, #0
 80097e6:	f04f 32ff 	mov.w	r2, #4294967295
 80097ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097ee:	f10a 0a01 	add.w	sl, sl, #1
 80097f2:	9304      	str	r3, [sp, #16]
 80097f4:	9307      	str	r3, [sp, #28]
 80097f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097fa:	931a      	str	r3, [sp, #104]	; 0x68
 80097fc:	4654      	mov	r4, sl
 80097fe:	2205      	movs	r2, #5
 8009800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009804:	4850      	ldr	r0, [pc, #320]	; (8009948 <_svfiprintf_r+0x1e8>)
 8009806:	f7f6 fce3 	bl	80001d0 <memchr>
 800980a:	9a04      	ldr	r2, [sp, #16]
 800980c:	b9d8      	cbnz	r0, 8009846 <_svfiprintf_r+0xe6>
 800980e:	06d0      	lsls	r0, r2, #27
 8009810:	bf44      	itt	mi
 8009812:	2320      	movmi	r3, #32
 8009814:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009818:	0711      	lsls	r1, r2, #28
 800981a:	bf44      	itt	mi
 800981c:	232b      	movmi	r3, #43	; 0x2b
 800981e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009822:	f89a 3000 	ldrb.w	r3, [sl]
 8009826:	2b2a      	cmp	r3, #42	; 0x2a
 8009828:	d015      	beq.n	8009856 <_svfiprintf_r+0xf6>
 800982a:	9a07      	ldr	r2, [sp, #28]
 800982c:	4654      	mov	r4, sl
 800982e:	2000      	movs	r0, #0
 8009830:	f04f 0c0a 	mov.w	ip, #10
 8009834:	4621      	mov	r1, r4
 8009836:	f811 3b01 	ldrb.w	r3, [r1], #1
 800983a:	3b30      	subs	r3, #48	; 0x30
 800983c:	2b09      	cmp	r3, #9
 800983e:	d94d      	bls.n	80098dc <_svfiprintf_r+0x17c>
 8009840:	b1b0      	cbz	r0, 8009870 <_svfiprintf_r+0x110>
 8009842:	9207      	str	r2, [sp, #28]
 8009844:	e014      	b.n	8009870 <_svfiprintf_r+0x110>
 8009846:	eba0 0308 	sub.w	r3, r0, r8
 800984a:	fa09 f303 	lsl.w	r3, r9, r3
 800984e:	4313      	orrs	r3, r2
 8009850:	9304      	str	r3, [sp, #16]
 8009852:	46a2      	mov	sl, r4
 8009854:	e7d2      	b.n	80097fc <_svfiprintf_r+0x9c>
 8009856:	9b03      	ldr	r3, [sp, #12]
 8009858:	1d19      	adds	r1, r3, #4
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	9103      	str	r1, [sp, #12]
 800985e:	2b00      	cmp	r3, #0
 8009860:	bfbb      	ittet	lt
 8009862:	425b      	neglt	r3, r3
 8009864:	f042 0202 	orrlt.w	r2, r2, #2
 8009868:	9307      	strge	r3, [sp, #28]
 800986a:	9307      	strlt	r3, [sp, #28]
 800986c:	bfb8      	it	lt
 800986e:	9204      	strlt	r2, [sp, #16]
 8009870:	7823      	ldrb	r3, [r4, #0]
 8009872:	2b2e      	cmp	r3, #46	; 0x2e
 8009874:	d10c      	bne.n	8009890 <_svfiprintf_r+0x130>
 8009876:	7863      	ldrb	r3, [r4, #1]
 8009878:	2b2a      	cmp	r3, #42	; 0x2a
 800987a:	d134      	bne.n	80098e6 <_svfiprintf_r+0x186>
 800987c:	9b03      	ldr	r3, [sp, #12]
 800987e:	1d1a      	adds	r2, r3, #4
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	9203      	str	r2, [sp, #12]
 8009884:	2b00      	cmp	r3, #0
 8009886:	bfb8      	it	lt
 8009888:	f04f 33ff 	movlt.w	r3, #4294967295
 800988c:	3402      	adds	r4, #2
 800988e:	9305      	str	r3, [sp, #20]
 8009890:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009958 <_svfiprintf_r+0x1f8>
 8009894:	7821      	ldrb	r1, [r4, #0]
 8009896:	2203      	movs	r2, #3
 8009898:	4650      	mov	r0, sl
 800989a:	f7f6 fc99 	bl	80001d0 <memchr>
 800989e:	b138      	cbz	r0, 80098b0 <_svfiprintf_r+0x150>
 80098a0:	9b04      	ldr	r3, [sp, #16]
 80098a2:	eba0 000a 	sub.w	r0, r0, sl
 80098a6:	2240      	movs	r2, #64	; 0x40
 80098a8:	4082      	lsls	r2, r0
 80098aa:	4313      	orrs	r3, r2
 80098ac:	3401      	adds	r4, #1
 80098ae:	9304      	str	r3, [sp, #16]
 80098b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098b4:	4825      	ldr	r0, [pc, #148]	; (800994c <_svfiprintf_r+0x1ec>)
 80098b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098ba:	2206      	movs	r2, #6
 80098bc:	f7f6 fc88 	bl	80001d0 <memchr>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	d038      	beq.n	8009936 <_svfiprintf_r+0x1d6>
 80098c4:	4b22      	ldr	r3, [pc, #136]	; (8009950 <_svfiprintf_r+0x1f0>)
 80098c6:	bb1b      	cbnz	r3, 8009910 <_svfiprintf_r+0x1b0>
 80098c8:	9b03      	ldr	r3, [sp, #12]
 80098ca:	3307      	adds	r3, #7
 80098cc:	f023 0307 	bic.w	r3, r3, #7
 80098d0:	3308      	adds	r3, #8
 80098d2:	9303      	str	r3, [sp, #12]
 80098d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098d6:	4433      	add	r3, r6
 80098d8:	9309      	str	r3, [sp, #36]	; 0x24
 80098da:	e768      	b.n	80097ae <_svfiprintf_r+0x4e>
 80098dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80098e0:	460c      	mov	r4, r1
 80098e2:	2001      	movs	r0, #1
 80098e4:	e7a6      	b.n	8009834 <_svfiprintf_r+0xd4>
 80098e6:	2300      	movs	r3, #0
 80098e8:	3401      	adds	r4, #1
 80098ea:	9305      	str	r3, [sp, #20]
 80098ec:	4619      	mov	r1, r3
 80098ee:	f04f 0c0a 	mov.w	ip, #10
 80098f2:	4620      	mov	r0, r4
 80098f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098f8:	3a30      	subs	r2, #48	; 0x30
 80098fa:	2a09      	cmp	r2, #9
 80098fc:	d903      	bls.n	8009906 <_svfiprintf_r+0x1a6>
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d0c6      	beq.n	8009890 <_svfiprintf_r+0x130>
 8009902:	9105      	str	r1, [sp, #20]
 8009904:	e7c4      	b.n	8009890 <_svfiprintf_r+0x130>
 8009906:	fb0c 2101 	mla	r1, ip, r1, r2
 800990a:	4604      	mov	r4, r0
 800990c:	2301      	movs	r3, #1
 800990e:	e7f0      	b.n	80098f2 <_svfiprintf_r+0x192>
 8009910:	ab03      	add	r3, sp, #12
 8009912:	9300      	str	r3, [sp, #0]
 8009914:	462a      	mov	r2, r5
 8009916:	4b0f      	ldr	r3, [pc, #60]	; (8009954 <_svfiprintf_r+0x1f4>)
 8009918:	a904      	add	r1, sp, #16
 800991a:	4638      	mov	r0, r7
 800991c:	f7fd fe4c 	bl	80075b8 <_printf_float>
 8009920:	1c42      	adds	r2, r0, #1
 8009922:	4606      	mov	r6, r0
 8009924:	d1d6      	bne.n	80098d4 <_svfiprintf_r+0x174>
 8009926:	89ab      	ldrh	r3, [r5, #12]
 8009928:	065b      	lsls	r3, r3, #25
 800992a:	f53f af2d 	bmi.w	8009788 <_svfiprintf_r+0x28>
 800992e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009930:	b01d      	add	sp, #116	; 0x74
 8009932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009936:	ab03      	add	r3, sp, #12
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	462a      	mov	r2, r5
 800993c:	4b05      	ldr	r3, [pc, #20]	; (8009954 <_svfiprintf_r+0x1f4>)
 800993e:	a904      	add	r1, sp, #16
 8009940:	4638      	mov	r0, r7
 8009942:	f7fe f8dd 	bl	8007b00 <_printf_i>
 8009946:	e7eb      	b.n	8009920 <_svfiprintf_r+0x1c0>
 8009948:	0800a4dc 	.word	0x0800a4dc
 800994c:	0800a4e6 	.word	0x0800a4e6
 8009950:	080075b9 	.word	0x080075b9
 8009954:	080096ad 	.word	0x080096ad
 8009958:	0800a4e2 	.word	0x0800a4e2

0800995c <__sflush_r>:
 800995c:	898a      	ldrh	r2, [r1, #12]
 800995e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009962:	4605      	mov	r5, r0
 8009964:	0710      	lsls	r0, r2, #28
 8009966:	460c      	mov	r4, r1
 8009968:	d458      	bmi.n	8009a1c <__sflush_r+0xc0>
 800996a:	684b      	ldr	r3, [r1, #4]
 800996c:	2b00      	cmp	r3, #0
 800996e:	dc05      	bgt.n	800997c <__sflush_r+0x20>
 8009970:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009972:	2b00      	cmp	r3, #0
 8009974:	dc02      	bgt.n	800997c <__sflush_r+0x20>
 8009976:	2000      	movs	r0, #0
 8009978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800997c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800997e:	2e00      	cmp	r6, #0
 8009980:	d0f9      	beq.n	8009976 <__sflush_r+0x1a>
 8009982:	2300      	movs	r3, #0
 8009984:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009988:	682f      	ldr	r7, [r5, #0]
 800998a:	6a21      	ldr	r1, [r4, #32]
 800998c:	602b      	str	r3, [r5, #0]
 800998e:	d032      	beq.n	80099f6 <__sflush_r+0x9a>
 8009990:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009992:	89a3      	ldrh	r3, [r4, #12]
 8009994:	075a      	lsls	r2, r3, #29
 8009996:	d505      	bpl.n	80099a4 <__sflush_r+0x48>
 8009998:	6863      	ldr	r3, [r4, #4]
 800999a:	1ac0      	subs	r0, r0, r3
 800999c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800999e:	b10b      	cbz	r3, 80099a4 <__sflush_r+0x48>
 80099a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099a2:	1ac0      	subs	r0, r0, r3
 80099a4:	2300      	movs	r3, #0
 80099a6:	4602      	mov	r2, r0
 80099a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099aa:	6a21      	ldr	r1, [r4, #32]
 80099ac:	4628      	mov	r0, r5
 80099ae:	47b0      	blx	r6
 80099b0:	1c43      	adds	r3, r0, #1
 80099b2:	89a3      	ldrh	r3, [r4, #12]
 80099b4:	d106      	bne.n	80099c4 <__sflush_r+0x68>
 80099b6:	6829      	ldr	r1, [r5, #0]
 80099b8:	291d      	cmp	r1, #29
 80099ba:	d82b      	bhi.n	8009a14 <__sflush_r+0xb8>
 80099bc:	4a29      	ldr	r2, [pc, #164]	; (8009a64 <__sflush_r+0x108>)
 80099be:	410a      	asrs	r2, r1
 80099c0:	07d6      	lsls	r6, r2, #31
 80099c2:	d427      	bmi.n	8009a14 <__sflush_r+0xb8>
 80099c4:	2200      	movs	r2, #0
 80099c6:	6062      	str	r2, [r4, #4]
 80099c8:	04d9      	lsls	r1, r3, #19
 80099ca:	6922      	ldr	r2, [r4, #16]
 80099cc:	6022      	str	r2, [r4, #0]
 80099ce:	d504      	bpl.n	80099da <__sflush_r+0x7e>
 80099d0:	1c42      	adds	r2, r0, #1
 80099d2:	d101      	bne.n	80099d8 <__sflush_r+0x7c>
 80099d4:	682b      	ldr	r3, [r5, #0]
 80099d6:	b903      	cbnz	r3, 80099da <__sflush_r+0x7e>
 80099d8:	6560      	str	r0, [r4, #84]	; 0x54
 80099da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099dc:	602f      	str	r7, [r5, #0]
 80099de:	2900      	cmp	r1, #0
 80099e0:	d0c9      	beq.n	8009976 <__sflush_r+0x1a>
 80099e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099e6:	4299      	cmp	r1, r3
 80099e8:	d002      	beq.n	80099f0 <__sflush_r+0x94>
 80099ea:	4628      	mov	r0, r5
 80099ec:	f7ff f9e2 	bl	8008db4 <_free_r>
 80099f0:	2000      	movs	r0, #0
 80099f2:	6360      	str	r0, [r4, #52]	; 0x34
 80099f4:	e7c0      	b.n	8009978 <__sflush_r+0x1c>
 80099f6:	2301      	movs	r3, #1
 80099f8:	4628      	mov	r0, r5
 80099fa:	47b0      	blx	r6
 80099fc:	1c41      	adds	r1, r0, #1
 80099fe:	d1c8      	bne.n	8009992 <__sflush_r+0x36>
 8009a00:	682b      	ldr	r3, [r5, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d0c5      	beq.n	8009992 <__sflush_r+0x36>
 8009a06:	2b1d      	cmp	r3, #29
 8009a08:	d001      	beq.n	8009a0e <__sflush_r+0xb2>
 8009a0a:	2b16      	cmp	r3, #22
 8009a0c:	d101      	bne.n	8009a12 <__sflush_r+0xb6>
 8009a0e:	602f      	str	r7, [r5, #0]
 8009a10:	e7b1      	b.n	8009976 <__sflush_r+0x1a>
 8009a12:	89a3      	ldrh	r3, [r4, #12]
 8009a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a18:	81a3      	strh	r3, [r4, #12]
 8009a1a:	e7ad      	b.n	8009978 <__sflush_r+0x1c>
 8009a1c:	690f      	ldr	r7, [r1, #16]
 8009a1e:	2f00      	cmp	r7, #0
 8009a20:	d0a9      	beq.n	8009976 <__sflush_r+0x1a>
 8009a22:	0793      	lsls	r3, r2, #30
 8009a24:	680e      	ldr	r6, [r1, #0]
 8009a26:	bf08      	it	eq
 8009a28:	694b      	ldreq	r3, [r1, #20]
 8009a2a:	600f      	str	r7, [r1, #0]
 8009a2c:	bf18      	it	ne
 8009a2e:	2300      	movne	r3, #0
 8009a30:	eba6 0807 	sub.w	r8, r6, r7
 8009a34:	608b      	str	r3, [r1, #8]
 8009a36:	f1b8 0f00 	cmp.w	r8, #0
 8009a3a:	dd9c      	ble.n	8009976 <__sflush_r+0x1a>
 8009a3c:	6a21      	ldr	r1, [r4, #32]
 8009a3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a40:	4643      	mov	r3, r8
 8009a42:	463a      	mov	r2, r7
 8009a44:	4628      	mov	r0, r5
 8009a46:	47b0      	blx	r6
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	dc06      	bgt.n	8009a5a <__sflush_r+0xfe>
 8009a4c:	89a3      	ldrh	r3, [r4, #12]
 8009a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a52:	81a3      	strh	r3, [r4, #12]
 8009a54:	f04f 30ff 	mov.w	r0, #4294967295
 8009a58:	e78e      	b.n	8009978 <__sflush_r+0x1c>
 8009a5a:	4407      	add	r7, r0
 8009a5c:	eba8 0800 	sub.w	r8, r8, r0
 8009a60:	e7e9      	b.n	8009a36 <__sflush_r+0xda>
 8009a62:	bf00      	nop
 8009a64:	dfbffffe 	.word	0xdfbffffe

08009a68 <_fflush_r>:
 8009a68:	b538      	push	{r3, r4, r5, lr}
 8009a6a:	690b      	ldr	r3, [r1, #16]
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	460c      	mov	r4, r1
 8009a70:	b913      	cbnz	r3, 8009a78 <_fflush_r+0x10>
 8009a72:	2500      	movs	r5, #0
 8009a74:	4628      	mov	r0, r5
 8009a76:	bd38      	pop	{r3, r4, r5, pc}
 8009a78:	b118      	cbz	r0, 8009a82 <_fflush_r+0x1a>
 8009a7a:	6a03      	ldr	r3, [r0, #32]
 8009a7c:	b90b      	cbnz	r3, 8009a82 <_fflush_r+0x1a>
 8009a7e:	f7fe f9ed 	bl	8007e5c <__sinit>
 8009a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d0f3      	beq.n	8009a72 <_fflush_r+0xa>
 8009a8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a8c:	07d0      	lsls	r0, r2, #31
 8009a8e:	d404      	bmi.n	8009a9a <_fflush_r+0x32>
 8009a90:	0599      	lsls	r1, r3, #22
 8009a92:	d402      	bmi.n	8009a9a <_fflush_r+0x32>
 8009a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a96:	f7fe fb10 	bl	80080ba <__retarget_lock_acquire_recursive>
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	f7ff ff5d 	bl	800995c <__sflush_r>
 8009aa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009aa4:	07da      	lsls	r2, r3, #31
 8009aa6:	4605      	mov	r5, r0
 8009aa8:	d4e4      	bmi.n	8009a74 <_fflush_r+0xc>
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	059b      	lsls	r3, r3, #22
 8009aae:	d4e1      	bmi.n	8009a74 <_fflush_r+0xc>
 8009ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ab2:	f7fe fb03 	bl	80080bc <__retarget_lock_release_recursive>
 8009ab6:	e7dd      	b.n	8009a74 <_fflush_r+0xc>

08009ab8 <memmove>:
 8009ab8:	4288      	cmp	r0, r1
 8009aba:	b510      	push	{r4, lr}
 8009abc:	eb01 0402 	add.w	r4, r1, r2
 8009ac0:	d902      	bls.n	8009ac8 <memmove+0x10>
 8009ac2:	4284      	cmp	r4, r0
 8009ac4:	4623      	mov	r3, r4
 8009ac6:	d807      	bhi.n	8009ad8 <memmove+0x20>
 8009ac8:	1e43      	subs	r3, r0, #1
 8009aca:	42a1      	cmp	r1, r4
 8009acc:	d008      	beq.n	8009ae0 <memmove+0x28>
 8009ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ad2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ad6:	e7f8      	b.n	8009aca <memmove+0x12>
 8009ad8:	4402      	add	r2, r0
 8009ada:	4601      	mov	r1, r0
 8009adc:	428a      	cmp	r2, r1
 8009ade:	d100      	bne.n	8009ae2 <memmove+0x2a>
 8009ae0:	bd10      	pop	{r4, pc}
 8009ae2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ae6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009aea:	e7f7      	b.n	8009adc <memmove+0x24>

08009aec <_sbrk_r>:
 8009aec:	b538      	push	{r3, r4, r5, lr}
 8009aee:	4d06      	ldr	r5, [pc, #24]	; (8009b08 <_sbrk_r+0x1c>)
 8009af0:	2300      	movs	r3, #0
 8009af2:	4604      	mov	r4, r0
 8009af4:	4608      	mov	r0, r1
 8009af6:	602b      	str	r3, [r5, #0]
 8009af8:	f7f7 ffbc 	bl	8001a74 <_sbrk>
 8009afc:	1c43      	adds	r3, r0, #1
 8009afe:	d102      	bne.n	8009b06 <_sbrk_r+0x1a>
 8009b00:	682b      	ldr	r3, [r5, #0]
 8009b02:	b103      	cbz	r3, 8009b06 <_sbrk_r+0x1a>
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	bd38      	pop	{r3, r4, r5, pc}
 8009b08:	20000740 	.word	0x20000740

08009b0c <memcpy>:
 8009b0c:	440a      	add	r2, r1
 8009b0e:	4291      	cmp	r1, r2
 8009b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b14:	d100      	bne.n	8009b18 <memcpy+0xc>
 8009b16:	4770      	bx	lr
 8009b18:	b510      	push	{r4, lr}
 8009b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b22:	4291      	cmp	r1, r2
 8009b24:	d1f9      	bne.n	8009b1a <memcpy+0xe>
 8009b26:	bd10      	pop	{r4, pc}

08009b28 <__assert_func>:
 8009b28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b2a:	4614      	mov	r4, r2
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	4b09      	ldr	r3, [pc, #36]	; (8009b54 <__assert_func+0x2c>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4605      	mov	r5, r0
 8009b34:	68d8      	ldr	r0, [r3, #12]
 8009b36:	b14c      	cbz	r4, 8009b4c <__assert_func+0x24>
 8009b38:	4b07      	ldr	r3, [pc, #28]	; (8009b58 <__assert_func+0x30>)
 8009b3a:	9100      	str	r1, [sp, #0]
 8009b3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b40:	4906      	ldr	r1, [pc, #24]	; (8009b5c <__assert_func+0x34>)
 8009b42:	462b      	mov	r3, r5
 8009b44:	f000 f872 	bl	8009c2c <fiprintf>
 8009b48:	f000 f882 	bl	8009c50 <abort>
 8009b4c:	4b04      	ldr	r3, [pc, #16]	; (8009b60 <__assert_func+0x38>)
 8009b4e:	461c      	mov	r4, r3
 8009b50:	e7f3      	b.n	8009b3a <__assert_func+0x12>
 8009b52:	bf00      	nop
 8009b54:	20000084 	.word	0x20000084
 8009b58:	0800a4f7 	.word	0x0800a4f7
 8009b5c:	0800a504 	.word	0x0800a504
 8009b60:	0800a532 	.word	0x0800a532

08009b64 <_calloc_r>:
 8009b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b66:	fba1 2402 	umull	r2, r4, r1, r2
 8009b6a:	b94c      	cbnz	r4, 8009b80 <_calloc_r+0x1c>
 8009b6c:	4611      	mov	r1, r2
 8009b6e:	9201      	str	r2, [sp, #4]
 8009b70:	f7ff f994 	bl	8008e9c <_malloc_r>
 8009b74:	9a01      	ldr	r2, [sp, #4]
 8009b76:	4605      	mov	r5, r0
 8009b78:	b930      	cbnz	r0, 8009b88 <_calloc_r+0x24>
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	b003      	add	sp, #12
 8009b7e:	bd30      	pop	{r4, r5, pc}
 8009b80:	220c      	movs	r2, #12
 8009b82:	6002      	str	r2, [r0, #0]
 8009b84:	2500      	movs	r5, #0
 8009b86:	e7f8      	b.n	8009b7a <_calloc_r+0x16>
 8009b88:	4621      	mov	r1, r4
 8009b8a:	f7fe fa19 	bl	8007fc0 <memset>
 8009b8e:	e7f4      	b.n	8009b7a <_calloc_r+0x16>

08009b90 <__ascii_mbtowc>:
 8009b90:	b082      	sub	sp, #8
 8009b92:	b901      	cbnz	r1, 8009b96 <__ascii_mbtowc+0x6>
 8009b94:	a901      	add	r1, sp, #4
 8009b96:	b142      	cbz	r2, 8009baa <__ascii_mbtowc+0x1a>
 8009b98:	b14b      	cbz	r3, 8009bae <__ascii_mbtowc+0x1e>
 8009b9a:	7813      	ldrb	r3, [r2, #0]
 8009b9c:	600b      	str	r3, [r1, #0]
 8009b9e:	7812      	ldrb	r2, [r2, #0]
 8009ba0:	1e10      	subs	r0, r2, #0
 8009ba2:	bf18      	it	ne
 8009ba4:	2001      	movne	r0, #1
 8009ba6:	b002      	add	sp, #8
 8009ba8:	4770      	bx	lr
 8009baa:	4610      	mov	r0, r2
 8009bac:	e7fb      	b.n	8009ba6 <__ascii_mbtowc+0x16>
 8009bae:	f06f 0001 	mvn.w	r0, #1
 8009bb2:	e7f8      	b.n	8009ba6 <__ascii_mbtowc+0x16>

08009bb4 <_realloc_r>:
 8009bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb8:	4680      	mov	r8, r0
 8009bba:	4614      	mov	r4, r2
 8009bbc:	460e      	mov	r6, r1
 8009bbe:	b921      	cbnz	r1, 8009bca <_realloc_r+0x16>
 8009bc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc4:	4611      	mov	r1, r2
 8009bc6:	f7ff b969 	b.w	8008e9c <_malloc_r>
 8009bca:	b92a      	cbnz	r2, 8009bd8 <_realloc_r+0x24>
 8009bcc:	f7ff f8f2 	bl	8008db4 <_free_r>
 8009bd0:	4625      	mov	r5, r4
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bd8:	f000 f841 	bl	8009c5e <_malloc_usable_size_r>
 8009bdc:	4284      	cmp	r4, r0
 8009bde:	4607      	mov	r7, r0
 8009be0:	d802      	bhi.n	8009be8 <_realloc_r+0x34>
 8009be2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009be6:	d812      	bhi.n	8009c0e <_realloc_r+0x5a>
 8009be8:	4621      	mov	r1, r4
 8009bea:	4640      	mov	r0, r8
 8009bec:	f7ff f956 	bl	8008e9c <_malloc_r>
 8009bf0:	4605      	mov	r5, r0
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d0ed      	beq.n	8009bd2 <_realloc_r+0x1e>
 8009bf6:	42bc      	cmp	r4, r7
 8009bf8:	4622      	mov	r2, r4
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	bf28      	it	cs
 8009bfe:	463a      	movcs	r2, r7
 8009c00:	f7ff ff84 	bl	8009b0c <memcpy>
 8009c04:	4631      	mov	r1, r6
 8009c06:	4640      	mov	r0, r8
 8009c08:	f7ff f8d4 	bl	8008db4 <_free_r>
 8009c0c:	e7e1      	b.n	8009bd2 <_realloc_r+0x1e>
 8009c0e:	4635      	mov	r5, r6
 8009c10:	e7df      	b.n	8009bd2 <_realloc_r+0x1e>

08009c12 <__ascii_wctomb>:
 8009c12:	b149      	cbz	r1, 8009c28 <__ascii_wctomb+0x16>
 8009c14:	2aff      	cmp	r2, #255	; 0xff
 8009c16:	bf85      	ittet	hi
 8009c18:	238a      	movhi	r3, #138	; 0x8a
 8009c1a:	6003      	strhi	r3, [r0, #0]
 8009c1c:	700a      	strbls	r2, [r1, #0]
 8009c1e:	f04f 30ff 	movhi.w	r0, #4294967295
 8009c22:	bf98      	it	ls
 8009c24:	2001      	movls	r0, #1
 8009c26:	4770      	bx	lr
 8009c28:	4608      	mov	r0, r1
 8009c2a:	4770      	bx	lr

08009c2c <fiprintf>:
 8009c2c:	b40e      	push	{r1, r2, r3}
 8009c2e:	b503      	push	{r0, r1, lr}
 8009c30:	4601      	mov	r1, r0
 8009c32:	ab03      	add	r3, sp, #12
 8009c34:	4805      	ldr	r0, [pc, #20]	; (8009c4c <fiprintf+0x20>)
 8009c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c3a:	6800      	ldr	r0, [r0, #0]
 8009c3c:	9301      	str	r3, [sp, #4]
 8009c3e:	f000 f83f 	bl	8009cc0 <_vfiprintf_r>
 8009c42:	b002      	add	sp, #8
 8009c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c48:	b003      	add	sp, #12
 8009c4a:	4770      	bx	lr
 8009c4c:	20000084 	.word	0x20000084

08009c50 <abort>:
 8009c50:	b508      	push	{r3, lr}
 8009c52:	2006      	movs	r0, #6
 8009c54:	f000 fa0c 	bl	800a070 <raise>
 8009c58:	2001      	movs	r0, #1
 8009c5a:	f7f7 fe93 	bl	8001984 <_exit>

08009c5e <_malloc_usable_size_r>:
 8009c5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c62:	1f18      	subs	r0, r3, #4
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	bfbc      	itt	lt
 8009c68:	580b      	ldrlt	r3, [r1, r0]
 8009c6a:	18c0      	addlt	r0, r0, r3
 8009c6c:	4770      	bx	lr

08009c6e <__sfputc_r>:
 8009c6e:	6893      	ldr	r3, [r2, #8]
 8009c70:	3b01      	subs	r3, #1
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	b410      	push	{r4}
 8009c76:	6093      	str	r3, [r2, #8]
 8009c78:	da08      	bge.n	8009c8c <__sfputc_r+0x1e>
 8009c7a:	6994      	ldr	r4, [r2, #24]
 8009c7c:	42a3      	cmp	r3, r4
 8009c7e:	db01      	blt.n	8009c84 <__sfputc_r+0x16>
 8009c80:	290a      	cmp	r1, #10
 8009c82:	d103      	bne.n	8009c8c <__sfputc_r+0x1e>
 8009c84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c88:	f000 b934 	b.w	8009ef4 <__swbuf_r>
 8009c8c:	6813      	ldr	r3, [r2, #0]
 8009c8e:	1c58      	adds	r0, r3, #1
 8009c90:	6010      	str	r0, [r2, #0]
 8009c92:	7019      	strb	r1, [r3, #0]
 8009c94:	4608      	mov	r0, r1
 8009c96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <__sfputs_r>:
 8009c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9e:	4606      	mov	r6, r0
 8009ca0:	460f      	mov	r7, r1
 8009ca2:	4614      	mov	r4, r2
 8009ca4:	18d5      	adds	r5, r2, r3
 8009ca6:	42ac      	cmp	r4, r5
 8009ca8:	d101      	bne.n	8009cae <__sfputs_r+0x12>
 8009caa:	2000      	movs	r0, #0
 8009cac:	e007      	b.n	8009cbe <__sfputs_r+0x22>
 8009cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb2:	463a      	mov	r2, r7
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	f7ff ffda 	bl	8009c6e <__sfputc_r>
 8009cba:	1c43      	adds	r3, r0, #1
 8009cbc:	d1f3      	bne.n	8009ca6 <__sfputs_r+0xa>
 8009cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009cc0 <_vfiprintf_r>:
 8009cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc4:	460d      	mov	r5, r1
 8009cc6:	b09d      	sub	sp, #116	; 0x74
 8009cc8:	4614      	mov	r4, r2
 8009cca:	4698      	mov	r8, r3
 8009ccc:	4606      	mov	r6, r0
 8009cce:	b118      	cbz	r0, 8009cd8 <_vfiprintf_r+0x18>
 8009cd0:	6a03      	ldr	r3, [r0, #32]
 8009cd2:	b90b      	cbnz	r3, 8009cd8 <_vfiprintf_r+0x18>
 8009cd4:	f7fe f8c2 	bl	8007e5c <__sinit>
 8009cd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cda:	07d9      	lsls	r1, r3, #31
 8009cdc:	d405      	bmi.n	8009cea <_vfiprintf_r+0x2a>
 8009cde:	89ab      	ldrh	r3, [r5, #12]
 8009ce0:	059a      	lsls	r2, r3, #22
 8009ce2:	d402      	bmi.n	8009cea <_vfiprintf_r+0x2a>
 8009ce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ce6:	f7fe f9e8 	bl	80080ba <__retarget_lock_acquire_recursive>
 8009cea:	89ab      	ldrh	r3, [r5, #12]
 8009cec:	071b      	lsls	r3, r3, #28
 8009cee:	d501      	bpl.n	8009cf4 <_vfiprintf_r+0x34>
 8009cf0:	692b      	ldr	r3, [r5, #16]
 8009cf2:	b99b      	cbnz	r3, 8009d1c <_vfiprintf_r+0x5c>
 8009cf4:	4629      	mov	r1, r5
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	f000 f93a 	bl	8009f70 <__swsetup_r>
 8009cfc:	b170      	cbz	r0, 8009d1c <_vfiprintf_r+0x5c>
 8009cfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d00:	07dc      	lsls	r4, r3, #31
 8009d02:	d504      	bpl.n	8009d0e <_vfiprintf_r+0x4e>
 8009d04:	f04f 30ff 	mov.w	r0, #4294967295
 8009d08:	b01d      	add	sp, #116	; 0x74
 8009d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d0e:	89ab      	ldrh	r3, [r5, #12]
 8009d10:	0598      	lsls	r0, r3, #22
 8009d12:	d4f7      	bmi.n	8009d04 <_vfiprintf_r+0x44>
 8009d14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d16:	f7fe f9d1 	bl	80080bc <__retarget_lock_release_recursive>
 8009d1a:	e7f3      	b.n	8009d04 <_vfiprintf_r+0x44>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d20:	2320      	movs	r3, #32
 8009d22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d26:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d2a:	2330      	movs	r3, #48	; 0x30
 8009d2c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009ee0 <_vfiprintf_r+0x220>
 8009d30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d34:	f04f 0901 	mov.w	r9, #1
 8009d38:	4623      	mov	r3, r4
 8009d3a:	469a      	mov	sl, r3
 8009d3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d40:	b10a      	cbz	r2, 8009d46 <_vfiprintf_r+0x86>
 8009d42:	2a25      	cmp	r2, #37	; 0x25
 8009d44:	d1f9      	bne.n	8009d3a <_vfiprintf_r+0x7a>
 8009d46:	ebba 0b04 	subs.w	fp, sl, r4
 8009d4a:	d00b      	beq.n	8009d64 <_vfiprintf_r+0xa4>
 8009d4c:	465b      	mov	r3, fp
 8009d4e:	4622      	mov	r2, r4
 8009d50:	4629      	mov	r1, r5
 8009d52:	4630      	mov	r0, r6
 8009d54:	f7ff ffa2 	bl	8009c9c <__sfputs_r>
 8009d58:	3001      	adds	r0, #1
 8009d5a:	f000 80a9 	beq.w	8009eb0 <_vfiprintf_r+0x1f0>
 8009d5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d60:	445a      	add	r2, fp
 8009d62:	9209      	str	r2, [sp, #36]	; 0x24
 8009d64:	f89a 3000 	ldrb.w	r3, [sl]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f000 80a1 	beq.w	8009eb0 <_vfiprintf_r+0x1f0>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	f04f 32ff 	mov.w	r2, #4294967295
 8009d74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d78:	f10a 0a01 	add.w	sl, sl, #1
 8009d7c:	9304      	str	r3, [sp, #16]
 8009d7e:	9307      	str	r3, [sp, #28]
 8009d80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d84:	931a      	str	r3, [sp, #104]	; 0x68
 8009d86:	4654      	mov	r4, sl
 8009d88:	2205      	movs	r2, #5
 8009d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d8e:	4854      	ldr	r0, [pc, #336]	; (8009ee0 <_vfiprintf_r+0x220>)
 8009d90:	f7f6 fa1e 	bl	80001d0 <memchr>
 8009d94:	9a04      	ldr	r2, [sp, #16]
 8009d96:	b9d8      	cbnz	r0, 8009dd0 <_vfiprintf_r+0x110>
 8009d98:	06d1      	lsls	r1, r2, #27
 8009d9a:	bf44      	itt	mi
 8009d9c:	2320      	movmi	r3, #32
 8009d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009da2:	0713      	lsls	r3, r2, #28
 8009da4:	bf44      	itt	mi
 8009da6:	232b      	movmi	r3, #43	; 0x2b
 8009da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dac:	f89a 3000 	ldrb.w	r3, [sl]
 8009db0:	2b2a      	cmp	r3, #42	; 0x2a
 8009db2:	d015      	beq.n	8009de0 <_vfiprintf_r+0x120>
 8009db4:	9a07      	ldr	r2, [sp, #28]
 8009db6:	4654      	mov	r4, sl
 8009db8:	2000      	movs	r0, #0
 8009dba:	f04f 0c0a 	mov.w	ip, #10
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dc4:	3b30      	subs	r3, #48	; 0x30
 8009dc6:	2b09      	cmp	r3, #9
 8009dc8:	d94d      	bls.n	8009e66 <_vfiprintf_r+0x1a6>
 8009dca:	b1b0      	cbz	r0, 8009dfa <_vfiprintf_r+0x13a>
 8009dcc:	9207      	str	r2, [sp, #28]
 8009dce:	e014      	b.n	8009dfa <_vfiprintf_r+0x13a>
 8009dd0:	eba0 0308 	sub.w	r3, r0, r8
 8009dd4:	fa09 f303 	lsl.w	r3, r9, r3
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	9304      	str	r3, [sp, #16]
 8009ddc:	46a2      	mov	sl, r4
 8009dde:	e7d2      	b.n	8009d86 <_vfiprintf_r+0xc6>
 8009de0:	9b03      	ldr	r3, [sp, #12]
 8009de2:	1d19      	adds	r1, r3, #4
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	9103      	str	r1, [sp, #12]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	bfbb      	ittet	lt
 8009dec:	425b      	neglt	r3, r3
 8009dee:	f042 0202 	orrlt.w	r2, r2, #2
 8009df2:	9307      	strge	r3, [sp, #28]
 8009df4:	9307      	strlt	r3, [sp, #28]
 8009df6:	bfb8      	it	lt
 8009df8:	9204      	strlt	r2, [sp, #16]
 8009dfa:	7823      	ldrb	r3, [r4, #0]
 8009dfc:	2b2e      	cmp	r3, #46	; 0x2e
 8009dfe:	d10c      	bne.n	8009e1a <_vfiprintf_r+0x15a>
 8009e00:	7863      	ldrb	r3, [r4, #1]
 8009e02:	2b2a      	cmp	r3, #42	; 0x2a
 8009e04:	d134      	bne.n	8009e70 <_vfiprintf_r+0x1b0>
 8009e06:	9b03      	ldr	r3, [sp, #12]
 8009e08:	1d1a      	adds	r2, r3, #4
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	9203      	str	r2, [sp, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	bfb8      	it	lt
 8009e12:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e16:	3402      	adds	r4, #2
 8009e18:	9305      	str	r3, [sp, #20]
 8009e1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009ef0 <_vfiprintf_r+0x230>
 8009e1e:	7821      	ldrb	r1, [r4, #0]
 8009e20:	2203      	movs	r2, #3
 8009e22:	4650      	mov	r0, sl
 8009e24:	f7f6 f9d4 	bl	80001d0 <memchr>
 8009e28:	b138      	cbz	r0, 8009e3a <_vfiprintf_r+0x17a>
 8009e2a:	9b04      	ldr	r3, [sp, #16]
 8009e2c:	eba0 000a 	sub.w	r0, r0, sl
 8009e30:	2240      	movs	r2, #64	; 0x40
 8009e32:	4082      	lsls	r2, r0
 8009e34:	4313      	orrs	r3, r2
 8009e36:	3401      	adds	r4, #1
 8009e38:	9304      	str	r3, [sp, #16]
 8009e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e3e:	4829      	ldr	r0, [pc, #164]	; (8009ee4 <_vfiprintf_r+0x224>)
 8009e40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e44:	2206      	movs	r2, #6
 8009e46:	f7f6 f9c3 	bl	80001d0 <memchr>
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	d03f      	beq.n	8009ece <_vfiprintf_r+0x20e>
 8009e4e:	4b26      	ldr	r3, [pc, #152]	; (8009ee8 <_vfiprintf_r+0x228>)
 8009e50:	bb1b      	cbnz	r3, 8009e9a <_vfiprintf_r+0x1da>
 8009e52:	9b03      	ldr	r3, [sp, #12]
 8009e54:	3307      	adds	r3, #7
 8009e56:	f023 0307 	bic.w	r3, r3, #7
 8009e5a:	3308      	adds	r3, #8
 8009e5c:	9303      	str	r3, [sp, #12]
 8009e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e60:	443b      	add	r3, r7
 8009e62:	9309      	str	r3, [sp, #36]	; 0x24
 8009e64:	e768      	b.n	8009d38 <_vfiprintf_r+0x78>
 8009e66:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e6a:	460c      	mov	r4, r1
 8009e6c:	2001      	movs	r0, #1
 8009e6e:	e7a6      	b.n	8009dbe <_vfiprintf_r+0xfe>
 8009e70:	2300      	movs	r3, #0
 8009e72:	3401      	adds	r4, #1
 8009e74:	9305      	str	r3, [sp, #20]
 8009e76:	4619      	mov	r1, r3
 8009e78:	f04f 0c0a 	mov.w	ip, #10
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e82:	3a30      	subs	r2, #48	; 0x30
 8009e84:	2a09      	cmp	r2, #9
 8009e86:	d903      	bls.n	8009e90 <_vfiprintf_r+0x1d0>
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d0c6      	beq.n	8009e1a <_vfiprintf_r+0x15a>
 8009e8c:	9105      	str	r1, [sp, #20]
 8009e8e:	e7c4      	b.n	8009e1a <_vfiprintf_r+0x15a>
 8009e90:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e94:	4604      	mov	r4, r0
 8009e96:	2301      	movs	r3, #1
 8009e98:	e7f0      	b.n	8009e7c <_vfiprintf_r+0x1bc>
 8009e9a:	ab03      	add	r3, sp, #12
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	462a      	mov	r2, r5
 8009ea0:	4b12      	ldr	r3, [pc, #72]	; (8009eec <_vfiprintf_r+0x22c>)
 8009ea2:	a904      	add	r1, sp, #16
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	f7fd fb87 	bl	80075b8 <_printf_float>
 8009eaa:	4607      	mov	r7, r0
 8009eac:	1c78      	adds	r0, r7, #1
 8009eae:	d1d6      	bne.n	8009e5e <_vfiprintf_r+0x19e>
 8009eb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009eb2:	07d9      	lsls	r1, r3, #31
 8009eb4:	d405      	bmi.n	8009ec2 <_vfiprintf_r+0x202>
 8009eb6:	89ab      	ldrh	r3, [r5, #12]
 8009eb8:	059a      	lsls	r2, r3, #22
 8009eba:	d402      	bmi.n	8009ec2 <_vfiprintf_r+0x202>
 8009ebc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ebe:	f7fe f8fd 	bl	80080bc <__retarget_lock_release_recursive>
 8009ec2:	89ab      	ldrh	r3, [r5, #12]
 8009ec4:	065b      	lsls	r3, r3, #25
 8009ec6:	f53f af1d 	bmi.w	8009d04 <_vfiprintf_r+0x44>
 8009eca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ecc:	e71c      	b.n	8009d08 <_vfiprintf_r+0x48>
 8009ece:	ab03      	add	r3, sp, #12
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	462a      	mov	r2, r5
 8009ed4:	4b05      	ldr	r3, [pc, #20]	; (8009eec <_vfiprintf_r+0x22c>)
 8009ed6:	a904      	add	r1, sp, #16
 8009ed8:	4630      	mov	r0, r6
 8009eda:	f7fd fe11 	bl	8007b00 <_printf_i>
 8009ede:	e7e4      	b.n	8009eaa <_vfiprintf_r+0x1ea>
 8009ee0:	0800a4dc 	.word	0x0800a4dc
 8009ee4:	0800a4e6 	.word	0x0800a4e6
 8009ee8:	080075b9 	.word	0x080075b9
 8009eec:	08009c9d 	.word	0x08009c9d
 8009ef0:	0800a4e2 	.word	0x0800a4e2

08009ef4 <__swbuf_r>:
 8009ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef6:	460e      	mov	r6, r1
 8009ef8:	4614      	mov	r4, r2
 8009efa:	4605      	mov	r5, r0
 8009efc:	b118      	cbz	r0, 8009f06 <__swbuf_r+0x12>
 8009efe:	6a03      	ldr	r3, [r0, #32]
 8009f00:	b90b      	cbnz	r3, 8009f06 <__swbuf_r+0x12>
 8009f02:	f7fd ffab 	bl	8007e5c <__sinit>
 8009f06:	69a3      	ldr	r3, [r4, #24]
 8009f08:	60a3      	str	r3, [r4, #8]
 8009f0a:	89a3      	ldrh	r3, [r4, #12]
 8009f0c:	071a      	lsls	r2, r3, #28
 8009f0e:	d525      	bpl.n	8009f5c <__swbuf_r+0x68>
 8009f10:	6923      	ldr	r3, [r4, #16]
 8009f12:	b31b      	cbz	r3, 8009f5c <__swbuf_r+0x68>
 8009f14:	6823      	ldr	r3, [r4, #0]
 8009f16:	6922      	ldr	r2, [r4, #16]
 8009f18:	1a98      	subs	r0, r3, r2
 8009f1a:	6963      	ldr	r3, [r4, #20]
 8009f1c:	b2f6      	uxtb	r6, r6
 8009f1e:	4283      	cmp	r3, r0
 8009f20:	4637      	mov	r7, r6
 8009f22:	dc04      	bgt.n	8009f2e <__swbuf_r+0x3a>
 8009f24:	4621      	mov	r1, r4
 8009f26:	4628      	mov	r0, r5
 8009f28:	f7ff fd9e 	bl	8009a68 <_fflush_r>
 8009f2c:	b9e0      	cbnz	r0, 8009f68 <__swbuf_r+0x74>
 8009f2e:	68a3      	ldr	r3, [r4, #8]
 8009f30:	3b01      	subs	r3, #1
 8009f32:	60a3      	str	r3, [r4, #8]
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	1c5a      	adds	r2, r3, #1
 8009f38:	6022      	str	r2, [r4, #0]
 8009f3a:	701e      	strb	r6, [r3, #0]
 8009f3c:	6962      	ldr	r2, [r4, #20]
 8009f3e:	1c43      	adds	r3, r0, #1
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d004      	beq.n	8009f4e <__swbuf_r+0x5a>
 8009f44:	89a3      	ldrh	r3, [r4, #12]
 8009f46:	07db      	lsls	r3, r3, #31
 8009f48:	d506      	bpl.n	8009f58 <__swbuf_r+0x64>
 8009f4a:	2e0a      	cmp	r6, #10
 8009f4c:	d104      	bne.n	8009f58 <__swbuf_r+0x64>
 8009f4e:	4621      	mov	r1, r4
 8009f50:	4628      	mov	r0, r5
 8009f52:	f7ff fd89 	bl	8009a68 <_fflush_r>
 8009f56:	b938      	cbnz	r0, 8009f68 <__swbuf_r+0x74>
 8009f58:	4638      	mov	r0, r7
 8009f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f5c:	4621      	mov	r1, r4
 8009f5e:	4628      	mov	r0, r5
 8009f60:	f000 f806 	bl	8009f70 <__swsetup_r>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d0d5      	beq.n	8009f14 <__swbuf_r+0x20>
 8009f68:	f04f 37ff 	mov.w	r7, #4294967295
 8009f6c:	e7f4      	b.n	8009f58 <__swbuf_r+0x64>
	...

08009f70 <__swsetup_r>:
 8009f70:	b538      	push	{r3, r4, r5, lr}
 8009f72:	4b2a      	ldr	r3, [pc, #168]	; (800a01c <__swsetup_r+0xac>)
 8009f74:	4605      	mov	r5, r0
 8009f76:	6818      	ldr	r0, [r3, #0]
 8009f78:	460c      	mov	r4, r1
 8009f7a:	b118      	cbz	r0, 8009f84 <__swsetup_r+0x14>
 8009f7c:	6a03      	ldr	r3, [r0, #32]
 8009f7e:	b90b      	cbnz	r3, 8009f84 <__swsetup_r+0x14>
 8009f80:	f7fd ff6c 	bl	8007e5c <__sinit>
 8009f84:	89a3      	ldrh	r3, [r4, #12]
 8009f86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f8a:	0718      	lsls	r0, r3, #28
 8009f8c:	d422      	bmi.n	8009fd4 <__swsetup_r+0x64>
 8009f8e:	06d9      	lsls	r1, r3, #27
 8009f90:	d407      	bmi.n	8009fa2 <__swsetup_r+0x32>
 8009f92:	2309      	movs	r3, #9
 8009f94:	602b      	str	r3, [r5, #0]
 8009f96:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f9a:	81a3      	strh	r3, [r4, #12]
 8009f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa0:	e034      	b.n	800a00c <__swsetup_r+0x9c>
 8009fa2:	0758      	lsls	r0, r3, #29
 8009fa4:	d512      	bpl.n	8009fcc <__swsetup_r+0x5c>
 8009fa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fa8:	b141      	cbz	r1, 8009fbc <__swsetup_r+0x4c>
 8009faa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fae:	4299      	cmp	r1, r3
 8009fb0:	d002      	beq.n	8009fb8 <__swsetup_r+0x48>
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	f7fe fefe 	bl	8008db4 <_free_r>
 8009fb8:	2300      	movs	r3, #0
 8009fba:	6363      	str	r3, [r4, #52]	; 0x34
 8009fbc:	89a3      	ldrh	r3, [r4, #12]
 8009fbe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fc2:	81a3      	strh	r3, [r4, #12]
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	6063      	str	r3, [r4, #4]
 8009fc8:	6923      	ldr	r3, [r4, #16]
 8009fca:	6023      	str	r3, [r4, #0]
 8009fcc:	89a3      	ldrh	r3, [r4, #12]
 8009fce:	f043 0308 	orr.w	r3, r3, #8
 8009fd2:	81a3      	strh	r3, [r4, #12]
 8009fd4:	6923      	ldr	r3, [r4, #16]
 8009fd6:	b94b      	cbnz	r3, 8009fec <__swsetup_r+0x7c>
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fe2:	d003      	beq.n	8009fec <__swsetup_r+0x7c>
 8009fe4:	4621      	mov	r1, r4
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	f000 f884 	bl	800a0f4 <__smakebuf_r>
 8009fec:	89a0      	ldrh	r0, [r4, #12]
 8009fee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ff2:	f010 0301 	ands.w	r3, r0, #1
 8009ff6:	d00a      	beq.n	800a00e <__swsetup_r+0x9e>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	60a3      	str	r3, [r4, #8]
 8009ffc:	6963      	ldr	r3, [r4, #20]
 8009ffe:	425b      	negs	r3, r3
 800a000:	61a3      	str	r3, [r4, #24]
 800a002:	6923      	ldr	r3, [r4, #16]
 800a004:	b943      	cbnz	r3, 800a018 <__swsetup_r+0xa8>
 800a006:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a00a:	d1c4      	bne.n	8009f96 <__swsetup_r+0x26>
 800a00c:	bd38      	pop	{r3, r4, r5, pc}
 800a00e:	0781      	lsls	r1, r0, #30
 800a010:	bf58      	it	pl
 800a012:	6963      	ldrpl	r3, [r4, #20]
 800a014:	60a3      	str	r3, [r4, #8]
 800a016:	e7f4      	b.n	800a002 <__swsetup_r+0x92>
 800a018:	2000      	movs	r0, #0
 800a01a:	e7f7      	b.n	800a00c <__swsetup_r+0x9c>
 800a01c:	20000084 	.word	0x20000084

0800a020 <_raise_r>:
 800a020:	291f      	cmp	r1, #31
 800a022:	b538      	push	{r3, r4, r5, lr}
 800a024:	4604      	mov	r4, r0
 800a026:	460d      	mov	r5, r1
 800a028:	d904      	bls.n	800a034 <_raise_r+0x14>
 800a02a:	2316      	movs	r3, #22
 800a02c:	6003      	str	r3, [r0, #0]
 800a02e:	f04f 30ff 	mov.w	r0, #4294967295
 800a032:	bd38      	pop	{r3, r4, r5, pc}
 800a034:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a036:	b112      	cbz	r2, 800a03e <_raise_r+0x1e>
 800a038:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a03c:	b94b      	cbnz	r3, 800a052 <_raise_r+0x32>
 800a03e:	4620      	mov	r0, r4
 800a040:	f000 f830 	bl	800a0a4 <_getpid_r>
 800a044:	462a      	mov	r2, r5
 800a046:	4601      	mov	r1, r0
 800a048:	4620      	mov	r0, r4
 800a04a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a04e:	f000 b817 	b.w	800a080 <_kill_r>
 800a052:	2b01      	cmp	r3, #1
 800a054:	d00a      	beq.n	800a06c <_raise_r+0x4c>
 800a056:	1c59      	adds	r1, r3, #1
 800a058:	d103      	bne.n	800a062 <_raise_r+0x42>
 800a05a:	2316      	movs	r3, #22
 800a05c:	6003      	str	r3, [r0, #0]
 800a05e:	2001      	movs	r0, #1
 800a060:	e7e7      	b.n	800a032 <_raise_r+0x12>
 800a062:	2400      	movs	r4, #0
 800a064:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a068:	4628      	mov	r0, r5
 800a06a:	4798      	blx	r3
 800a06c:	2000      	movs	r0, #0
 800a06e:	e7e0      	b.n	800a032 <_raise_r+0x12>

0800a070 <raise>:
 800a070:	4b02      	ldr	r3, [pc, #8]	; (800a07c <raise+0xc>)
 800a072:	4601      	mov	r1, r0
 800a074:	6818      	ldr	r0, [r3, #0]
 800a076:	f7ff bfd3 	b.w	800a020 <_raise_r>
 800a07a:	bf00      	nop
 800a07c:	20000084 	.word	0x20000084

0800a080 <_kill_r>:
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	4d07      	ldr	r5, [pc, #28]	; (800a0a0 <_kill_r+0x20>)
 800a084:	2300      	movs	r3, #0
 800a086:	4604      	mov	r4, r0
 800a088:	4608      	mov	r0, r1
 800a08a:	4611      	mov	r1, r2
 800a08c:	602b      	str	r3, [r5, #0]
 800a08e:	f7f7 fc69 	bl	8001964 <_kill>
 800a092:	1c43      	adds	r3, r0, #1
 800a094:	d102      	bne.n	800a09c <_kill_r+0x1c>
 800a096:	682b      	ldr	r3, [r5, #0]
 800a098:	b103      	cbz	r3, 800a09c <_kill_r+0x1c>
 800a09a:	6023      	str	r3, [r4, #0]
 800a09c:	bd38      	pop	{r3, r4, r5, pc}
 800a09e:	bf00      	nop
 800a0a0:	20000740 	.word	0x20000740

0800a0a4 <_getpid_r>:
 800a0a4:	f7f7 bc56 	b.w	8001954 <_getpid>

0800a0a8 <__swhatbuf_r>:
 800a0a8:	b570      	push	{r4, r5, r6, lr}
 800a0aa:	460c      	mov	r4, r1
 800a0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0b0:	2900      	cmp	r1, #0
 800a0b2:	b096      	sub	sp, #88	; 0x58
 800a0b4:	4615      	mov	r5, r2
 800a0b6:	461e      	mov	r6, r3
 800a0b8:	da0d      	bge.n	800a0d6 <__swhatbuf_r+0x2e>
 800a0ba:	89a3      	ldrh	r3, [r4, #12]
 800a0bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a0c0:	f04f 0100 	mov.w	r1, #0
 800a0c4:	bf0c      	ite	eq
 800a0c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a0ca:	2340      	movne	r3, #64	; 0x40
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	6031      	str	r1, [r6, #0]
 800a0d0:	602b      	str	r3, [r5, #0]
 800a0d2:	b016      	add	sp, #88	; 0x58
 800a0d4:	bd70      	pop	{r4, r5, r6, pc}
 800a0d6:	466a      	mov	r2, sp
 800a0d8:	f000 f848 	bl	800a16c <_fstat_r>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	dbec      	blt.n	800a0ba <__swhatbuf_r+0x12>
 800a0e0:	9901      	ldr	r1, [sp, #4]
 800a0e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a0e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a0ea:	4259      	negs	r1, r3
 800a0ec:	4159      	adcs	r1, r3
 800a0ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0f2:	e7eb      	b.n	800a0cc <__swhatbuf_r+0x24>

0800a0f4 <__smakebuf_r>:
 800a0f4:	898b      	ldrh	r3, [r1, #12]
 800a0f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0f8:	079d      	lsls	r5, r3, #30
 800a0fa:	4606      	mov	r6, r0
 800a0fc:	460c      	mov	r4, r1
 800a0fe:	d507      	bpl.n	800a110 <__smakebuf_r+0x1c>
 800a100:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	6123      	str	r3, [r4, #16]
 800a108:	2301      	movs	r3, #1
 800a10a:	6163      	str	r3, [r4, #20]
 800a10c:	b002      	add	sp, #8
 800a10e:	bd70      	pop	{r4, r5, r6, pc}
 800a110:	ab01      	add	r3, sp, #4
 800a112:	466a      	mov	r2, sp
 800a114:	f7ff ffc8 	bl	800a0a8 <__swhatbuf_r>
 800a118:	9900      	ldr	r1, [sp, #0]
 800a11a:	4605      	mov	r5, r0
 800a11c:	4630      	mov	r0, r6
 800a11e:	f7fe febd 	bl	8008e9c <_malloc_r>
 800a122:	b948      	cbnz	r0, 800a138 <__smakebuf_r+0x44>
 800a124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a128:	059a      	lsls	r2, r3, #22
 800a12a:	d4ef      	bmi.n	800a10c <__smakebuf_r+0x18>
 800a12c:	f023 0303 	bic.w	r3, r3, #3
 800a130:	f043 0302 	orr.w	r3, r3, #2
 800a134:	81a3      	strh	r3, [r4, #12]
 800a136:	e7e3      	b.n	800a100 <__smakebuf_r+0xc>
 800a138:	89a3      	ldrh	r3, [r4, #12]
 800a13a:	6020      	str	r0, [r4, #0]
 800a13c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a140:	81a3      	strh	r3, [r4, #12]
 800a142:	9b00      	ldr	r3, [sp, #0]
 800a144:	6163      	str	r3, [r4, #20]
 800a146:	9b01      	ldr	r3, [sp, #4]
 800a148:	6120      	str	r0, [r4, #16]
 800a14a:	b15b      	cbz	r3, 800a164 <__smakebuf_r+0x70>
 800a14c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a150:	4630      	mov	r0, r6
 800a152:	f000 f81d 	bl	800a190 <_isatty_r>
 800a156:	b128      	cbz	r0, 800a164 <__smakebuf_r+0x70>
 800a158:	89a3      	ldrh	r3, [r4, #12]
 800a15a:	f023 0303 	bic.w	r3, r3, #3
 800a15e:	f043 0301 	orr.w	r3, r3, #1
 800a162:	81a3      	strh	r3, [r4, #12]
 800a164:	89a3      	ldrh	r3, [r4, #12]
 800a166:	431d      	orrs	r5, r3
 800a168:	81a5      	strh	r5, [r4, #12]
 800a16a:	e7cf      	b.n	800a10c <__smakebuf_r+0x18>

0800a16c <_fstat_r>:
 800a16c:	b538      	push	{r3, r4, r5, lr}
 800a16e:	4d07      	ldr	r5, [pc, #28]	; (800a18c <_fstat_r+0x20>)
 800a170:	2300      	movs	r3, #0
 800a172:	4604      	mov	r4, r0
 800a174:	4608      	mov	r0, r1
 800a176:	4611      	mov	r1, r2
 800a178:	602b      	str	r3, [r5, #0]
 800a17a:	f7f7 fc52 	bl	8001a22 <_fstat>
 800a17e:	1c43      	adds	r3, r0, #1
 800a180:	d102      	bne.n	800a188 <_fstat_r+0x1c>
 800a182:	682b      	ldr	r3, [r5, #0]
 800a184:	b103      	cbz	r3, 800a188 <_fstat_r+0x1c>
 800a186:	6023      	str	r3, [r4, #0]
 800a188:	bd38      	pop	{r3, r4, r5, pc}
 800a18a:	bf00      	nop
 800a18c:	20000740 	.word	0x20000740

0800a190 <_isatty_r>:
 800a190:	b538      	push	{r3, r4, r5, lr}
 800a192:	4d06      	ldr	r5, [pc, #24]	; (800a1ac <_isatty_r+0x1c>)
 800a194:	2300      	movs	r3, #0
 800a196:	4604      	mov	r4, r0
 800a198:	4608      	mov	r0, r1
 800a19a:	602b      	str	r3, [r5, #0]
 800a19c:	f7f7 fc51 	bl	8001a42 <_isatty>
 800a1a0:	1c43      	adds	r3, r0, #1
 800a1a2:	d102      	bne.n	800a1aa <_isatty_r+0x1a>
 800a1a4:	682b      	ldr	r3, [r5, #0]
 800a1a6:	b103      	cbz	r3, 800a1aa <_isatty_r+0x1a>
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	bd38      	pop	{r3, r4, r5, pc}
 800a1ac:	20000740 	.word	0x20000740

0800a1b0 <_init>:
 800a1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b2:	bf00      	nop
 800a1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1b6:	bc08      	pop	{r3}
 800a1b8:	469e      	mov	lr, r3
 800a1ba:	4770      	bx	lr

0800a1bc <_fini>:
 800a1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1be:	bf00      	nop
 800a1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1c2:	bc08      	pop	{r3}
 800a1c4:	469e      	mov	lr, r3
 800a1c6:	4770      	bx	lr
