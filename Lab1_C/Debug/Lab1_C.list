
Lab1_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008840  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  080089d0  080089d0  000189d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dcc  08008dcc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008dcc  08008dcc  00018dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dd4  08008dd4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dd4  08008dd4  00018dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dd8  08008dd8  00018dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  200001dc  08008fb8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f0  08008fb8  000206f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f8ff  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020f6  00000000  00000000  0002fb4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e60  00000000  00000000  00031c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b2a  00000000  00000000  00032aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002755a  00000000  00000000  000335d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011f12  00000000  00000000  0005ab2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee6b6  00000000  00000000  0006ca3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d70  00000000  00000000  0015b0f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0015fe64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080089b8 	.word	0x080089b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080089b8 	.word	0x080089b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000f44:	b40f      	push	{r0, r1, r2, r3}
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
	static char buffer[512];
	va_list args;
	va_start(args, fmt);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f5a:	480b      	ldr	r0, [pc, #44]	; (8000f88 <myprintf+0x44>)
 8000f5c:	f005 fc26 	bl	80067ac <vsniprintf>
	va_end(args);
	int len = strlen(buffer);
 8000f60:	4809      	ldr	r0, [pc, #36]	; (8000f88 <myprintf+0x44>)
 8000f62:	f7ff f985 	bl	8000270 <strlen>
 8000f66:	4603      	mov	r3, r0
 8000f68:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, len, -1);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	4905      	ldr	r1, [pc, #20]	; (8000f88 <myprintf+0x44>)
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <myprintf+0x48>)
 8000f76:	f004 f92b 	bl	80051d0 <HAL_UART_Transmit>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f84:	b004      	add	sp, #16
 8000f86:	4770      	bx	lr
 8000f88:	2000039c 	.word	0x2000039c
 8000f8c:	20000314 	.word	0x20000314

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af02      	add	r7, sp, #8
	uint8_t flag;
	float lux;
	float temp;


	ret = HAL_I2C_Master_Transmit(&hi2c1, BH1721_ADDR_write, &BH1721_start, 1, HAL_MAX_DELAY); // Tell BH1721 to start measurements
 8000f96:	4b8f      	ldr	r3, [pc, #572]	; (80011d4 <main+0x244>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	b299      	uxth	r1, r3
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	4a8c      	ldr	r2, [pc, #560]	; (80011d8 <main+0x248>)
 8000fa6:	488d      	ldr	r0, [pc, #564]	; (80011dc <main+0x24c>)
 8000fa8:	f001 f93e 	bl	8002228 <HAL_I2C_Master_Transmit>
 8000fac:	4603      	mov	r3, r0
 8000fae:	76fb      	strb	r3, [r7, #27]
	if ( ret != HAL_OK ) {
 8000fb0:	7efb      	ldrb	r3, [r7, #27]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d002      	beq.n	8000fbc <main+0x2c>
		myprintf("Error!\n"); // error message in UART
 8000fb6:	488a      	ldr	r0, [pc, #552]	; (80011e0 <main+0x250>)
 8000fb8:	f7ff ffc4 	bl	8000f44 <myprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbc:	f000 fd50 	bl	8001a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc0:	f000 f926 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc4:	f000 fa62 	bl	800148c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fc8:	f000 fa30 	bl	800142c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fcc:	f000 f972 	bl	80012b4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000fd0:	f000 f9b0 	bl	8001334 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000fd4:	f000 f9ec 	bl	80013b0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  // LED on
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2120      	movs	r1, #32
 8000fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe0:	f001 f86e 	bl	80020c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2110      	movs	r1, #16
 8000fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fec:	f001 f868 	bl	80020c0 <HAL_GPIO_WritePin>

  // Configure BH1721 to do low resolution continuously
  ret = HAL_I2C_Master_Transmit(&hi2c1, BH1721_ADDR_write, &BH1721_LRC, 1, HAL_MAX_DELAY);
 8000ff0:	4b78      	ldr	r3, [pc, #480]	; (80011d4 <main+0x244>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b299      	uxth	r1, r3
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	4a79      	ldr	r2, [pc, #484]	; (80011e4 <main+0x254>)
 8001000:	4876      	ldr	r0, [pc, #472]	; (80011dc <main+0x24c>)
 8001002:	f001 f911 	bl	8002228 <HAL_I2C_Master_Transmit>
 8001006:	4603      	mov	r3, r0
 8001008:	76fb      	strb	r3, [r7, #27]
  if ( ret != HAL_OK ) {
 800100a:	7efb      	ldrb	r3, [r7, #27]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d002      	beq.n	8001016 <main+0x86>
	  myprintf("Error!\n"); // error message in UART
 8001010:	4873      	ldr	r0, [pc, #460]	; (80011e0 <main+0x250>)
 8001012:	f7ff ff97 	bl	8000f44 <myprintf>
  }

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // SPI3 CS on
 8001016:	2201      	movs	r2, #1
 8001018:	2110      	movs	r1, #16
 800101a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101e:	f001 f84f 	bl	80020c0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t *)&TC72_WR, 1, HAL_MAX_DELAY);
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	2201      	movs	r2, #1
 8001028:	496f      	ldr	r1, [pc, #444]	; (80011e8 <main+0x258>)
 800102a:	4870      	ldr	r0, [pc, #448]	; (80011ec <main+0x25c>)
 800102c:	f003 f9f7 	bl	800441e <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, (uint8_t *)&TC72_OP, 1, HAL_MAX_DELAY);
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	2201      	movs	r2, #1
 8001036:	496e      	ldr	r1, [pc, #440]	; (80011f0 <main+0x260>)
 8001038:	486c      	ldr	r0, [pc, #432]	; (80011ec <main+0x25c>)
 800103a:	f003 f9f0 	bl	800441e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // SPI3 CS off
 800103e:	2200      	movs	r2, #0
 8001040:	2110      	movs	r1, #16
 8001042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001046:	f001 f83b 	bl	80020c0 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ret = HAL_I2C_Master_Receive(&hi2c1, BH1721_ADDR_read, buf, 2, HAL_MAX_DELAY); // Read 2 bytes from BH1721 into a buffer
 800104a:	4b6a      	ldr	r3, [pc, #424]	; (80011f4 <main+0x264>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b299      	uxth	r1, r3
 8001050:	f107 0208 	add.w	r2, r7, #8
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2302      	movs	r3, #2
 800105c:	485f      	ldr	r0, [pc, #380]	; (80011dc <main+0x24c>)
 800105e:	f001 f9fb 	bl	8002458 <HAL_I2C_Master_Receive>
 8001062:	4603      	mov	r3, r0
 8001064:	76fb      	strb	r3, [r7, #27]
	  if ( ret != HAL_OK ) {
 8001066:	7efb      	ldrb	r3, [r7, #27]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d002      	beq.n	8001072 <main+0xe2>
		  myprintf("Error!\n"); // error message in UART
 800106c:	485c      	ldr	r0, [pc, #368]	; (80011e0 <main+0x250>)
 800106e:	f7ff ff69 	bl	8000f44 <myprintf>
	  }

	  // Convert into Lux
	  light_val = (buf[0]<<8) | buf[1];
 8001072:	7a3b      	ldrb	r3, [r7, #8]
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	b21a      	sxth	r2, r3
 8001078:	7a7b      	ldrb	r3, [r7, #9]
 800107a:	b21b      	sxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b21b      	sxth	r3, r3
 8001080:	833b      	strh	r3, [r7, #24]
	  lux = light_val/1.2;
 8001082:	8b3b      	ldrh	r3, [r7, #24]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fa4d 	bl	8000524 <__aeabi_i2d>
 800108a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800108e:	4b5a      	ldr	r3, [pc, #360]	; (80011f8 <main+0x268>)
 8001090:	f7ff fbdc 	bl	800084c <__aeabi_ddiv>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f7ff fd84 	bl	8000ba8 <__aeabi_d2f>
 80010a0:	4603      	mov	r3, r0
 80010a2:	617b      	str	r3, [r7, #20]
	  myprintf("Light: %.2f lux\r\n", lux);
 80010a4:	6978      	ldr	r0, [r7, #20]
 80010a6:	f7ff fa4f 	bl	8000548 <__aeabi_f2d>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4853      	ldr	r0, [pc, #332]	; (80011fc <main+0x26c>)
 80010b0:	f7ff ff48 	bl	8000f44 <myprintf>


	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // SPI3 CS on
 80010b4:	2201      	movs	r2, #1
 80010b6:	2110      	movs	r1, #16
 80010b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010bc:	f001 f800 	bl	80020c0 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi3, (uint8_t *)&TC72_WR, 1, HAL_MAX_DELAY);
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	2201      	movs	r2, #1
 80010c6:	4948      	ldr	r1, [pc, #288]	; (80011e8 <main+0x258>)
 80010c8:	4848      	ldr	r0, [pc, #288]	; (80011ec <main+0x25c>)
 80010ca:	f003 f9a8 	bl	800441e <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi3, (uint8_t *)&TC72_OP, 1, HAL_MAX_DELAY);
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	2201      	movs	r2, #1
 80010d4:	4946      	ldr	r1, [pc, #280]	; (80011f0 <main+0x260>)
 80010d6:	4845      	ldr	r0, [pc, #276]	; (80011ec <main+0x25c>)
 80010d8:	f003 f9a1 	bl	800441e <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // SPI3 CS off
 80010dc:	2200      	movs	r2, #0
 80010de:	2110      	movs	r1, #16
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f000 ffec 	bl	80020c0 <HAL_GPIO_WritePin>

	  HAL_Delay(150);
 80010e8:	2096      	movs	r0, #150	; 0x96
 80010ea:	f000 fd35 	bl	8001b58 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // SPI3 CS on
 80010ee:	2201      	movs	r2, #1
 80010f0:	2110      	movs	r1, #16
 80010f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f6:	f000 ffe3 	bl	80020c0 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi3, (uint8_t *)&TC72_RR, 1, HAL_MAX_DELAY);
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	2201      	movs	r2, #1
 8001100:	493f      	ldr	r1, [pc, #252]	; (8001200 <main+0x270>)
 8001102:	483a      	ldr	r0, [pc, #232]	; (80011ec <main+0x25c>)
 8001104:	f003 f98b 	bl	800441e <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi3, (uint8_t *)spi_buf, 4, HAL_MAX_DELAY);
 8001108:	4639      	mov	r1, r7
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	2204      	movs	r2, #4
 8001110:	4836      	ldr	r0, [pc, #216]	; (80011ec <main+0x25c>)
 8001112:	f003 faf9 	bl	8004708 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // SPI3 CS off
 8001116:	2200      	movs	r2, #0
 8001118:	2110      	movs	r1, #16
 800111a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111e:	f000 ffcf 	bl	80020c0 <HAL_GPIO_WritePin>

	  myprintf("Temp Val: %x %x %x %x\r\n",spi_buf[0],
 8001122:	783b      	ldrb	r3, [r7, #0]
 8001124:	4619      	mov	r1, r3
			spi_buf[1],
 8001126:	787b      	ldrb	r3, [r7, #1]
	  myprintf("Temp Val: %x %x %x %x\r\n",spi_buf[0],
 8001128:	461a      	mov	r2, r3
			spi_buf[2],
 800112a:	78bb      	ldrb	r3, [r7, #2]
	  myprintf("Temp Val: %x %x %x %x\r\n",spi_buf[0],
 800112c:	4618      	mov	r0, r3
			spi_buf[3]);
 800112e:	78fb      	ldrb	r3, [r7, #3]
	  myprintf("Temp Val: %x %x %x %x\r\n",spi_buf[0],
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	4603      	mov	r3, r0
 8001134:	4833      	ldr	r0, [pc, #204]	; (8001204 <main+0x274>)
 8001136:	f7ff ff05 	bl	8000f44 <myprintf>

	 flag = spi_buf[2] >> 6; //right shift by 6 bits
 800113a:	78bb      	ldrb	r3, [r7, #2]
 800113c:	099b      	lsrs	r3, r3, #6
 800113e:	74fb      	strb	r3, [r7, #19]

	 if (spi_buf[1] >= 128) { //cause 128 means -0
 8001140:	787b      	ldrb	r3, [r7, #1]
 8001142:	b25b      	sxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	da1f      	bge.n	8001188 <main+0x1f8>
		temp = -((spi_buf[1]) - 128)-(flag * 0.25);
 8001148:	787b      	ldrb	r3, [r7, #1]
 800114a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f9e8 	bl	8000524 <__aeabi_i2d>
 8001154:	4604      	mov	r4, r0
 8001156:	460d      	mov	r5, r1
 8001158:	7cfb      	ldrb	r3, [r7, #19]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f9e2 	bl	8000524 <__aeabi_i2d>
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	4b28      	ldr	r3, [pc, #160]	; (8001208 <main+0x278>)
 8001166:	f7ff fa47 	bl	80005f8 <__aeabi_dmul>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4620      	mov	r0, r4
 8001170:	4629      	mov	r1, r5
 8001172:	f7ff f889 	bl	8000288 <__aeabi_dsub>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fd13 	bl	8000ba8 <__aeabi_d2f>
 8001182:	4603      	mov	r3, r0
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	e01c      	b.n	80011c2 <main+0x232>
	 }
	else {
		temp = spi_buf[1]+(flag * 0.25);
 8001188:	787b      	ldrb	r3, [r7, #1]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9ca 	bl	8000524 <__aeabi_i2d>
 8001190:	4604      	mov	r4, r0
 8001192:	460d      	mov	r5, r1
 8001194:	7cfb      	ldrb	r3, [r7, #19]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9c4 	bl	8000524 <__aeabi_i2d>
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <main+0x278>)
 80011a2:	f7ff fa29 	bl	80005f8 <__aeabi_dmul>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4620      	mov	r0, r4
 80011ac:	4629      	mov	r1, r5
 80011ae:	f7ff f86d 	bl	800028c <__adddf3>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f7ff fcf5 	bl	8000ba8 <__aeabi_d2f>
 80011be:	4603      	mov	r3, r0
 80011c0:	61fb      	str	r3, [r7, #28]
	}
	 myprintf("Temp : %f\r\n",temp);
 80011c2:	69f8      	ldr	r0, [r7, #28]
 80011c4:	f7ff f9c0 	bl	8000548 <__aeabi_f2d>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	480f      	ldr	r0, [pc, #60]	; (800120c <main+0x27c>)
 80011ce:	f7ff feb9 	bl	8000f44 <myprintf>
	  ret = HAL_I2C_Master_Receive(&hi2c1, BH1721_ADDR_read, buf, 2, HAL_MAX_DELAY); // Read 2 bytes from BH1721 into a buffer
 80011d2:	e73a      	b.n	800104a <main+0xba>
 80011d4:	20000001 	.word	0x20000001
 80011d8:	20000002 	.word	0x20000002
 80011dc:	200001f8 	.word	0x200001f8
 80011e0:	080089d0 	.word	0x080089d0
 80011e4:	20000003 	.word	0x20000003
 80011e8:	20000004 	.word	0x20000004
 80011ec:	200002b0 	.word	0x200002b0
 80011f0:	20000005 	.word	0x20000005
 80011f4:	20000000 	.word	0x20000000
 80011f8:	3ff33333 	.word	0x3ff33333
 80011fc:	080089d8 	.word	0x080089d8
 8001200:	20000006 	.word	0x20000006
 8001204:	080089ec 	.word	0x080089ec
 8001208:	3fd00000 	.word	0x3fd00000
 800120c:	08008a04 	.word	0x08008a04

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b096      	sub	sp, #88	; 0x58
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	2244      	movs	r2, #68	; 0x44
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f005 fad2 	bl	80067c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	463b      	mov	r3, r7
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001232:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001236:	f001 fd3d 	bl	8002cb4 <HAL_PWREx_ControlVoltageScaling>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001240:	f000 f98a 	bl	8001558 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001244:	2302      	movs	r3, #2
 8001246:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800124c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800124e:	2310      	movs	r3, #16
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001252:	2302      	movs	r3, #2
 8001254:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001256:	2302      	movs	r3, #2
 8001258:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800125a:	2301      	movs	r3, #1
 800125c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800125e:	230a      	movs	r3, #10
 8001260:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001262:	2307      	movs	r3, #7
 8001264:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001266:	2302      	movs	r3, #2
 8001268:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800126a:	2302      	movs	r3, #2
 800126c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4618      	mov	r0, r3
 8001274:	f001 fd74 	bl	8002d60 <HAL_RCC_OscConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800127e:	f000 f96b 	bl	8001558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001282:	230f      	movs	r3, #15
 8001284:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001286:	2303      	movs	r3, #3
 8001288:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001296:	463b      	mov	r3, r7
 8001298:	2104      	movs	r1, #4
 800129a:	4618      	mov	r0, r3
 800129c:	f002 f93c 	bl	8003518 <HAL_RCC_ClockConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012a6:	f000 f957 	bl	8001558 <Error_Handler>
  }
}
 80012aa:	bf00      	nop
 80012ac:	3758      	adds	r7, #88	; 0x58
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <MX_I2C1_Init+0x74>)
 80012ba:	4a1c      	ldr	r2, [pc, #112]	; (800132c <MX_I2C1_Init+0x78>)
 80012bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_I2C1_Init+0x74>)
 80012c0:	4a1b      	ldr	r2, [pc, #108]	; (8001330 <MX_I2C1_Init+0x7c>)
 80012c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_I2C1_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <MX_I2C1_Init+0x74>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <MX_I2C1_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_I2C1_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MX_I2C1_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <MX_I2C1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_I2C1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ee:	480e      	ldr	r0, [pc, #56]	; (8001328 <MX_I2C1_Init+0x74>)
 80012f0:	f000 fefe 	bl	80020f0 <HAL_I2C_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012fa:	f000 f92d 	bl	8001558 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012fe:	2100      	movs	r1, #0
 8001300:	4809      	ldr	r0, [pc, #36]	; (8001328 <MX_I2C1_Init+0x74>)
 8001302:	f001 fc31 	bl	8002b68 <HAL_I2CEx_ConfigAnalogFilter>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800130c:	f000 f924 	bl	8001558 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001310:	2100      	movs	r1, #0
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_I2C1_Init+0x74>)
 8001314:	f001 fc73 	bl	8002bfe <HAL_I2CEx_ConfigDigitalFilter>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800131e:	f000 f91b 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200001f8 	.word	0x200001f8
 800132c:	40005400 	.word	0x40005400
 8001330:	10909cec 	.word	0x10909cec

08001334 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_SPI2_Init+0x74>)
 800133a:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <MX_SPI2_Init+0x78>)
 800133c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <MX_SPI2_Init+0x74>)
 8001340:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001344:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_SPI2_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_SPI2_Init+0x74>)
 800134e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001352:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <MX_SPI2_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <MX_SPI2_Init+0x74>)
 800135c:	2200      	movs	r2, #0
 800135e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_SPI2_Init+0x74>)
 8001362:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001366:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_SPI2_Init+0x74>)
 800136a:	2238      	movs	r2, #56	; 0x38
 800136c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_SPI2_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_SPI2_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <MX_SPI2_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_SPI2_Init+0x74>)
 8001382:	2207      	movs	r2, #7
 8001384:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <MX_SPI2_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_SPI2_Init+0x74>)
 800138e:	2208      	movs	r2, #8
 8001390:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_SPI2_Init+0x74>)
 8001394:	f002 ffa0 	bl	80042d8 <HAL_SPI_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800139e:	f000 f8db 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2000024c 	.word	0x2000024c
 80013ac:	40003800 	.word	0x40003800

080013b0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <MX_SPI3_Init+0x74>)
 80013b6:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <MX_SPI3_Init+0x78>)
 80013b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <MX_SPI3_Init+0x74>)
 80013bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_SPI3_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MX_SPI3_Init+0x74>)
 80013ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013ce:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_SPI3_Init+0x74>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MX_SPI3_Init+0x74>)
 80013d8:	2201      	movs	r2, #1
 80013da:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_SPI3_Init+0x74>)
 80013de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MX_SPI3_Init+0x74>)
 80013e6:	2230      	movs	r2, #48	; 0x30
 80013e8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_SPI3_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_SPI3_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_SPI3_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_SPI3_Init+0x74>)
 80013fe:	2207      	movs	r2, #7
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MX_SPI3_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_SPI3_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_SPI3_Init+0x74>)
 8001410:	f002 ff62 	bl	80042d8 <HAL_SPI_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800141a:	f000 f89d 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200002b0 	.word	0x200002b0
 8001428:	40003c00 	.word	0x40003c00

0800142c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001432:	4a15      	ldr	r2, [pc, #84]	; (8001488 <MX_USART2_UART_Init+0x5c>)
 8001434:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_USART2_UART_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_USART2_UART_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_USART2_UART_Init+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001470:	f003 fe60 	bl	8005134 <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800147a:	f000 f86d 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000314 	.word	0x20000314
 8001488:	40004400 	.word	0x40004400

0800148c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <MX_GPIO_Init+0xc4>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	4a2a      	ldr	r2, [pc, #168]	; (8001550 <MX_GPIO_Init+0xc4>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ae:	4b28      	ldr	r3, [pc, #160]	; (8001550 <MX_GPIO_Init+0xc4>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ba:	4b25      	ldr	r3, [pc, #148]	; (8001550 <MX_GPIO_Init+0xc4>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	4a24      	ldr	r2, [pc, #144]	; (8001550 <MX_GPIO_Init+0xc4>)
 80014c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c6:	4b22      	ldr	r3, [pc, #136]	; (8001550 <MX_GPIO_Init+0xc4>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <MX_GPIO_Init+0xc4>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	4a1e      	ldr	r2, [pc, #120]	; (8001550 <MX_GPIO_Init+0xc4>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <MX_GPIO_Init+0xc4>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <MX_GPIO_Init+0xc4>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	4a18      	ldr	r2, [pc, #96]	; (8001550 <MX_GPIO_Init+0xc4>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <MX_GPIO_Init+0xc4>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	2120      	movs	r1, #32
 8001506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150a:	f000 fdd9 	bl	80020c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800150e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001514:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	480b      	ldr	r0, [pc, #44]	; (8001554 <MX_GPIO_Init+0xc8>)
 8001526:	f000 fc21 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800152a:	2320      	movs	r3, #32
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	2301      	movs	r3, #1
 8001530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001544:	f000 fc12 	bl	8001d6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	; 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40021000 	.word	0x40021000
 8001554:	48000800 	.word	0x48000800

08001558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001560:	e7fe      	b.n	8001560 <Error_Handler+0x8>
	...

08001564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_MspInit+0x44>)
 800156c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156e:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <HAL_MspInit+0x44>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6613      	str	r3, [r2, #96]	; 0x60
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_MspInit+0x44>)
 8001578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_MspInit+0x44>)
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	4a08      	ldr	r2, [pc, #32]	; (80015a8 <HAL_MspInit+0x44>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158c:	6593      	str	r3, [r2, #88]	; 0x58
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_MspInit+0x44>)
 8001590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000

080015ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b0ac      	sub	sp, #176	; 0xb0
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2288      	movs	r2, #136	; 0x88
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f005 f8fb 	bl	80067c8 <memset>
  if(hi2c->Instance==I2C1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a21      	ldr	r2, [pc, #132]	; (800165c <HAL_I2C_MspInit+0xb0>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d13b      	bne.n	8001654 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015dc:	2340      	movs	r3, #64	; 0x40
 80015de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4618      	mov	r0, r3
 80015ea:	f002 f9b9 	bl	8003960 <HAL_RCCEx_PeriphCLKConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015f4:	f7ff ffb0 	bl	8001558 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <HAL_I2C_MspInit+0xb4>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fc:	4a18      	ldr	r2, [pc, #96]	; (8001660 <HAL_I2C_MspInit+0xb4>)
 80015fe:	f043 0302 	orr.w	r3, r3, #2
 8001602:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001604:	4b16      	ldr	r3, [pc, #88]	; (8001660 <HAL_I2C_MspInit+0xb4>)
 8001606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001610:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001614:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001618:	2312      	movs	r3, #18
 800161a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800162a:	2304      	movs	r3, #4
 800162c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001634:	4619      	mov	r1, r3
 8001636:	480b      	ldr	r0, [pc, #44]	; (8001664 <HAL_I2C_MspInit+0xb8>)
 8001638:	f000 fb98 	bl	8001d6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_I2C_MspInit+0xb4>)
 800163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_I2C_MspInit+0xb4>)
 8001642:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001646:	6593      	str	r3, [r2, #88]	; 0x58
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_I2C_MspInit+0xb4>)
 800164a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001654:	bf00      	nop
 8001656:	37b0      	adds	r7, #176	; 0xb0
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40005400 	.word	0x40005400
 8001660:	40021000 	.word	0x40021000
 8001664:	48000400 	.word	0x48000400

08001668 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	; 0x30
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a2e      	ldr	r2, [pc, #184]	; (8001740 <HAL_SPI_MspInit+0xd8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d129      	bne.n	80016de <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800168a:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <HAL_SPI_MspInit+0xdc>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	4a2d      	ldr	r2, [pc, #180]	; (8001744 <HAL_SPI_MspInit+0xdc>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001694:	6593      	str	r3, [r2, #88]	; 0x58
 8001696:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <HAL_SPI_MspInit+0xdc>)
 8001698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	4b28      	ldr	r3, [pc, #160]	; (8001744 <HAL_SPI_MspInit+0xdc>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	4a27      	ldr	r2, [pc, #156]	; (8001744 <HAL_SPI_MspInit+0xdc>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ae:	4b25      	ldr	r3, [pc, #148]	; (8001744 <HAL_SPI_MspInit+0xdc>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697b      	ldr	r3, [r7, #20]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80016ba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80016be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016cc:	2305      	movs	r3, #5
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	4619      	mov	r1, r3
 80016d6:	481c      	ldr	r0, [pc, #112]	; (8001748 <HAL_SPI_MspInit+0xe0>)
 80016d8:	f000 fb48 	bl	8001d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016dc:	e02c      	b.n	8001738 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a1a      	ldr	r2, [pc, #104]	; (800174c <HAL_SPI_MspInit+0xe4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d127      	bne.n	8001738 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <HAL_SPI_MspInit+0xdc>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ec:	4a15      	ldr	r2, [pc, #84]	; (8001744 <HAL_SPI_MspInit+0xdc>)
 80016ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f2:	6593      	str	r3, [r2, #88]	; 0x58
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <HAL_SPI_MspInit+0xdc>)
 80016f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001700:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_SPI_MspInit+0xdc>)
 8001702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001704:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <HAL_SPI_MspInit+0xdc>)
 8001706:	f043 0302 	orr.w	r3, r3, #2
 800170a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170c:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <HAL_SPI_MspInit+0xdc>)
 800170e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001718:	2338      	movs	r3, #56	; 0x38
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001728:	2306      	movs	r3, #6
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <HAL_SPI_MspInit+0xe0>)
 8001734:	f000 fb1a 	bl	8001d6c <HAL_GPIO_Init>
}
 8001738:	bf00      	nop
 800173a:	3730      	adds	r7, #48	; 0x30
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40003800 	.word	0x40003800
 8001744:	40021000 	.word	0x40021000
 8001748:	48000400 	.word	0x48000400
 800174c:	40003c00 	.word	0x40003c00

08001750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b0ac      	sub	sp, #176	; 0xb0
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2288      	movs	r2, #136	; 0x88
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f005 f829 	bl	80067c8 <memset>
  if(huart->Instance==USART2)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a21      	ldr	r2, [pc, #132]	; (8001800 <HAL_UART_MspInit+0xb0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d13b      	bne.n	80017f8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001780:	2302      	movs	r3, #2
 8001782:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001784:	2300      	movs	r3, #0
 8001786:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4618      	mov	r0, r3
 800178e:	f002 f8e7 	bl	8003960 <HAL_RCCEx_PeriphCLKConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001798:	f7ff fede 	bl	8001558 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_UART_MspInit+0xb4>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a0:	4a18      	ldr	r2, [pc, #96]	; (8001804 <HAL_UART_MspInit+0xb4>)
 80017a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a6:	6593      	str	r3, [r2, #88]	; 0x58
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_UART_MspInit+0xb4>)
 80017aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_UART_MspInit+0xb4>)
 80017b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <HAL_UART_MspInit+0xb4>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_UART_MspInit+0xb4>)
 80017c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017cc:	230c      	movs	r3, #12
 80017ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017e4:	2307      	movs	r3, #7
 80017e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017ee:	4619      	mov	r1, r3
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f4:	f000 faba 	bl	8001d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017f8:	bf00      	nop
 80017fa:	37b0      	adds	r7, #176	; 0xb0
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40004400 	.word	0x40004400
 8001804:	40021000 	.word	0x40021000

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800180c:	e7fe      	b.n	800180c <NMI_Handler+0x4>

0800180e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <MemManage_Handler+0x4>

0800181a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <BusFault_Handler+0x4>

08001820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <UsageFault_Handler+0x4>

08001826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001854:	f000 f960 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return 1;
 8001860:	2301      	movs	r3, #1
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <_kill>:

int _kill(int pid, int sig)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001876:	f004 fff9 	bl	800686c <__errno>
 800187a:	4603      	mov	r3, r0
 800187c:	2216      	movs	r2, #22
 800187e:	601a      	str	r2, [r3, #0]
  return -1;
 8001880:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <_exit>:

void _exit (int status)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ffe7 	bl	800186c <_kill>
  while (1) {}    /* Make sure we hang here */
 800189e:	e7fe      	b.n	800189e <_exit+0x12>

080018a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	e00a      	b.n	80018c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018b2:	f3af 8000 	nop.w
 80018b6:	4601      	mov	r1, r0
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	60ba      	str	r2, [r7, #8]
 80018be:	b2ca      	uxtb	r2, r1
 80018c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dbf0      	blt.n	80018b2 <_read+0x12>
  }

  return len;
 80018d0:	687b      	ldr	r3, [r7, #4]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b086      	sub	sp, #24
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	e009      	b.n	8001900 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	60ba      	str	r2, [r7, #8]
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3301      	adds	r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	429a      	cmp	r2, r3
 8001906:	dbf1      	blt.n	80018ec <_write+0x12>
  }
  return len;
 8001908:	687b      	ldr	r3, [r7, #4]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_close>:

int _close(int file)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800193a:	605a      	str	r2, [r3, #4]
  return 0;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <_isatty>:

int _isatty(int file)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <_sbrk+0x5c>)
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <_sbrk+0x60>)
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <_sbrk+0x64>)
 800199a:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <_sbrk+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d207      	bcs.n	80019bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ac:	f004 ff5e 	bl	800686c <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	220c      	movs	r2, #12
 80019b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	e009      	b.n	80019d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <_sbrk+0x64>)
 80019cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20018000 	.word	0x20018000
 80019dc:	00000400 	.word	0x00000400
 80019e0:	2000059c 	.word	0x2000059c
 80019e4:	200006f0 	.word	0x200006f0

080019e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <SystemInit+0x20>)
 80019ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <SystemInit+0x20>)
 80019f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a10:	f7ff ffea 	bl	80019e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a16:	490d      	ldr	r1, [pc, #52]	; (8001a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a18:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <LoopForever+0xe>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a2c:	4c0a      	ldr	r4, [pc, #40]	; (8001a58 <LoopForever+0x16>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f004 ff1d 	bl	8006878 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a3e:	f7ff faa7 	bl	8000f90 <main>

08001a42 <LoopForever>:

LoopForever:
    b LoopForever
 8001a42:	e7fe      	b.n	8001a42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a4c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001a50:	08008ddc 	.word	0x08008ddc
  ldr r2, =_sbss
 8001a54:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001a58:	200006f0 	.word	0x200006f0

08001a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC1_2_IRQHandler>
	...

08001a60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <HAL_Init+0x3c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a0b      	ldr	r2, [pc, #44]	; (8001a9c <HAL_Init+0x3c>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a76:	2003      	movs	r0, #3
 8001a78:	f000 f944 	bl	8001d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f000 f80f 	bl	8001aa0 <HAL_InitTick>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	71fb      	strb	r3, [r7, #7]
 8001a8c:	e001      	b.n	8001a92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a8e:	f7ff fd69 	bl	8001564 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a92:	79fb      	ldrb	r3, [r7, #7]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40022000 	.word	0x40022000

08001aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <HAL_InitTick+0x6c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d023      	beq.n	8001afc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ab4:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <HAL_InitTick+0x70>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <HAL_InitTick+0x6c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f941 	bl	8001d52 <HAL_SYSTICK_Config>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10f      	bne.n	8001af6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b0f      	cmp	r3, #15
 8001ada:	d809      	bhi.n	8001af0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001adc:	2200      	movs	r2, #0
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f000 f919 	bl	8001d1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_InitTick+0x74>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e007      	b.n	8001b00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
 8001af4:	e004      	b.n	8001b00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	e001      	b.n	8001b00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000010 	.word	0x20000010
 8001b10:	20000008 	.word	0x20000008
 8001b14:	2000000c 	.word	0x2000000c

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000010 	.word	0x20000010
 8001b3c:	200005a0 	.word	0x200005a0

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200005a0 	.word	0x200005a0

08001b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff ffee 	bl	8001b40 <HAL_GetTick>
 8001b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d005      	beq.n	8001b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_Delay+0x44>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b7e:	bf00      	nop
 8001b80:	f7ff ffde 	bl	8001b40 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d8f7      	bhi.n	8001b80 <HAL_Delay+0x28>
  {
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000010 	.word	0x20000010

08001ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <__NVIC_GetPriorityGrouping+0x18>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0307 	and.w	r3, r3, #7
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6039      	str	r1, [r7, #0]
 8001c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	db0a      	blt.n	8001c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	490c      	ldr	r1, [pc, #48]	; (8001c50 <__NVIC_SetPriority+0x4c>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	0112      	lsls	r2, r2, #4
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	440b      	add	r3, r1
 8001c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c2c:	e00a      	b.n	8001c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4908      	ldr	r1, [pc, #32]	; (8001c54 <__NVIC_SetPriority+0x50>)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	3b04      	subs	r3, #4
 8001c3c:	0112      	lsls	r2, r2, #4
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	440b      	add	r3, r1
 8001c42:	761a      	strb	r2, [r3, #24]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000e100 	.word	0xe000e100
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	; 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f1c3 0307 	rsb	r3, r3, #7
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	bf28      	it	cs
 8001c76:	2304      	movcs	r3, #4
 8001c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	2b06      	cmp	r3, #6
 8001c80:	d902      	bls.n	8001c88 <NVIC_EncodePriority+0x30>
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3b03      	subs	r3, #3
 8001c86:	e000      	b.n	8001c8a <NVIC_EncodePriority+0x32>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43da      	mvns	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	43d9      	mvns	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	4313      	orrs	r3, r2
         );
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3724      	adds	r7, #36	; 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd0:	d301      	bcc.n	8001cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00f      	b.n	8001cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <SysTick_Config+0x40>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cde:	210f      	movs	r1, #15
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f7ff ff8e 	bl	8001c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <SysTick_Config+0x40>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <SysTick_Config+0x40>)
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	e000e010 	.word	0xe000e010

08001d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff ff47 	bl	8001ba0 <__NVIC_SetPriorityGrouping>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d2c:	f7ff ff5c 	bl	8001be8 <__NVIC_GetPriorityGrouping>
 8001d30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	6978      	ldr	r0, [r7, #20]
 8001d38:	f7ff ff8e 	bl	8001c58 <NVIC_EncodePriority>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff5d 	bl	8001c04 <__NVIC_SetPriority>
}
 8001d4a:	bf00      	nop
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff ffb0 	bl	8001cc0 <SysTick_Config>
 8001d60:	4603      	mov	r3, r0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7a:	e17f      	b.n	800207c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 8171 	beq.w	8002076 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d005      	beq.n	8001dac <HAL_GPIO_Init+0x40>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d130      	bne.n	8001e0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001de2:	2201      	movs	r2, #1
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	f003 0201 	and.w	r2, r3, #1
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d118      	bne.n	8001e4c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e20:	2201      	movs	r2, #1
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	08db      	lsrs	r3, r3, #3
 8001e36:	f003 0201 	and.w	r2, r3, #1
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d017      	beq.n	8001e88 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	2203      	movs	r2, #3
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d123      	bne.n	8001edc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	08da      	lsrs	r2, r3, #3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3208      	adds	r2, #8
 8001e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	220f      	movs	r2, #15
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	08da      	lsrs	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3208      	adds	r2, #8
 8001ed6:	6939      	ldr	r1, [r7, #16]
 8001ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0203 	and.w	r2, r3, #3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80ac 	beq.w	8002076 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1e:	4b5f      	ldr	r3, [pc, #380]	; (800209c <HAL_GPIO_Init+0x330>)
 8001f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f22:	4a5e      	ldr	r2, [pc, #376]	; (800209c <HAL_GPIO_Init+0x330>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6613      	str	r3, [r2, #96]	; 0x60
 8001f2a:	4b5c      	ldr	r3, [pc, #368]	; (800209c <HAL_GPIO_Init+0x330>)
 8001f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f36:	4a5a      	ldr	r2, [pc, #360]	; (80020a0 <HAL_GPIO_Init+0x334>)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	220f      	movs	r2, #15
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f60:	d025      	beq.n	8001fae <HAL_GPIO_Init+0x242>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4f      	ldr	r2, [pc, #316]	; (80020a4 <HAL_GPIO_Init+0x338>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d01f      	beq.n	8001faa <HAL_GPIO_Init+0x23e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a4e      	ldr	r2, [pc, #312]	; (80020a8 <HAL_GPIO_Init+0x33c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d019      	beq.n	8001fa6 <HAL_GPIO_Init+0x23a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a4d      	ldr	r2, [pc, #308]	; (80020ac <HAL_GPIO_Init+0x340>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d013      	beq.n	8001fa2 <HAL_GPIO_Init+0x236>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a4c      	ldr	r2, [pc, #304]	; (80020b0 <HAL_GPIO_Init+0x344>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00d      	beq.n	8001f9e <HAL_GPIO_Init+0x232>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a4b      	ldr	r2, [pc, #300]	; (80020b4 <HAL_GPIO_Init+0x348>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d007      	beq.n	8001f9a <HAL_GPIO_Init+0x22e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a4a      	ldr	r2, [pc, #296]	; (80020b8 <HAL_GPIO_Init+0x34c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d101      	bne.n	8001f96 <HAL_GPIO_Init+0x22a>
 8001f92:	2306      	movs	r3, #6
 8001f94:	e00c      	b.n	8001fb0 <HAL_GPIO_Init+0x244>
 8001f96:	2307      	movs	r3, #7
 8001f98:	e00a      	b.n	8001fb0 <HAL_GPIO_Init+0x244>
 8001f9a:	2305      	movs	r3, #5
 8001f9c:	e008      	b.n	8001fb0 <HAL_GPIO_Init+0x244>
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x244>
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e004      	b.n	8001fb0 <HAL_GPIO_Init+0x244>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e002      	b.n	8001fb0 <HAL_GPIO_Init+0x244>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_GPIO_Init+0x244>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	f002 0203 	and.w	r2, r2, #3
 8001fb6:	0092      	lsls	r2, r2, #2
 8001fb8:	4093      	lsls	r3, r2
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fc0:	4937      	ldr	r1, [pc, #220]	; (80020a0 <HAL_GPIO_Init+0x334>)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	089b      	lsrs	r3, r3, #2
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fce:	4b3b      	ldr	r3, [pc, #236]	; (80020bc <HAL_GPIO_Init+0x350>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ff2:	4a32      	ldr	r2, [pc, #200]	; (80020bc <HAL_GPIO_Init+0x350>)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ff8:	4b30      	ldr	r3, [pc, #192]	; (80020bc <HAL_GPIO_Init+0x350>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800201c:	4a27      	ldr	r2, [pc, #156]	; (80020bc <HAL_GPIO_Init+0x350>)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002022:	4b26      	ldr	r3, [pc, #152]	; (80020bc <HAL_GPIO_Init+0x350>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002046:	4a1d      	ldr	r2, [pc, #116]	; (80020bc <HAL_GPIO_Init+0x350>)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800204c:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <HAL_GPIO_Init+0x350>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	43db      	mvns	r3, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002070:	4a12      	ldr	r2, [pc, #72]	; (80020bc <HAL_GPIO_Init+0x350>)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3301      	adds	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fa22 f303 	lsr.w	r3, r2, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	f47f ae78 	bne.w	8001d7c <HAL_GPIO_Init+0x10>
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	371c      	adds	r7, #28
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	40010000 	.word	0x40010000
 80020a4:	48000400 	.word	0x48000400
 80020a8:	48000800 	.word	0x48000800
 80020ac:	48000c00 	.word	0x48000c00
 80020b0:	48001000 	.word	0x48001000
 80020b4:	48001400 	.word	0x48001400
 80020b8:	48001800 	.word	0x48001800
 80020bc:	40010400 	.word	0x40010400

080020c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	807b      	strh	r3, [r7, #2]
 80020cc:	4613      	mov	r3, r2
 80020ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020d0:	787b      	ldrb	r3, [r7, #1]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020d6:	887a      	ldrh	r2, [r7, #2]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020dc:	e002      	b.n	80020e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020de:	887a      	ldrh	r2, [r7, #2]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e08d      	b.n	800221e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d106      	bne.n	800211c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff fa48 	bl	80015ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2224      	movs	r2, #36	; 0x24
 8002120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002140:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002150:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d107      	bne.n	800216a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	e006      	b.n	8002178 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002176:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d108      	bne.n	8002192 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	e007      	b.n	80021a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69d9      	ldr	r1, [r3, #28]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1a      	ldr	r2, [r3, #32]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2220      	movs	r2, #32
 800220a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	461a      	mov	r2, r3
 8002234:	460b      	mov	r3, r1
 8002236:	817b      	strh	r3, [r7, #10]
 8002238:	4613      	mov	r3, r2
 800223a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b20      	cmp	r3, #32
 8002246:	f040 80fd 	bne.w	8002444 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <HAL_I2C_Master_Transmit+0x30>
 8002254:	2302      	movs	r3, #2
 8002256:	e0f6      	b.n	8002446 <HAL_I2C_Master_Transmit+0x21e>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002260:	f7ff fc6e 	bl	8001b40 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2319      	movs	r3, #25
 800226c:	2201      	movs	r2, #1
 800226e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 fa0a 	bl	800268c <I2C_WaitOnFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e0e1      	b.n	8002446 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2221      	movs	r2, #33	; 0x21
 8002286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2210      	movs	r2, #16
 800228e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	893a      	ldrh	r2, [r7, #8]
 80022a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2bff      	cmp	r3, #255	; 0xff
 80022b2:	d906      	bls.n	80022c2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	22ff      	movs	r2, #255	; 0xff
 80022b8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80022ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	e007      	b.n	80022d2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80022cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022d0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d024      	beq.n	8002324 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230e:	b2db      	uxtb	r3, r3
 8002310:	3301      	adds	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	8979      	ldrh	r1, [r7, #10]
 8002316:	4b4e      	ldr	r3, [pc, #312]	; (8002450 <HAL_I2C_Master_Transmit+0x228>)
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 fbf1 	bl	8002b04 <I2C_TransferConfig>
 8002322:	e066      	b.n	80023f2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002328:	b2da      	uxtb	r2, r3
 800232a:	8979      	ldrh	r1, [r7, #10]
 800232c:	4b48      	ldr	r3, [pc, #288]	; (8002450 <HAL_I2C_Master_Transmit+0x228>)
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fbe6 	bl	8002b04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002338:	e05b      	b.n	80023f2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	6a39      	ldr	r1, [r7, #32]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f9f3 	bl	800272a <I2C_WaitOnTXISFlagUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e07b      	b.n	8002446 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	781a      	ldrb	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002368:	b29b      	uxth	r3, r3
 800236a:	3b01      	subs	r3, #1
 800236c:	b29a      	uxth	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d034      	beq.n	80023f2 <HAL_I2C_Master_Transmit+0x1ca>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238c:	2b00      	cmp	r3, #0
 800238e:	d130      	bne.n	80023f2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	2200      	movs	r2, #0
 8002398:	2180      	movs	r1, #128	; 0x80
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f976 	bl	800268c <I2C_WaitOnFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e04d      	b.n	8002446 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2bff      	cmp	r3, #255	; 0xff
 80023b2:	d90e      	bls.n	80023d2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	22ff      	movs	r2, #255	; 0xff
 80023b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	8979      	ldrh	r1, [r7, #10]
 80023c2:	2300      	movs	r3, #0
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fb9a 	bl	8002b04 <I2C_TransferConfig>
 80023d0:	e00f      	b.n	80023f2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	8979      	ldrh	r1, [r7, #10]
 80023e4:	2300      	movs	r3, #0
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 fb89 	bl	8002b04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d19e      	bne.n	800233a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	6a39      	ldr	r1, [r7, #32]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f9d9 	bl	80027b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e01a      	b.n	8002446 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2220      	movs	r2, #32
 8002416:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6859      	ldr	r1, [r3, #4]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <HAL_I2C_Master_Transmit+0x22c>)
 8002424:	400b      	ands	r3, r1
 8002426:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	e000      	b.n	8002446 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002444:	2302      	movs	r3, #2
  }
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	80002000 	.word	0x80002000
 8002454:	fe00e800 	.word	0xfe00e800

08002458 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af02      	add	r7, sp, #8
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	461a      	mov	r2, r3
 8002464:	460b      	mov	r3, r1
 8002466:	817b      	strh	r3, [r7, #10]
 8002468:	4613      	mov	r3, r2
 800246a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b20      	cmp	r3, #32
 8002476:	f040 80db 	bne.w	8002630 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_I2C_Master_Receive+0x30>
 8002484:	2302      	movs	r3, #2
 8002486:	e0d4      	b.n	8002632 <HAL_I2C_Master_Receive+0x1da>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002490:	f7ff fb56 	bl	8001b40 <HAL_GetTick>
 8002494:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	2319      	movs	r3, #25
 800249c:	2201      	movs	r2, #1
 800249e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f8f2 	bl	800268c <I2C_WaitOnFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e0bf      	b.n	8002632 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2222      	movs	r2, #34	; 0x22
 80024b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2210      	movs	r2, #16
 80024be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	893a      	ldrh	r2, [r7, #8]
 80024d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2bff      	cmp	r3, #255	; 0xff
 80024e2:	d90e      	bls.n	8002502 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	22ff      	movs	r2, #255	; 0xff
 80024e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	8979      	ldrh	r1, [r7, #10]
 80024f2:	4b52      	ldr	r3, [pc, #328]	; (800263c <HAL_I2C_Master_Receive+0x1e4>)
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fb02 	bl	8002b04 <I2C_TransferConfig>
 8002500:	e06d      	b.n	80025de <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002510:	b2da      	uxtb	r2, r3
 8002512:	8979      	ldrh	r1, [r7, #10]
 8002514:	4b49      	ldr	r3, [pc, #292]	; (800263c <HAL_I2C_Master_Receive+0x1e4>)
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 faf1 	bl	8002b04 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002522:	e05c      	b.n	80025de <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	6a39      	ldr	r1, [r7, #32]
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f989 	bl	8002840 <I2C_WaitOnRXNEFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e07c      	b.n	8002632 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002560:	b29b      	uxth	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d034      	beq.n	80025de <HAL_I2C_Master_Receive+0x186>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	2b00      	cmp	r3, #0
 800257a:	d130      	bne.n	80025de <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	2200      	movs	r2, #0
 8002584:	2180      	movs	r1, #128	; 0x80
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f880 	bl	800268c <I2C_WaitOnFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e04d      	b.n	8002632 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259a:	b29b      	uxth	r3, r3
 800259c:	2bff      	cmp	r3, #255	; 0xff
 800259e:	d90e      	bls.n	80025be <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	22ff      	movs	r2, #255	; 0xff
 80025a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	8979      	ldrh	r1, [r7, #10]
 80025ae:	2300      	movs	r3, #0
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 faa4 	bl	8002b04 <I2C_TransferConfig>
 80025bc:	e00f      	b.n	80025de <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	8979      	ldrh	r1, [r7, #10]
 80025d0:	2300      	movs	r3, #0
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 fa93 	bl	8002b04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d19d      	bne.n	8002524 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	6a39      	ldr	r1, [r7, #32]
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 f8e3 	bl	80027b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e01a      	b.n	8002632 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2220      	movs	r2, #32
 8002602:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6859      	ldr	r1, [r3, #4]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_I2C_Master_Receive+0x1e8>)
 8002610:	400b      	ands	r3, r1
 8002612:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	e000      	b.n	8002632 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002630:	2302      	movs	r3, #2
  }
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	80002400 	.word	0x80002400
 8002640:	fe00e800 	.word	0xfe00e800

08002644 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b02      	cmp	r3, #2
 8002658:	d103      	bne.n	8002662 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2200      	movs	r2, #0
 8002660:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b01      	cmp	r3, #1
 800266e:	d007      	beq.n	8002680 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	619a      	str	r2, [r3, #24]
  }
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	4613      	mov	r3, r2
 800269a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800269c:	e031      	b.n	8002702 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d02d      	beq.n	8002702 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a6:	f7ff fa4b 	bl	8001b40 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d302      	bcc.n	80026bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d122      	bne.n	8002702 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699a      	ldr	r2, [r3, #24]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	4013      	ands	r3, r2
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	461a      	mov	r2, r3
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d113      	bne.n	8002702 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	f043 0220 	orr.w	r2, r3, #32
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2220      	movs	r2, #32
 80026ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e00f      	b.n	8002722 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699a      	ldr	r2, [r3, #24]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4013      	ands	r3, r2
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	429a      	cmp	r2, r3
 8002710:	bf0c      	ite	eq
 8002712:	2301      	moveq	r3, #1
 8002714:	2300      	movne	r3, #0
 8002716:	b2db      	uxtb	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	429a      	cmp	r2, r3
 800271e:	d0be      	beq.n	800269e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002736:	e033      	b.n	80027a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	68b9      	ldr	r1, [r7, #8]
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 f901 	bl	8002944 <I2C_IsErrorOccurred>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e031      	b.n	80027b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002752:	d025      	beq.n	80027a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002754:	f7ff f9f4 	bl	8001b40 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	429a      	cmp	r2, r3
 8002762:	d302      	bcc.n	800276a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d11a      	bne.n	80027a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b02      	cmp	r3, #2
 8002776:	d013      	beq.n	80027a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277c:	f043 0220 	orr.w	r2, r3, #32
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e007      	b.n	80027b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d1c4      	bne.n	8002738 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027c4:	e02f      	b.n	8002826 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 f8ba 	bl	8002944 <I2C_IsErrorOccurred>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e02d      	b.n	8002836 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027da:	f7ff f9b1 	bl	8001b40 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d302      	bcc.n	80027f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d11a      	bne.n	8002826 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f003 0320 	and.w	r3, r3, #32
 80027fa:	2b20      	cmp	r3, #32
 80027fc:	d013      	beq.n	8002826 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	f043 0220 	orr.w	r2, r3, #32
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2220      	movs	r2, #32
 800280e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e007      	b.n	8002836 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	2b20      	cmp	r3, #32
 8002832:	d1c8      	bne.n	80027c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800284c:	e06b      	b.n	8002926 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f876 	bl	8002944 <I2C_IsErrorOccurred>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e069      	b.n	8002936 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b20      	cmp	r3, #32
 800286e:	d138      	bne.n	80028e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b04      	cmp	r3, #4
 800287c:	d105      	bne.n	800288a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e055      	b.n	8002936 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b10      	cmp	r3, #16
 8002896:	d107      	bne.n	80028a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2210      	movs	r2, #16
 800289e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2204      	movs	r2, #4
 80028a4:	645a      	str	r2, [r3, #68]	; 0x44
 80028a6:	e002      	b.n	80028ae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2220      	movs	r2, #32
 80028b4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80028c2:	400b      	ands	r3, r1
 80028c4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e029      	b.n	8002936 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e2:	f7ff f92d 	bl	8001b40 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d302      	bcc.n	80028f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d116      	bne.n	8002926 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	2b04      	cmp	r3, #4
 8002904:	d00f      	beq.n	8002926 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	f043 0220 	orr.w	r2, r3, #32
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e007      	b.n	8002936 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b04      	cmp	r3, #4
 8002932:	d18c      	bne.n	800284e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	fe00e800 	.word	0xfe00e800

08002944 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b00      	cmp	r3, #0
 800296e:	d068      	beq.n	8002a42 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2210      	movs	r2, #16
 8002976:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002978:	e049      	b.n	8002a0e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002980:	d045      	beq.n	8002a0e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002982:	f7ff f8dd 	bl	8001b40 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	429a      	cmp	r2, r3
 8002990:	d302      	bcc.n	8002998 <I2C_IsErrorOccurred+0x54>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d13a      	bne.n	8002a0e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ba:	d121      	bne.n	8002a00 <I2C_IsErrorOccurred+0xbc>
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029c2:	d01d      	beq.n	8002a00 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80029c4:	7cfb      	ldrb	r3, [r7, #19]
 80029c6:	2b20      	cmp	r3, #32
 80029c8:	d01a      	beq.n	8002a00 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80029da:	f7ff f8b1 	bl	8001b40 <HAL_GetTick>
 80029de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029e0:	e00e      	b.n	8002a00 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80029e2:	f7ff f8ad 	bl	8001b40 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b19      	cmp	r3, #25
 80029ee:	d907      	bls.n	8002a00 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	f043 0320 	orr.w	r3, r3, #32
 80029f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80029fe:	e006      	b.n	8002a0e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d1e9      	bne.n	80029e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d003      	beq.n	8002a24 <I2C_IsErrorOccurred+0xe0>
 8002a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0aa      	beq.n	800297a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d103      	bne.n	8002a34 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2220      	movs	r2, #32
 8002a32:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	f043 0304 	orr.w	r3, r3, #4
 8002a3a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00b      	beq.n	8002a6c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00b      	beq.n	8002a8e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	f043 0308 	orr.w	r3, r3, #8
 8002a7c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00b      	beq.n	8002ab0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	f043 0302 	orr.w	r3, r3, #2
 8002a9e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01c      	beq.n	8002af2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f7ff fdc3 	bl	8002644 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <I2C_IsErrorOccurred+0x1bc>)
 8002aca:	400b      	ands	r3, r1
 8002acc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3728      	adds	r7, #40	; 0x28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	fe00e800 	.word	0xfe00e800

08002b04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	817b      	strh	r3, [r7, #10]
 8002b12:	4613      	mov	r3, r2
 8002b14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b16:	897b      	ldrh	r3, [r7, #10]
 8002b18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b1c:	7a7b      	ldrb	r3, [r7, #9]
 8002b1e:	041b      	lsls	r3, r3, #16
 8002b20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	0d5b      	lsrs	r3, r3, #21
 8002b3e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <I2C_TransferConfig+0x60>)
 8002b44:	430b      	orrs	r3, r1
 8002b46:	43db      	mvns	r3, r3
 8002b48:	ea02 0103 	and.w	r1, r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b56:	bf00      	nop
 8002b58:	371c      	adds	r7, #28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	03ff63ff 	.word	0x03ff63ff

08002b68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b20      	cmp	r3, #32
 8002b7c:	d138      	bne.n	8002bf0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e032      	b.n	8002bf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2224      	movs	r2, #36	; 0x24
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0201 	bic.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6819      	ldr	r1, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	e000      	b.n	8002bf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bf0:	2302      	movs	r3, #2
  }
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b085      	sub	sp, #20
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d139      	bne.n	8002c88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e033      	b.n	8002c8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2224      	movs	r2, #36	; 0x24
 8002c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0201 	bic.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	e000      	b.n	8002c8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c88:	2302      	movs	r3, #2
  }
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40007000 	.word	0x40007000

08002cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc2:	d130      	bne.n	8002d26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cc4:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd0:	d038      	beq.n	8002d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cda:	4a1e      	ldr	r2, [pc, #120]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ce0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2232      	movs	r2, #50	; 0x32
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	4a1b      	ldr	r2, [pc, #108]	; (8002d5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	0c9b      	lsrs	r3, r3, #18
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf8:	e002      	b.n	8002d00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0c:	d102      	bne.n	8002d14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f2      	bne.n	8002cfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d20:	d110      	bne.n	8002d44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e00f      	b.n	8002d46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d32:	d007      	beq.n	8002d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d34:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d3c:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40007000 	.word	0x40007000
 8002d58:	20000008 	.word	0x20000008
 8002d5c:	431bde83 	.word	0x431bde83

08002d60 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e3ca      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d72:	4b97      	ldr	r3, [pc, #604]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d7c:	4b94      	ldr	r3, [pc, #592]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80e4 	beq.w	8002f5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <HAL_RCC_OscConfig+0x4a>
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b0c      	cmp	r3, #12
 8002d9e:	f040 808b 	bne.w	8002eb8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	f040 8087 	bne.w	8002eb8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002daa:	4b89      	ldr	r3, [pc, #548]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x62>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e3a2      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1a      	ldr	r2, [r3, #32]
 8002dc6:	4b82      	ldr	r3, [pc, #520]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d004      	beq.n	8002ddc <HAL_RCC_OscConfig+0x7c>
 8002dd2:	4b7f      	ldr	r3, [pc, #508]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dda:	e005      	b.n	8002de8 <HAL_RCC_OscConfig+0x88>
 8002ddc:	4b7c      	ldr	r3, [pc, #496]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de2:	091b      	lsrs	r3, r3, #4
 8002de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d223      	bcs.n	8002e34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fd55 	bl	80038a0 <RCC_SetFlashLatencyFromMSIRange>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e383      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e00:	4b73      	ldr	r3, [pc, #460]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a72      	ldr	r2, [pc, #456]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e06:	f043 0308 	orr.w	r3, r3, #8
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b70      	ldr	r3, [pc, #448]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	496d      	ldr	r1, [pc, #436]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e1e:	4b6c      	ldr	r3, [pc, #432]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	4968      	ldr	r1, [pc, #416]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	604b      	str	r3, [r1, #4]
 8002e32:	e025      	b.n	8002e80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e34:	4b66      	ldr	r3, [pc, #408]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a65      	ldr	r2, [pc, #404]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	f043 0308 	orr.w	r3, r3, #8
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	4b63      	ldr	r3, [pc, #396]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	4960      	ldr	r1, [pc, #384]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e52:	4b5f      	ldr	r3, [pc, #380]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	495b      	ldr	r1, [pc, #364]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fd15 	bl	80038a0 <RCC_SetFlashLatencyFromMSIRange>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e343      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e80:	f000 fc4a 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4b52      	ldr	r3, [pc, #328]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	4950      	ldr	r1, [pc, #320]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002e92:	5ccb      	ldrb	r3, [r1, r3]
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9c:	4a4e      	ldr	r2, [pc, #312]	; (8002fd8 <HAL_RCC_OscConfig+0x278>)
 8002e9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ea0:	4b4e      	ldr	r3, [pc, #312]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe fdfb 	bl	8001aa0 <HAL_InitTick>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d052      	beq.n	8002f5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	e327      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d032      	beq.n	8002f26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ec0:	4b43      	ldr	r3, [pc, #268]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a42      	ldr	r2, [pc, #264]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fe38 	bl	8001b40 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ed4:	f7fe fe34 	bl	8001b40 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e310      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ee6:	4b3a      	ldr	r3, [pc, #232]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ef2:	4b37      	ldr	r3, [pc, #220]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a36      	ldr	r2, [pc, #216]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	f043 0308 	orr.w	r3, r3, #8
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	4b34      	ldr	r3, [pc, #208]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	4931      	ldr	r1, [pc, #196]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f10:	4b2f      	ldr	r3, [pc, #188]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	492c      	ldr	r1, [pc, #176]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]
 8002f24:	e01a      	b.n	8002f5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f26:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a29      	ldr	r2, [pc, #164]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f32:	f7fe fe05 	bl	8001b40 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f3a:	f7fe fe01 	bl	8001b40 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e2dd      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f4c:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f0      	bne.n	8002f3a <HAL_RCC_OscConfig+0x1da>
 8002f58:	e000      	b.n	8002f5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d074      	beq.n	8003052 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d005      	beq.n	8002f7a <HAL_RCC_OscConfig+0x21a>
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	2b0c      	cmp	r3, #12
 8002f72:	d10e      	bne.n	8002f92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d10b      	bne.n	8002f92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7a:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d064      	beq.n	8003050 <HAL_RCC_OscConfig+0x2f0>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d160      	bne.n	8003050 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e2ba      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9a:	d106      	bne.n	8002faa <HAL_RCC_OscConfig+0x24a>
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0b      	ldr	r2, [pc, #44]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	e026      	b.n	8002ff8 <HAL_RCC_OscConfig+0x298>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb2:	d115      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x280>
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a05      	ldr	r2, [pc, #20]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	4b03      	ldr	r3, [pc, #12]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a02      	ldr	r2, [pc, #8]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	e014      	b.n	8002ff8 <HAL_RCC_OscConfig+0x298>
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	08008a10 	.word	0x08008a10
 8002fd8:	20000008 	.word	0x20000008
 8002fdc:	2000000c 	.word	0x2000000c
 8002fe0:	4ba0      	ldr	r3, [pc, #640]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a9f      	ldr	r2, [pc, #636]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8002fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	4b9d      	ldr	r3, [pc, #628]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a9c      	ldr	r2, [pc, #624]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8002ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d013      	beq.n	8003028 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fe fd9e 	bl	8001b40 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7fe fd9a 	bl	8001b40 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e276      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800301a:	4b92      	ldr	r3, [pc, #584]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x2a8>
 8003026:	e014      	b.n	8003052 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe fd8a 	bl	8001b40 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003030:	f7fe fd86 	bl	8001b40 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	; 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e262      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003042:	4b88      	ldr	r3, [pc, #544]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x2d0>
 800304e:	e000      	b.n	8003052 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d060      	beq.n	8003120 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	2b04      	cmp	r3, #4
 8003062:	d005      	beq.n	8003070 <HAL_RCC_OscConfig+0x310>
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b0c      	cmp	r3, #12
 8003068:	d119      	bne.n	800309e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d116      	bne.n	800309e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003070:	4b7c      	ldr	r3, [pc, #496]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_OscConfig+0x328>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e23f      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003088:	4b76      	ldr	r3, [pc, #472]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	061b      	lsls	r3, r3, #24
 8003096:	4973      	ldr	r1, [pc, #460]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003098:	4313      	orrs	r3, r2
 800309a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800309c:	e040      	b.n	8003120 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d023      	beq.n	80030ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a6:	4b6f      	ldr	r3, [pc, #444]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6e      	ldr	r2, [pc, #440]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b2:	f7fe fd45 	bl	8001b40 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ba:	f7fe fd41 	bl	8001b40 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e21d      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030cc:	4b65      	ldr	r3, [pc, #404]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d8:	4b62      	ldr	r3, [pc, #392]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	061b      	lsls	r3, r3, #24
 80030e6:	495f      	ldr	r1, [pc, #380]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
 80030ec:	e018      	b.n	8003120 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ee:	4b5d      	ldr	r3, [pc, #372]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a5c      	ldr	r2, [pc, #368]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fa:	f7fe fd21 	bl	8001b40 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003102:	f7fe fd1d 	bl	8001b40 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e1f9      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003114:	4b53      	ldr	r3, [pc, #332]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f0      	bne.n	8003102 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d03c      	beq.n	80031a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d01c      	beq.n	800316e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003134:	4b4b      	ldr	r3, [pc, #300]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313a:	4a4a      	ldr	r2, [pc, #296]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003144:	f7fe fcfc 	bl	8001b40 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800314c:	f7fe fcf8 	bl	8001b40 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e1d4      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800315e:	4b41      	ldr	r3, [pc, #260]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0ef      	beq.n	800314c <HAL_RCC_OscConfig+0x3ec>
 800316c:	e01b      	b.n	80031a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800316e:	4b3d      	ldr	r3, [pc, #244]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003174:	4a3b      	ldr	r2, [pc, #236]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317e:	f7fe fcdf 	bl	8001b40 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003186:	f7fe fcdb 	bl	8001b40 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e1b7      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003198:	4b32      	ldr	r3, [pc, #200]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 800319a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1ef      	bne.n	8003186 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 80a6 	beq.w	8003300 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b4:	2300      	movs	r3, #0
 80031b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031b8:	4b2a      	ldr	r3, [pc, #168]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80031ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10d      	bne.n	80031e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c4:	4b27      	ldr	r3, [pc, #156]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80031c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c8:	4a26      	ldr	r2, [pc, #152]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80031ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ce:	6593      	str	r3, [r2, #88]	; 0x58
 80031d0:	4b24      	ldr	r3, [pc, #144]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80031d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031dc:	2301      	movs	r3, #1
 80031de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e0:	4b21      	ldr	r3, [pc, #132]	; (8003268 <HAL_RCC_OscConfig+0x508>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d118      	bne.n	800321e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031ec:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <HAL_RCC_OscConfig+0x508>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1d      	ldr	r2, [pc, #116]	; (8003268 <HAL_RCC_OscConfig+0x508>)
 80031f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f8:	f7fe fca2 	bl	8001b40 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003200:	f7fe fc9e 	bl	8001b40 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e17a      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003212:	4b15      	ldr	r3, [pc, #84]	; (8003268 <HAL_RCC_OscConfig+0x508>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d108      	bne.n	8003238 <HAL_RCC_OscConfig+0x4d8>
 8003226:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322c:	4a0d      	ldr	r2, [pc, #52]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003236:	e029      	b.n	800328c <HAL_RCC_OscConfig+0x52c>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b05      	cmp	r3, #5
 800323e:	d115      	bne.n	800326c <HAL_RCC_OscConfig+0x50c>
 8003240:	4b08      	ldr	r3, [pc, #32]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	4a07      	ldr	r2, [pc, #28]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	4a03      	ldr	r2, [pc, #12]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003260:	e014      	b.n	800328c <HAL_RCC_OscConfig+0x52c>
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000
 8003268:	40007000 	.word	0x40007000
 800326c:	4b9c      	ldr	r3, [pc, #624]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	4a9b      	ldr	r2, [pc, #620]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003274:	f023 0301 	bic.w	r3, r3, #1
 8003278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800327c:	4b98      	ldr	r3, [pc, #608]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	4a97      	ldr	r2, [pc, #604]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003284:	f023 0304 	bic.w	r3, r3, #4
 8003288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d016      	beq.n	80032c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7fe fc54 	bl	8001b40 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329c:	f7fe fc50 	bl	8001b40 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e12a      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b2:	4b8b      	ldr	r3, [pc, #556]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0ed      	beq.n	800329c <HAL_RCC_OscConfig+0x53c>
 80032c0:	e015      	b.n	80032ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c2:	f7fe fc3d 	bl	8001b40 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032c8:	e00a      	b.n	80032e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ca:	f7fe fc39 	bl	8001b40 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e113      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032e0:	4b7f      	ldr	r3, [pc, #508]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1ed      	bne.n	80032ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ee:	7ffb      	ldrb	r3, [r7, #31]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d105      	bne.n	8003300 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f4:	4b7a      	ldr	r3, [pc, #488]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	4a79      	ldr	r2, [pc, #484]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80032fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80fe 	beq.w	8003506 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	2b02      	cmp	r3, #2
 8003310:	f040 80d0 	bne.w	80034b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003314:	4b72      	ldr	r3, [pc, #456]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f003 0203 	and.w	r2, r3, #3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	429a      	cmp	r2, r3
 8003326:	d130      	bne.n	800338a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	3b01      	subs	r3, #1
 8003334:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003336:	429a      	cmp	r2, r3
 8003338:	d127      	bne.n	800338a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003344:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003346:	429a      	cmp	r2, r3
 8003348:	d11f      	bne.n	800338a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003354:	2a07      	cmp	r2, #7
 8003356:	bf14      	ite	ne
 8003358:	2201      	movne	r2, #1
 800335a:	2200      	moveq	r2, #0
 800335c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800335e:	4293      	cmp	r3, r2
 8003360:	d113      	bne.n	800338a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336c:	085b      	lsrs	r3, r3, #1
 800336e:	3b01      	subs	r3, #1
 8003370:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d109      	bne.n	800338a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	085b      	lsrs	r3, r3, #1
 8003382:	3b01      	subs	r3, #1
 8003384:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d06e      	beq.n	8003468 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b0c      	cmp	r3, #12
 800338e:	d069      	beq.n	8003464 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003390:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d105      	bne.n	80033a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800339c:	4b50      	ldr	r3, [pc, #320]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0ad      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033ac:	4b4c      	ldr	r3, [pc, #304]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a4b      	ldr	r2, [pc, #300]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80033b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033b8:	f7fe fbc2 	bl	8001b40 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c0:	f7fe fbbe 	bl	8001b40 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e09a      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d2:	4b43      	ldr	r3, [pc, #268]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033de:	4b40      	ldr	r3, [pc, #256]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	4b40      	ldr	r3, [pc, #256]	; (80034e4 <HAL_RCC_OscConfig+0x784>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033ee:	3a01      	subs	r2, #1
 80033f0:	0112      	lsls	r2, r2, #4
 80033f2:	4311      	orrs	r1, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033f8:	0212      	lsls	r2, r2, #8
 80033fa:	4311      	orrs	r1, r2
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003400:	0852      	lsrs	r2, r2, #1
 8003402:	3a01      	subs	r2, #1
 8003404:	0552      	lsls	r2, r2, #21
 8003406:	4311      	orrs	r1, r2
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800340c:	0852      	lsrs	r2, r2, #1
 800340e:	3a01      	subs	r2, #1
 8003410:	0652      	lsls	r2, r2, #25
 8003412:	4311      	orrs	r1, r2
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003418:	0912      	lsrs	r2, r2, #4
 800341a:	0452      	lsls	r2, r2, #17
 800341c:	430a      	orrs	r2, r1
 800341e:	4930      	ldr	r1, [pc, #192]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003420:	4313      	orrs	r3, r2
 8003422:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003424:	4b2e      	ldr	r3, [pc, #184]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a2d      	ldr	r2, [pc, #180]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 800342a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800342e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003430:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a2a      	ldr	r2, [pc, #168]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800343c:	f7fe fb80 	bl	8001b40 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003444:	f7fe fb7c 	bl	8001b40 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e058      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003456:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003462:	e050      	b.n	8003506 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e04f      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003468:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d148      	bne.n	8003506 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003474:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a19      	ldr	r2, [pc, #100]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 800347a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800347e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003480:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4a16      	ldr	r2, [pc, #88]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800348a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800348c:	f7fe fb58 	bl	8001b40 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003494:	f7fe fb54 	bl	8001b40 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e030      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0x734>
 80034b2:	e028      	b.n	8003506 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2b0c      	cmp	r3, #12
 80034b8:	d023      	beq.n	8003502 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ba:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a08      	ldr	r2, [pc, #32]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80034c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7fe fb3b 	bl	8001b40 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034cc:	e00c      	b.n	80034e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ce:	f7fe fb37 	bl	8001b40 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d905      	bls.n	80034e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e013      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
 80034e0:	40021000 	.word	0x40021000
 80034e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_RCC_OscConfig+0x7b0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1ec      	bne.n	80034ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034f4:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_RCC_OscConfig+0x7b0>)
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	4905      	ldr	r1, [pc, #20]	; (8003510 <HAL_RCC_OscConfig+0x7b0>)
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_RCC_OscConfig+0x7b4>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	60cb      	str	r3, [r1, #12]
 8003500:	e001      	b.n	8003506 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3720      	adds	r7, #32
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40021000 	.word	0x40021000
 8003514:	feeefffc 	.word	0xfeeefffc

08003518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0e7      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800352c:	4b75      	ldr	r3, [pc, #468]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d910      	bls.n	800355c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b72      	ldr	r3, [pc, #456]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 0207 	bic.w	r2, r3, #7
 8003542:	4970      	ldr	r1, [pc, #448]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b6e      	ldr	r3, [pc, #440]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0cf      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d010      	beq.n	800358a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	4b66      	ldr	r3, [pc, #408]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003574:	429a      	cmp	r2, r3
 8003576:	d908      	bls.n	800358a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003578:	4b63      	ldr	r3, [pc, #396]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4960      	ldr	r1, [pc, #384]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d04c      	beq.n	8003630 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b03      	cmp	r3, #3
 800359c:	d107      	bne.n	80035ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800359e:	4b5a      	ldr	r3, [pc, #360]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d121      	bne.n	80035ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0a6      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035b6:	4b54      	ldr	r3, [pc, #336]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d115      	bne.n	80035ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e09a      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035ce:	4b4e      	ldr	r3, [pc, #312]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e08e      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035de:	4b4a      	ldr	r3, [pc, #296]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e086      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035ee:	4b46      	ldr	r3, [pc, #280]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f023 0203 	bic.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4943      	ldr	r1, [pc, #268]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003600:	f7fe fa9e 	bl	8001b40 <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	e00a      	b.n	800361e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003608:	f7fe fa9a 	bl	8001b40 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	; 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e06e      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	4b3a      	ldr	r3, [pc, #232]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 020c 	and.w	r2, r3, #12
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	429a      	cmp	r2, r3
 800362e:	d1eb      	bne.n	8003608 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d010      	beq.n	800365e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	4b31      	ldr	r3, [pc, #196]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003648:	429a      	cmp	r2, r3
 800364a:	d208      	bcs.n	800365e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800364c:	4b2e      	ldr	r3, [pc, #184]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	492b      	ldr	r1, [pc, #172]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800365e:	4b29      	ldr	r3, [pc, #164]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d210      	bcs.n	800368e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366c:	4b25      	ldr	r3, [pc, #148]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f023 0207 	bic.w	r2, r3, #7
 8003674:	4923      	ldr	r1, [pc, #140]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	4313      	orrs	r3, r2
 800367a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d001      	beq.n	800368e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e036      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800369a:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	4918      	ldr	r1, [pc, #96]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d009      	beq.n	80036cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b8:	4b13      	ldr	r3, [pc, #76]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4910      	ldr	r1, [pc, #64]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036cc:	f000 f824 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 80036d0:	4602      	mov	r2, r0
 80036d2:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	490b      	ldr	r1, [pc, #44]	; (800370c <HAL_RCC_ClockConfig+0x1f4>)
 80036de:	5ccb      	ldrb	r3, [r1, r3]
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
 80036e8:	4a09      	ldr	r2, [pc, #36]	; (8003710 <HAL_RCC_ClockConfig+0x1f8>)
 80036ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036ec:	4b09      	ldr	r3, [pc, #36]	; (8003714 <HAL_RCC_ClockConfig+0x1fc>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe f9d5 	bl	8001aa0 <HAL_InitTick>
 80036f6:	4603      	mov	r3, r0
 80036f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80036fa:	7afb      	ldrb	r3, [r7, #11]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40022000 	.word	0x40022000
 8003708:	40021000 	.word	0x40021000
 800370c:	08008a10 	.word	0x08008a10
 8003710:	20000008 	.word	0x20000008
 8003714:	2000000c 	.word	0x2000000c

08003718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003718:	b480      	push	{r7}
 800371a:	b089      	sub	sp, #36	; 0x24
 800371c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003726:	4b3e      	ldr	r3, [pc, #248]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003730:	4b3b      	ldr	r3, [pc, #236]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x34>
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d121      	bne.n	800378a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d11e      	bne.n	800378a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800374c:	4b34      	ldr	r3, [pc, #208]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d107      	bne.n	8003768 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003758:	4b31      	ldr	r3, [pc, #196]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 800375a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800375e:	0a1b      	lsrs	r3, r3, #8
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	e005      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003768:	4b2d      	ldr	r3, [pc, #180]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	091b      	lsrs	r3, r3, #4
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003774:	4a2b      	ldr	r2, [pc, #172]	; (8003824 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800377c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10d      	bne.n	80037a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b04      	cmp	r3, #4
 800378e:	d102      	bne.n	8003796 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003790:	4b25      	ldr	r3, [pc, #148]	; (8003828 <HAL_RCC_GetSysClockFreq+0x110>)
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	e004      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b08      	cmp	r3, #8
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800379c:	4b23      	ldr	r3, [pc, #140]	; (800382c <HAL_RCC_GetSysClockFreq+0x114>)
 800379e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	2b0c      	cmp	r3, #12
 80037a4:	d134      	bne.n	8003810 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037a6:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d003      	beq.n	80037be <HAL_RCC_GetSysClockFreq+0xa6>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d003      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0xac>
 80037bc:	e005      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037be:	4b1a      	ldr	r3, [pc, #104]	; (8003828 <HAL_RCC_GetSysClockFreq+0x110>)
 80037c0:	617b      	str	r3, [r7, #20]
      break;
 80037c2:	e005      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037c4:	4b19      	ldr	r3, [pc, #100]	; (800382c <HAL_RCC_GetSysClockFreq+0x114>)
 80037c6:	617b      	str	r3, [r7, #20]
      break;
 80037c8:	e002      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	617b      	str	r3, [r7, #20]
      break;
 80037ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037d0:	4b13      	ldr	r3, [pc, #76]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	3301      	adds	r3, #1
 80037dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	0a1b      	lsrs	r3, r3, #8
 80037e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	fb03 f202 	mul.w	r2, r3, r2
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037f6:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	0e5b      	lsrs	r3, r3, #25
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	3301      	adds	r3, #1
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	fbb2 f3f3 	udiv	r3, r2, r3
 800380e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003810:	69bb      	ldr	r3, [r7, #24]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3724      	adds	r7, #36	; 0x24
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40021000 	.word	0x40021000
 8003824:	08008a28 	.word	0x08008a28
 8003828:	00f42400 	.word	0x00f42400
 800382c:	007a1200 	.word	0x007a1200

08003830 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003834:	4b03      	ldr	r3, [pc, #12]	; (8003844 <HAL_RCC_GetHCLKFreq+0x14>)
 8003836:	681b      	ldr	r3, [r3, #0]
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000008 	.word	0x20000008

08003848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800384c:	f7ff fff0 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8003850:	4602      	mov	r2, r0
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	4904      	ldr	r1, [pc, #16]	; (8003870 <HAL_RCC_GetPCLK1Freq+0x28>)
 800385e:	5ccb      	ldrb	r3, [r1, r3]
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003868:	4618      	mov	r0, r3
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40021000 	.word	0x40021000
 8003870:	08008a20 	.word	0x08008a20

08003874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003878:	f7ff ffda 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 800387c:	4602      	mov	r2, r0
 800387e:	4b06      	ldr	r3, [pc, #24]	; (8003898 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	0adb      	lsrs	r3, r3, #11
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	4904      	ldr	r1, [pc, #16]	; (800389c <HAL_RCC_GetPCLK2Freq+0x28>)
 800388a:	5ccb      	ldrb	r3, [r1, r3]
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003894:	4618      	mov	r0, r3
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40021000 	.word	0x40021000
 800389c:	08008a20 	.word	0x08008a20

080038a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038a8:	2300      	movs	r3, #0
 80038aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038ac:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038b8:	f7ff f9ee 	bl	8002c98 <HAL_PWREx_GetVoltageRange>
 80038bc:	6178      	str	r0, [r7, #20]
 80038be:	e014      	b.n	80038ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038c0:	4b25      	ldr	r3, [pc, #148]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c4:	4a24      	ldr	r2, [pc, #144]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ca:	6593      	str	r3, [r2, #88]	; 0x58
 80038cc:	4b22      	ldr	r3, [pc, #136]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038d8:	f7ff f9de 	bl	8002c98 <HAL_PWREx_GetVoltageRange>
 80038dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038de:	4b1e      	ldr	r3, [pc, #120]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	4a1d      	ldr	r2, [pc, #116]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f0:	d10b      	bne.n	800390a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b80      	cmp	r3, #128	; 0x80
 80038f6:	d919      	bls.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2ba0      	cmp	r3, #160	; 0xa0
 80038fc:	d902      	bls.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038fe:	2302      	movs	r3, #2
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	e013      	b.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003904:	2301      	movs	r3, #1
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	e010      	b.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b80      	cmp	r3, #128	; 0x80
 800390e:	d902      	bls.n	8003916 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003910:	2303      	movs	r3, #3
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	e00a      	b.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b80      	cmp	r3, #128	; 0x80
 800391a:	d102      	bne.n	8003922 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800391c:	2302      	movs	r3, #2
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	e004      	b.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b70      	cmp	r3, #112	; 0x70
 8003926:	d101      	bne.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003928:	2301      	movs	r3, #1
 800392a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f023 0207 	bic.w	r2, r3, #7
 8003934:	4909      	ldr	r1, [pc, #36]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800393c:	4b07      	ldr	r3, [pc, #28]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	429a      	cmp	r2, r3
 8003948:	d001      	beq.n	800394e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000
 800395c:	40022000 	.word	0x40022000

08003960 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003968:	2300      	movs	r3, #0
 800396a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800396c:	2300      	movs	r3, #0
 800396e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003978:	2b00      	cmp	r3, #0
 800397a:	d041      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003980:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003984:	d02a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003986:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800398a:	d824      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800398c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003990:	d008      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003992:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003996:	d81e      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800399c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039a0:	d010      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039a2:	e018      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039a4:	4b86      	ldr	r3, [pc, #536]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a85      	ldr	r2, [pc, #532]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039b0:	e015      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3304      	adds	r3, #4
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fabb 	bl	8003f34 <RCCEx_PLLSAI1_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039c2:	e00c      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3320      	adds	r3, #32
 80039c8:	2100      	movs	r1, #0
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fba6 	bl	800411c <RCCEx_PLLSAI2_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039d4:	e003      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	74fb      	strb	r3, [r7, #19]
      break;
 80039da:	e000      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039de:	7cfb      	ldrb	r3, [r7, #19]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10b      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039e4:	4b76      	ldr	r3, [pc, #472]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039f2:	4973      	ldr	r1, [pc, #460]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039fa:	e001      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d041      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a14:	d02a      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a1a:	d824      	bhi.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a20:	d008      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a26:	d81e      	bhi.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a30:	d010      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a32:	e018      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a34:	4b62      	ldr	r3, [pc, #392]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a61      	ldr	r2, [pc, #388]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a40:	e015      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3304      	adds	r3, #4
 8003a46:	2100      	movs	r1, #0
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fa73 	bl	8003f34 <RCCEx_PLLSAI1_Config>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a52:	e00c      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3320      	adds	r3, #32
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fb5e 	bl	800411c <RCCEx_PLLSAI2_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a64:	e003      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	74fb      	strb	r3, [r7, #19]
      break;
 8003a6a:	e000      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10b      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a74:	4b52      	ldr	r3, [pc, #328]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a82:	494f      	ldr	r1, [pc, #316]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a8a:	e001      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8c:	7cfb      	ldrb	r3, [r7, #19]
 8003a8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 80a0 	beq.w	8003bde <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003aa2:	4b47      	ldr	r3, [pc, #284]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00d      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab8:	4b41      	ldr	r3, [pc, #260]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	4a40      	ldr	r2, [pc, #256]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac4:	4b3e      	ldr	r3, [pc, #248]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ad4:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a3a      	ldr	r2, [pc, #232]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ade:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ae0:	f7fe f82e 	bl	8001b40 <HAL_GetTick>
 8003ae4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ae6:	e009      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae8:	f7fe f82a 	bl	8001b40 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d902      	bls.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	74fb      	strb	r3, [r7, #19]
        break;
 8003afa:	e005      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003afc:	4b31      	ldr	r3, [pc, #196]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0ef      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b08:	7cfb      	ldrb	r3, [r7, #19]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d15c      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b0e:	4b2c      	ldr	r3, [pc, #176]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01f      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d019      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b2c:	4b24      	ldr	r3, [pc, #144]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b38:	4b21      	ldr	r3, [pc, #132]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3e:	4a20      	ldr	r2, [pc, #128]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b48:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	4a1c      	ldr	r2, [pc, #112]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b58:	4a19      	ldr	r2, [pc, #100]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d016      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6a:	f7fd ffe9 	bl	8001b40 <HAL_GetTick>
 8003b6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b70:	e00b      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b72:	f7fd ffe5 	bl	8001b40 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d902      	bls.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	74fb      	strb	r3, [r7, #19]
            break;
 8003b88:	e006      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b8a:	4b0d      	ldr	r3, [pc, #52]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ec      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b98:	7cfb      	ldrb	r3, [r7, #19]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9e:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bae:	4904      	ldr	r1, [pc, #16]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bb6:	e009      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bb8:	7cfb      	ldrb	r3, [r7, #19]
 8003bba:	74bb      	strb	r3, [r7, #18]
 8003bbc:	e006      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003bbe:	bf00      	nop
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc8:	7cfb      	ldrb	r3, [r7, #19]
 8003bca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bcc:	7c7b      	ldrb	r3, [r7, #17]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d105      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd2:	4b9e      	ldr	r3, [pc, #632]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd6:	4a9d      	ldr	r2, [pc, #628]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bea:	4b98      	ldr	r3, [pc, #608]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf0:	f023 0203 	bic.w	r2, r3, #3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	4994      	ldr	r1, [pc, #592]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c0c:	4b8f      	ldr	r3, [pc, #572]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c12:	f023 020c 	bic.w	r2, r3, #12
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1a:	498c      	ldr	r1, [pc, #560]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c2e:	4b87      	ldr	r3, [pc, #540]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	4983      	ldr	r1, [pc, #524]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c50:	4b7e      	ldr	r3, [pc, #504]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	497b      	ldr	r1, [pc, #492]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0310 	and.w	r3, r3, #16
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c72:	4b76      	ldr	r3, [pc, #472]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c80:	4972      	ldr	r1, [pc, #456]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0320 	and.w	r3, r3, #32
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c94:	4b6d      	ldr	r3, [pc, #436]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca2:	496a      	ldr	r1, [pc, #424]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cb6:	4b65      	ldr	r3, [pc, #404]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc4:	4961      	ldr	r1, [pc, #388]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cd8:	4b5c      	ldr	r3, [pc, #368]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce6:	4959      	ldr	r1, [pc, #356]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cfa:	4b54      	ldr	r3, [pc, #336]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d08:	4950      	ldr	r1, [pc, #320]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d1c:	4b4b      	ldr	r3, [pc, #300]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	4948      	ldr	r1, [pc, #288]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d3e:	4b43      	ldr	r3, [pc, #268]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	493f      	ldr	r1, [pc, #252]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d028      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d60:	4b3a      	ldr	r3, [pc, #232]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d6e:	4937      	ldr	r1, [pc, #220]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d7e:	d106      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d80:	4b32      	ldr	r3, [pc, #200]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4a31      	ldr	r2, [pc, #196]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d8a:	60d3      	str	r3, [r2, #12]
 8003d8c:	e011      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d96:	d10c      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 f8c8 	bl	8003f34 <RCCEx_PLLSAI1_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003dae:	7cfb      	ldrb	r3, [r7, #19]
 8003db0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d028      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dbe:	4b23      	ldr	r3, [pc, #140]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	491f      	ldr	r1, [pc, #124]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ddc:	d106      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dde:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	4a1a      	ldr	r2, [pc, #104]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003de8:	60d3      	str	r3, [r2, #12]
 8003dea:	e011      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f899 	bl	8003f34 <RCCEx_PLLSAI1_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e06:	7cfb      	ldrb	r3, [r7, #19]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e0c:	7cfb      	ldrb	r3, [r7, #19]
 8003e0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d02b      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2a:	4908      	ldr	r1, [pc, #32]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e3a:	d109      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e3c:	4b03      	ldr	r3, [pc, #12]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4a02      	ldr	r2, [pc, #8]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e46:	60d3      	str	r3, [r2, #12]
 8003e48:	e014      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e4a:	bf00      	nop
 8003e4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	2101      	movs	r1, #1
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 f867 	bl	8003f34 <RCCEx_PLLSAI1_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e6a:	7cfb      	ldrb	r3, [r7, #19]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e70:	7cfb      	ldrb	r3, [r7, #19]
 8003e72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d02f      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e80:	4b2b      	ldr	r3, [pc, #172]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e8e:	4928      	ldr	r1, [pc, #160]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e9e:	d10d      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 f844 	bl	8003f34 <RCCEx_PLLSAI1_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d014      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003eb6:	7cfb      	ldrb	r3, [r7, #19]
 8003eb8:	74bb      	strb	r3, [r7, #18]
 8003eba:	e011      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ec4:	d10c      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3320      	adds	r3, #32
 8003eca:	2102      	movs	r1, #2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 f925 	bl	800411c <RCCEx_PLLSAI2_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ed6:	7cfb      	ldrb	r3, [r7, #19]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003edc:	7cfb      	ldrb	r3, [r7, #19]
 8003ede:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003eec:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003efa:	490d      	ldr	r1, [pc, #52]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00b      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f0e:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f1e:	4904      	ldr	r1, [pc, #16]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f26:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40021000 	.word	0x40021000

08003f34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f42:	4b75      	ldr	r3, [pc, #468]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d018      	beq.n	8003f80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f4e:	4b72      	ldr	r3, [pc, #456]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0203 	and.w	r2, r3, #3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d10d      	bne.n	8003f7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
       ||
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d009      	beq.n	8003f7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f66:	4b6c      	ldr	r3, [pc, #432]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	091b      	lsrs	r3, r3, #4
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
       ||
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d047      	beq.n	800400a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]
 8003f7e:	e044      	b.n	800400a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d018      	beq.n	8003fba <RCCEx_PLLSAI1_Config+0x86>
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d825      	bhi.n	8003fd8 <RCCEx_PLLSAI1_Config+0xa4>
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d002      	beq.n	8003f96 <RCCEx_PLLSAI1_Config+0x62>
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d009      	beq.n	8003fa8 <RCCEx_PLLSAI1_Config+0x74>
 8003f94:	e020      	b.n	8003fd8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f96:	4b60      	ldr	r3, [pc, #384]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d11d      	bne.n	8003fde <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fa6:	e01a      	b.n	8003fde <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fa8:	4b5b      	ldr	r3, [pc, #364]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d116      	bne.n	8003fe2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb8:	e013      	b.n	8003fe2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fba:	4b57      	ldr	r3, [pc, #348]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10f      	bne.n	8003fe6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fc6:	4b54      	ldr	r3, [pc, #336]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d109      	bne.n	8003fe6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fd6:	e006      	b.n	8003fe6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
      break;
 8003fdc:	e004      	b.n	8003fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fde:	bf00      	nop
 8003fe0:	e002      	b.n	8003fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e000      	b.n	8003fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fe6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10d      	bne.n	800400a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fee:	4b4a      	ldr	r3, [pc, #296]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6819      	ldr	r1, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	430b      	orrs	r3, r1
 8004004:	4944      	ldr	r1, [pc, #272]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004006:	4313      	orrs	r3, r2
 8004008:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d17d      	bne.n	800410c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004010:	4b41      	ldr	r3, [pc, #260]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a40      	ldr	r2, [pc, #256]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004016:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800401a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800401c:	f7fd fd90 	bl	8001b40 <HAL_GetTick>
 8004020:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004022:	e009      	b.n	8004038 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004024:	f7fd fd8c 	bl	8001b40 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d902      	bls.n	8004038 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	73fb      	strb	r3, [r7, #15]
        break;
 8004036:	e005      	b.n	8004044 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004038:	4b37      	ldr	r3, [pc, #220]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1ef      	bne.n	8004024 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d160      	bne.n	800410c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d111      	bne.n	8004074 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004050:	4b31      	ldr	r3, [pc, #196]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6892      	ldr	r2, [r2, #8]
 8004060:	0211      	lsls	r1, r2, #8
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68d2      	ldr	r2, [r2, #12]
 8004066:	0912      	lsrs	r2, r2, #4
 8004068:	0452      	lsls	r2, r2, #17
 800406a:	430a      	orrs	r2, r1
 800406c:	492a      	ldr	r1, [pc, #168]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 800406e:	4313      	orrs	r3, r2
 8004070:	610b      	str	r3, [r1, #16]
 8004072:	e027      	b.n	80040c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d112      	bne.n	80040a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800407a:	4b27      	ldr	r3, [pc, #156]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004082:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6892      	ldr	r2, [r2, #8]
 800408a:	0211      	lsls	r1, r2, #8
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6912      	ldr	r2, [r2, #16]
 8004090:	0852      	lsrs	r2, r2, #1
 8004092:	3a01      	subs	r2, #1
 8004094:	0552      	lsls	r2, r2, #21
 8004096:	430a      	orrs	r2, r1
 8004098:	491f      	ldr	r1, [pc, #124]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 800409a:	4313      	orrs	r3, r2
 800409c:	610b      	str	r3, [r1, #16]
 800409e:	e011      	b.n	80040c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040a0:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6892      	ldr	r2, [r2, #8]
 80040b0:	0211      	lsls	r1, r2, #8
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6952      	ldr	r2, [r2, #20]
 80040b6:	0852      	lsrs	r2, r2, #1
 80040b8:	3a01      	subs	r2, #1
 80040ba:	0652      	lsls	r2, r2, #25
 80040bc:	430a      	orrs	r2, r1
 80040be:	4916      	ldr	r1, [pc, #88]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040c4:	4b14      	ldr	r3, [pc, #80]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a13      	ldr	r2, [pc, #76]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d0:	f7fd fd36 	bl	8001b40 <HAL_GetTick>
 80040d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040d6:	e009      	b.n	80040ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040d8:	f7fd fd32 	bl	8001b40 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d902      	bls.n	80040ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	73fb      	strb	r3, [r7, #15]
          break;
 80040ea:	e005      	b.n	80040f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040ec:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ef      	beq.n	80040d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040fe:	4b06      	ldr	r3, [pc, #24]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	4904      	ldr	r1, [pc, #16]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004108:	4313      	orrs	r3, r2
 800410a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800410c:	7bfb      	ldrb	r3, [r7, #15]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40021000 	.word	0x40021000

0800411c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800412a:	4b6a      	ldr	r3, [pc, #424]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d018      	beq.n	8004168 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004136:	4b67      	ldr	r3, [pc, #412]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f003 0203 	and.w	r2, r3, #3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d10d      	bne.n	8004162 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
       ||
 800414a:	2b00      	cmp	r3, #0
 800414c:	d009      	beq.n	8004162 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800414e:	4b61      	ldr	r3, [pc, #388]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	091b      	lsrs	r3, r3, #4
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
       ||
 800415e:	429a      	cmp	r2, r3
 8004160:	d047      	beq.n	80041f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	73fb      	strb	r3, [r7, #15]
 8004166:	e044      	b.n	80041f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d018      	beq.n	80041a2 <RCCEx_PLLSAI2_Config+0x86>
 8004170:	2b03      	cmp	r3, #3
 8004172:	d825      	bhi.n	80041c0 <RCCEx_PLLSAI2_Config+0xa4>
 8004174:	2b01      	cmp	r3, #1
 8004176:	d002      	beq.n	800417e <RCCEx_PLLSAI2_Config+0x62>
 8004178:	2b02      	cmp	r3, #2
 800417a:	d009      	beq.n	8004190 <RCCEx_PLLSAI2_Config+0x74>
 800417c:	e020      	b.n	80041c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800417e:	4b55      	ldr	r3, [pc, #340]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d11d      	bne.n	80041c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800418e:	e01a      	b.n	80041c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004190:	4b50      	ldr	r3, [pc, #320]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d116      	bne.n	80041ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a0:	e013      	b.n	80041ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041a2:	4b4c      	ldr	r3, [pc, #304]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10f      	bne.n	80041ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041ae:	4b49      	ldr	r3, [pc, #292]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041be:	e006      	b.n	80041ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
      break;
 80041c4:	e004      	b.n	80041d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041c6:	bf00      	nop
 80041c8:	e002      	b.n	80041d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041ca:	bf00      	nop
 80041cc:	e000      	b.n	80041d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10d      	bne.n	80041f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041d6:	4b3f      	ldr	r3, [pc, #252]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6819      	ldr	r1, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	430b      	orrs	r3, r1
 80041ec:	4939      	ldr	r1, [pc, #228]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d167      	bne.n	80042c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80041f8:	4b36      	ldr	r3, [pc, #216]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a35      	ldr	r2, [pc, #212]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004202:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004204:	f7fd fc9c 	bl	8001b40 <HAL_GetTick>
 8004208:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800420a:	e009      	b.n	8004220 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800420c:	f7fd fc98 	bl	8001b40 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d902      	bls.n	8004220 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	73fb      	strb	r3, [r7, #15]
        break;
 800421e:	e005      	b.n	800422c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004220:	4b2c      	ldr	r3, [pc, #176]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ef      	bne.n	800420c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d14a      	bne.n	80042c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d111      	bne.n	800425c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004238:	4b26      	ldr	r3, [pc, #152]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6892      	ldr	r2, [r2, #8]
 8004248:	0211      	lsls	r1, r2, #8
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	68d2      	ldr	r2, [r2, #12]
 800424e:	0912      	lsrs	r2, r2, #4
 8004250:	0452      	lsls	r2, r2, #17
 8004252:	430a      	orrs	r2, r1
 8004254:	491f      	ldr	r1, [pc, #124]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004256:	4313      	orrs	r3, r2
 8004258:	614b      	str	r3, [r1, #20]
 800425a:	e011      	b.n	8004280 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800425c:	4b1d      	ldr	r3, [pc, #116]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004264:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6892      	ldr	r2, [r2, #8]
 800426c:	0211      	lsls	r1, r2, #8
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6912      	ldr	r2, [r2, #16]
 8004272:	0852      	lsrs	r2, r2, #1
 8004274:	3a01      	subs	r2, #1
 8004276:	0652      	lsls	r2, r2, #25
 8004278:	430a      	orrs	r2, r1
 800427a:	4916      	ldr	r1, [pc, #88]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800427c:	4313      	orrs	r3, r2
 800427e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004280:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a13      	ldr	r2, [pc, #76]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800428a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fd fc58 	bl	8001b40 <HAL_GetTick>
 8004290:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004292:	e009      	b.n	80042a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004294:	f7fd fc54 	bl	8001b40 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d902      	bls.n	80042a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	73fb      	strb	r3, [r7, #15]
          break;
 80042a6:	e005      	b.n	80042b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042a8:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0ef      	beq.n	8004294 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042bc:	695a      	ldr	r2, [r3, #20]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	4904      	ldr	r1, [pc, #16]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000

080042d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e095      	b.n	8004416 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d108      	bne.n	8004304 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042fa:	d009      	beq.n	8004310 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	61da      	str	r2, [r3, #28]
 8004302:	e005      	b.n	8004310 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fd f99c 	bl	8001668 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004346:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004350:	d902      	bls.n	8004358 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	e002      	b.n	800435e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800435c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004366:	d007      	beq.n	8004378 <HAL_SPI_Init+0xa0>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004370:	d002      	beq.n	8004378 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ba:	ea42 0103 	orr.w	r1, r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	0c1b      	lsrs	r3, r3, #16
 80043d4:	f003 0204 	and.w	r2, r3, #4
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80043f4:	ea42 0103 	orr.w	r1, r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b088      	sub	sp, #32
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	603b      	str	r3, [r7, #0]
 800442a:	4613      	mov	r3, r2
 800442c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_SPI_Transmit+0x22>
 800443c:	2302      	movs	r3, #2
 800443e:	e15f      	b.n	8004700 <HAL_SPI_Transmit+0x2e2>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004448:	f7fd fb7a 	bl	8001b40 <HAL_GetTick>
 800444c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800444e:	88fb      	ldrh	r3, [r7, #6]
 8004450:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b01      	cmp	r3, #1
 800445c:	d002      	beq.n	8004464 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800445e:	2302      	movs	r3, #2
 8004460:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004462:	e148      	b.n	80046f6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_SPI_Transmit+0x52>
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d102      	bne.n	8004476 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004474:	e13f      	b.n	80046f6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2203      	movs	r2, #3
 800447a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	88fa      	ldrh	r2, [r7, #6]
 800448e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	88fa      	ldrh	r2, [r7, #6]
 8004494:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c0:	d10f      	bne.n	80044e2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ec:	2b40      	cmp	r3, #64	; 0x40
 80044ee:	d007      	beq.n	8004500 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004508:	d94f      	bls.n	80045aa <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_SPI_Transmit+0xfa>
 8004512:	8afb      	ldrh	r3, [r7, #22]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d142      	bne.n	800459e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	881a      	ldrh	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	1c9a      	adds	r2, r3, #2
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800453c:	e02f      	b.n	800459e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b02      	cmp	r3, #2
 800454a:	d112      	bne.n	8004572 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	881a      	ldrh	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455c:	1c9a      	adds	r2, r3, #2
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004566:	b29b      	uxth	r3, r3
 8004568:	3b01      	subs	r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004570:	e015      	b.n	800459e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004572:	f7fd fae5 	bl	8001b40 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d803      	bhi.n	800458a <HAL_SPI_Transmit+0x16c>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004588:	d102      	bne.n	8004590 <HAL_SPI_Transmit+0x172>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d106      	bne.n	800459e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800459c:	e0ab      	b.n	80046f6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1ca      	bne.n	800453e <HAL_SPI_Transmit+0x120>
 80045a8:	e080      	b.n	80046ac <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_SPI_Transmit+0x19a>
 80045b2:	8afb      	ldrh	r3, [r7, #22]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d174      	bne.n	80046a2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d912      	bls.n	80045e8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c6:	881a      	ldrh	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	1c9a      	adds	r2, r3, #2
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b02      	subs	r3, #2
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045e6:	e05c      	b.n	80046a2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	330c      	adds	r3, #12
 80045f2:	7812      	ldrb	r2, [r2, #0]
 80045f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800460e:	e048      	b.n	80046a2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b02      	cmp	r3, #2
 800461c:	d12b      	bne.n	8004676 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004622:	b29b      	uxth	r3, r3
 8004624:	2b01      	cmp	r3, #1
 8004626:	d912      	bls.n	800464e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	881a      	ldrh	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	1c9a      	adds	r2, r3, #2
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b02      	subs	r3, #2
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800464c:	e029      	b.n	80046a2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	330c      	adds	r3, #12
 8004658:	7812      	ldrb	r2, [r2, #0]
 800465a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004674:	e015      	b.n	80046a2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004676:	f7fd fa63 	bl	8001b40 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d803      	bhi.n	800468e <HAL_SPI_Transmit+0x270>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468c:	d102      	bne.n	8004694 <HAL_SPI_Transmit+0x276>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d106      	bne.n	80046a2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80046a0:	e029      	b.n	80046f6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1b1      	bne.n	8004610 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	6839      	ldr	r1, [r7, #0]
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fcf9 	bl	80050a8 <SPI_EndRxTxTransaction>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046ca:	2300      	movs	r3, #0
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	77fb      	strb	r3, [r7, #31]
 80046ec:	e003      	b.n	80046f6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80046fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3720      	adds	r7, #32
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b088      	sub	sp, #32
 800470c:	af02      	add	r7, sp, #8
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	4613      	mov	r3, r2
 8004716:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	d002      	beq.n	800472e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004728:	2302      	movs	r3, #2
 800472a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800472c:	e11a      	b.n	8004964 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004736:	d112      	bne.n	800475e <HAL_SPI_Receive+0x56>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10e      	bne.n	800475e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2204      	movs	r2, #4
 8004744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004748:	88fa      	ldrh	r2, [r7, #6]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	4613      	mov	r3, r2
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f90e 	bl	8004976 <HAL_SPI_TransmitReceive>
 800475a:	4603      	mov	r3, r0
 800475c:	e107      	b.n	800496e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_SPI_Receive+0x64>
 8004768:	2302      	movs	r3, #2
 800476a:	e100      	b.n	800496e <HAL_SPI_Receive+0x266>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004774:	f7fd f9e4 	bl	8001b40 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <HAL_SPI_Receive+0x7e>
 8004780:	88fb      	ldrh	r3, [r7, #6]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	75fb      	strb	r3, [r7, #23]
    goto error;
 800478a:	e0eb      	b.n	8004964 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2204      	movs	r2, #4
 8004790:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	88fa      	ldrh	r2, [r7, #6]
 80047a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	88fa      	ldrh	r2, [r7, #6]
 80047ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047d6:	d908      	bls.n	80047ea <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047e6:	605a      	str	r2, [r3, #4]
 80047e8:	e007      	b.n	80047fa <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047f8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004802:	d10f      	bne.n	8004824 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004812:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004822:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482e:	2b40      	cmp	r3, #64	; 0x40
 8004830:	d007      	beq.n	8004842 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004840:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800484a:	d86f      	bhi.n	800492c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800484c:	e034      	b.n	80048b8 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b01      	cmp	r3, #1
 800485a:	d117      	bne.n	800488c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f103 020c 	add.w	r2, r3, #12
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	7812      	ldrb	r2, [r2, #0]
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800488a:	e015      	b.n	80048b8 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800488c:	f7fd f958 	bl	8001b40 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d803      	bhi.n	80048a4 <HAL_SPI_Receive+0x19c>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a2:	d102      	bne.n	80048aa <HAL_SPI_Receive+0x1a2>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d106      	bne.n	80048b8 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80048b6:	e055      	b.n	8004964 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1c4      	bne.n	800484e <HAL_SPI_Receive+0x146>
 80048c4:	e038      	b.n	8004938 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d115      	bne.n	8004900 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	b292      	uxth	r2, r2
 80048e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	1c9a      	adds	r2, r3, #2
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80048fe:	e015      	b.n	800492c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004900:	f7fd f91e 	bl	8001b40 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d803      	bhi.n	8004918 <HAL_SPI_Receive+0x210>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004916:	d102      	bne.n	800491e <HAL_SPI_Receive+0x216>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800492a:	e01b      	b.n	8004964 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1c6      	bne.n	80048c6 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	6839      	ldr	r1, [r7, #0]
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 fb5b 	bl	8004ff8 <SPI_EndRxTransaction>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	75fb      	strb	r3, [r7, #23]
 800495a:	e003      	b.n	8004964 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800496c:	7dfb      	ldrb	r3, [r7, #23]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b08a      	sub	sp, #40	; 0x28
 800497a:	af00      	add	r7, sp, #0
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	607a      	str	r2, [r7, #4]
 8004982:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004984:	2301      	movs	r3, #1
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_SPI_TransmitReceive+0x26>
 8004998:	2302      	movs	r3, #2
 800499a:	e20a      	b.n	8004db2 <HAL_SPI_TransmitReceive+0x43c>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049a4:	f7fd f8cc 	bl	8001b40 <HAL_GetTick>
 80049a8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049b0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80049b8:	887b      	ldrh	r3, [r7, #2]
 80049ba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80049bc:	887b      	ldrh	r3, [r7, #2]
 80049be:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049c0:	7efb      	ldrb	r3, [r7, #27]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d00e      	beq.n	80049e4 <HAL_SPI_TransmitReceive+0x6e>
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049cc:	d106      	bne.n	80049dc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <HAL_SPI_TransmitReceive+0x66>
 80049d6:	7efb      	ldrb	r3, [r7, #27]
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d003      	beq.n	80049e4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80049dc:	2302      	movs	r3, #2
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80049e2:	e1e0      	b.n	8004da6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <HAL_SPI_TransmitReceive+0x80>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <HAL_SPI_TransmitReceive+0x80>
 80049f0:	887b      	ldrh	r3, [r7, #2]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d103      	bne.n	80049fe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80049fc:	e1d3      	b.n	8004da6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d003      	beq.n	8004a12 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2205      	movs	r2, #5
 8004a0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	887a      	ldrh	r2, [r7, #2]
 8004a22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	887a      	ldrh	r2, [r7, #2]
 8004a2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	887a      	ldrh	r2, [r7, #2]
 8004a38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	887a      	ldrh	r2, [r7, #2]
 8004a3e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a54:	d802      	bhi.n	8004a5c <HAL_SPI_TransmitReceive+0xe6>
 8004a56:	8a3b      	ldrh	r3, [r7, #16]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d908      	bls.n	8004a6e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a6a:	605a      	str	r2, [r3, #4]
 8004a6c:	e007      	b.n	8004a7e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a7c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a88:	2b40      	cmp	r3, #64	; 0x40
 8004a8a:	d007      	beq.n	8004a9c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004aa4:	f240 8081 	bls.w	8004baa <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <HAL_SPI_TransmitReceive+0x140>
 8004ab0:	8a7b      	ldrh	r3, [r7, #18]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d16d      	bne.n	8004b92 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aba:	881a      	ldrh	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	1c9a      	adds	r2, r3, #2
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ada:	e05a      	b.n	8004b92 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d11b      	bne.n	8004b22 <HAL_SPI_TransmitReceive+0x1ac>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d016      	beq.n	8004b22 <HAL_SPI_TransmitReceive+0x1ac>
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d113      	bne.n	8004b22 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	881a      	ldrh	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	1c9a      	adds	r2, r3, #2
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d11c      	bne.n	8004b6a <HAL_SPI_TransmitReceive+0x1f4>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d016      	beq.n	8004b6a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	b292      	uxth	r2, r2
 8004b48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	1c9a      	adds	r2, r3, #2
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b66:	2301      	movs	r3, #1
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b6a:	f7fc ffe9 	bl	8001b40 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d80b      	bhi.n	8004b92 <HAL_SPI_TransmitReceive+0x21c>
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b80:	d007      	beq.n	8004b92 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004b90:	e109      	b.n	8004da6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d19f      	bne.n	8004adc <HAL_SPI_TransmitReceive+0x166>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d199      	bne.n	8004adc <HAL_SPI_TransmitReceive+0x166>
 8004ba8:	e0e3      	b.n	8004d72 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_SPI_TransmitReceive+0x244>
 8004bb2:	8a7b      	ldrh	r3, [r7, #18]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	f040 80cf 	bne.w	8004d58 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d912      	bls.n	8004bea <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc8:	881a      	ldrh	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	1c9a      	adds	r2, r3, #2
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b02      	subs	r3, #2
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004be8:	e0b6      	b.n	8004d58 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	7812      	ldrb	r2, [r2, #0]
 8004bf6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c10:	e0a2      	b.n	8004d58 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d134      	bne.n	8004c8a <HAL_SPI_TransmitReceive+0x314>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d02f      	beq.n	8004c8a <HAL_SPI_TransmitReceive+0x314>
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d12c      	bne.n	8004c8a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d912      	bls.n	8004c60 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	881a      	ldrh	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4a:	1c9a      	adds	r2, r3, #2
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	3b02      	subs	r3, #2
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c5e:	e012      	b.n	8004c86 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	330c      	adds	r3, #12
 8004c6a:	7812      	ldrb	r2, [r2, #0]
 8004c6c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d148      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x3b4>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d042      	beq.n	8004d2a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d923      	bls.n	8004cf8 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	b292      	uxth	r2, r2
 8004cbc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	1c9a      	adds	r2, r3, #2
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	3b02      	subs	r3, #2
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d81f      	bhi.n	8004d26 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cf4:	605a      	str	r2, [r3, #4]
 8004cf6:	e016      	b.n	8004d26 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f103 020c 	add.w	r2, r3, #12
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	7812      	ldrb	r2, [r2, #0]
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d26:	2301      	movs	r3, #1
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d2a:	f7fc ff09 	bl	8001b40 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d803      	bhi.n	8004d42 <HAL_SPI_TransmitReceive+0x3cc>
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d40:	d102      	bne.n	8004d48 <HAL_SPI_TransmitReceive+0x3d2>
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d107      	bne.n	8004d58 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004d56:	e026      	b.n	8004da6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f47f af57 	bne.w	8004c12 <HAL_SPI_TransmitReceive+0x29c>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f47f af50 	bne.w	8004c12 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 f996 	bl	80050a8 <SPI_EndRxTxTransaction>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9c:	e003      	b.n	8004da6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004dae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3728      	adds	r7, #40	; 0x28
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dcc:	f7fc feb8 	bl	8001b40 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	1a9b      	subs	r3, r3, r2
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	4413      	add	r3, r2
 8004dda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ddc:	f7fc feb0 	bl	8001b40 <HAL_GetTick>
 8004de0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004de2:	4b39      	ldr	r3, [pc, #228]	; (8004ec8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	015b      	lsls	r3, r3, #5
 8004de8:	0d1b      	lsrs	r3, r3, #20
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	fb02 f303 	mul.w	r3, r2, r3
 8004df0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004df2:	e054      	b.n	8004e9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfa:	d050      	beq.n	8004e9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dfc:	f7fc fea0 	bl	8001b40 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d902      	bls.n	8004e12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d13d      	bne.n	8004e8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e2a:	d111      	bne.n	8004e50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e34:	d004      	beq.n	8004e40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e3e:	d107      	bne.n	8004e50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e58:	d10f      	bne.n	8004e7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e017      	b.n	8004ebe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	bf0c      	ite	eq
 8004eae:	2301      	moveq	r3, #1
 8004eb0:	2300      	movne	r3, #0
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d19b      	bne.n	8004df4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3720      	adds	r7, #32
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20000008 	.word	0x20000008

08004ecc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	; 0x28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004eda:	2300      	movs	r3, #0
 8004edc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ede:	f7fc fe2f 	bl	8001b40 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	4413      	add	r3, r2
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004eee:	f7fc fe27 	bl	8001b40 <HAL_GetTick>
 8004ef2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	330c      	adds	r3, #12
 8004efa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004efc:	4b3d      	ldr	r3, [pc, #244]	; (8004ff4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	00da      	lsls	r2, r3, #3
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	0d1b      	lsrs	r3, r3, #20
 8004f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0e:	fb02 f303 	mul.w	r3, r2, r3
 8004f12:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f14:	e060      	b.n	8004fd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f1c:	d107      	bne.n	8004f2e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d104      	bne.n	8004f2e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f2c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f34:	d050      	beq.n	8004fd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f36:	f7fc fe03 	bl	8001b40 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d902      	bls.n	8004f4c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d13d      	bne.n	8004fc8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f64:	d111      	bne.n	8004f8a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f6e:	d004      	beq.n	8004f7a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f78:	d107      	bne.n	8004f8a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f92:	d10f      	bne.n	8004fb4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fb2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e010      	b.n	8004fea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d196      	bne.n	8004f16 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3728      	adds	r7, #40	; 0x28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000008 	.word	0x20000008

08004ff8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800500c:	d111      	bne.n	8005032 <SPI_EndRxTransaction+0x3a>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005016:	d004      	beq.n	8005022 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005020:	d107      	bne.n	8005032 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005030:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2200      	movs	r2, #0
 800503a:	2180      	movs	r1, #128	; 0x80
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f7ff febd 	bl	8004dbc <SPI_WaitFlagStateUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d007      	beq.n	8005058 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800504c:	f043 0220 	orr.w	r2, r3, #32
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e023      	b.n	80050a0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005060:	d11d      	bne.n	800509e <SPI_EndRxTransaction+0xa6>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800506a:	d004      	beq.n	8005076 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005074:	d113      	bne.n	800509e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2200      	movs	r2, #0
 800507e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f7ff ff22 	bl	8004ecc <SPI_WaitFifoStateUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d007      	beq.n	800509e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005092:	f043 0220 	orr.w	r2, r3, #32
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e000      	b.n	80050a0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f7ff ff03 	bl	8004ecc <SPI_WaitFifoStateUntilTimeout>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d007      	beq.n	80050dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d0:	f043 0220 	orr.w	r2, r3, #32
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e027      	b.n	800512c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2200      	movs	r2, #0
 80050e4:	2180      	movs	r1, #128	; 0x80
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f7ff fe68 	bl	8004dbc <SPI_WaitFlagStateUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d007      	beq.n	8005102 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f6:	f043 0220 	orr.w	r2, r3, #32
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e014      	b.n	800512c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2200      	movs	r2, #0
 800510a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff fedc 	bl	8004ecc <SPI_WaitFifoStateUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d007      	beq.n	800512a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511e:	f043 0220 	orr.w	r2, r3, #32
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e000      	b.n	800512c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e040      	b.n	80051c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fc fafa 	bl	8001750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2224      	movs	r2, #36	; 0x24
 8005160:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0201 	bic.w	r2, r2, #1
 8005170:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fb6a 	bl	8005854 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f8af 	bl	80052e4 <UART_SetConfig>
 8005186:	4603      	mov	r3, r0
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e01b      	b.n	80051c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800519e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fbe9 	bl	8005998 <UART_CheckIdleState>
 80051c6:	4603      	mov	r3, r0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08a      	sub	sp, #40	; 0x28
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	603b      	str	r3, [r7, #0]
 80051dc:	4613      	mov	r3, r2
 80051de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d178      	bne.n	80052da <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_UART_Transmit+0x24>
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e071      	b.n	80052dc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2221      	movs	r2, #33	; 0x21
 8005204:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005206:	f7fc fc9b 	bl	8001b40 <HAL_GetTick>
 800520a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	88fa      	ldrh	r2, [r7, #6]
 8005210:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	88fa      	ldrh	r2, [r7, #6]
 8005218:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005224:	d108      	bne.n	8005238 <HAL_UART_Transmit+0x68>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d104      	bne.n	8005238 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	61bb      	str	r3, [r7, #24]
 8005236:	e003      	b.n	8005240 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800523c:	2300      	movs	r3, #0
 800523e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005240:	e030      	b.n	80052a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2200      	movs	r2, #0
 800524a:	2180      	movs	r1, #128	; 0x80
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 fc4b 	bl	8005ae8 <UART_WaitOnFlagUntilTimeout>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d004      	beq.n	8005262 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e03c      	b.n	80052dc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10b      	bne.n	8005280 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	881a      	ldrh	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005274:	b292      	uxth	r2, r2
 8005276:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	3302      	adds	r3, #2
 800527c:	61bb      	str	r3, [r7, #24]
 800527e:	e008      	b.n	8005292 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	781a      	ldrb	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	b292      	uxth	r2, r2
 800528a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	3301      	adds	r3, #1
 8005290:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005298:	b29b      	uxth	r3, r3
 800529a:	3b01      	subs	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1c8      	bne.n	8005242 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2200      	movs	r2, #0
 80052b8:	2140      	movs	r1, #64	; 0x40
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 fc14 	bl	8005ae8 <UART_WaitOnFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d004      	beq.n	80052d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e005      	b.n	80052dc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2220      	movs	r2, #32
 80052d4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	e000      	b.n	80052dc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80052da:	2302      	movs	r3, #2
  }
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3720      	adds	r7, #32
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052e8:	b08a      	sub	sp, #40	; 0x28
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	431a      	orrs	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	431a      	orrs	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	4313      	orrs	r3, r2
 800530a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	4ba4      	ldr	r3, [pc, #656]	; (80055a4 <UART_SetConfig+0x2c0>)
 8005314:	4013      	ands	r3, r2
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	6812      	ldr	r2, [r2, #0]
 800531a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800531c:	430b      	orrs	r3, r1
 800531e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a99      	ldr	r2, [pc, #612]	; (80055a8 <UART_SetConfig+0x2c4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d004      	beq.n	8005350 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534c:	4313      	orrs	r3, r2
 800534e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005360:	430a      	orrs	r2, r1
 8005362:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a90      	ldr	r2, [pc, #576]	; (80055ac <UART_SetConfig+0x2c8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d126      	bne.n	80053bc <UART_SetConfig+0xd8>
 800536e:	4b90      	ldr	r3, [pc, #576]	; (80055b0 <UART_SetConfig+0x2cc>)
 8005370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	2b03      	cmp	r3, #3
 800537a:	d81b      	bhi.n	80053b4 <UART_SetConfig+0xd0>
 800537c:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <UART_SetConfig+0xa0>)
 800537e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005382:	bf00      	nop
 8005384:	08005395 	.word	0x08005395
 8005388:	080053a5 	.word	0x080053a5
 800538c:	0800539d 	.word	0x0800539d
 8005390:	080053ad 	.word	0x080053ad
 8005394:	2301      	movs	r3, #1
 8005396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800539a:	e116      	b.n	80055ca <UART_SetConfig+0x2e6>
 800539c:	2302      	movs	r3, #2
 800539e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a2:	e112      	b.n	80055ca <UART_SetConfig+0x2e6>
 80053a4:	2304      	movs	r3, #4
 80053a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053aa:	e10e      	b.n	80055ca <UART_SetConfig+0x2e6>
 80053ac:	2308      	movs	r3, #8
 80053ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b2:	e10a      	b.n	80055ca <UART_SetConfig+0x2e6>
 80053b4:	2310      	movs	r3, #16
 80053b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ba:	e106      	b.n	80055ca <UART_SetConfig+0x2e6>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a7c      	ldr	r2, [pc, #496]	; (80055b4 <UART_SetConfig+0x2d0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d138      	bne.n	8005438 <UART_SetConfig+0x154>
 80053c6:	4b7a      	ldr	r3, [pc, #488]	; (80055b0 <UART_SetConfig+0x2cc>)
 80053c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053cc:	f003 030c 	and.w	r3, r3, #12
 80053d0:	2b0c      	cmp	r3, #12
 80053d2:	d82d      	bhi.n	8005430 <UART_SetConfig+0x14c>
 80053d4:	a201      	add	r2, pc, #4	; (adr r2, 80053dc <UART_SetConfig+0xf8>)
 80053d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053da:	bf00      	nop
 80053dc:	08005411 	.word	0x08005411
 80053e0:	08005431 	.word	0x08005431
 80053e4:	08005431 	.word	0x08005431
 80053e8:	08005431 	.word	0x08005431
 80053ec:	08005421 	.word	0x08005421
 80053f0:	08005431 	.word	0x08005431
 80053f4:	08005431 	.word	0x08005431
 80053f8:	08005431 	.word	0x08005431
 80053fc:	08005419 	.word	0x08005419
 8005400:	08005431 	.word	0x08005431
 8005404:	08005431 	.word	0x08005431
 8005408:	08005431 	.word	0x08005431
 800540c:	08005429 	.word	0x08005429
 8005410:	2300      	movs	r3, #0
 8005412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005416:	e0d8      	b.n	80055ca <UART_SetConfig+0x2e6>
 8005418:	2302      	movs	r3, #2
 800541a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800541e:	e0d4      	b.n	80055ca <UART_SetConfig+0x2e6>
 8005420:	2304      	movs	r3, #4
 8005422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005426:	e0d0      	b.n	80055ca <UART_SetConfig+0x2e6>
 8005428:	2308      	movs	r3, #8
 800542a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800542e:	e0cc      	b.n	80055ca <UART_SetConfig+0x2e6>
 8005430:	2310      	movs	r3, #16
 8005432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005436:	e0c8      	b.n	80055ca <UART_SetConfig+0x2e6>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a5e      	ldr	r2, [pc, #376]	; (80055b8 <UART_SetConfig+0x2d4>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d125      	bne.n	800548e <UART_SetConfig+0x1aa>
 8005442:	4b5b      	ldr	r3, [pc, #364]	; (80055b0 <UART_SetConfig+0x2cc>)
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005448:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800544c:	2b30      	cmp	r3, #48	; 0x30
 800544e:	d016      	beq.n	800547e <UART_SetConfig+0x19a>
 8005450:	2b30      	cmp	r3, #48	; 0x30
 8005452:	d818      	bhi.n	8005486 <UART_SetConfig+0x1a2>
 8005454:	2b20      	cmp	r3, #32
 8005456:	d00a      	beq.n	800546e <UART_SetConfig+0x18a>
 8005458:	2b20      	cmp	r3, #32
 800545a:	d814      	bhi.n	8005486 <UART_SetConfig+0x1a2>
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <UART_SetConfig+0x182>
 8005460:	2b10      	cmp	r3, #16
 8005462:	d008      	beq.n	8005476 <UART_SetConfig+0x192>
 8005464:	e00f      	b.n	8005486 <UART_SetConfig+0x1a2>
 8005466:	2300      	movs	r3, #0
 8005468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546c:	e0ad      	b.n	80055ca <UART_SetConfig+0x2e6>
 800546e:	2302      	movs	r3, #2
 8005470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005474:	e0a9      	b.n	80055ca <UART_SetConfig+0x2e6>
 8005476:	2304      	movs	r3, #4
 8005478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547c:	e0a5      	b.n	80055ca <UART_SetConfig+0x2e6>
 800547e:	2308      	movs	r3, #8
 8005480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005484:	e0a1      	b.n	80055ca <UART_SetConfig+0x2e6>
 8005486:	2310      	movs	r3, #16
 8005488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800548c:	e09d      	b.n	80055ca <UART_SetConfig+0x2e6>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a4a      	ldr	r2, [pc, #296]	; (80055bc <UART_SetConfig+0x2d8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d125      	bne.n	80054e4 <UART_SetConfig+0x200>
 8005498:	4b45      	ldr	r3, [pc, #276]	; (80055b0 <UART_SetConfig+0x2cc>)
 800549a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054a2:	2bc0      	cmp	r3, #192	; 0xc0
 80054a4:	d016      	beq.n	80054d4 <UART_SetConfig+0x1f0>
 80054a6:	2bc0      	cmp	r3, #192	; 0xc0
 80054a8:	d818      	bhi.n	80054dc <UART_SetConfig+0x1f8>
 80054aa:	2b80      	cmp	r3, #128	; 0x80
 80054ac:	d00a      	beq.n	80054c4 <UART_SetConfig+0x1e0>
 80054ae:	2b80      	cmp	r3, #128	; 0x80
 80054b0:	d814      	bhi.n	80054dc <UART_SetConfig+0x1f8>
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <UART_SetConfig+0x1d8>
 80054b6:	2b40      	cmp	r3, #64	; 0x40
 80054b8:	d008      	beq.n	80054cc <UART_SetConfig+0x1e8>
 80054ba:	e00f      	b.n	80054dc <UART_SetConfig+0x1f8>
 80054bc:	2300      	movs	r3, #0
 80054be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054c2:	e082      	b.n	80055ca <UART_SetConfig+0x2e6>
 80054c4:	2302      	movs	r3, #2
 80054c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ca:	e07e      	b.n	80055ca <UART_SetConfig+0x2e6>
 80054cc:	2304      	movs	r3, #4
 80054ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054d2:	e07a      	b.n	80055ca <UART_SetConfig+0x2e6>
 80054d4:	2308      	movs	r3, #8
 80054d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054da:	e076      	b.n	80055ca <UART_SetConfig+0x2e6>
 80054dc:	2310      	movs	r3, #16
 80054de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054e2:	e072      	b.n	80055ca <UART_SetConfig+0x2e6>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a35      	ldr	r2, [pc, #212]	; (80055c0 <UART_SetConfig+0x2dc>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d12a      	bne.n	8005544 <UART_SetConfig+0x260>
 80054ee:	4b30      	ldr	r3, [pc, #192]	; (80055b0 <UART_SetConfig+0x2cc>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054fc:	d01a      	beq.n	8005534 <UART_SetConfig+0x250>
 80054fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005502:	d81b      	bhi.n	800553c <UART_SetConfig+0x258>
 8005504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005508:	d00c      	beq.n	8005524 <UART_SetConfig+0x240>
 800550a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800550e:	d815      	bhi.n	800553c <UART_SetConfig+0x258>
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <UART_SetConfig+0x238>
 8005514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005518:	d008      	beq.n	800552c <UART_SetConfig+0x248>
 800551a:	e00f      	b.n	800553c <UART_SetConfig+0x258>
 800551c:	2300      	movs	r3, #0
 800551e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005522:	e052      	b.n	80055ca <UART_SetConfig+0x2e6>
 8005524:	2302      	movs	r3, #2
 8005526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800552a:	e04e      	b.n	80055ca <UART_SetConfig+0x2e6>
 800552c:	2304      	movs	r3, #4
 800552e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005532:	e04a      	b.n	80055ca <UART_SetConfig+0x2e6>
 8005534:	2308      	movs	r3, #8
 8005536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800553a:	e046      	b.n	80055ca <UART_SetConfig+0x2e6>
 800553c:	2310      	movs	r3, #16
 800553e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005542:	e042      	b.n	80055ca <UART_SetConfig+0x2e6>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a17      	ldr	r2, [pc, #92]	; (80055a8 <UART_SetConfig+0x2c4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d13a      	bne.n	80055c4 <UART_SetConfig+0x2e0>
 800554e:	4b18      	ldr	r3, [pc, #96]	; (80055b0 <UART_SetConfig+0x2cc>)
 8005550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005554:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005558:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800555c:	d01a      	beq.n	8005594 <UART_SetConfig+0x2b0>
 800555e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005562:	d81b      	bhi.n	800559c <UART_SetConfig+0x2b8>
 8005564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005568:	d00c      	beq.n	8005584 <UART_SetConfig+0x2a0>
 800556a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800556e:	d815      	bhi.n	800559c <UART_SetConfig+0x2b8>
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <UART_SetConfig+0x298>
 8005574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005578:	d008      	beq.n	800558c <UART_SetConfig+0x2a8>
 800557a:	e00f      	b.n	800559c <UART_SetConfig+0x2b8>
 800557c:	2300      	movs	r3, #0
 800557e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005582:	e022      	b.n	80055ca <UART_SetConfig+0x2e6>
 8005584:	2302      	movs	r3, #2
 8005586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800558a:	e01e      	b.n	80055ca <UART_SetConfig+0x2e6>
 800558c:	2304      	movs	r3, #4
 800558e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005592:	e01a      	b.n	80055ca <UART_SetConfig+0x2e6>
 8005594:	2308      	movs	r3, #8
 8005596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800559a:	e016      	b.n	80055ca <UART_SetConfig+0x2e6>
 800559c:	2310      	movs	r3, #16
 800559e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055a2:	e012      	b.n	80055ca <UART_SetConfig+0x2e6>
 80055a4:	efff69f3 	.word	0xefff69f3
 80055a8:	40008000 	.word	0x40008000
 80055ac:	40013800 	.word	0x40013800
 80055b0:	40021000 	.word	0x40021000
 80055b4:	40004400 	.word	0x40004400
 80055b8:	40004800 	.word	0x40004800
 80055bc:	40004c00 	.word	0x40004c00
 80055c0:	40005000 	.word	0x40005000
 80055c4:	2310      	movs	r3, #16
 80055c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a9f      	ldr	r2, [pc, #636]	; (800584c <UART_SetConfig+0x568>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d17a      	bne.n	80056ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d824      	bhi.n	8005626 <UART_SetConfig+0x342>
 80055dc:	a201      	add	r2, pc, #4	; (adr r2, 80055e4 <UART_SetConfig+0x300>)
 80055de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e2:	bf00      	nop
 80055e4:	08005609 	.word	0x08005609
 80055e8:	08005627 	.word	0x08005627
 80055ec:	08005611 	.word	0x08005611
 80055f0:	08005627 	.word	0x08005627
 80055f4:	08005617 	.word	0x08005617
 80055f8:	08005627 	.word	0x08005627
 80055fc:	08005627 	.word	0x08005627
 8005600:	08005627 	.word	0x08005627
 8005604:	0800561f 	.word	0x0800561f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005608:	f7fe f91e 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 800560c:	61f8      	str	r0, [r7, #28]
        break;
 800560e:	e010      	b.n	8005632 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005610:	4b8f      	ldr	r3, [pc, #572]	; (8005850 <UART_SetConfig+0x56c>)
 8005612:	61fb      	str	r3, [r7, #28]
        break;
 8005614:	e00d      	b.n	8005632 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005616:	f7fe f87f 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 800561a:	61f8      	str	r0, [r7, #28]
        break;
 800561c:	e009      	b.n	8005632 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800561e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005622:	61fb      	str	r3, [r7, #28]
        break;
 8005624:	e005      	b.n	8005632 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005630:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80fb 	beq.w	8005830 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	4613      	mov	r3, r2
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	4413      	add	r3, r2
 8005644:	69fa      	ldr	r2, [r7, #28]
 8005646:	429a      	cmp	r2, r3
 8005648:	d305      	bcc.n	8005656 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	429a      	cmp	r2, r3
 8005654:	d903      	bls.n	800565e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800565c:	e0e8      	b.n	8005830 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	2200      	movs	r2, #0
 8005662:	461c      	mov	r4, r3
 8005664:	4615      	mov	r5, r2
 8005666:	f04f 0200 	mov.w	r2, #0
 800566a:	f04f 0300 	mov.w	r3, #0
 800566e:	022b      	lsls	r3, r5, #8
 8005670:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005674:	0222      	lsls	r2, r4, #8
 8005676:	68f9      	ldr	r1, [r7, #12]
 8005678:	6849      	ldr	r1, [r1, #4]
 800567a:	0849      	lsrs	r1, r1, #1
 800567c:	2000      	movs	r0, #0
 800567e:	4688      	mov	r8, r1
 8005680:	4681      	mov	r9, r0
 8005682:	eb12 0a08 	adds.w	sl, r2, r8
 8005686:	eb43 0b09 	adc.w	fp, r3, r9
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	603b      	str	r3, [r7, #0]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005698:	4650      	mov	r0, sl
 800569a:	4659      	mov	r1, fp
 800569c:	f7fb fad4 	bl	8000c48 <__aeabi_uldivmod>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4613      	mov	r3, r2
 80056a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056ae:	d308      	bcc.n	80056c2 <UART_SetConfig+0x3de>
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056b6:	d204      	bcs.n	80056c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	60da      	str	r2, [r3, #12]
 80056c0:	e0b6      	b.n	8005830 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80056c8:	e0b2      	b.n	8005830 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d2:	d15e      	bne.n	8005792 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80056d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d828      	bhi.n	800572e <UART_SetConfig+0x44a>
 80056dc:	a201      	add	r2, pc, #4	; (adr r2, 80056e4 <UART_SetConfig+0x400>)
 80056de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e2:	bf00      	nop
 80056e4:	08005709 	.word	0x08005709
 80056e8:	08005711 	.word	0x08005711
 80056ec:	08005719 	.word	0x08005719
 80056f0:	0800572f 	.word	0x0800572f
 80056f4:	0800571f 	.word	0x0800571f
 80056f8:	0800572f 	.word	0x0800572f
 80056fc:	0800572f 	.word	0x0800572f
 8005700:	0800572f 	.word	0x0800572f
 8005704:	08005727 	.word	0x08005727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005708:	f7fe f89e 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 800570c:	61f8      	str	r0, [r7, #28]
        break;
 800570e:	e014      	b.n	800573a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005710:	f7fe f8b0 	bl	8003874 <HAL_RCC_GetPCLK2Freq>
 8005714:	61f8      	str	r0, [r7, #28]
        break;
 8005716:	e010      	b.n	800573a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005718:	4b4d      	ldr	r3, [pc, #308]	; (8005850 <UART_SetConfig+0x56c>)
 800571a:	61fb      	str	r3, [r7, #28]
        break;
 800571c:	e00d      	b.n	800573a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800571e:	f7fd fffb 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 8005722:	61f8      	str	r0, [r7, #28]
        break;
 8005724:	e009      	b.n	800573a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800572a:	61fb      	str	r3, [r7, #28]
        break;
 800572c:	e005      	b.n	800573a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005738:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d077      	beq.n	8005830 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	005a      	lsls	r2, r3, #1
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	085b      	lsrs	r3, r3, #1
 800574a:	441a      	add	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	fbb2 f3f3 	udiv	r3, r2, r3
 8005754:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	2b0f      	cmp	r3, #15
 800575a:	d916      	bls.n	800578a <UART_SetConfig+0x4a6>
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005762:	d212      	bcs.n	800578a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	b29b      	uxth	r3, r3
 8005768:	f023 030f 	bic.w	r3, r3, #15
 800576c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	085b      	lsrs	r3, r3, #1
 8005772:	b29b      	uxth	r3, r3
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	b29a      	uxth	r2, r3
 800577a:	8afb      	ldrh	r3, [r7, #22]
 800577c:	4313      	orrs	r3, r2
 800577e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	8afa      	ldrh	r2, [r7, #22]
 8005786:	60da      	str	r2, [r3, #12]
 8005788:	e052      	b.n	8005830 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005790:	e04e      	b.n	8005830 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005796:	2b08      	cmp	r3, #8
 8005798:	d827      	bhi.n	80057ea <UART_SetConfig+0x506>
 800579a:	a201      	add	r2, pc, #4	; (adr r2, 80057a0 <UART_SetConfig+0x4bc>)
 800579c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a0:	080057c5 	.word	0x080057c5
 80057a4:	080057cd 	.word	0x080057cd
 80057a8:	080057d5 	.word	0x080057d5
 80057ac:	080057eb 	.word	0x080057eb
 80057b0:	080057db 	.word	0x080057db
 80057b4:	080057eb 	.word	0x080057eb
 80057b8:	080057eb 	.word	0x080057eb
 80057bc:	080057eb 	.word	0x080057eb
 80057c0:	080057e3 	.word	0x080057e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057c4:	f7fe f840 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 80057c8:	61f8      	str	r0, [r7, #28]
        break;
 80057ca:	e014      	b.n	80057f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057cc:	f7fe f852 	bl	8003874 <HAL_RCC_GetPCLK2Freq>
 80057d0:	61f8      	str	r0, [r7, #28]
        break;
 80057d2:	e010      	b.n	80057f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057d4:	4b1e      	ldr	r3, [pc, #120]	; (8005850 <UART_SetConfig+0x56c>)
 80057d6:	61fb      	str	r3, [r7, #28]
        break;
 80057d8:	e00d      	b.n	80057f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057da:	f7fd ff9d 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 80057de:	61f8      	str	r0, [r7, #28]
        break;
 80057e0:	e009      	b.n	80057f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057e6:	61fb      	str	r3, [r7, #28]
        break;
 80057e8:	e005      	b.n	80057f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057f4:	bf00      	nop
    }

    if (pclk != 0U)
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d019      	beq.n	8005830 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	085a      	lsrs	r2, r3, #1
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	441a      	add	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	fbb2 f3f3 	udiv	r3, r2, r3
 800580e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	2b0f      	cmp	r3, #15
 8005814:	d909      	bls.n	800582a <UART_SetConfig+0x546>
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800581c:	d205      	bcs.n	800582a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	b29a      	uxth	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60da      	str	r2, [r3, #12]
 8005828:	e002      	b.n	8005830 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800583c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005840:	4618      	mov	r0, r3
 8005842:	3728      	adds	r7, #40	; 0x28
 8005844:	46bd      	mov	sp, r7
 8005846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800584a:	bf00      	nop
 800584c:	40008000 	.word	0x40008000
 8005850:	00f42400 	.word	0x00f42400

08005854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	f003 0308 	and.w	r3, r3, #8
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	f003 0304 	and.w	r3, r3, #4
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	f003 0310 	and.w	r3, r3, #16
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	f003 0320 	and.w	r3, r3, #32
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d01a      	beq.n	800596a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005952:	d10a      	bne.n	800596a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	605a      	str	r2, [r3, #4]
  }
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b098      	sub	sp, #96	; 0x60
 800599c:	af02      	add	r7, sp, #8
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059a8:	f7fc f8ca 	bl	8001b40 <HAL_GetTick>
 80059ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d12e      	bne.n	8005a1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059c4:	2200      	movs	r2, #0
 80059c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f88c 	bl	8005ae8 <UART_WaitOnFlagUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d021      	beq.n	8005a1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059de:	e853 3f00 	ldrex	r3, [r3]
 80059e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ea:	653b      	str	r3, [r7, #80]	; 0x50
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	461a      	mov	r2, r3
 80059f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059f4:	647b      	str	r3, [r7, #68]	; 0x44
 80059f6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059fc:	e841 2300 	strex	r3, r2, [r1]
 8005a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e6      	bne.n	80059d6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e062      	b.n	8005ae0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d149      	bne.n	8005abc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a30:	2200      	movs	r2, #0
 8005a32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f856 	bl	8005ae8 <UART_WaitOnFlagUntilTimeout>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d03c      	beq.n	8005abc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	623b      	str	r3, [r7, #32]
   return(result);
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a60:	633b      	str	r3, [r7, #48]	; 0x30
 8005a62:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e6      	bne.n	8005a42 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3308      	adds	r3, #8
 8005a7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	e853 3f00 	ldrex	r3, [r3]
 8005a82:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0301 	bic.w	r3, r3, #1
 8005a8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3308      	adds	r3, #8
 8005a92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a94:	61fa      	str	r2, [r7, #28]
 8005a96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	69b9      	ldr	r1, [r7, #24]
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e5      	bne.n	8005a74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e011      	b.n	8005ae0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3758      	adds	r7, #88	; 0x58
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	603b      	str	r3, [r7, #0]
 8005af4:	4613      	mov	r3, r2
 8005af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af8:	e049      	b.n	8005b8e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b00:	d045      	beq.n	8005b8e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b02:	f7fc f81d 	bl	8001b40 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d302      	bcc.n	8005b18 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e048      	b.n	8005bae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0304 	and.w	r3, r3, #4
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d031      	beq.n	8005b8e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	f003 0308 	and.w	r3, r3, #8
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d110      	bne.n	8005b5a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2208      	movs	r2, #8
 8005b3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f838 	bl	8005bb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2208      	movs	r2, #8
 8005b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e029      	b.n	8005bae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b68:	d111      	bne.n	8005b8e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 f81e 	bl	8005bb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e00f      	b.n	8005bae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69da      	ldr	r2, [r3, #28]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	4013      	ands	r3, r2
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	bf0c      	ite	eq
 8005b9e:	2301      	moveq	r3, #1
 8005ba0:	2300      	movne	r3, #0
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	79fb      	ldrb	r3, [r7, #7]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d0a6      	beq.n	8005afa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b095      	sub	sp, #84	; 0x54
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc6:	e853 3f00 	ldrex	r3, [r3]
 8005bca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bdc:	643b      	str	r3, [r7, #64]	; 0x40
 8005bde:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005be2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e6      	bne.n	8005bbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f023 0301 	bic.w	r3, r3, #1
 8005c06:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3308      	adds	r3, #8
 8005c0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c18:	e841 2300 	strex	r3, r2, [r1]
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1e5      	bne.n	8005bf0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d118      	bne.n	8005c5e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	f023 0310 	bic.w	r3, r3, #16
 8005c40:	647b      	str	r3, [r7, #68]	; 0x44
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c4a:	61bb      	str	r3, [r7, #24]
 8005c4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	6979      	ldr	r1, [r7, #20]
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	613b      	str	r3, [r7, #16]
   return(result);
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1e6      	bne.n	8005c2c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c72:	bf00      	nop
 8005c74:	3754      	adds	r7, #84	; 0x54
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <__cvt>:
 8005c7e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c82:	ec55 4b10 	vmov	r4, r5, d0
 8005c86:	2d00      	cmp	r5, #0
 8005c88:	460e      	mov	r6, r1
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	462b      	mov	r3, r5
 8005c8e:	bfbb      	ittet	lt
 8005c90:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c94:	461d      	movlt	r5, r3
 8005c96:	2300      	movge	r3, #0
 8005c98:	232d      	movlt	r3, #45	; 0x2d
 8005c9a:	700b      	strb	r3, [r1, #0]
 8005c9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c9e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ca2:	4691      	mov	r9, r2
 8005ca4:	f023 0820 	bic.w	r8, r3, #32
 8005ca8:	bfbc      	itt	lt
 8005caa:	4622      	movlt	r2, r4
 8005cac:	4614      	movlt	r4, r2
 8005cae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cb2:	d005      	beq.n	8005cc0 <__cvt+0x42>
 8005cb4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005cb8:	d100      	bne.n	8005cbc <__cvt+0x3e>
 8005cba:	3601      	adds	r6, #1
 8005cbc:	2102      	movs	r1, #2
 8005cbe:	e000      	b.n	8005cc2 <__cvt+0x44>
 8005cc0:	2103      	movs	r1, #3
 8005cc2:	ab03      	add	r3, sp, #12
 8005cc4:	9301      	str	r3, [sp, #4]
 8005cc6:	ab02      	add	r3, sp, #8
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	ec45 4b10 	vmov	d0, r4, r5
 8005cce:	4653      	mov	r3, sl
 8005cd0:	4632      	mov	r2, r6
 8005cd2:	f000 fe81 	bl	80069d8 <_dtoa_r>
 8005cd6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005cda:	4607      	mov	r7, r0
 8005cdc:	d102      	bne.n	8005ce4 <__cvt+0x66>
 8005cde:	f019 0f01 	tst.w	r9, #1
 8005ce2:	d022      	beq.n	8005d2a <__cvt+0xac>
 8005ce4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ce8:	eb07 0906 	add.w	r9, r7, r6
 8005cec:	d110      	bne.n	8005d10 <__cvt+0x92>
 8005cee:	783b      	ldrb	r3, [r7, #0]
 8005cf0:	2b30      	cmp	r3, #48	; 0x30
 8005cf2:	d10a      	bne.n	8005d0a <__cvt+0x8c>
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	4629      	mov	r1, r5
 8005cfc:	f7fa fee4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d00:	b918      	cbnz	r0, 8005d0a <__cvt+0x8c>
 8005d02:	f1c6 0601 	rsb	r6, r6, #1
 8005d06:	f8ca 6000 	str.w	r6, [sl]
 8005d0a:	f8da 3000 	ldr.w	r3, [sl]
 8005d0e:	4499      	add	r9, r3
 8005d10:	2200      	movs	r2, #0
 8005d12:	2300      	movs	r3, #0
 8005d14:	4620      	mov	r0, r4
 8005d16:	4629      	mov	r1, r5
 8005d18:	f7fa fed6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d1c:	b108      	cbz	r0, 8005d22 <__cvt+0xa4>
 8005d1e:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d22:	2230      	movs	r2, #48	; 0x30
 8005d24:	9b03      	ldr	r3, [sp, #12]
 8005d26:	454b      	cmp	r3, r9
 8005d28:	d307      	bcc.n	8005d3a <__cvt+0xbc>
 8005d2a:	9b03      	ldr	r3, [sp, #12]
 8005d2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d2e:	1bdb      	subs	r3, r3, r7
 8005d30:	4638      	mov	r0, r7
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	b004      	add	sp, #16
 8005d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3a:	1c59      	adds	r1, r3, #1
 8005d3c:	9103      	str	r1, [sp, #12]
 8005d3e:	701a      	strb	r2, [r3, #0]
 8005d40:	e7f0      	b.n	8005d24 <__cvt+0xa6>

08005d42 <__exponent>:
 8005d42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d44:	4603      	mov	r3, r0
 8005d46:	2900      	cmp	r1, #0
 8005d48:	bfb8      	it	lt
 8005d4a:	4249      	neglt	r1, r1
 8005d4c:	f803 2b02 	strb.w	r2, [r3], #2
 8005d50:	bfb4      	ite	lt
 8005d52:	222d      	movlt	r2, #45	; 0x2d
 8005d54:	222b      	movge	r2, #43	; 0x2b
 8005d56:	2909      	cmp	r1, #9
 8005d58:	7042      	strb	r2, [r0, #1]
 8005d5a:	dd2a      	ble.n	8005db2 <__exponent+0x70>
 8005d5c:	f10d 0207 	add.w	r2, sp, #7
 8005d60:	4617      	mov	r7, r2
 8005d62:	260a      	movs	r6, #10
 8005d64:	4694      	mov	ip, r2
 8005d66:	fb91 f5f6 	sdiv	r5, r1, r6
 8005d6a:	fb06 1415 	mls	r4, r6, r5, r1
 8005d6e:	3430      	adds	r4, #48	; 0x30
 8005d70:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005d74:	460c      	mov	r4, r1
 8005d76:	2c63      	cmp	r4, #99	; 0x63
 8005d78:	f102 32ff 	add.w	r2, r2, #4294967295
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	dcf1      	bgt.n	8005d64 <__exponent+0x22>
 8005d80:	3130      	adds	r1, #48	; 0x30
 8005d82:	f1ac 0402 	sub.w	r4, ip, #2
 8005d86:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005d8a:	1c41      	adds	r1, r0, #1
 8005d8c:	4622      	mov	r2, r4
 8005d8e:	42ba      	cmp	r2, r7
 8005d90:	d30a      	bcc.n	8005da8 <__exponent+0x66>
 8005d92:	f10d 0209 	add.w	r2, sp, #9
 8005d96:	eba2 020c 	sub.w	r2, r2, ip
 8005d9a:	42bc      	cmp	r4, r7
 8005d9c:	bf88      	it	hi
 8005d9e:	2200      	movhi	r2, #0
 8005da0:	4413      	add	r3, r2
 8005da2:	1a18      	subs	r0, r3, r0
 8005da4:	b003      	add	sp, #12
 8005da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005da8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005dac:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005db0:	e7ed      	b.n	8005d8e <__exponent+0x4c>
 8005db2:	2330      	movs	r3, #48	; 0x30
 8005db4:	3130      	adds	r1, #48	; 0x30
 8005db6:	7083      	strb	r3, [r0, #2]
 8005db8:	70c1      	strb	r1, [r0, #3]
 8005dba:	1d03      	adds	r3, r0, #4
 8005dbc:	e7f1      	b.n	8005da2 <__exponent+0x60>
	...

08005dc0 <_printf_float>:
 8005dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc4:	ed2d 8b02 	vpush	{d8}
 8005dc8:	b08d      	sub	sp, #52	; 0x34
 8005dca:	460c      	mov	r4, r1
 8005dcc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005dd0:	4616      	mov	r6, r2
 8005dd2:	461f      	mov	r7, r3
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	f000 fcff 	bl	80067d8 <_localeconv_r>
 8005dda:	f8d0 a000 	ldr.w	sl, [r0]
 8005dde:	4650      	mov	r0, sl
 8005de0:	f7fa fa46 	bl	8000270 <strlen>
 8005de4:	2300      	movs	r3, #0
 8005de6:	930a      	str	r3, [sp, #40]	; 0x28
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	9305      	str	r3, [sp, #20]
 8005dec:	f8d8 3000 	ldr.w	r3, [r8]
 8005df0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005df4:	3307      	adds	r3, #7
 8005df6:	f023 0307 	bic.w	r3, r3, #7
 8005dfa:	f103 0208 	add.w	r2, r3, #8
 8005dfe:	f8c8 2000 	str.w	r2, [r8]
 8005e02:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e0a:	9307      	str	r3, [sp, #28]
 8005e0c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e10:	ee08 0a10 	vmov	s16, r0
 8005e14:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005e18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e1c:	4b9e      	ldr	r3, [pc, #632]	; (8006098 <_printf_float+0x2d8>)
 8005e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e22:	f7fa fe83 	bl	8000b2c <__aeabi_dcmpun>
 8005e26:	bb88      	cbnz	r0, 8005e8c <_printf_float+0xcc>
 8005e28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e2c:	4b9a      	ldr	r3, [pc, #616]	; (8006098 <_printf_float+0x2d8>)
 8005e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e32:	f7fa fe5d 	bl	8000af0 <__aeabi_dcmple>
 8005e36:	bb48      	cbnz	r0, 8005e8c <_printf_float+0xcc>
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	4640      	mov	r0, r8
 8005e3e:	4649      	mov	r1, r9
 8005e40:	f7fa fe4c 	bl	8000adc <__aeabi_dcmplt>
 8005e44:	b110      	cbz	r0, 8005e4c <_printf_float+0x8c>
 8005e46:	232d      	movs	r3, #45	; 0x2d
 8005e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e4c:	4a93      	ldr	r2, [pc, #588]	; (800609c <_printf_float+0x2dc>)
 8005e4e:	4b94      	ldr	r3, [pc, #592]	; (80060a0 <_printf_float+0x2e0>)
 8005e50:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005e54:	bf94      	ite	ls
 8005e56:	4690      	movls	r8, r2
 8005e58:	4698      	movhi	r8, r3
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	6123      	str	r3, [r4, #16]
 8005e5e:	9b05      	ldr	r3, [sp, #20]
 8005e60:	f023 0304 	bic.w	r3, r3, #4
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	f04f 0900 	mov.w	r9, #0
 8005e6a:	9700      	str	r7, [sp, #0]
 8005e6c:	4633      	mov	r3, r6
 8005e6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e70:	4621      	mov	r1, r4
 8005e72:	4628      	mov	r0, r5
 8005e74:	f000 f9da 	bl	800622c <_printf_common>
 8005e78:	3001      	adds	r0, #1
 8005e7a:	f040 8090 	bne.w	8005f9e <_printf_float+0x1de>
 8005e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e82:	b00d      	add	sp, #52	; 0x34
 8005e84:	ecbd 8b02 	vpop	{d8}
 8005e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e8c:	4642      	mov	r2, r8
 8005e8e:	464b      	mov	r3, r9
 8005e90:	4640      	mov	r0, r8
 8005e92:	4649      	mov	r1, r9
 8005e94:	f7fa fe4a 	bl	8000b2c <__aeabi_dcmpun>
 8005e98:	b140      	cbz	r0, 8005eac <_printf_float+0xec>
 8005e9a:	464b      	mov	r3, r9
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	bfbc      	itt	lt
 8005ea0:	232d      	movlt	r3, #45	; 0x2d
 8005ea2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ea6:	4a7f      	ldr	r2, [pc, #508]	; (80060a4 <_printf_float+0x2e4>)
 8005ea8:	4b7f      	ldr	r3, [pc, #508]	; (80060a8 <_printf_float+0x2e8>)
 8005eaa:	e7d1      	b.n	8005e50 <_printf_float+0x90>
 8005eac:	6863      	ldr	r3, [r4, #4]
 8005eae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005eb2:	9206      	str	r2, [sp, #24]
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	d13f      	bne.n	8005f38 <_printf_float+0x178>
 8005eb8:	2306      	movs	r3, #6
 8005eba:	6063      	str	r3, [r4, #4]
 8005ebc:	9b05      	ldr	r3, [sp, #20]
 8005ebe:	6861      	ldr	r1, [r4, #4]
 8005ec0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	9303      	str	r3, [sp, #12]
 8005ec8:	ab0a      	add	r3, sp, #40	; 0x28
 8005eca:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005ece:	ab09      	add	r3, sp, #36	; 0x24
 8005ed0:	ec49 8b10 	vmov	d0, r8, r9
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	6022      	str	r2, [r4, #0]
 8005ed8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005edc:	4628      	mov	r0, r5
 8005ede:	f7ff fece 	bl	8005c7e <__cvt>
 8005ee2:	9b06      	ldr	r3, [sp, #24]
 8005ee4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ee6:	2b47      	cmp	r3, #71	; 0x47
 8005ee8:	4680      	mov	r8, r0
 8005eea:	d108      	bne.n	8005efe <_printf_float+0x13e>
 8005eec:	1cc8      	adds	r0, r1, #3
 8005eee:	db02      	blt.n	8005ef6 <_printf_float+0x136>
 8005ef0:	6863      	ldr	r3, [r4, #4]
 8005ef2:	4299      	cmp	r1, r3
 8005ef4:	dd41      	ble.n	8005f7a <_printf_float+0x1ba>
 8005ef6:	f1ab 0302 	sub.w	r3, fp, #2
 8005efa:	fa5f fb83 	uxtb.w	fp, r3
 8005efe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f02:	d820      	bhi.n	8005f46 <_printf_float+0x186>
 8005f04:	3901      	subs	r1, #1
 8005f06:	465a      	mov	r2, fp
 8005f08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f0c:	9109      	str	r1, [sp, #36]	; 0x24
 8005f0e:	f7ff ff18 	bl	8005d42 <__exponent>
 8005f12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f14:	1813      	adds	r3, r2, r0
 8005f16:	2a01      	cmp	r2, #1
 8005f18:	4681      	mov	r9, r0
 8005f1a:	6123      	str	r3, [r4, #16]
 8005f1c:	dc02      	bgt.n	8005f24 <_printf_float+0x164>
 8005f1e:	6822      	ldr	r2, [r4, #0]
 8005f20:	07d2      	lsls	r2, r2, #31
 8005f22:	d501      	bpl.n	8005f28 <_printf_float+0x168>
 8005f24:	3301      	adds	r3, #1
 8005f26:	6123      	str	r3, [r4, #16]
 8005f28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d09c      	beq.n	8005e6a <_printf_float+0xaa>
 8005f30:	232d      	movs	r3, #45	; 0x2d
 8005f32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f36:	e798      	b.n	8005e6a <_printf_float+0xaa>
 8005f38:	9a06      	ldr	r2, [sp, #24]
 8005f3a:	2a47      	cmp	r2, #71	; 0x47
 8005f3c:	d1be      	bne.n	8005ebc <_printf_float+0xfc>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1bc      	bne.n	8005ebc <_printf_float+0xfc>
 8005f42:	2301      	movs	r3, #1
 8005f44:	e7b9      	b.n	8005eba <_printf_float+0xfa>
 8005f46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005f4a:	d118      	bne.n	8005f7e <_printf_float+0x1be>
 8005f4c:	2900      	cmp	r1, #0
 8005f4e:	6863      	ldr	r3, [r4, #4]
 8005f50:	dd0b      	ble.n	8005f6a <_printf_float+0x1aa>
 8005f52:	6121      	str	r1, [r4, #16]
 8005f54:	b913      	cbnz	r3, 8005f5c <_printf_float+0x19c>
 8005f56:	6822      	ldr	r2, [r4, #0]
 8005f58:	07d0      	lsls	r0, r2, #31
 8005f5a:	d502      	bpl.n	8005f62 <_printf_float+0x1a2>
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	440b      	add	r3, r1
 8005f60:	6123      	str	r3, [r4, #16]
 8005f62:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f64:	f04f 0900 	mov.w	r9, #0
 8005f68:	e7de      	b.n	8005f28 <_printf_float+0x168>
 8005f6a:	b913      	cbnz	r3, 8005f72 <_printf_float+0x1b2>
 8005f6c:	6822      	ldr	r2, [r4, #0]
 8005f6e:	07d2      	lsls	r2, r2, #31
 8005f70:	d501      	bpl.n	8005f76 <_printf_float+0x1b6>
 8005f72:	3302      	adds	r3, #2
 8005f74:	e7f4      	b.n	8005f60 <_printf_float+0x1a0>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e7f2      	b.n	8005f60 <_printf_float+0x1a0>
 8005f7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f80:	4299      	cmp	r1, r3
 8005f82:	db05      	blt.n	8005f90 <_printf_float+0x1d0>
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	6121      	str	r1, [r4, #16]
 8005f88:	07d8      	lsls	r0, r3, #31
 8005f8a:	d5ea      	bpl.n	8005f62 <_printf_float+0x1a2>
 8005f8c:	1c4b      	adds	r3, r1, #1
 8005f8e:	e7e7      	b.n	8005f60 <_printf_float+0x1a0>
 8005f90:	2900      	cmp	r1, #0
 8005f92:	bfd4      	ite	le
 8005f94:	f1c1 0202 	rsble	r2, r1, #2
 8005f98:	2201      	movgt	r2, #1
 8005f9a:	4413      	add	r3, r2
 8005f9c:	e7e0      	b.n	8005f60 <_printf_float+0x1a0>
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	055a      	lsls	r2, r3, #21
 8005fa2:	d407      	bmi.n	8005fb4 <_printf_float+0x1f4>
 8005fa4:	6923      	ldr	r3, [r4, #16]
 8005fa6:	4642      	mov	r2, r8
 8005fa8:	4631      	mov	r1, r6
 8005faa:	4628      	mov	r0, r5
 8005fac:	47b8      	blx	r7
 8005fae:	3001      	adds	r0, #1
 8005fb0:	d12c      	bne.n	800600c <_printf_float+0x24c>
 8005fb2:	e764      	b.n	8005e7e <_printf_float+0xbe>
 8005fb4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fb8:	f240 80e0 	bls.w	800617c <_printf_float+0x3bc>
 8005fbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f7fa fd80 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d034      	beq.n	8006036 <_printf_float+0x276>
 8005fcc:	4a37      	ldr	r2, [pc, #220]	; (80060ac <_printf_float+0x2ec>)
 8005fce:	2301      	movs	r3, #1
 8005fd0:	4631      	mov	r1, r6
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	47b8      	blx	r7
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	f43f af51 	beq.w	8005e7e <_printf_float+0xbe>
 8005fdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	db02      	blt.n	8005fea <_printf_float+0x22a>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	07d8      	lsls	r0, r3, #31
 8005fe8:	d510      	bpl.n	800600c <_printf_float+0x24c>
 8005fea:	ee18 3a10 	vmov	r3, s16
 8005fee:	4652      	mov	r2, sl
 8005ff0:	4631      	mov	r1, r6
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	47b8      	blx	r7
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	f43f af41 	beq.w	8005e7e <_printf_float+0xbe>
 8005ffc:	f04f 0800 	mov.w	r8, #0
 8006000:	f104 091a 	add.w	r9, r4, #26
 8006004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006006:	3b01      	subs	r3, #1
 8006008:	4543      	cmp	r3, r8
 800600a:	dc09      	bgt.n	8006020 <_printf_float+0x260>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	079b      	lsls	r3, r3, #30
 8006010:	f100 8107 	bmi.w	8006222 <_printf_float+0x462>
 8006014:	68e0      	ldr	r0, [r4, #12]
 8006016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006018:	4298      	cmp	r0, r3
 800601a:	bfb8      	it	lt
 800601c:	4618      	movlt	r0, r3
 800601e:	e730      	b.n	8005e82 <_printf_float+0xc2>
 8006020:	2301      	movs	r3, #1
 8006022:	464a      	mov	r2, r9
 8006024:	4631      	mov	r1, r6
 8006026:	4628      	mov	r0, r5
 8006028:	47b8      	blx	r7
 800602a:	3001      	adds	r0, #1
 800602c:	f43f af27 	beq.w	8005e7e <_printf_float+0xbe>
 8006030:	f108 0801 	add.w	r8, r8, #1
 8006034:	e7e6      	b.n	8006004 <_printf_float+0x244>
 8006036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006038:	2b00      	cmp	r3, #0
 800603a:	dc39      	bgt.n	80060b0 <_printf_float+0x2f0>
 800603c:	4a1b      	ldr	r2, [pc, #108]	; (80060ac <_printf_float+0x2ec>)
 800603e:	2301      	movs	r3, #1
 8006040:	4631      	mov	r1, r6
 8006042:	4628      	mov	r0, r5
 8006044:	47b8      	blx	r7
 8006046:	3001      	adds	r0, #1
 8006048:	f43f af19 	beq.w	8005e7e <_printf_float+0xbe>
 800604c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006050:	4313      	orrs	r3, r2
 8006052:	d102      	bne.n	800605a <_printf_float+0x29a>
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	07d9      	lsls	r1, r3, #31
 8006058:	d5d8      	bpl.n	800600c <_printf_float+0x24c>
 800605a:	ee18 3a10 	vmov	r3, s16
 800605e:	4652      	mov	r2, sl
 8006060:	4631      	mov	r1, r6
 8006062:	4628      	mov	r0, r5
 8006064:	47b8      	blx	r7
 8006066:	3001      	adds	r0, #1
 8006068:	f43f af09 	beq.w	8005e7e <_printf_float+0xbe>
 800606c:	f04f 0900 	mov.w	r9, #0
 8006070:	f104 0a1a 	add.w	sl, r4, #26
 8006074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006076:	425b      	negs	r3, r3
 8006078:	454b      	cmp	r3, r9
 800607a:	dc01      	bgt.n	8006080 <_printf_float+0x2c0>
 800607c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800607e:	e792      	b.n	8005fa6 <_printf_float+0x1e6>
 8006080:	2301      	movs	r3, #1
 8006082:	4652      	mov	r2, sl
 8006084:	4631      	mov	r1, r6
 8006086:	4628      	mov	r0, r5
 8006088:	47b8      	blx	r7
 800608a:	3001      	adds	r0, #1
 800608c:	f43f aef7 	beq.w	8005e7e <_printf_float+0xbe>
 8006090:	f109 0901 	add.w	r9, r9, #1
 8006094:	e7ee      	b.n	8006074 <_printf_float+0x2b4>
 8006096:	bf00      	nop
 8006098:	7fefffff 	.word	0x7fefffff
 800609c:	08008a58 	.word	0x08008a58
 80060a0:	08008a5c 	.word	0x08008a5c
 80060a4:	08008a60 	.word	0x08008a60
 80060a8:	08008a64 	.word	0x08008a64
 80060ac:	08008a68 	.word	0x08008a68
 80060b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060b4:	429a      	cmp	r2, r3
 80060b6:	bfa8      	it	ge
 80060b8:	461a      	movge	r2, r3
 80060ba:	2a00      	cmp	r2, #0
 80060bc:	4691      	mov	r9, r2
 80060be:	dc37      	bgt.n	8006130 <_printf_float+0x370>
 80060c0:	f04f 0b00 	mov.w	fp, #0
 80060c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060c8:	f104 021a 	add.w	r2, r4, #26
 80060cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060ce:	9305      	str	r3, [sp, #20]
 80060d0:	eba3 0309 	sub.w	r3, r3, r9
 80060d4:	455b      	cmp	r3, fp
 80060d6:	dc33      	bgt.n	8006140 <_printf_float+0x380>
 80060d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060dc:	429a      	cmp	r2, r3
 80060de:	db3b      	blt.n	8006158 <_printf_float+0x398>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	07da      	lsls	r2, r3, #31
 80060e4:	d438      	bmi.n	8006158 <_printf_float+0x398>
 80060e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80060ea:	eba2 0903 	sub.w	r9, r2, r3
 80060ee:	9b05      	ldr	r3, [sp, #20]
 80060f0:	1ad2      	subs	r2, r2, r3
 80060f2:	4591      	cmp	r9, r2
 80060f4:	bfa8      	it	ge
 80060f6:	4691      	movge	r9, r2
 80060f8:	f1b9 0f00 	cmp.w	r9, #0
 80060fc:	dc35      	bgt.n	800616a <_printf_float+0x3aa>
 80060fe:	f04f 0800 	mov.w	r8, #0
 8006102:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006106:	f104 0a1a 	add.w	sl, r4, #26
 800610a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800610e:	1a9b      	subs	r3, r3, r2
 8006110:	eba3 0309 	sub.w	r3, r3, r9
 8006114:	4543      	cmp	r3, r8
 8006116:	f77f af79 	ble.w	800600c <_printf_float+0x24c>
 800611a:	2301      	movs	r3, #1
 800611c:	4652      	mov	r2, sl
 800611e:	4631      	mov	r1, r6
 8006120:	4628      	mov	r0, r5
 8006122:	47b8      	blx	r7
 8006124:	3001      	adds	r0, #1
 8006126:	f43f aeaa 	beq.w	8005e7e <_printf_float+0xbe>
 800612a:	f108 0801 	add.w	r8, r8, #1
 800612e:	e7ec      	b.n	800610a <_printf_float+0x34a>
 8006130:	4613      	mov	r3, r2
 8006132:	4631      	mov	r1, r6
 8006134:	4642      	mov	r2, r8
 8006136:	4628      	mov	r0, r5
 8006138:	47b8      	blx	r7
 800613a:	3001      	adds	r0, #1
 800613c:	d1c0      	bne.n	80060c0 <_printf_float+0x300>
 800613e:	e69e      	b.n	8005e7e <_printf_float+0xbe>
 8006140:	2301      	movs	r3, #1
 8006142:	4631      	mov	r1, r6
 8006144:	4628      	mov	r0, r5
 8006146:	9205      	str	r2, [sp, #20]
 8006148:	47b8      	blx	r7
 800614a:	3001      	adds	r0, #1
 800614c:	f43f ae97 	beq.w	8005e7e <_printf_float+0xbe>
 8006150:	9a05      	ldr	r2, [sp, #20]
 8006152:	f10b 0b01 	add.w	fp, fp, #1
 8006156:	e7b9      	b.n	80060cc <_printf_float+0x30c>
 8006158:	ee18 3a10 	vmov	r3, s16
 800615c:	4652      	mov	r2, sl
 800615e:	4631      	mov	r1, r6
 8006160:	4628      	mov	r0, r5
 8006162:	47b8      	blx	r7
 8006164:	3001      	adds	r0, #1
 8006166:	d1be      	bne.n	80060e6 <_printf_float+0x326>
 8006168:	e689      	b.n	8005e7e <_printf_float+0xbe>
 800616a:	9a05      	ldr	r2, [sp, #20]
 800616c:	464b      	mov	r3, r9
 800616e:	4442      	add	r2, r8
 8006170:	4631      	mov	r1, r6
 8006172:	4628      	mov	r0, r5
 8006174:	47b8      	blx	r7
 8006176:	3001      	adds	r0, #1
 8006178:	d1c1      	bne.n	80060fe <_printf_float+0x33e>
 800617a:	e680      	b.n	8005e7e <_printf_float+0xbe>
 800617c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800617e:	2a01      	cmp	r2, #1
 8006180:	dc01      	bgt.n	8006186 <_printf_float+0x3c6>
 8006182:	07db      	lsls	r3, r3, #31
 8006184:	d53a      	bpl.n	80061fc <_printf_float+0x43c>
 8006186:	2301      	movs	r3, #1
 8006188:	4642      	mov	r2, r8
 800618a:	4631      	mov	r1, r6
 800618c:	4628      	mov	r0, r5
 800618e:	47b8      	blx	r7
 8006190:	3001      	adds	r0, #1
 8006192:	f43f ae74 	beq.w	8005e7e <_printf_float+0xbe>
 8006196:	ee18 3a10 	vmov	r3, s16
 800619a:	4652      	mov	r2, sl
 800619c:	4631      	mov	r1, r6
 800619e:	4628      	mov	r0, r5
 80061a0:	47b8      	blx	r7
 80061a2:	3001      	adds	r0, #1
 80061a4:	f43f ae6b 	beq.w	8005e7e <_printf_float+0xbe>
 80061a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061ac:	2200      	movs	r2, #0
 80061ae:	2300      	movs	r3, #0
 80061b0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80061b4:	f7fa fc88 	bl	8000ac8 <__aeabi_dcmpeq>
 80061b8:	b9d8      	cbnz	r0, 80061f2 <_printf_float+0x432>
 80061ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 80061be:	f108 0201 	add.w	r2, r8, #1
 80061c2:	4631      	mov	r1, r6
 80061c4:	4628      	mov	r0, r5
 80061c6:	47b8      	blx	r7
 80061c8:	3001      	adds	r0, #1
 80061ca:	d10e      	bne.n	80061ea <_printf_float+0x42a>
 80061cc:	e657      	b.n	8005e7e <_printf_float+0xbe>
 80061ce:	2301      	movs	r3, #1
 80061d0:	4652      	mov	r2, sl
 80061d2:	4631      	mov	r1, r6
 80061d4:	4628      	mov	r0, r5
 80061d6:	47b8      	blx	r7
 80061d8:	3001      	adds	r0, #1
 80061da:	f43f ae50 	beq.w	8005e7e <_printf_float+0xbe>
 80061de:	f108 0801 	add.w	r8, r8, #1
 80061e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061e4:	3b01      	subs	r3, #1
 80061e6:	4543      	cmp	r3, r8
 80061e8:	dcf1      	bgt.n	80061ce <_printf_float+0x40e>
 80061ea:	464b      	mov	r3, r9
 80061ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061f0:	e6da      	b.n	8005fa8 <_printf_float+0x1e8>
 80061f2:	f04f 0800 	mov.w	r8, #0
 80061f6:	f104 0a1a 	add.w	sl, r4, #26
 80061fa:	e7f2      	b.n	80061e2 <_printf_float+0x422>
 80061fc:	2301      	movs	r3, #1
 80061fe:	4642      	mov	r2, r8
 8006200:	e7df      	b.n	80061c2 <_printf_float+0x402>
 8006202:	2301      	movs	r3, #1
 8006204:	464a      	mov	r2, r9
 8006206:	4631      	mov	r1, r6
 8006208:	4628      	mov	r0, r5
 800620a:	47b8      	blx	r7
 800620c:	3001      	adds	r0, #1
 800620e:	f43f ae36 	beq.w	8005e7e <_printf_float+0xbe>
 8006212:	f108 0801 	add.w	r8, r8, #1
 8006216:	68e3      	ldr	r3, [r4, #12]
 8006218:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800621a:	1a5b      	subs	r3, r3, r1
 800621c:	4543      	cmp	r3, r8
 800621e:	dcf0      	bgt.n	8006202 <_printf_float+0x442>
 8006220:	e6f8      	b.n	8006014 <_printf_float+0x254>
 8006222:	f04f 0800 	mov.w	r8, #0
 8006226:	f104 0919 	add.w	r9, r4, #25
 800622a:	e7f4      	b.n	8006216 <_printf_float+0x456>

0800622c <_printf_common>:
 800622c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006230:	4616      	mov	r6, r2
 8006232:	4699      	mov	r9, r3
 8006234:	688a      	ldr	r2, [r1, #8]
 8006236:	690b      	ldr	r3, [r1, #16]
 8006238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800623c:	4293      	cmp	r3, r2
 800623e:	bfb8      	it	lt
 8006240:	4613      	movlt	r3, r2
 8006242:	6033      	str	r3, [r6, #0]
 8006244:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006248:	4607      	mov	r7, r0
 800624a:	460c      	mov	r4, r1
 800624c:	b10a      	cbz	r2, 8006252 <_printf_common+0x26>
 800624e:	3301      	adds	r3, #1
 8006250:	6033      	str	r3, [r6, #0]
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	0699      	lsls	r1, r3, #26
 8006256:	bf42      	ittt	mi
 8006258:	6833      	ldrmi	r3, [r6, #0]
 800625a:	3302      	addmi	r3, #2
 800625c:	6033      	strmi	r3, [r6, #0]
 800625e:	6825      	ldr	r5, [r4, #0]
 8006260:	f015 0506 	ands.w	r5, r5, #6
 8006264:	d106      	bne.n	8006274 <_printf_common+0x48>
 8006266:	f104 0a19 	add.w	sl, r4, #25
 800626a:	68e3      	ldr	r3, [r4, #12]
 800626c:	6832      	ldr	r2, [r6, #0]
 800626e:	1a9b      	subs	r3, r3, r2
 8006270:	42ab      	cmp	r3, r5
 8006272:	dc26      	bgt.n	80062c2 <_printf_common+0x96>
 8006274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006278:	1e13      	subs	r3, r2, #0
 800627a:	6822      	ldr	r2, [r4, #0]
 800627c:	bf18      	it	ne
 800627e:	2301      	movne	r3, #1
 8006280:	0692      	lsls	r2, r2, #26
 8006282:	d42b      	bmi.n	80062dc <_printf_common+0xb0>
 8006284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006288:	4649      	mov	r1, r9
 800628a:	4638      	mov	r0, r7
 800628c:	47c0      	blx	r8
 800628e:	3001      	adds	r0, #1
 8006290:	d01e      	beq.n	80062d0 <_printf_common+0xa4>
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	6922      	ldr	r2, [r4, #16]
 8006296:	f003 0306 	and.w	r3, r3, #6
 800629a:	2b04      	cmp	r3, #4
 800629c:	bf02      	ittt	eq
 800629e:	68e5      	ldreq	r5, [r4, #12]
 80062a0:	6833      	ldreq	r3, [r6, #0]
 80062a2:	1aed      	subeq	r5, r5, r3
 80062a4:	68a3      	ldr	r3, [r4, #8]
 80062a6:	bf0c      	ite	eq
 80062a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062ac:	2500      	movne	r5, #0
 80062ae:	4293      	cmp	r3, r2
 80062b0:	bfc4      	itt	gt
 80062b2:	1a9b      	subgt	r3, r3, r2
 80062b4:	18ed      	addgt	r5, r5, r3
 80062b6:	2600      	movs	r6, #0
 80062b8:	341a      	adds	r4, #26
 80062ba:	42b5      	cmp	r5, r6
 80062bc:	d11a      	bne.n	80062f4 <_printf_common+0xc8>
 80062be:	2000      	movs	r0, #0
 80062c0:	e008      	b.n	80062d4 <_printf_common+0xa8>
 80062c2:	2301      	movs	r3, #1
 80062c4:	4652      	mov	r2, sl
 80062c6:	4649      	mov	r1, r9
 80062c8:	4638      	mov	r0, r7
 80062ca:	47c0      	blx	r8
 80062cc:	3001      	adds	r0, #1
 80062ce:	d103      	bne.n	80062d8 <_printf_common+0xac>
 80062d0:	f04f 30ff 	mov.w	r0, #4294967295
 80062d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d8:	3501      	adds	r5, #1
 80062da:	e7c6      	b.n	800626a <_printf_common+0x3e>
 80062dc:	18e1      	adds	r1, r4, r3
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	2030      	movs	r0, #48	; 0x30
 80062e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062e6:	4422      	add	r2, r4
 80062e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062f0:	3302      	adds	r3, #2
 80062f2:	e7c7      	b.n	8006284 <_printf_common+0x58>
 80062f4:	2301      	movs	r3, #1
 80062f6:	4622      	mov	r2, r4
 80062f8:	4649      	mov	r1, r9
 80062fa:	4638      	mov	r0, r7
 80062fc:	47c0      	blx	r8
 80062fe:	3001      	adds	r0, #1
 8006300:	d0e6      	beq.n	80062d0 <_printf_common+0xa4>
 8006302:	3601      	adds	r6, #1
 8006304:	e7d9      	b.n	80062ba <_printf_common+0x8e>
	...

08006308 <_printf_i>:
 8006308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800630c:	7e0f      	ldrb	r7, [r1, #24]
 800630e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006310:	2f78      	cmp	r7, #120	; 0x78
 8006312:	4691      	mov	r9, r2
 8006314:	4680      	mov	r8, r0
 8006316:	460c      	mov	r4, r1
 8006318:	469a      	mov	sl, r3
 800631a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800631e:	d807      	bhi.n	8006330 <_printf_i+0x28>
 8006320:	2f62      	cmp	r7, #98	; 0x62
 8006322:	d80a      	bhi.n	800633a <_printf_i+0x32>
 8006324:	2f00      	cmp	r7, #0
 8006326:	f000 80d4 	beq.w	80064d2 <_printf_i+0x1ca>
 800632a:	2f58      	cmp	r7, #88	; 0x58
 800632c:	f000 80c0 	beq.w	80064b0 <_printf_i+0x1a8>
 8006330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006338:	e03a      	b.n	80063b0 <_printf_i+0xa8>
 800633a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800633e:	2b15      	cmp	r3, #21
 8006340:	d8f6      	bhi.n	8006330 <_printf_i+0x28>
 8006342:	a101      	add	r1, pc, #4	; (adr r1, 8006348 <_printf_i+0x40>)
 8006344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006348:	080063a1 	.word	0x080063a1
 800634c:	080063b5 	.word	0x080063b5
 8006350:	08006331 	.word	0x08006331
 8006354:	08006331 	.word	0x08006331
 8006358:	08006331 	.word	0x08006331
 800635c:	08006331 	.word	0x08006331
 8006360:	080063b5 	.word	0x080063b5
 8006364:	08006331 	.word	0x08006331
 8006368:	08006331 	.word	0x08006331
 800636c:	08006331 	.word	0x08006331
 8006370:	08006331 	.word	0x08006331
 8006374:	080064b9 	.word	0x080064b9
 8006378:	080063e1 	.word	0x080063e1
 800637c:	08006473 	.word	0x08006473
 8006380:	08006331 	.word	0x08006331
 8006384:	08006331 	.word	0x08006331
 8006388:	080064db 	.word	0x080064db
 800638c:	08006331 	.word	0x08006331
 8006390:	080063e1 	.word	0x080063e1
 8006394:	08006331 	.word	0x08006331
 8006398:	08006331 	.word	0x08006331
 800639c:	0800647b 	.word	0x0800647b
 80063a0:	682b      	ldr	r3, [r5, #0]
 80063a2:	1d1a      	adds	r2, r3, #4
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	602a      	str	r2, [r5, #0]
 80063a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063b0:	2301      	movs	r3, #1
 80063b2:	e09f      	b.n	80064f4 <_printf_i+0x1ec>
 80063b4:	6820      	ldr	r0, [r4, #0]
 80063b6:	682b      	ldr	r3, [r5, #0]
 80063b8:	0607      	lsls	r7, r0, #24
 80063ba:	f103 0104 	add.w	r1, r3, #4
 80063be:	6029      	str	r1, [r5, #0]
 80063c0:	d501      	bpl.n	80063c6 <_printf_i+0xbe>
 80063c2:	681e      	ldr	r6, [r3, #0]
 80063c4:	e003      	b.n	80063ce <_printf_i+0xc6>
 80063c6:	0646      	lsls	r6, r0, #25
 80063c8:	d5fb      	bpl.n	80063c2 <_printf_i+0xba>
 80063ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80063ce:	2e00      	cmp	r6, #0
 80063d0:	da03      	bge.n	80063da <_printf_i+0xd2>
 80063d2:	232d      	movs	r3, #45	; 0x2d
 80063d4:	4276      	negs	r6, r6
 80063d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063da:	485a      	ldr	r0, [pc, #360]	; (8006544 <_printf_i+0x23c>)
 80063dc:	230a      	movs	r3, #10
 80063de:	e012      	b.n	8006406 <_printf_i+0xfe>
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	6820      	ldr	r0, [r4, #0]
 80063e4:	1d19      	adds	r1, r3, #4
 80063e6:	6029      	str	r1, [r5, #0]
 80063e8:	0605      	lsls	r5, r0, #24
 80063ea:	d501      	bpl.n	80063f0 <_printf_i+0xe8>
 80063ec:	681e      	ldr	r6, [r3, #0]
 80063ee:	e002      	b.n	80063f6 <_printf_i+0xee>
 80063f0:	0641      	lsls	r1, r0, #25
 80063f2:	d5fb      	bpl.n	80063ec <_printf_i+0xe4>
 80063f4:	881e      	ldrh	r6, [r3, #0]
 80063f6:	4853      	ldr	r0, [pc, #332]	; (8006544 <_printf_i+0x23c>)
 80063f8:	2f6f      	cmp	r7, #111	; 0x6f
 80063fa:	bf0c      	ite	eq
 80063fc:	2308      	moveq	r3, #8
 80063fe:	230a      	movne	r3, #10
 8006400:	2100      	movs	r1, #0
 8006402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006406:	6865      	ldr	r5, [r4, #4]
 8006408:	60a5      	str	r5, [r4, #8]
 800640a:	2d00      	cmp	r5, #0
 800640c:	bfa2      	ittt	ge
 800640e:	6821      	ldrge	r1, [r4, #0]
 8006410:	f021 0104 	bicge.w	r1, r1, #4
 8006414:	6021      	strge	r1, [r4, #0]
 8006416:	b90e      	cbnz	r6, 800641c <_printf_i+0x114>
 8006418:	2d00      	cmp	r5, #0
 800641a:	d04b      	beq.n	80064b4 <_printf_i+0x1ac>
 800641c:	4615      	mov	r5, r2
 800641e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006422:	fb03 6711 	mls	r7, r3, r1, r6
 8006426:	5dc7      	ldrb	r7, [r0, r7]
 8006428:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800642c:	4637      	mov	r7, r6
 800642e:	42bb      	cmp	r3, r7
 8006430:	460e      	mov	r6, r1
 8006432:	d9f4      	bls.n	800641e <_printf_i+0x116>
 8006434:	2b08      	cmp	r3, #8
 8006436:	d10b      	bne.n	8006450 <_printf_i+0x148>
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	07de      	lsls	r6, r3, #31
 800643c:	d508      	bpl.n	8006450 <_printf_i+0x148>
 800643e:	6923      	ldr	r3, [r4, #16]
 8006440:	6861      	ldr	r1, [r4, #4]
 8006442:	4299      	cmp	r1, r3
 8006444:	bfde      	ittt	le
 8006446:	2330      	movle	r3, #48	; 0x30
 8006448:	f805 3c01 	strble.w	r3, [r5, #-1]
 800644c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006450:	1b52      	subs	r2, r2, r5
 8006452:	6122      	str	r2, [r4, #16]
 8006454:	f8cd a000 	str.w	sl, [sp]
 8006458:	464b      	mov	r3, r9
 800645a:	aa03      	add	r2, sp, #12
 800645c:	4621      	mov	r1, r4
 800645e:	4640      	mov	r0, r8
 8006460:	f7ff fee4 	bl	800622c <_printf_common>
 8006464:	3001      	adds	r0, #1
 8006466:	d14a      	bne.n	80064fe <_printf_i+0x1f6>
 8006468:	f04f 30ff 	mov.w	r0, #4294967295
 800646c:	b004      	add	sp, #16
 800646e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	f043 0320 	orr.w	r3, r3, #32
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	4833      	ldr	r0, [pc, #204]	; (8006548 <_printf_i+0x240>)
 800647c:	2778      	movs	r7, #120	; 0x78
 800647e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	6829      	ldr	r1, [r5, #0]
 8006486:	061f      	lsls	r7, r3, #24
 8006488:	f851 6b04 	ldr.w	r6, [r1], #4
 800648c:	d402      	bmi.n	8006494 <_printf_i+0x18c>
 800648e:	065f      	lsls	r7, r3, #25
 8006490:	bf48      	it	mi
 8006492:	b2b6      	uxthmi	r6, r6
 8006494:	07df      	lsls	r7, r3, #31
 8006496:	bf48      	it	mi
 8006498:	f043 0320 	orrmi.w	r3, r3, #32
 800649c:	6029      	str	r1, [r5, #0]
 800649e:	bf48      	it	mi
 80064a0:	6023      	strmi	r3, [r4, #0]
 80064a2:	b91e      	cbnz	r6, 80064ac <_printf_i+0x1a4>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	f023 0320 	bic.w	r3, r3, #32
 80064aa:	6023      	str	r3, [r4, #0]
 80064ac:	2310      	movs	r3, #16
 80064ae:	e7a7      	b.n	8006400 <_printf_i+0xf8>
 80064b0:	4824      	ldr	r0, [pc, #144]	; (8006544 <_printf_i+0x23c>)
 80064b2:	e7e4      	b.n	800647e <_printf_i+0x176>
 80064b4:	4615      	mov	r5, r2
 80064b6:	e7bd      	b.n	8006434 <_printf_i+0x12c>
 80064b8:	682b      	ldr	r3, [r5, #0]
 80064ba:	6826      	ldr	r6, [r4, #0]
 80064bc:	6961      	ldr	r1, [r4, #20]
 80064be:	1d18      	adds	r0, r3, #4
 80064c0:	6028      	str	r0, [r5, #0]
 80064c2:	0635      	lsls	r5, r6, #24
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	d501      	bpl.n	80064cc <_printf_i+0x1c4>
 80064c8:	6019      	str	r1, [r3, #0]
 80064ca:	e002      	b.n	80064d2 <_printf_i+0x1ca>
 80064cc:	0670      	lsls	r0, r6, #25
 80064ce:	d5fb      	bpl.n	80064c8 <_printf_i+0x1c0>
 80064d0:	8019      	strh	r1, [r3, #0]
 80064d2:	2300      	movs	r3, #0
 80064d4:	6123      	str	r3, [r4, #16]
 80064d6:	4615      	mov	r5, r2
 80064d8:	e7bc      	b.n	8006454 <_printf_i+0x14c>
 80064da:	682b      	ldr	r3, [r5, #0]
 80064dc:	1d1a      	adds	r2, r3, #4
 80064de:	602a      	str	r2, [r5, #0]
 80064e0:	681d      	ldr	r5, [r3, #0]
 80064e2:	6862      	ldr	r2, [r4, #4]
 80064e4:	2100      	movs	r1, #0
 80064e6:	4628      	mov	r0, r5
 80064e8:	f7f9 fe72 	bl	80001d0 <memchr>
 80064ec:	b108      	cbz	r0, 80064f2 <_printf_i+0x1ea>
 80064ee:	1b40      	subs	r0, r0, r5
 80064f0:	6060      	str	r0, [r4, #4]
 80064f2:	6863      	ldr	r3, [r4, #4]
 80064f4:	6123      	str	r3, [r4, #16]
 80064f6:	2300      	movs	r3, #0
 80064f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064fc:	e7aa      	b.n	8006454 <_printf_i+0x14c>
 80064fe:	6923      	ldr	r3, [r4, #16]
 8006500:	462a      	mov	r2, r5
 8006502:	4649      	mov	r1, r9
 8006504:	4640      	mov	r0, r8
 8006506:	47d0      	blx	sl
 8006508:	3001      	adds	r0, #1
 800650a:	d0ad      	beq.n	8006468 <_printf_i+0x160>
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	079b      	lsls	r3, r3, #30
 8006510:	d413      	bmi.n	800653a <_printf_i+0x232>
 8006512:	68e0      	ldr	r0, [r4, #12]
 8006514:	9b03      	ldr	r3, [sp, #12]
 8006516:	4298      	cmp	r0, r3
 8006518:	bfb8      	it	lt
 800651a:	4618      	movlt	r0, r3
 800651c:	e7a6      	b.n	800646c <_printf_i+0x164>
 800651e:	2301      	movs	r3, #1
 8006520:	4632      	mov	r2, r6
 8006522:	4649      	mov	r1, r9
 8006524:	4640      	mov	r0, r8
 8006526:	47d0      	blx	sl
 8006528:	3001      	adds	r0, #1
 800652a:	d09d      	beq.n	8006468 <_printf_i+0x160>
 800652c:	3501      	adds	r5, #1
 800652e:	68e3      	ldr	r3, [r4, #12]
 8006530:	9903      	ldr	r1, [sp, #12]
 8006532:	1a5b      	subs	r3, r3, r1
 8006534:	42ab      	cmp	r3, r5
 8006536:	dcf2      	bgt.n	800651e <_printf_i+0x216>
 8006538:	e7eb      	b.n	8006512 <_printf_i+0x20a>
 800653a:	2500      	movs	r5, #0
 800653c:	f104 0619 	add.w	r6, r4, #25
 8006540:	e7f5      	b.n	800652e <_printf_i+0x226>
 8006542:	bf00      	nop
 8006544:	08008a6a 	.word	0x08008a6a
 8006548:	08008a7b 	.word	0x08008a7b

0800654c <std>:
 800654c:	2300      	movs	r3, #0
 800654e:	b510      	push	{r4, lr}
 8006550:	4604      	mov	r4, r0
 8006552:	e9c0 3300 	strd	r3, r3, [r0]
 8006556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800655a:	6083      	str	r3, [r0, #8]
 800655c:	8181      	strh	r1, [r0, #12]
 800655e:	6643      	str	r3, [r0, #100]	; 0x64
 8006560:	81c2      	strh	r2, [r0, #14]
 8006562:	6183      	str	r3, [r0, #24]
 8006564:	4619      	mov	r1, r3
 8006566:	2208      	movs	r2, #8
 8006568:	305c      	adds	r0, #92	; 0x5c
 800656a:	f000 f92d 	bl	80067c8 <memset>
 800656e:	4b0d      	ldr	r3, [pc, #52]	; (80065a4 <std+0x58>)
 8006570:	6263      	str	r3, [r4, #36]	; 0x24
 8006572:	4b0d      	ldr	r3, [pc, #52]	; (80065a8 <std+0x5c>)
 8006574:	62a3      	str	r3, [r4, #40]	; 0x28
 8006576:	4b0d      	ldr	r3, [pc, #52]	; (80065ac <std+0x60>)
 8006578:	62e3      	str	r3, [r4, #44]	; 0x2c
 800657a:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <std+0x64>)
 800657c:	6323      	str	r3, [r4, #48]	; 0x30
 800657e:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <std+0x68>)
 8006580:	6224      	str	r4, [r4, #32]
 8006582:	429c      	cmp	r4, r3
 8006584:	d006      	beq.n	8006594 <std+0x48>
 8006586:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800658a:	4294      	cmp	r4, r2
 800658c:	d002      	beq.n	8006594 <std+0x48>
 800658e:	33d0      	adds	r3, #208	; 0xd0
 8006590:	429c      	cmp	r4, r3
 8006592:	d105      	bne.n	80065a0 <std+0x54>
 8006594:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800659c:	f000 b990 	b.w	80068c0 <__retarget_lock_init_recursive>
 80065a0:	bd10      	pop	{r4, pc}
 80065a2:	bf00      	nop
 80065a4:	080066d1 	.word	0x080066d1
 80065a8:	080066f3 	.word	0x080066f3
 80065ac:	0800672b 	.word	0x0800672b
 80065b0:	0800674f 	.word	0x0800674f
 80065b4:	200005a4 	.word	0x200005a4

080065b8 <stdio_exit_handler>:
 80065b8:	4a02      	ldr	r2, [pc, #8]	; (80065c4 <stdio_exit_handler+0xc>)
 80065ba:	4903      	ldr	r1, [pc, #12]	; (80065c8 <stdio_exit_handler+0x10>)
 80065bc:	4803      	ldr	r0, [pc, #12]	; (80065cc <stdio_exit_handler+0x14>)
 80065be:	f000 b869 	b.w	8006694 <_fwalk_sglue>
 80065c2:	bf00      	nop
 80065c4:	20000014 	.word	0x20000014
 80065c8:	08008271 	.word	0x08008271
 80065cc:	20000020 	.word	0x20000020

080065d0 <cleanup_stdio>:
 80065d0:	6841      	ldr	r1, [r0, #4]
 80065d2:	4b0c      	ldr	r3, [pc, #48]	; (8006604 <cleanup_stdio+0x34>)
 80065d4:	4299      	cmp	r1, r3
 80065d6:	b510      	push	{r4, lr}
 80065d8:	4604      	mov	r4, r0
 80065da:	d001      	beq.n	80065e0 <cleanup_stdio+0x10>
 80065dc:	f001 fe48 	bl	8008270 <_fflush_r>
 80065e0:	68a1      	ldr	r1, [r4, #8]
 80065e2:	4b09      	ldr	r3, [pc, #36]	; (8006608 <cleanup_stdio+0x38>)
 80065e4:	4299      	cmp	r1, r3
 80065e6:	d002      	beq.n	80065ee <cleanup_stdio+0x1e>
 80065e8:	4620      	mov	r0, r4
 80065ea:	f001 fe41 	bl	8008270 <_fflush_r>
 80065ee:	68e1      	ldr	r1, [r4, #12]
 80065f0:	4b06      	ldr	r3, [pc, #24]	; (800660c <cleanup_stdio+0x3c>)
 80065f2:	4299      	cmp	r1, r3
 80065f4:	d004      	beq.n	8006600 <cleanup_stdio+0x30>
 80065f6:	4620      	mov	r0, r4
 80065f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065fc:	f001 be38 	b.w	8008270 <_fflush_r>
 8006600:	bd10      	pop	{r4, pc}
 8006602:	bf00      	nop
 8006604:	200005a4 	.word	0x200005a4
 8006608:	2000060c 	.word	0x2000060c
 800660c:	20000674 	.word	0x20000674

08006610 <global_stdio_init.part.0>:
 8006610:	b510      	push	{r4, lr}
 8006612:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <global_stdio_init.part.0+0x30>)
 8006614:	4c0b      	ldr	r4, [pc, #44]	; (8006644 <global_stdio_init.part.0+0x34>)
 8006616:	4a0c      	ldr	r2, [pc, #48]	; (8006648 <global_stdio_init.part.0+0x38>)
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	4620      	mov	r0, r4
 800661c:	2200      	movs	r2, #0
 800661e:	2104      	movs	r1, #4
 8006620:	f7ff ff94 	bl	800654c <std>
 8006624:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006628:	2201      	movs	r2, #1
 800662a:	2109      	movs	r1, #9
 800662c:	f7ff ff8e 	bl	800654c <std>
 8006630:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006634:	2202      	movs	r2, #2
 8006636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800663a:	2112      	movs	r1, #18
 800663c:	f7ff bf86 	b.w	800654c <std>
 8006640:	200006dc 	.word	0x200006dc
 8006644:	200005a4 	.word	0x200005a4
 8006648:	080065b9 	.word	0x080065b9

0800664c <__sfp_lock_acquire>:
 800664c:	4801      	ldr	r0, [pc, #4]	; (8006654 <__sfp_lock_acquire+0x8>)
 800664e:	f000 b938 	b.w	80068c2 <__retarget_lock_acquire_recursive>
 8006652:	bf00      	nop
 8006654:	200006e5 	.word	0x200006e5

08006658 <__sfp_lock_release>:
 8006658:	4801      	ldr	r0, [pc, #4]	; (8006660 <__sfp_lock_release+0x8>)
 800665a:	f000 b933 	b.w	80068c4 <__retarget_lock_release_recursive>
 800665e:	bf00      	nop
 8006660:	200006e5 	.word	0x200006e5

08006664 <__sinit>:
 8006664:	b510      	push	{r4, lr}
 8006666:	4604      	mov	r4, r0
 8006668:	f7ff fff0 	bl	800664c <__sfp_lock_acquire>
 800666c:	6a23      	ldr	r3, [r4, #32]
 800666e:	b11b      	cbz	r3, 8006678 <__sinit+0x14>
 8006670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006674:	f7ff bff0 	b.w	8006658 <__sfp_lock_release>
 8006678:	4b04      	ldr	r3, [pc, #16]	; (800668c <__sinit+0x28>)
 800667a:	6223      	str	r3, [r4, #32]
 800667c:	4b04      	ldr	r3, [pc, #16]	; (8006690 <__sinit+0x2c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1f5      	bne.n	8006670 <__sinit+0xc>
 8006684:	f7ff ffc4 	bl	8006610 <global_stdio_init.part.0>
 8006688:	e7f2      	b.n	8006670 <__sinit+0xc>
 800668a:	bf00      	nop
 800668c:	080065d1 	.word	0x080065d1
 8006690:	200006dc 	.word	0x200006dc

08006694 <_fwalk_sglue>:
 8006694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006698:	4607      	mov	r7, r0
 800669a:	4688      	mov	r8, r1
 800669c:	4614      	mov	r4, r2
 800669e:	2600      	movs	r6, #0
 80066a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066a4:	f1b9 0901 	subs.w	r9, r9, #1
 80066a8:	d505      	bpl.n	80066b6 <_fwalk_sglue+0x22>
 80066aa:	6824      	ldr	r4, [r4, #0]
 80066ac:	2c00      	cmp	r4, #0
 80066ae:	d1f7      	bne.n	80066a0 <_fwalk_sglue+0xc>
 80066b0:	4630      	mov	r0, r6
 80066b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066b6:	89ab      	ldrh	r3, [r5, #12]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d907      	bls.n	80066cc <_fwalk_sglue+0x38>
 80066bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066c0:	3301      	adds	r3, #1
 80066c2:	d003      	beq.n	80066cc <_fwalk_sglue+0x38>
 80066c4:	4629      	mov	r1, r5
 80066c6:	4638      	mov	r0, r7
 80066c8:	47c0      	blx	r8
 80066ca:	4306      	orrs	r6, r0
 80066cc:	3568      	adds	r5, #104	; 0x68
 80066ce:	e7e9      	b.n	80066a4 <_fwalk_sglue+0x10>

080066d0 <__sread>:
 80066d0:	b510      	push	{r4, lr}
 80066d2:	460c      	mov	r4, r1
 80066d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d8:	f000 f8a4 	bl	8006824 <_read_r>
 80066dc:	2800      	cmp	r0, #0
 80066de:	bfab      	itete	ge
 80066e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066e2:	89a3      	ldrhlt	r3, [r4, #12]
 80066e4:	181b      	addge	r3, r3, r0
 80066e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066ea:	bfac      	ite	ge
 80066ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80066ee:	81a3      	strhlt	r3, [r4, #12]
 80066f0:	bd10      	pop	{r4, pc}

080066f2 <__swrite>:
 80066f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f6:	461f      	mov	r7, r3
 80066f8:	898b      	ldrh	r3, [r1, #12]
 80066fa:	05db      	lsls	r3, r3, #23
 80066fc:	4605      	mov	r5, r0
 80066fe:	460c      	mov	r4, r1
 8006700:	4616      	mov	r6, r2
 8006702:	d505      	bpl.n	8006710 <__swrite+0x1e>
 8006704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006708:	2302      	movs	r3, #2
 800670a:	2200      	movs	r2, #0
 800670c:	f000 f878 	bl	8006800 <_lseek_r>
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800671a:	81a3      	strh	r3, [r4, #12]
 800671c:	4632      	mov	r2, r6
 800671e:	463b      	mov	r3, r7
 8006720:	4628      	mov	r0, r5
 8006722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006726:	f000 b88f 	b.w	8006848 <_write_r>

0800672a <__sseek>:
 800672a:	b510      	push	{r4, lr}
 800672c:	460c      	mov	r4, r1
 800672e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006732:	f000 f865 	bl	8006800 <_lseek_r>
 8006736:	1c43      	adds	r3, r0, #1
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	bf15      	itete	ne
 800673c:	6560      	strne	r0, [r4, #84]	; 0x54
 800673e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006746:	81a3      	strheq	r3, [r4, #12]
 8006748:	bf18      	it	ne
 800674a:	81a3      	strhne	r3, [r4, #12]
 800674c:	bd10      	pop	{r4, pc}

0800674e <__sclose>:
 800674e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006752:	f000 b845 	b.w	80067e0 <_close_r>

08006756 <_vsniprintf_r>:
 8006756:	b530      	push	{r4, r5, lr}
 8006758:	4614      	mov	r4, r2
 800675a:	2c00      	cmp	r4, #0
 800675c:	b09b      	sub	sp, #108	; 0x6c
 800675e:	4605      	mov	r5, r0
 8006760:	461a      	mov	r2, r3
 8006762:	da05      	bge.n	8006770 <_vsniprintf_r+0x1a>
 8006764:	238b      	movs	r3, #139	; 0x8b
 8006766:	6003      	str	r3, [r0, #0]
 8006768:	f04f 30ff 	mov.w	r0, #4294967295
 800676c:	b01b      	add	sp, #108	; 0x6c
 800676e:	bd30      	pop	{r4, r5, pc}
 8006770:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006774:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006778:	bf14      	ite	ne
 800677a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800677e:	4623      	moveq	r3, r4
 8006780:	9302      	str	r3, [sp, #8]
 8006782:	9305      	str	r3, [sp, #20]
 8006784:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006788:	9100      	str	r1, [sp, #0]
 800678a:	9104      	str	r1, [sp, #16]
 800678c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006790:	4669      	mov	r1, sp
 8006792:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006794:	f001 fbe8 	bl	8007f68 <_svfiprintf_r>
 8006798:	1c43      	adds	r3, r0, #1
 800679a:	bfbc      	itt	lt
 800679c:	238b      	movlt	r3, #139	; 0x8b
 800679e:	602b      	strlt	r3, [r5, #0]
 80067a0:	2c00      	cmp	r4, #0
 80067a2:	d0e3      	beq.n	800676c <_vsniprintf_r+0x16>
 80067a4:	9b00      	ldr	r3, [sp, #0]
 80067a6:	2200      	movs	r2, #0
 80067a8:	701a      	strb	r2, [r3, #0]
 80067aa:	e7df      	b.n	800676c <_vsniprintf_r+0x16>

080067ac <vsniprintf>:
 80067ac:	b507      	push	{r0, r1, r2, lr}
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	4613      	mov	r3, r2
 80067b2:	460a      	mov	r2, r1
 80067b4:	4601      	mov	r1, r0
 80067b6:	4803      	ldr	r0, [pc, #12]	; (80067c4 <vsniprintf+0x18>)
 80067b8:	6800      	ldr	r0, [r0, #0]
 80067ba:	f7ff ffcc 	bl	8006756 <_vsniprintf_r>
 80067be:	b003      	add	sp, #12
 80067c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80067c4:	2000006c 	.word	0x2000006c

080067c8 <memset>:
 80067c8:	4402      	add	r2, r0
 80067ca:	4603      	mov	r3, r0
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d100      	bne.n	80067d2 <memset+0xa>
 80067d0:	4770      	bx	lr
 80067d2:	f803 1b01 	strb.w	r1, [r3], #1
 80067d6:	e7f9      	b.n	80067cc <memset+0x4>

080067d8 <_localeconv_r>:
 80067d8:	4800      	ldr	r0, [pc, #0]	; (80067dc <_localeconv_r+0x4>)
 80067da:	4770      	bx	lr
 80067dc:	20000160 	.word	0x20000160

080067e0 <_close_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4d06      	ldr	r5, [pc, #24]	; (80067fc <_close_r+0x1c>)
 80067e4:	2300      	movs	r3, #0
 80067e6:	4604      	mov	r4, r0
 80067e8:	4608      	mov	r0, r1
 80067ea:	602b      	str	r3, [r5, #0]
 80067ec:	f7fb f891 	bl	8001912 <_close>
 80067f0:	1c43      	adds	r3, r0, #1
 80067f2:	d102      	bne.n	80067fa <_close_r+0x1a>
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	b103      	cbz	r3, 80067fa <_close_r+0x1a>
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	bd38      	pop	{r3, r4, r5, pc}
 80067fc:	200006e0 	.word	0x200006e0

08006800 <_lseek_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4d07      	ldr	r5, [pc, #28]	; (8006820 <_lseek_r+0x20>)
 8006804:	4604      	mov	r4, r0
 8006806:	4608      	mov	r0, r1
 8006808:	4611      	mov	r1, r2
 800680a:	2200      	movs	r2, #0
 800680c:	602a      	str	r2, [r5, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	f7fb f8a6 	bl	8001960 <_lseek>
 8006814:	1c43      	adds	r3, r0, #1
 8006816:	d102      	bne.n	800681e <_lseek_r+0x1e>
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	b103      	cbz	r3, 800681e <_lseek_r+0x1e>
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	bd38      	pop	{r3, r4, r5, pc}
 8006820:	200006e0 	.word	0x200006e0

08006824 <_read_r>:
 8006824:	b538      	push	{r3, r4, r5, lr}
 8006826:	4d07      	ldr	r5, [pc, #28]	; (8006844 <_read_r+0x20>)
 8006828:	4604      	mov	r4, r0
 800682a:	4608      	mov	r0, r1
 800682c:	4611      	mov	r1, r2
 800682e:	2200      	movs	r2, #0
 8006830:	602a      	str	r2, [r5, #0]
 8006832:	461a      	mov	r2, r3
 8006834:	f7fb f834 	bl	80018a0 <_read>
 8006838:	1c43      	adds	r3, r0, #1
 800683a:	d102      	bne.n	8006842 <_read_r+0x1e>
 800683c:	682b      	ldr	r3, [r5, #0]
 800683e:	b103      	cbz	r3, 8006842 <_read_r+0x1e>
 8006840:	6023      	str	r3, [r4, #0]
 8006842:	bd38      	pop	{r3, r4, r5, pc}
 8006844:	200006e0 	.word	0x200006e0

08006848 <_write_r>:
 8006848:	b538      	push	{r3, r4, r5, lr}
 800684a:	4d07      	ldr	r5, [pc, #28]	; (8006868 <_write_r+0x20>)
 800684c:	4604      	mov	r4, r0
 800684e:	4608      	mov	r0, r1
 8006850:	4611      	mov	r1, r2
 8006852:	2200      	movs	r2, #0
 8006854:	602a      	str	r2, [r5, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	f7fb f83f 	bl	80018da <_write>
 800685c:	1c43      	adds	r3, r0, #1
 800685e:	d102      	bne.n	8006866 <_write_r+0x1e>
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	b103      	cbz	r3, 8006866 <_write_r+0x1e>
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	bd38      	pop	{r3, r4, r5, pc}
 8006868:	200006e0 	.word	0x200006e0

0800686c <__errno>:
 800686c:	4b01      	ldr	r3, [pc, #4]	; (8006874 <__errno+0x8>)
 800686e:	6818      	ldr	r0, [r3, #0]
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	2000006c 	.word	0x2000006c

08006878 <__libc_init_array>:
 8006878:	b570      	push	{r4, r5, r6, lr}
 800687a:	4d0d      	ldr	r5, [pc, #52]	; (80068b0 <__libc_init_array+0x38>)
 800687c:	4c0d      	ldr	r4, [pc, #52]	; (80068b4 <__libc_init_array+0x3c>)
 800687e:	1b64      	subs	r4, r4, r5
 8006880:	10a4      	asrs	r4, r4, #2
 8006882:	2600      	movs	r6, #0
 8006884:	42a6      	cmp	r6, r4
 8006886:	d109      	bne.n	800689c <__libc_init_array+0x24>
 8006888:	4d0b      	ldr	r5, [pc, #44]	; (80068b8 <__libc_init_array+0x40>)
 800688a:	4c0c      	ldr	r4, [pc, #48]	; (80068bc <__libc_init_array+0x44>)
 800688c:	f002 f894 	bl	80089b8 <_init>
 8006890:	1b64      	subs	r4, r4, r5
 8006892:	10a4      	asrs	r4, r4, #2
 8006894:	2600      	movs	r6, #0
 8006896:	42a6      	cmp	r6, r4
 8006898:	d105      	bne.n	80068a6 <__libc_init_array+0x2e>
 800689a:	bd70      	pop	{r4, r5, r6, pc}
 800689c:	f855 3b04 	ldr.w	r3, [r5], #4
 80068a0:	4798      	blx	r3
 80068a2:	3601      	adds	r6, #1
 80068a4:	e7ee      	b.n	8006884 <__libc_init_array+0xc>
 80068a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068aa:	4798      	blx	r3
 80068ac:	3601      	adds	r6, #1
 80068ae:	e7f2      	b.n	8006896 <__libc_init_array+0x1e>
 80068b0:	08008dd4 	.word	0x08008dd4
 80068b4:	08008dd4 	.word	0x08008dd4
 80068b8:	08008dd4 	.word	0x08008dd4
 80068bc:	08008dd8 	.word	0x08008dd8

080068c0 <__retarget_lock_init_recursive>:
 80068c0:	4770      	bx	lr

080068c2 <__retarget_lock_acquire_recursive>:
 80068c2:	4770      	bx	lr

080068c4 <__retarget_lock_release_recursive>:
 80068c4:	4770      	bx	lr

080068c6 <quorem>:
 80068c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ca:	6903      	ldr	r3, [r0, #16]
 80068cc:	690c      	ldr	r4, [r1, #16]
 80068ce:	42a3      	cmp	r3, r4
 80068d0:	4607      	mov	r7, r0
 80068d2:	db7e      	blt.n	80069d2 <quorem+0x10c>
 80068d4:	3c01      	subs	r4, #1
 80068d6:	f101 0814 	add.w	r8, r1, #20
 80068da:	f100 0514 	add.w	r5, r0, #20
 80068de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068ec:	3301      	adds	r3, #1
 80068ee:	429a      	cmp	r2, r3
 80068f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80068f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80068fc:	d331      	bcc.n	8006962 <quorem+0x9c>
 80068fe:	f04f 0e00 	mov.w	lr, #0
 8006902:	4640      	mov	r0, r8
 8006904:	46ac      	mov	ip, r5
 8006906:	46f2      	mov	sl, lr
 8006908:	f850 2b04 	ldr.w	r2, [r0], #4
 800690c:	b293      	uxth	r3, r2
 800690e:	fb06 e303 	mla	r3, r6, r3, lr
 8006912:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006916:	0c1a      	lsrs	r2, r3, #16
 8006918:	b29b      	uxth	r3, r3
 800691a:	ebaa 0303 	sub.w	r3, sl, r3
 800691e:	f8dc a000 	ldr.w	sl, [ip]
 8006922:	fa13 f38a 	uxtah	r3, r3, sl
 8006926:	fb06 220e 	mla	r2, r6, lr, r2
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	9b00      	ldr	r3, [sp, #0]
 800692e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006932:	b292      	uxth	r2, r2
 8006934:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006938:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800693c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006940:	4581      	cmp	r9, r0
 8006942:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006946:	f84c 3b04 	str.w	r3, [ip], #4
 800694a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800694e:	d2db      	bcs.n	8006908 <quorem+0x42>
 8006950:	f855 300b 	ldr.w	r3, [r5, fp]
 8006954:	b92b      	cbnz	r3, 8006962 <quorem+0x9c>
 8006956:	9b01      	ldr	r3, [sp, #4]
 8006958:	3b04      	subs	r3, #4
 800695a:	429d      	cmp	r5, r3
 800695c:	461a      	mov	r2, r3
 800695e:	d32c      	bcc.n	80069ba <quorem+0xf4>
 8006960:	613c      	str	r4, [r7, #16]
 8006962:	4638      	mov	r0, r7
 8006964:	f001 f9a6 	bl	8007cb4 <__mcmp>
 8006968:	2800      	cmp	r0, #0
 800696a:	db22      	blt.n	80069b2 <quorem+0xec>
 800696c:	3601      	adds	r6, #1
 800696e:	4629      	mov	r1, r5
 8006970:	2000      	movs	r0, #0
 8006972:	f858 2b04 	ldr.w	r2, [r8], #4
 8006976:	f8d1 c000 	ldr.w	ip, [r1]
 800697a:	b293      	uxth	r3, r2
 800697c:	1ac3      	subs	r3, r0, r3
 800697e:	0c12      	lsrs	r2, r2, #16
 8006980:	fa13 f38c 	uxtah	r3, r3, ip
 8006984:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006988:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800698c:	b29b      	uxth	r3, r3
 800698e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006992:	45c1      	cmp	r9, r8
 8006994:	f841 3b04 	str.w	r3, [r1], #4
 8006998:	ea4f 4022 	mov.w	r0, r2, asr #16
 800699c:	d2e9      	bcs.n	8006972 <quorem+0xac>
 800699e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069a6:	b922      	cbnz	r2, 80069b2 <quorem+0xec>
 80069a8:	3b04      	subs	r3, #4
 80069aa:	429d      	cmp	r5, r3
 80069ac:	461a      	mov	r2, r3
 80069ae:	d30a      	bcc.n	80069c6 <quorem+0x100>
 80069b0:	613c      	str	r4, [r7, #16]
 80069b2:	4630      	mov	r0, r6
 80069b4:	b003      	add	sp, #12
 80069b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ba:	6812      	ldr	r2, [r2, #0]
 80069bc:	3b04      	subs	r3, #4
 80069be:	2a00      	cmp	r2, #0
 80069c0:	d1ce      	bne.n	8006960 <quorem+0x9a>
 80069c2:	3c01      	subs	r4, #1
 80069c4:	e7c9      	b.n	800695a <quorem+0x94>
 80069c6:	6812      	ldr	r2, [r2, #0]
 80069c8:	3b04      	subs	r3, #4
 80069ca:	2a00      	cmp	r2, #0
 80069cc:	d1f0      	bne.n	80069b0 <quorem+0xea>
 80069ce:	3c01      	subs	r4, #1
 80069d0:	e7eb      	b.n	80069aa <quorem+0xe4>
 80069d2:	2000      	movs	r0, #0
 80069d4:	e7ee      	b.n	80069b4 <quorem+0xee>
	...

080069d8 <_dtoa_r>:
 80069d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069dc:	ed2d 8b04 	vpush	{d8-d9}
 80069e0:	69c5      	ldr	r5, [r0, #28]
 80069e2:	b093      	sub	sp, #76	; 0x4c
 80069e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80069e8:	ec57 6b10 	vmov	r6, r7, d0
 80069ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80069f0:	9107      	str	r1, [sp, #28]
 80069f2:	4604      	mov	r4, r0
 80069f4:	920a      	str	r2, [sp, #40]	; 0x28
 80069f6:	930d      	str	r3, [sp, #52]	; 0x34
 80069f8:	b975      	cbnz	r5, 8006a18 <_dtoa_r+0x40>
 80069fa:	2010      	movs	r0, #16
 80069fc:	f000 fe2a 	bl	8007654 <malloc>
 8006a00:	4602      	mov	r2, r0
 8006a02:	61e0      	str	r0, [r4, #28]
 8006a04:	b920      	cbnz	r0, 8006a10 <_dtoa_r+0x38>
 8006a06:	4bae      	ldr	r3, [pc, #696]	; (8006cc0 <_dtoa_r+0x2e8>)
 8006a08:	21ef      	movs	r1, #239	; 0xef
 8006a0a:	48ae      	ldr	r0, [pc, #696]	; (8006cc4 <_dtoa_r+0x2ec>)
 8006a0c:	f001 fc90 	bl	8008330 <__assert_func>
 8006a10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a14:	6005      	str	r5, [r0, #0]
 8006a16:	60c5      	str	r5, [r0, #12]
 8006a18:	69e3      	ldr	r3, [r4, #28]
 8006a1a:	6819      	ldr	r1, [r3, #0]
 8006a1c:	b151      	cbz	r1, 8006a34 <_dtoa_r+0x5c>
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	604a      	str	r2, [r1, #4]
 8006a22:	2301      	movs	r3, #1
 8006a24:	4093      	lsls	r3, r2
 8006a26:	608b      	str	r3, [r1, #8]
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f000 ff07 	bl	800783c <_Bfree>
 8006a2e:	69e3      	ldr	r3, [r4, #28]
 8006a30:	2200      	movs	r2, #0
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	1e3b      	subs	r3, r7, #0
 8006a36:	bfbb      	ittet	lt
 8006a38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a3c:	9303      	strlt	r3, [sp, #12]
 8006a3e:	2300      	movge	r3, #0
 8006a40:	2201      	movlt	r2, #1
 8006a42:	bfac      	ite	ge
 8006a44:	f8c8 3000 	strge.w	r3, [r8]
 8006a48:	f8c8 2000 	strlt.w	r2, [r8]
 8006a4c:	4b9e      	ldr	r3, [pc, #632]	; (8006cc8 <_dtoa_r+0x2f0>)
 8006a4e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006a52:	ea33 0308 	bics.w	r3, r3, r8
 8006a56:	d11b      	bne.n	8006a90 <_dtoa_r+0xb8>
 8006a58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006a64:	4333      	orrs	r3, r6
 8006a66:	f000 8593 	beq.w	8007590 <_dtoa_r+0xbb8>
 8006a6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a6c:	b963      	cbnz	r3, 8006a88 <_dtoa_r+0xb0>
 8006a6e:	4b97      	ldr	r3, [pc, #604]	; (8006ccc <_dtoa_r+0x2f4>)
 8006a70:	e027      	b.n	8006ac2 <_dtoa_r+0xea>
 8006a72:	4b97      	ldr	r3, [pc, #604]	; (8006cd0 <_dtoa_r+0x2f8>)
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	3308      	adds	r3, #8
 8006a78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	9800      	ldr	r0, [sp, #0]
 8006a7e:	b013      	add	sp, #76	; 0x4c
 8006a80:	ecbd 8b04 	vpop	{d8-d9}
 8006a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a88:	4b90      	ldr	r3, [pc, #576]	; (8006ccc <_dtoa_r+0x2f4>)
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	3303      	adds	r3, #3
 8006a8e:	e7f3      	b.n	8006a78 <_dtoa_r+0xa0>
 8006a90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a94:	2200      	movs	r2, #0
 8006a96:	ec51 0b17 	vmov	r0, r1, d7
 8006a9a:	eeb0 8a47 	vmov.f32	s16, s14
 8006a9e:	eef0 8a67 	vmov.f32	s17, s15
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f7fa f810 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aa8:	4681      	mov	r9, r0
 8006aaa:	b160      	cbz	r0, 8006ac6 <_dtoa_r+0xee>
 8006aac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006aae:	2301      	movs	r3, #1
 8006ab0:	6013      	str	r3, [r2, #0]
 8006ab2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 8568 	beq.w	800758a <_dtoa_r+0xbb2>
 8006aba:	4b86      	ldr	r3, [pc, #536]	; (8006cd4 <_dtoa_r+0x2fc>)
 8006abc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	e7da      	b.n	8006a7c <_dtoa_r+0xa4>
 8006ac6:	aa10      	add	r2, sp, #64	; 0x40
 8006ac8:	a911      	add	r1, sp, #68	; 0x44
 8006aca:	4620      	mov	r0, r4
 8006acc:	eeb0 0a48 	vmov.f32	s0, s16
 8006ad0:	eef0 0a68 	vmov.f32	s1, s17
 8006ad4:	f001 f994 	bl	8007e00 <__d2b>
 8006ad8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006adc:	4682      	mov	sl, r0
 8006ade:	2d00      	cmp	r5, #0
 8006ae0:	d07f      	beq.n	8006be2 <_dtoa_r+0x20a>
 8006ae2:	ee18 3a90 	vmov	r3, s17
 8006ae6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006aea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006aee:	ec51 0b18 	vmov	r0, r1, d8
 8006af2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006af6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006afa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006afe:	4619      	mov	r1, r3
 8006b00:	2200      	movs	r2, #0
 8006b02:	4b75      	ldr	r3, [pc, #468]	; (8006cd8 <_dtoa_r+0x300>)
 8006b04:	f7f9 fbc0 	bl	8000288 <__aeabi_dsub>
 8006b08:	a367      	add	r3, pc, #412	; (adr r3, 8006ca8 <_dtoa_r+0x2d0>)
 8006b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0e:	f7f9 fd73 	bl	80005f8 <__aeabi_dmul>
 8006b12:	a367      	add	r3, pc, #412	; (adr r3, 8006cb0 <_dtoa_r+0x2d8>)
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	f7f9 fbb8 	bl	800028c <__adddf3>
 8006b1c:	4606      	mov	r6, r0
 8006b1e:	4628      	mov	r0, r5
 8006b20:	460f      	mov	r7, r1
 8006b22:	f7f9 fcff 	bl	8000524 <__aeabi_i2d>
 8006b26:	a364      	add	r3, pc, #400	; (adr r3, 8006cb8 <_dtoa_r+0x2e0>)
 8006b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2c:	f7f9 fd64 	bl	80005f8 <__aeabi_dmul>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	4630      	mov	r0, r6
 8006b36:	4639      	mov	r1, r7
 8006b38:	f7f9 fba8 	bl	800028c <__adddf3>
 8006b3c:	4606      	mov	r6, r0
 8006b3e:	460f      	mov	r7, r1
 8006b40:	f7fa f80a 	bl	8000b58 <__aeabi_d2iz>
 8006b44:	2200      	movs	r2, #0
 8006b46:	4683      	mov	fp, r0
 8006b48:	2300      	movs	r3, #0
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	4639      	mov	r1, r7
 8006b4e:	f7f9 ffc5 	bl	8000adc <__aeabi_dcmplt>
 8006b52:	b148      	cbz	r0, 8006b68 <_dtoa_r+0x190>
 8006b54:	4658      	mov	r0, fp
 8006b56:	f7f9 fce5 	bl	8000524 <__aeabi_i2d>
 8006b5a:	4632      	mov	r2, r6
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	f7f9 ffb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b62:	b908      	cbnz	r0, 8006b68 <_dtoa_r+0x190>
 8006b64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b68:	f1bb 0f16 	cmp.w	fp, #22
 8006b6c:	d857      	bhi.n	8006c1e <_dtoa_r+0x246>
 8006b6e:	4b5b      	ldr	r3, [pc, #364]	; (8006cdc <_dtoa_r+0x304>)
 8006b70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	ec51 0b18 	vmov	r0, r1, d8
 8006b7c:	f7f9 ffae 	bl	8000adc <__aeabi_dcmplt>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d04e      	beq.n	8006c22 <_dtoa_r+0x24a>
 8006b84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b88:	2300      	movs	r3, #0
 8006b8a:	930c      	str	r3, [sp, #48]	; 0x30
 8006b8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b8e:	1b5b      	subs	r3, r3, r5
 8006b90:	1e5a      	subs	r2, r3, #1
 8006b92:	bf45      	ittet	mi
 8006b94:	f1c3 0301 	rsbmi	r3, r3, #1
 8006b98:	9305      	strmi	r3, [sp, #20]
 8006b9a:	2300      	movpl	r3, #0
 8006b9c:	2300      	movmi	r3, #0
 8006b9e:	9206      	str	r2, [sp, #24]
 8006ba0:	bf54      	ite	pl
 8006ba2:	9305      	strpl	r3, [sp, #20]
 8006ba4:	9306      	strmi	r3, [sp, #24]
 8006ba6:	f1bb 0f00 	cmp.w	fp, #0
 8006baa:	db3c      	blt.n	8006c26 <_dtoa_r+0x24e>
 8006bac:	9b06      	ldr	r3, [sp, #24]
 8006bae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006bb2:	445b      	add	r3, fp
 8006bb4:	9306      	str	r3, [sp, #24]
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	9308      	str	r3, [sp, #32]
 8006bba:	9b07      	ldr	r3, [sp, #28]
 8006bbc:	2b09      	cmp	r3, #9
 8006bbe:	d868      	bhi.n	8006c92 <_dtoa_r+0x2ba>
 8006bc0:	2b05      	cmp	r3, #5
 8006bc2:	bfc4      	itt	gt
 8006bc4:	3b04      	subgt	r3, #4
 8006bc6:	9307      	strgt	r3, [sp, #28]
 8006bc8:	9b07      	ldr	r3, [sp, #28]
 8006bca:	f1a3 0302 	sub.w	r3, r3, #2
 8006bce:	bfcc      	ite	gt
 8006bd0:	2500      	movgt	r5, #0
 8006bd2:	2501      	movle	r5, #1
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	f200 8085 	bhi.w	8006ce4 <_dtoa_r+0x30c>
 8006bda:	e8df f003 	tbb	[pc, r3]
 8006bde:	3b2e      	.short	0x3b2e
 8006be0:	5839      	.short	0x5839
 8006be2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006be6:	441d      	add	r5, r3
 8006be8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	bfc1      	itttt	gt
 8006bf0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006bf4:	fa08 f803 	lslgt.w	r8, r8, r3
 8006bf8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006bfc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006c00:	bfd6      	itet	le
 8006c02:	f1c3 0320 	rsble	r3, r3, #32
 8006c06:	ea48 0003 	orrgt.w	r0, r8, r3
 8006c0a:	fa06 f003 	lslle.w	r0, r6, r3
 8006c0e:	f7f9 fc79 	bl	8000504 <__aeabi_ui2d>
 8006c12:	2201      	movs	r2, #1
 8006c14:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006c18:	3d01      	subs	r5, #1
 8006c1a:	920e      	str	r2, [sp, #56]	; 0x38
 8006c1c:	e76f      	b.n	8006afe <_dtoa_r+0x126>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e7b3      	b.n	8006b8a <_dtoa_r+0x1b2>
 8006c22:	900c      	str	r0, [sp, #48]	; 0x30
 8006c24:	e7b2      	b.n	8006b8c <_dtoa_r+0x1b4>
 8006c26:	9b05      	ldr	r3, [sp, #20]
 8006c28:	eba3 030b 	sub.w	r3, r3, fp
 8006c2c:	9305      	str	r3, [sp, #20]
 8006c2e:	f1cb 0300 	rsb	r3, fp, #0
 8006c32:	9308      	str	r3, [sp, #32]
 8006c34:	2300      	movs	r3, #0
 8006c36:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c38:	e7bf      	b.n	8006bba <_dtoa_r+0x1e2>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	dc52      	bgt.n	8006cea <_dtoa_r+0x312>
 8006c44:	2301      	movs	r3, #1
 8006c46:	9301      	str	r3, [sp, #4]
 8006c48:	9304      	str	r3, [sp, #16]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	920a      	str	r2, [sp, #40]	; 0x28
 8006c4e:	e00b      	b.n	8006c68 <_dtoa_r+0x290>
 8006c50:	2301      	movs	r3, #1
 8006c52:	e7f3      	b.n	8006c3c <_dtoa_r+0x264>
 8006c54:	2300      	movs	r3, #0
 8006c56:	9309      	str	r3, [sp, #36]	; 0x24
 8006c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c5a:	445b      	add	r3, fp
 8006c5c:	9301      	str	r3, [sp, #4]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	9304      	str	r3, [sp, #16]
 8006c64:	bfb8      	it	lt
 8006c66:	2301      	movlt	r3, #1
 8006c68:	69e0      	ldr	r0, [r4, #28]
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	2204      	movs	r2, #4
 8006c6e:	f102 0614 	add.w	r6, r2, #20
 8006c72:	429e      	cmp	r6, r3
 8006c74:	d93d      	bls.n	8006cf2 <_dtoa_r+0x31a>
 8006c76:	6041      	str	r1, [r0, #4]
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f000 fd9f 	bl	80077bc <_Balloc>
 8006c7e:	9000      	str	r0, [sp, #0]
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d139      	bne.n	8006cf8 <_dtoa_r+0x320>
 8006c84:	4b16      	ldr	r3, [pc, #88]	; (8006ce0 <_dtoa_r+0x308>)
 8006c86:	4602      	mov	r2, r0
 8006c88:	f240 11af 	movw	r1, #431	; 0x1af
 8006c8c:	e6bd      	b.n	8006a0a <_dtoa_r+0x32>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e7e1      	b.n	8006c56 <_dtoa_r+0x27e>
 8006c92:	2501      	movs	r5, #1
 8006c94:	2300      	movs	r3, #0
 8006c96:	9307      	str	r3, [sp, #28]
 8006c98:	9509      	str	r5, [sp, #36]	; 0x24
 8006c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c9e:	9301      	str	r3, [sp, #4]
 8006ca0:	9304      	str	r3, [sp, #16]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2312      	movs	r3, #18
 8006ca6:	e7d1      	b.n	8006c4c <_dtoa_r+0x274>
 8006ca8:	636f4361 	.word	0x636f4361
 8006cac:	3fd287a7 	.word	0x3fd287a7
 8006cb0:	8b60c8b3 	.word	0x8b60c8b3
 8006cb4:	3fc68a28 	.word	0x3fc68a28
 8006cb8:	509f79fb 	.word	0x509f79fb
 8006cbc:	3fd34413 	.word	0x3fd34413
 8006cc0:	08008a99 	.word	0x08008a99
 8006cc4:	08008ab0 	.word	0x08008ab0
 8006cc8:	7ff00000 	.word	0x7ff00000
 8006ccc:	08008a95 	.word	0x08008a95
 8006cd0:	08008a8c 	.word	0x08008a8c
 8006cd4:	08008a69 	.word	0x08008a69
 8006cd8:	3ff80000 	.word	0x3ff80000
 8006cdc:	08008ba0 	.word	0x08008ba0
 8006ce0:	08008b08 	.word	0x08008b08
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ce8:	e7d7      	b.n	8006c9a <_dtoa_r+0x2c2>
 8006cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cec:	9301      	str	r3, [sp, #4]
 8006cee:	9304      	str	r3, [sp, #16]
 8006cf0:	e7ba      	b.n	8006c68 <_dtoa_r+0x290>
 8006cf2:	3101      	adds	r1, #1
 8006cf4:	0052      	lsls	r2, r2, #1
 8006cf6:	e7ba      	b.n	8006c6e <_dtoa_r+0x296>
 8006cf8:	69e3      	ldr	r3, [r4, #28]
 8006cfa:	9a00      	ldr	r2, [sp, #0]
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	9b04      	ldr	r3, [sp, #16]
 8006d00:	2b0e      	cmp	r3, #14
 8006d02:	f200 80a8 	bhi.w	8006e56 <_dtoa_r+0x47e>
 8006d06:	2d00      	cmp	r5, #0
 8006d08:	f000 80a5 	beq.w	8006e56 <_dtoa_r+0x47e>
 8006d0c:	f1bb 0f00 	cmp.w	fp, #0
 8006d10:	dd38      	ble.n	8006d84 <_dtoa_r+0x3ac>
 8006d12:	4bc0      	ldr	r3, [pc, #768]	; (8007014 <_dtoa_r+0x63c>)
 8006d14:	f00b 020f 	and.w	r2, fp, #15
 8006d18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d1c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006d20:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006d24:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006d28:	d019      	beq.n	8006d5e <_dtoa_r+0x386>
 8006d2a:	4bbb      	ldr	r3, [pc, #748]	; (8007018 <_dtoa_r+0x640>)
 8006d2c:	ec51 0b18 	vmov	r0, r1, d8
 8006d30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d34:	f7f9 fd8a 	bl	800084c <__aeabi_ddiv>
 8006d38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d3c:	f008 080f 	and.w	r8, r8, #15
 8006d40:	2503      	movs	r5, #3
 8006d42:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007018 <_dtoa_r+0x640>
 8006d46:	f1b8 0f00 	cmp.w	r8, #0
 8006d4a:	d10a      	bne.n	8006d62 <_dtoa_r+0x38a>
 8006d4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d50:	4632      	mov	r2, r6
 8006d52:	463b      	mov	r3, r7
 8006d54:	f7f9 fd7a 	bl	800084c <__aeabi_ddiv>
 8006d58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d5c:	e02b      	b.n	8006db6 <_dtoa_r+0x3de>
 8006d5e:	2502      	movs	r5, #2
 8006d60:	e7ef      	b.n	8006d42 <_dtoa_r+0x36a>
 8006d62:	f018 0f01 	tst.w	r8, #1
 8006d66:	d008      	beq.n	8006d7a <_dtoa_r+0x3a2>
 8006d68:	4630      	mov	r0, r6
 8006d6a:	4639      	mov	r1, r7
 8006d6c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006d70:	f7f9 fc42 	bl	80005f8 <__aeabi_dmul>
 8006d74:	3501      	adds	r5, #1
 8006d76:	4606      	mov	r6, r0
 8006d78:	460f      	mov	r7, r1
 8006d7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006d7e:	f109 0908 	add.w	r9, r9, #8
 8006d82:	e7e0      	b.n	8006d46 <_dtoa_r+0x36e>
 8006d84:	f000 809f 	beq.w	8006ec6 <_dtoa_r+0x4ee>
 8006d88:	f1cb 0600 	rsb	r6, fp, #0
 8006d8c:	4ba1      	ldr	r3, [pc, #644]	; (8007014 <_dtoa_r+0x63c>)
 8006d8e:	4fa2      	ldr	r7, [pc, #648]	; (8007018 <_dtoa_r+0x640>)
 8006d90:	f006 020f 	and.w	r2, r6, #15
 8006d94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9c:	ec51 0b18 	vmov	r0, r1, d8
 8006da0:	f7f9 fc2a 	bl	80005f8 <__aeabi_dmul>
 8006da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006da8:	1136      	asrs	r6, r6, #4
 8006daa:	2300      	movs	r3, #0
 8006dac:	2502      	movs	r5, #2
 8006dae:	2e00      	cmp	r6, #0
 8006db0:	d17e      	bne.n	8006eb0 <_dtoa_r+0x4d8>
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1d0      	bne.n	8006d58 <_dtoa_r+0x380>
 8006db6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006db8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 8084 	beq.w	8006eca <_dtoa_r+0x4f2>
 8006dc2:	4b96      	ldr	r3, [pc, #600]	; (800701c <_dtoa_r+0x644>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	4649      	mov	r1, r9
 8006dca:	f7f9 fe87 	bl	8000adc <__aeabi_dcmplt>
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d07b      	beq.n	8006eca <_dtoa_r+0x4f2>
 8006dd2:	9b04      	ldr	r3, [sp, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d078      	beq.n	8006eca <_dtoa_r+0x4f2>
 8006dd8:	9b01      	ldr	r3, [sp, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	dd39      	ble.n	8006e52 <_dtoa_r+0x47a>
 8006dde:	4b90      	ldr	r3, [pc, #576]	; (8007020 <_dtoa_r+0x648>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	4640      	mov	r0, r8
 8006de4:	4649      	mov	r1, r9
 8006de6:	f7f9 fc07 	bl	80005f8 <__aeabi_dmul>
 8006dea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dee:	9e01      	ldr	r6, [sp, #4]
 8006df0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006df4:	3501      	adds	r5, #1
 8006df6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	f7f9 fb92 	bl	8000524 <__aeabi_i2d>
 8006e00:	4642      	mov	r2, r8
 8006e02:	464b      	mov	r3, r9
 8006e04:	f7f9 fbf8 	bl	80005f8 <__aeabi_dmul>
 8006e08:	4b86      	ldr	r3, [pc, #536]	; (8007024 <_dtoa_r+0x64c>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f7f9 fa3e 	bl	800028c <__adddf3>
 8006e10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006e14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e18:	9303      	str	r3, [sp, #12]
 8006e1a:	2e00      	cmp	r6, #0
 8006e1c:	d158      	bne.n	8006ed0 <_dtoa_r+0x4f8>
 8006e1e:	4b82      	ldr	r3, [pc, #520]	; (8007028 <_dtoa_r+0x650>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	4640      	mov	r0, r8
 8006e24:	4649      	mov	r1, r9
 8006e26:	f7f9 fa2f 	bl	8000288 <__aeabi_dsub>
 8006e2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e2e:	4680      	mov	r8, r0
 8006e30:	4689      	mov	r9, r1
 8006e32:	f7f9 fe71 	bl	8000b18 <__aeabi_dcmpgt>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	f040 8296 	bne.w	8007368 <_dtoa_r+0x990>
 8006e3c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006e40:	4640      	mov	r0, r8
 8006e42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e46:	4649      	mov	r1, r9
 8006e48:	f7f9 fe48 	bl	8000adc <__aeabi_dcmplt>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	f040 8289 	bne.w	8007364 <_dtoa_r+0x98c>
 8006e52:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006e56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f2c0 814e 	blt.w	80070fa <_dtoa_r+0x722>
 8006e5e:	f1bb 0f0e 	cmp.w	fp, #14
 8006e62:	f300 814a 	bgt.w	80070fa <_dtoa_r+0x722>
 8006e66:	4b6b      	ldr	r3, [pc, #428]	; (8007014 <_dtoa_r+0x63c>)
 8006e68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006e6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f280 80dc 	bge.w	8007030 <_dtoa_r+0x658>
 8006e78:	9b04      	ldr	r3, [sp, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f300 80d8 	bgt.w	8007030 <_dtoa_r+0x658>
 8006e80:	f040 826f 	bne.w	8007362 <_dtoa_r+0x98a>
 8006e84:	4b68      	ldr	r3, [pc, #416]	; (8007028 <_dtoa_r+0x650>)
 8006e86:	2200      	movs	r2, #0
 8006e88:	4640      	mov	r0, r8
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	f7f9 fbb4 	bl	80005f8 <__aeabi_dmul>
 8006e90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e94:	f7f9 fe36 	bl	8000b04 <__aeabi_dcmpge>
 8006e98:	9e04      	ldr	r6, [sp, #16]
 8006e9a:	4637      	mov	r7, r6
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	f040 8245 	bne.w	800732c <_dtoa_r+0x954>
 8006ea2:	9d00      	ldr	r5, [sp, #0]
 8006ea4:	2331      	movs	r3, #49	; 0x31
 8006ea6:	f805 3b01 	strb.w	r3, [r5], #1
 8006eaa:	f10b 0b01 	add.w	fp, fp, #1
 8006eae:	e241      	b.n	8007334 <_dtoa_r+0x95c>
 8006eb0:	07f2      	lsls	r2, r6, #31
 8006eb2:	d505      	bpl.n	8006ec0 <_dtoa_r+0x4e8>
 8006eb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eb8:	f7f9 fb9e 	bl	80005f8 <__aeabi_dmul>
 8006ebc:	3501      	adds	r5, #1
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	1076      	asrs	r6, r6, #1
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	e773      	b.n	8006dae <_dtoa_r+0x3d6>
 8006ec6:	2502      	movs	r5, #2
 8006ec8:	e775      	b.n	8006db6 <_dtoa_r+0x3de>
 8006eca:	9e04      	ldr	r6, [sp, #16]
 8006ecc:	465f      	mov	r7, fp
 8006ece:	e792      	b.n	8006df6 <_dtoa_r+0x41e>
 8006ed0:	9900      	ldr	r1, [sp, #0]
 8006ed2:	4b50      	ldr	r3, [pc, #320]	; (8007014 <_dtoa_r+0x63c>)
 8006ed4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ed8:	4431      	add	r1, r6
 8006eda:	9102      	str	r1, [sp, #8]
 8006edc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ede:	eeb0 9a47 	vmov.f32	s18, s14
 8006ee2:	eef0 9a67 	vmov.f32	s19, s15
 8006ee6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006eea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006eee:	2900      	cmp	r1, #0
 8006ef0:	d044      	beq.n	8006f7c <_dtoa_r+0x5a4>
 8006ef2:	494e      	ldr	r1, [pc, #312]	; (800702c <_dtoa_r+0x654>)
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	f7f9 fca9 	bl	800084c <__aeabi_ddiv>
 8006efa:	ec53 2b19 	vmov	r2, r3, d9
 8006efe:	f7f9 f9c3 	bl	8000288 <__aeabi_dsub>
 8006f02:	9d00      	ldr	r5, [sp, #0]
 8006f04:	ec41 0b19 	vmov	d9, r0, r1
 8006f08:	4649      	mov	r1, r9
 8006f0a:	4640      	mov	r0, r8
 8006f0c:	f7f9 fe24 	bl	8000b58 <__aeabi_d2iz>
 8006f10:	4606      	mov	r6, r0
 8006f12:	f7f9 fb07 	bl	8000524 <__aeabi_i2d>
 8006f16:	4602      	mov	r2, r0
 8006f18:	460b      	mov	r3, r1
 8006f1a:	4640      	mov	r0, r8
 8006f1c:	4649      	mov	r1, r9
 8006f1e:	f7f9 f9b3 	bl	8000288 <__aeabi_dsub>
 8006f22:	3630      	adds	r6, #48	; 0x30
 8006f24:	f805 6b01 	strb.w	r6, [r5], #1
 8006f28:	ec53 2b19 	vmov	r2, r3, d9
 8006f2c:	4680      	mov	r8, r0
 8006f2e:	4689      	mov	r9, r1
 8006f30:	f7f9 fdd4 	bl	8000adc <__aeabi_dcmplt>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	d164      	bne.n	8007002 <_dtoa_r+0x62a>
 8006f38:	4642      	mov	r2, r8
 8006f3a:	464b      	mov	r3, r9
 8006f3c:	4937      	ldr	r1, [pc, #220]	; (800701c <_dtoa_r+0x644>)
 8006f3e:	2000      	movs	r0, #0
 8006f40:	f7f9 f9a2 	bl	8000288 <__aeabi_dsub>
 8006f44:	ec53 2b19 	vmov	r2, r3, d9
 8006f48:	f7f9 fdc8 	bl	8000adc <__aeabi_dcmplt>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	f040 80b6 	bne.w	80070be <_dtoa_r+0x6e6>
 8006f52:	9b02      	ldr	r3, [sp, #8]
 8006f54:	429d      	cmp	r5, r3
 8006f56:	f43f af7c 	beq.w	8006e52 <_dtoa_r+0x47a>
 8006f5a:	4b31      	ldr	r3, [pc, #196]	; (8007020 <_dtoa_r+0x648>)
 8006f5c:	ec51 0b19 	vmov	r0, r1, d9
 8006f60:	2200      	movs	r2, #0
 8006f62:	f7f9 fb49 	bl	80005f8 <__aeabi_dmul>
 8006f66:	4b2e      	ldr	r3, [pc, #184]	; (8007020 <_dtoa_r+0x648>)
 8006f68:	ec41 0b19 	vmov	d9, r0, r1
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	4640      	mov	r0, r8
 8006f70:	4649      	mov	r1, r9
 8006f72:	f7f9 fb41 	bl	80005f8 <__aeabi_dmul>
 8006f76:	4680      	mov	r8, r0
 8006f78:	4689      	mov	r9, r1
 8006f7a:	e7c5      	b.n	8006f08 <_dtoa_r+0x530>
 8006f7c:	ec51 0b17 	vmov	r0, r1, d7
 8006f80:	f7f9 fb3a 	bl	80005f8 <__aeabi_dmul>
 8006f84:	9b02      	ldr	r3, [sp, #8]
 8006f86:	9d00      	ldr	r5, [sp, #0]
 8006f88:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f8a:	ec41 0b19 	vmov	d9, r0, r1
 8006f8e:	4649      	mov	r1, r9
 8006f90:	4640      	mov	r0, r8
 8006f92:	f7f9 fde1 	bl	8000b58 <__aeabi_d2iz>
 8006f96:	4606      	mov	r6, r0
 8006f98:	f7f9 fac4 	bl	8000524 <__aeabi_i2d>
 8006f9c:	3630      	adds	r6, #48	; 0x30
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	f7f9 f96f 	bl	8000288 <__aeabi_dsub>
 8006faa:	f805 6b01 	strb.w	r6, [r5], #1
 8006fae:	9b02      	ldr	r3, [sp, #8]
 8006fb0:	429d      	cmp	r5, r3
 8006fb2:	4680      	mov	r8, r0
 8006fb4:	4689      	mov	r9, r1
 8006fb6:	f04f 0200 	mov.w	r2, #0
 8006fba:	d124      	bne.n	8007006 <_dtoa_r+0x62e>
 8006fbc:	4b1b      	ldr	r3, [pc, #108]	; (800702c <_dtoa_r+0x654>)
 8006fbe:	ec51 0b19 	vmov	r0, r1, d9
 8006fc2:	f7f9 f963 	bl	800028c <__adddf3>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4640      	mov	r0, r8
 8006fcc:	4649      	mov	r1, r9
 8006fce:	f7f9 fda3 	bl	8000b18 <__aeabi_dcmpgt>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d173      	bne.n	80070be <_dtoa_r+0x6e6>
 8006fd6:	ec53 2b19 	vmov	r2, r3, d9
 8006fda:	4914      	ldr	r1, [pc, #80]	; (800702c <_dtoa_r+0x654>)
 8006fdc:	2000      	movs	r0, #0
 8006fde:	f7f9 f953 	bl	8000288 <__aeabi_dsub>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	4640      	mov	r0, r8
 8006fe8:	4649      	mov	r1, r9
 8006fea:	f7f9 fd77 	bl	8000adc <__aeabi_dcmplt>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	f43f af2f 	beq.w	8006e52 <_dtoa_r+0x47a>
 8006ff4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006ff6:	1e6b      	subs	r3, r5, #1
 8006ff8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ffa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ffe:	2b30      	cmp	r3, #48	; 0x30
 8007000:	d0f8      	beq.n	8006ff4 <_dtoa_r+0x61c>
 8007002:	46bb      	mov	fp, r7
 8007004:	e04a      	b.n	800709c <_dtoa_r+0x6c4>
 8007006:	4b06      	ldr	r3, [pc, #24]	; (8007020 <_dtoa_r+0x648>)
 8007008:	f7f9 faf6 	bl	80005f8 <__aeabi_dmul>
 800700c:	4680      	mov	r8, r0
 800700e:	4689      	mov	r9, r1
 8007010:	e7bd      	b.n	8006f8e <_dtoa_r+0x5b6>
 8007012:	bf00      	nop
 8007014:	08008ba0 	.word	0x08008ba0
 8007018:	08008b78 	.word	0x08008b78
 800701c:	3ff00000 	.word	0x3ff00000
 8007020:	40240000 	.word	0x40240000
 8007024:	401c0000 	.word	0x401c0000
 8007028:	40140000 	.word	0x40140000
 800702c:	3fe00000 	.word	0x3fe00000
 8007030:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007034:	9d00      	ldr	r5, [sp, #0]
 8007036:	4642      	mov	r2, r8
 8007038:	464b      	mov	r3, r9
 800703a:	4630      	mov	r0, r6
 800703c:	4639      	mov	r1, r7
 800703e:	f7f9 fc05 	bl	800084c <__aeabi_ddiv>
 8007042:	f7f9 fd89 	bl	8000b58 <__aeabi_d2iz>
 8007046:	9001      	str	r0, [sp, #4]
 8007048:	f7f9 fa6c 	bl	8000524 <__aeabi_i2d>
 800704c:	4642      	mov	r2, r8
 800704e:	464b      	mov	r3, r9
 8007050:	f7f9 fad2 	bl	80005f8 <__aeabi_dmul>
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	4630      	mov	r0, r6
 800705a:	4639      	mov	r1, r7
 800705c:	f7f9 f914 	bl	8000288 <__aeabi_dsub>
 8007060:	9e01      	ldr	r6, [sp, #4]
 8007062:	9f04      	ldr	r7, [sp, #16]
 8007064:	3630      	adds	r6, #48	; 0x30
 8007066:	f805 6b01 	strb.w	r6, [r5], #1
 800706a:	9e00      	ldr	r6, [sp, #0]
 800706c:	1bae      	subs	r6, r5, r6
 800706e:	42b7      	cmp	r7, r6
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	d134      	bne.n	80070e0 <_dtoa_r+0x708>
 8007076:	f7f9 f909 	bl	800028c <__adddf3>
 800707a:	4642      	mov	r2, r8
 800707c:	464b      	mov	r3, r9
 800707e:	4606      	mov	r6, r0
 8007080:	460f      	mov	r7, r1
 8007082:	f7f9 fd49 	bl	8000b18 <__aeabi_dcmpgt>
 8007086:	b9c8      	cbnz	r0, 80070bc <_dtoa_r+0x6e4>
 8007088:	4642      	mov	r2, r8
 800708a:	464b      	mov	r3, r9
 800708c:	4630      	mov	r0, r6
 800708e:	4639      	mov	r1, r7
 8007090:	f7f9 fd1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007094:	b110      	cbz	r0, 800709c <_dtoa_r+0x6c4>
 8007096:	9b01      	ldr	r3, [sp, #4]
 8007098:	07db      	lsls	r3, r3, #31
 800709a:	d40f      	bmi.n	80070bc <_dtoa_r+0x6e4>
 800709c:	4651      	mov	r1, sl
 800709e:	4620      	mov	r0, r4
 80070a0:	f000 fbcc 	bl	800783c <_Bfree>
 80070a4:	2300      	movs	r3, #0
 80070a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070a8:	702b      	strb	r3, [r5, #0]
 80070aa:	f10b 0301 	add.w	r3, fp, #1
 80070ae:	6013      	str	r3, [r2, #0]
 80070b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f43f ace2 	beq.w	8006a7c <_dtoa_r+0xa4>
 80070b8:	601d      	str	r5, [r3, #0]
 80070ba:	e4df      	b.n	8006a7c <_dtoa_r+0xa4>
 80070bc:	465f      	mov	r7, fp
 80070be:	462b      	mov	r3, r5
 80070c0:	461d      	mov	r5, r3
 80070c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070c6:	2a39      	cmp	r2, #57	; 0x39
 80070c8:	d106      	bne.n	80070d8 <_dtoa_r+0x700>
 80070ca:	9a00      	ldr	r2, [sp, #0]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d1f7      	bne.n	80070c0 <_dtoa_r+0x6e8>
 80070d0:	9900      	ldr	r1, [sp, #0]
 80070d2:	2230      	movs	r2, #48	; 0x30
 80070d4:	3701      	adds	r7, #1
 80070d6:	700a      	strb	r2, [r1, #0]
 80070d8:	781a      	ldrb	r2, [r3, #0]
 80070da:	3201      	adds	r2, #1
 80070dc:	701a      	strb	r2, [r3, #0]
 80070de:	e790      	b.n	8007002 <_dtoa_r+0x62a>
 80070e0:	4ba3      	ldr	r3, [pc, #652]	; (8007370 <_dtoa_r+0x998>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	f7f9 fa88 	bl	80005f8 <__aeabi_dmul>
 80070e8:	2200      	movs	r2, #0
 80070ea:	2300      	movs	r3, #0
 80070ec:	4606      	mov	r6, r0
 80070ee:	460f      	mov	r7, r1
 80070f0:	f7f9 fcea 	bl	8000ac8 <__aeabi_dcmpeq>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d09e      	beq.n	8007036 <_dtoa_r+0x65e>
 80070f8:	e7d0      	b.n	800709c <_dtoa_r+0x6c4>
 80070fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070fc:	2a00      	cmp	r2, #0
 80070fe:	f000 80ca 	beq.w	8007296 <_dtoa_r+0x8be>
 8007102:	9a07      	ldr	r2, [sp, #28]
 8007104:	2a01      	cmp	r2, #1
 8007106:	f300 80ad 	bgt.w	8007264 <_dtoa_r+0x88c>
 800710a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800710c:	2a00      	cmp	r2, #0
 800710e:	f000 80a5 	beq.w	800725c <_dtoa_r+0x884>
 8007112:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007116:	9e08      	ldr	r6, [sp, #32]
 8007118:	9d05      	ldr	r5, [sp, #20]
 800711a:	9a05      	ldr	r2, [sp, #20]
 800711c:	441a      	add	r2, r3
 800711e:	9205      	str	r2, [sp, #20]
 8007120:	9a06      	ldr	r2, [sp, #24]
 8007122:	2101      	movs	r1, #1
 8007124:	441a      	add	r2, r3
 8007126:	4620      	mov	r0, r4
 8007128:	9206      	str	r2, [sp, #24]
 800712a:	f000 fc3d 	bl	80079a8 <__i2b>
 800712e:	4607      	mov	r7, r0
 8007130:	b165      	cbz	r5, 800714c <_dtoa_r+0x774>
 8007132:	9b06      	ldr	r3, [sp, #24]
 8007134:	2b00      	cmp	r3, #0
 8007136:	dd09      	ble.n	800714c <_dtoa_r+0x774>
 8007138:	42ab      	cmp	r3, r5
 800713a:	9a05      	ldr	r2, [sp, #20]
 800713c:	bfa8      	it	ge
 800713e:	462b      	movge	r3, r5
 8007140:	1ad2      	subs	r2, r2, r3
 8007142:	9205      	str	r2, [sp, #20]
 8007144:	9a06      	ldr	r2, [sp, #24]
 8007146:	1aed      	subs	r5, r5, r3
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	9306      	str	r3, [sp, #24]
 800714c:	9b08      	ldr	r3, [sp, #32]
 800714e:	b1f3      	cbz	r3, 800718e <_dtoa_r+0x7b6>
 8007150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 80a3 	beq.w	800729e <_dtoa_r+0x8c6>
 8007158:	2e00      	cmp	r6, #0
 800715a:	dd10      	ble.n	800717e <_dtoa_r+0x7a6>
 800715c:	4639      	mov	r1, r7
 800715e:	4632      	mov	r2, r6
 8007160:	4620      	mov	r0, r4
 8007162:	f000 fce1 	bl	8007b28 <__pow5mult>
 8007166:	4652      	mov	r2, sl
 8007168:	4601      	mov	r1, r0
 800716a:	4607      	mov	r7, r0
 800716c:	4620      	mov	r0, r4
 800716e:	f000 fc31 	bl	80079d4 <__multiply>
 8007172:	4651      	mov	r1, sl
 8007174:	4680      	mov	r8, r0
 8007176:	4620      	mov	r0, r4
 8007178:	f000 fb60 	bl	800783c <_Bfree>
 800717c:	46c2      	mov	sl, r8
 800717e:	9b08      	ldr	r3, [sp, #32]
 8007180:	1b9a      	subs	r2, r3, r6
 8007182:	d004      	beq.n	800718e <_dtoa_r+0x7b6>
 8007184:	4651      	mov	r1, sl
 8007186:	4620      	mov	r0, r4
 8007188:	f000 fcce 	bl	8007b28 <__pow5mult>
 800718c:	4682      	mov	sl, r0
 800718e:	2101      	movs	r1, #1
 8007190:	4620      	mov	r0, r4
 8007192:	f000 fc09 	bl	80079a8 <__i2b>
 8007196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007198:	2b00      	cmp	r3, #0
 800719a:	4606      	mov	r6, r0
 800719c:	f340 8081 	ble.w	80072a2 <_dtoa_r+0x8ca>
 80071a0:	461a      	mov	r2, r3
 80071a2:	4601      	mov	r1, r0
 80071a4:	4620      	mov	r0, r4
 80071a6:	f000 fcbf 	bl	8007b28 <__pow5mult>
 80071aa:	9b07      	ldr	r3, [sp, #28]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	4606      	mov	r6, r0
 80071b0:	dd7a      	ble.n	80072a8 <_dtoa_r+0x8d0>
 80071b2:	f04f 0800 	mov.w	r8, #0
 80071b6:	6933      	ldr	r3, [r6, #16]
 80071b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80071bc:	6918      	ldr	r0, [r3, #16]
 80071be:	f000 fba5 	bl	800790c <__hi0bits>
 80071c2:	f1c0 0020 	rsb	r0, r0, #32
 80071c6:	9b06      	ldr	r3, [sp, #24]
 80071c8:	4418      	add	r0, r3
 80071ca:	f010 001f 	ands.w	r0, r0, #31
 80071ce:	f000 8094 	beq.w	80072fa <_dtoa_r+0x922>
 80071d2:	f1c0 0320 	rsb	r3, r0, #32
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	f340 8085 	ble.w	80072e6 <_dtoa_r+0x90e>
 80071dc:	9b05      	ldr	r3, [sp, #20]
 80071de:	f1c0 001c 	rsb	r0, r0, #28
 80071e2:	4403      	add	r3, r0
 80071e4:	9305      	str	r3, [sp, #20]
 80071e6:	9b06      	ldr	r3, [sp, #24]
 80071e8:	4403      	add	r3, r0
 80071ea:	4405      	add	r5, r0
 80071ec:	9306      	str	r3, [sp, #24]
 80071ee:	9b05      	ldr	r3, [sp, #20]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	dd05      	ble.n	8007200 <_dtoa_r+0x828>
 80071f4:	4651      	mov	r1, sl
 80071f6:	461a      	mov	r2, r3
 80071f8:	4620      	mov	r0, r4
 80071fa:	f000 fcef 	bl	8007bdc <__lshift>
 80071fe:	4682      	mov	sl, r0
 8007200:	9b06      	ldr	r3, [sp, #24]
 8007202:	2b00      	cmp	r3, #0
 8007204:	dd05      	ble.n	8007212 <_dtoa_r+0x83a>
 8007206:	4631      	mov	r1, r6
 8007208:	461a      	mov	r2, r3
 800720a:	4620      	mov	r0, r4
 800720c:	f000 fce6 	bl	8007bdc <__lshift>
 8007210:	4606      	mov	r6, r0
 8007212:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007214:	2b00      	cmp	r3, #0
 8007216:	d072      	beq.n	80072fe <_dtoa_r+0x926>
 8007218:	4631      	mov	r1, r6
 800721a:	4650      	mov	r0, sl
 800721c:	f000 fd4a 	bl	8007cb4 <__mcmp>
 8007220:	2800      	cmp	r0, #0
 8007222:	da6c      	bge.n	80072fe <_dtoa_r+0x926>
 8007224:	2300      	movs	r3, #0
 8007226:	4651      	mov	r1, sl
 8007228:	220a      	movs	r2, #10
 800722a:	4620      	mov	r0, r4
 800722c:	f000 fb28 	bl	8007880 <__multadd>
 8007230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007232:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007236:	4682      	mov	sl, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 81b0 	beq.w	800759e <_dtoa_r+0xbc6>
 800723e:	2300      	movs	r3, #0
 8007240:	4639      	mov	r1, r7
 8007242:	220a      	movs	r2, #10
 8007244:	4620      	mov	r0, r4
 8007246:	f000 fb1b 	bl	8007880 <__multadd>
 800724a:	9b01      	ldr	r3, [sp, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	4607      	mov	r7, r0
 8007250:	f300 8096 	bgt.w	8007380 <_dtoa_r+0x9a8>
 8007254:	9b07      	ldr	r3, [sp, #28]
 8007256:	2b02      	cmp	r3, #2
 8007258:	dc59      	bgt.n	800730e <_dtoa_r+0x936>
 800725a:	e091      	b.n	8007380 <_dtoa_r+0x9a8>
 800725c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800725e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007262:	e758      	b.n	8007116 <_dtoa_r+0x73e>
 8007264:	9b04      	ldr	r3, [sp, #16]
 8007266:	1e5e      	subs	r6, r3, #1
 8007268:	9b08      	ldr	r3, [sp, #32]
 800726a:	42b3      	cmp	r3, r6
 800726c:	bfbf      	itttt	lt
 800726e:	9b08      	ldrlt	r3, [sp, #32]
 8007270:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007272:	9608      	strlt	r6, [sp, #32]
 8007274:	1af3      	sublt	r3, r6, r3
 8007276:	bfb4      	ite	lt
 8007278:	18d2      	addlt	r2, r2, r3
 800727a:	1b9e      	subge	r6, r3, r6
 800727c:	9b04      	ldr	r3, [sp, #16]
 800727e:	bfbc      	itt	lt
 8007280:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007282:	2600      	movlt	r6, #0
 8007284:	2b00      	cmp	r3, #0
 8007286:	bfb7      	itett	lt
 8007288:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800728c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007290:	1a9d      	sublt	r5, r3, r2
 8007292:	2300      	movlt	r3, #0
 8007294:	e741      	b.n	800711a <_dtoa_r+0x742>
 8007296:	9e08      	ldr	r6, [sp, #32]
 8007298:	9d05      	ldr	r5, [sp, #20]
 800729a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800729c:	e748      	b.n	8007130 <_dtoa_r+0x758>
 800729e:	9a08      	ldr	r2, [sp, #32]
 80072a0:	e770      	b.n	8007184 <_dtoa_r+0x7ac>
 80072a2:	9b07      	ldr	r3, [sp, #28]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	dc19      	bgt.n	80072dc <_dtoa_r+0x904>
 80072a8:	9b02      	ldr	r3, [sp, #8]
 80072aa:	b9bb      	cbnz	r3, 80072dc <_dtoa_r+0x904>
 80072ac:	9b03      	ldr	r3, [sp, #12]
 80072ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072b2:	b99b      	cbnz	r3, 80072dc <_dtoa_r+0x904>
 80072b4:	9b03      	ldr	r3, [sp, #12]
 80072b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072ba:	0d1b      	lsrs	r3, r3, #20
 80072bc:	051b      	lsls	r3, r3, #20
 80072be:	b183      	cbz	r3, 80072e2 <_dtoa_r+0x90a>
 80072c0:	9b05      	ldr	r3, [sp, #20]
 80072c2:	3301      	adds	r3, #1
 80072c4:	9305      	str	r3, [sp, #20]
 80072c6:	9b06      	ldr	r3, [sp, #24]
 80072c8:	3301      	adds	r3, #1
 80072ca:	9306      	str	r3, [sp, #24]
 80072cc:	f04f 0801 	mov.w	r8, #1
 80072d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f47f af6f 	bne.w	80071b6 <_dtoa_r+0x7de>
 80072d8:	2001      	movs	r0, #1
 80072da:	e774      	b.n	80071c6 <_dtoa_r+0x7ee>
 80072dc:	f04f 0800 	mov.w	r8, #0
 80072e0:	e7f6      	b.n	80072d0 <_dtoa_r+0x8f8>
 80072e2:	4698      	mov	r8, r3
 80072e4:	e7f4      	b.n	80072d0 <_dtoa_r+0x8f8>
 80072e6:	d082      	beq.n	80071ee <_dtoa_r+0x816>
 80072e8:	9a05      	ldr	r2, [sp, #20]
 80072ea:	331c      	adds	r3, #28
 80072ec:	441a      	add	r2, r3
 80072ee:	9205      	str	r2, [sp, #20]
 80072f0:	9a06      	ldr	r2, [sp, #24]
 80072f2:	441a      	add	r2, r3
 80072f4:	441d      	add	r5, r3
 80072f6:	9206      	str	r2, [sp, #24]
 80072f8:	e779      	b.n	80071ee <_dtoa_r+0x816>
 80072fa:	4603      	mov	r3, r0
 80072fc:	e7f4      	b.n	80072e8 <_dtoa_r+0x910>
 80072fe:	9b04      	ldr	r3, [sp, #16]
 8007300:	2b00      	cmp	r3, #0
 8007302:	dc37      	bgt.n	8007374 <_dtoa_r+0x99c>
 8007304:	9b07      	ldr	r3, [sp, #28]
 8007306:	2b02      	cmp	r3, #2
 8007308:	dd34      	ble.n	8007374 <_dtoa_r+0x99c>
 800730a:	9b04      	ldr	r3, [sp, #16]
 800730c:	9301      	str	r3, [sp, #4]
 800730e:	9b01      	ldr	r3, [sp, #4]
 8007310:	b963      	cbnz	r3, 800732c <_dtoa_r+0x954>
 8007312:	4631      	mov	r1, r6
 8007314:	2205      	movs	r2, #5
 8007316:	4620      	mov	r0, r4
 8007318:	f000 fab2 	bl	8007880 <__multadd>
 800731c:	4601      	mov	r1, r0
 800731e:	4606      	mov	r6, r0
 8007320:	4650      	mov	r0, sl
 8007322:	f000 fcc7 	bl	8007cb4 <__mcmp>
 8007326:	2800      	cmp	r0, #0
 8007328:	f73f adbb 	bgt.w	8006ea2 <_dtoa_r+0x4ca>
 800732c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800732e:	9d00      	ldr	r5, [sp, #0]
 8007330:	ea6f 0b03 	mvn.w	fp, r3
 8007334:	f04f 0800 	mov.w	r8, #0
 8007338:	4631      	mov	r1, r6
 800733a:	4620      	mov	r0, r4
 800733c:	f000 fa7e 	bl	800783c <_Bfree>
 8007340:	2f00      	cmp	r7, #0
 8007342:	f43f aeab 	beq.w	800709c <_dtoa_r+0x6c4>
 8007346:	f1b8 0f00 	cmp.w	r8, #0
 800734a:	d005      	beq.n	8007358 <_dtoa_r+0x980>
 800734c:	45b8      	cmp	r8, r7
 800734e:	d003      	beq.n	8007358 <_dtoa_r+0x980>
 8007350:	4641      	mov	r1, r8
 8007352:	4620      	mov	r0, r4
 8007354:	f000 fa72 	bl	800783c <_Bfree>
 8007358:	4639      	mov	r1, r7
 800735a:	4620      	mov	r0, r4
 800735c:	f000 fa6e 	bl	800783c <_Bfree>
 8007360:	e69c      	b.n	800709c <_dtoa_r+0x6c4>
 8007362:	2600      	movs	r6, #0
 8007364:	4637      	mov	r7, r6
 8007366:	e7e1      	b.n	800732c <_dtoa_r+0x954>
 8007368:	46bb      	mov	fp, r7
 800736a:	4637      	mov	r7, r6
 800736c:	e599      	b.n	8006ea2 <_dtoa_r+0x4ca>
 800736e:	bf00      	nop
 8007370:	40240000 	.word	0x40240000
 8007374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 80c8 	beq.w	800750c <_dtoa_r+0xb34>
 800737c:	9b04      	ldr	r3, [sp, #16]
 800737e:	9301      	str	r3, [sp, #4]
 8007380:	2d00      	cmp	r5, #0
 8007382:	dd05      	ble.n	8007390 <_dtoa_r+0x9b8>
 8007384:	4639      	mov	r1, r7
 8007386:	462a      	mov	r2, r5
 8007388:	4620      	mov	r0, r4
 800738a:	f000 fc27 	bl	8007bdc <__lshift>
 800738e:	4607      	mov	r7, r0
 8007390:	f1b8 0f00 	cmp.w	r8, #0
 8007394:	d05b      	beq.n	800744e <_dtoa_r+0xa76>
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	4620      	mov	r0, r4
 800739a:	f000 fa0f 	bl	80077bc <_Balloc>
 800739e:	4605      	mov	r5, r0
 80073a0:	b928      	cbnz	r0, 80073ae <_dtoa_r+0x9d6>
 80073a2:	4b83      	ldr	r3, [pc, #524]	; (80075b0 <_dtoa_r+0xbd8>)
 80073a4:	4602      	mov	r2, r0
 80073a6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80073aa:	f7ff bb2e 	b.w	8006a0a <_dtoa_r+0x32>
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	3202      	adds	r2, #2
 80073b2:	0092      	lsls	r2, r2, #2
 80073b4:	f107 010c 	add.w	r1, r7, #12
 80073b8:	300c      	adds	r0, #12
 80073ba:	f000 ffab 	bl	8008314 <memcpy>
 80073be:	2201      	movs	r2, #1
 80073c0:	4629      	mov	r1, r5
 80073c2:	4620      	mov	r0, r4
 80073c4:	f000 fc0a 	bl	8007bdc <__lshift>
 80073c8:	9b00      	ldr	r3, [sp, #0]
 80073ca:	3301      	adds	r3, #1
 80073cc:	9304      	str	r3, [sp, #16]
 80073ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073d2:	4413      	add	r3, r2
 80073d4:	9308      	str	r3, [sp, #32]
 80073d6:	9b02      	ldr	r3, [sp, #8]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	46b8      	mov	r8, r7
 80073de:	9306      	str	r3, [sp, #24]
 80073e0:	4607      	mov	r7, r0
 80073e2:	9b04      	ldr	r3, [sp, #16]
 80073e4:	4631      	mov	r1, r6
 80073e6:	3b01      	subs	r3, #1
 80073e8:	4650      	mov	r0, sl
 80073ea:	9301      	str	r3, [sp, #4]
 80073ec:	f7ff fa6b 	bl	80068c6 <quorem>
 80073f0:	4641      	mov	r1, r8
 80073f2:	9002      	str	r0, [sp, #8]
 80073f4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80073f8:	4650      	mov	r0, sl
 80073fa:	f000 fc5b 	bl	8007cb4 <__mcmp>
 80073fe:	463a      	mov	r2, r7
 8007400:	9005      	str	r0, [sp, #20]
 8007402:	4631      	mov	r1, r6
 8007404:	4620      	mov	r0, r4
 8007406:	f000 fc71 	bl	8007cec <__mdiff>
 800740a:	68c2      	ldr	r2, [r0, #12]
 800740c:	4605      	mov	r5, r0
 800740e:	bb02      	cbnz	r2, 8007452 <_dtoa_r+0xa7a>
 8007410:	4601      	mov	r1, r0
 8007412:	4650      	mov	r0, sl
 8007414:	f000 fc4e 	bl	8007cb4 <__mcmp>
 8007418:	4602      	mov	r2, r0
 800741a:	4629      	mov	r1, r5
 800741c:	4620      	mov	r0, r4
 800741e:	9209      	str	r2, [sp, #36]	; 0x24
 8007420:	f000 fa0c 	bl	800783c <_Bfree>
 8007424:	9b07      	ldr	r3, [sp, #28]
 8007426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007428:	9d04      	ldr	r5, [sp, #16]
 800742a:	ea43 0102 	orr.w	r1, r3, r2
 800742e:	9b06      	ldr	r3, [sp, #24]
 8007430:	4319      	orrs	r1, r3
 8007432:	d110      	bne.n	8007456 <_dtoa_r+0xa7e>
 8007434:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007438:	d029      	beq.n	800748e <_dtoa_r+0xab6>
 800743a:	9b05      	ldr	r3, [sp, #20]
 800743c:	2b00      	cmp	r3, #0
 800743e:	dd02      	ble.n	8007446 <_dtoa_r+0xa6e>
 8007440:	9b02      	ldr	r3, [sp, #8]
 8007442:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007446:	9b01      	ldr	r3, [sp, #4]
 8007448:	f883 9000 	strb.w	r9, [r3]
 800744c:	e774      	b.n	8007338 <_dtoa_r+0x960>
 800744e:	4638      	mov	r0, r7
 8007450:	e7ba      	b.n	80073c8 <_dtoa_r+0x9f0>
 8007452:	2201      	movs	r2, #1
 8007454:	e7e1      	b.n	800741a <_dtoa_r+0xa42>
 8007456:	9b05      	ldr	r3, [sp, #20]
 8007458:	2b00      	cmp	r3, #0
 800745a:	db04      	blt.n	8007466 <_dtoa_r+0xa8e>
 800745c:	9907      	ldr	r1, [sp, #28]
 800745e:	430b      	orrs	r3, r1
 8007460:	9906      	ldr	r1, [sp, #24]
 8007462:	430b      	orrs	r3, r1
 8007464:	d120      	bne.n	80074a8 <_dtoa_r+0xad0>
 8007466:	2a00      	cmp	r2, #0
 8007468:	dded      	ble.n	8007446 <_dtoa_r+0xa6e>
 800746a:	4651      	mov	r1, sl
 800746c:	2201      	movs	r2, #1
 800746e:	4620      	mov	r0, r4
 8007470:	f000 fbb4 	bl	8007bdc <__lshift>
 8007474:	4631      	mov	r1, r6
 8007476:	4682      	mov	sl, r0
 8007478:	f000 fc1c 	bl	8007cb4 <__mcmp>
 800747c:	2800      	cmp	r0, #0
 800747e:	dc03      	bgt.n	8007488 <_dtoa_r+0xab0>
 8007480:	d1e1      	bne.n	8007446 <_dtoa_r+0xa6e>
 8007482:	f019 0f01 	tst.w	r9, #1
 8007486:	d0de      	beq.n	8007446 <_dtoa_r+0xa6e>
 8007488:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800748c:	d1d8      	bne.n	8007440 <_dtoa_r+0xa68>
 800748e:	9a01      	ldr	r2, [sp, #4]
 8007490:	2339      	movs	r3, #57	; 0x39
 8007492:	7013      	strb	r3, [r2, #0]
 8007494:	462b      	mov	r3, r5
 8007496:	461d      	mov	r5, r3
 8007498:	3b01      	subs	r3, #1
 800749a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800749e:	2a39      	cmp	r2, #57	; 0x39
 80074a0:	d06c      	beq.n	800757c <_dtoa_r+0xba4>
 80074a2:	3201      	adds	r2, #1
 80074a4:	701a      	strb	r2, [r3, #0]
 80074a6:	e747      	b.n	8007338 <_dtoa_r+0x960>
 80074a8:	2a00      	cmp	r2, #0
 80074aa:	dd07      	ble.n	80074bc <_dtoa_r+0xae4>
 80074ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074b0:	d0ed      	beq.n	800748e <_dtoa_r+0xab6>
 80074b2:	9a01      	ldr	r2, [sp, #4]
 80074b4:	f109 0301 	add.w	r3, r9, #1
 80074b8:	7013      	strb	r3, [r2, #0]
 80074ba:	e73d      	b.n	8007338 <_dtoa_r+0x960>
 80074bc:	9b04      	ldr	r3, [sp, #16]
 80074be:	9a08      	ldr	r2, [sp, #32]
 80074c0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d043      	beq.n	8007550 <_dtoa_r+0xb78>
 80074c8:	4651      	mov	r1, sl
 80074ca:	2300      	movs	r3, #0
 80074cc:	220a      	movs	r2, #10
 80074ce:	4620      	mov	r0, r4
 80074d0:	f000 f9d6 	bl	8007880 <__multadd>
 80074d4:	45b8      	cmp	r8, r7
 80074d6:	4682      	mov	sl, r0
 80074d8:	f04f 0300 	mov.w	r3, #0
 80074dc:	f04f 020a 	mov.w	r2, #10
 80074e0:	4641      	mov	r1, r8
 80074e2:	4620      	mov	r0, r4
 80074e4:	d107      	bne.n	80074f6 <_dtoa_r+0xb1e>
 80074e6:	f000 f9cb 	bl	8007880 <__multadd>
 80074ea:	4680      	mov	r8, r0
 80074ec:	4607      	mov	r7, r0
 80074ee:	9b04      	ldr	r3, [sp, #16]
 80074f0:	3301      	adds	r3, #1
 80074f2:	9304      	str	r3, [sp, #16]
 80074f4:	e775      	b.n	80073e2 <_dtoa_r+0xa0a>
 80074f6:	f000 f9c3 	bl	8007880 <__multadd>
 80074fa:	4639      	mov	r1, r7
 80074fc:	4680      	mov	r8, r0
 80074fe:	2300      	movs	r3, #0
 8007500:	220a      	movs	r2, #10
 8007502:	4620      	mov	r0, r4
 8007504:	f000 f9bc 	bl	8007880 <__multadd>
 8007508:	4607      	mov	r7, r0
 800750a:	e7f0      	b.n	80074ee <_dtoa_r+0xb16>
 800750c:	9b04      	ldr	r3, [sp, #16]
 800750e:	9301      	str	r3, [sp, #4]
 8007510:	9d00      	ldr	r5, [sp, #0]
 8007512:	4631      	mov	r1, r6
 8007514:	4650      	mov	r0, sl
 8007516:	f7ff f9d6 	bl	80068c6 <quorem>
 800751a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800751e:	9b00      	ldr	r3, [sp, #0]
 8007520:	f805 9b01 	strb.w	r9, [r5], #1
 8007524:	1aea      	subs	r2, r5, r3
 8007526:	9b01      	ldr	r3, [sp, #4]
 8007528:	4293      	cmp	r3, r2
 800752a:	dd07      	ble.n	800753c <_dtoa_r+0xb64>
 800752c:	4651      	mov	r1, sl
 800752e:	2300      	movs	r3, #0
 8007530:	220a      	movs	r2, #10
 8007532:	4620      	mov	r0, r4
 8007534:	f000 f9a4 	bl	8007880 <__multadd>
 8007538:	4682      	mov	sl, r0
 800753a:	e7ea      	b.n	8007512 <_dtoa_r+0xb3a>
 800753c:	9b01      	ldr	r3, [sp, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	bfc8      	it	gt
 8007542:	461d      	movgt	r5, r3
 8007544:	9b00      	ldr	r3, [sp, #0]
 8007546:	bfd8      	it	le
 8007548:	2501      	movle	r5, #1
 800754a:	441d      	add	r5, r3
 800754c:	f04f 0800 	mov.w	r8, #0
 8007550:	4651      	mov	r1, sl
 8007552:	2201      	movs	r2, #1
 8007554:	4620      	mov	r0, r4
 8007556:	f000 fb41 	bl	8007bdc <__lshift>
 800755a:	4631      	mov	r1, r6
 800755c:	4682      	mov	sl, r0
 800755e:	f000 fba9 	bl	8007cb4 <__mcmp>
 8007562:	2800      	cmp	r0, #0
 8007564:	dc96      	bgt.n	8007494 <_dtoa_r+0xabc>
 8007566:	d102      	bne.n	800756e <_dtoa_r+0xb96>
 8007568:	f019 0f01 	tst.w	r9, #1
 800756c:	d192      	bne.n	8007494 <_dtoa_r+0xabc>
 800756e:	462b      	mov	r3, r5
 8007570:	461d      	mov	r5, r3
 8007572:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007576:	2a30      	cmp	r2, #48	; 0x30
 8007578:	d0fa      	beq.n	8007570 <_dtoa_r+0xb98>
 800757a:	e6dd      	b.n	8007338 <_dtoa_r+0x960>
 800757c:	9a00      	ldr	r2, [sp, #0]
 800757e:	429a      	cmp	r2, r3
 8007580:	d189      	bne.n	8007496 <_dtoa_r+0xabe>
 8007582:	f10b 0b01 	add.w	fp, fp, #1
 8007586:	2331      	movs	r3, #49	; 0x31
 8007588:	e796      	b.n	80074b8 <_dtoa_r+0xae0>
 800758a:	4b0a      	ldr	r3, [pc, #40]	; (80075b4 <_dtoa_r+0xbdc>)
 800758c:	f7ff ba99 	b.w	8006ac2 <_dtoa_r+0xea>
 8007590:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007592:	2b00      	cmp	r3, #0
 8007594:	f47f aa6d 	bne.w	8006a72 <_dtoa_r+0x9a>
 8007598:	4b07      	ldr	r3, [pc, #28]	; (80075b8 <_dtoa_r+0xbe0>)
 800759a:	f7ff ba92 	b.w	8006ac2 <_dtoa_r+0xea>
 800759e:	9b01      	ldr	r3, [sp, #4]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	dcb5      	bgt.n	8007510 <_dtoa_r+0xb38>
 80075a4:	9b07      	ldr	r3, [sp, #28]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	f73f aeb1 	bgt.w	800730e <_dtoa_r+0x936>
 80075ac:	e7b0      	b.n	8007510 <_dtoa_r+0xb38>
 80075ae:	bf00      	nop
 80075b0:	08008b08 	.word	0x08008b08
 80075b4:	08008a68 	.word	0x08008a68
 80075b8:	08008a8c 	.word	0x08008a8c

080075bc <_free_r>:
 80075bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075be:	2900      	cmp	r1, #0
 80075c0:	d044      	beq.n	800764c <_free_r+0x90>
 80075c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075c6:	9001      	str	r0, [sp, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f1a1 0404 	sub.w	r4, r1, #4
 80075ce:	bfb8      	it	lt
 80075d0:	18e4      	addlt	r4, r4, r3
 80075d2:	f000 f8e7 	bl	80077a4 <__malloc_lock>
 80075d6:	4a1e      	ldr	r2, [pc, #120]	; (8007650 <_free_r+0x94>)
 80075d8:	9801      	ldr	r0, [sp, #4]
 80075da:	6813      	ldr	r3, [r2, #0]
 80075dc:	b933      	cbnz	r3, 80075ec <_free_r+0x30>
 80075de:	6063      	str	r3, [r4, #4]
 80075e0:	6014      	str	r4, [r2, #0]
 80075e2:	b003      	add	sp, #12
 80075e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075e8:	f000 b8e2 	b.w	80077b0 <__malloc_unlock>
 80075ec:	42a3      	cmp	r3, r4
 80075ee:	d908      	bls.n	8007602 <_free_r+0x46>
 80075f0:	6825      	ldr	r5, [r4, #0]
 80075f2:	1961      	adds	r1, r4, r5
 80075f4:	428b      	cmp	r3, r1
 80075f6:	bf01      	itttt	eq
 80075f8:	6819      	ldreq	r1, [r3, #0]
 80075fa:	685b      	ldreq	r3, [r3, #4]
 80075fc:	1949      	addeq	r1, r1, r5
 80075fe:	6021      	streq	r1, [r4, #0]
 8007600:	e7ed      	b.n	80075de <_free_r+0x22>
 8007602:	461a      	mov	r2, r3
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	b10b      	cbz	r3, 800760c <_free_r+0x50>
 8007608:	42a3      	cmp	r3, r4
 800760a:	d9fa      	bls.n	8007602 <_free_r+0x46>
 800760c:	6811      	ldr	r1, [r2, #0]
 800760e:	1855      	adds	r5, r2, r1
 8007610:	42a5      	cmp	r5, r4
 8007612:	d10b      	bne.n	800762c <_free_r+0x70>
 8007614:	6824      	ldr	r4, [r4, #0]
 8007616:	4421      	add	r1, r4
 8007618:	1854      	adds	r4, r2, r1
 800761a:	42a3      	cmp	r3, r4
 800761c:	6011      	str	r1, [r2, #0]
 800761e:	d1e0      	bne.n	80075e2 <_free_r+0x26>
 8007620:	681c      	ldr	r4, [r3, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	6053      	str	r3, [r2, #4]
 8007626:	440c      	add	r4, r1
 8007628:	6014      	str	r4, [r2, #0]
 800762a:	e7da      	b.n	80075e2 <_free_r+0x26>
 800762c:	d902      	bls.n	8007634 <_free_r+0x78>
 800762e:	230c      	movs	r3, #12
 8007630:	6003      	str	r3, [r0, #0]
 8007632:	e7d6      	b.n	80075e2 <_free_r+0x26>
 8007634:	6825      	ldr	r5, [r4, #0]
 8007636:	1961      	adds	r1, r4, r5
 8007638:	428b      	cmp	r3, r1
 800763a:	bf04      	itt	eq
 800763c:	6819      	ldreq	r1, [r3, #0]
 800763e:	685b      	ldreq	r3, [r3, #4]
 8007640:	6063      	str	r3, [r4, #4]
 8007642:	bf04      	itt	eq
 8007644:	1949      	addeq	r1, r1, r5
 8007646:	6021      	streq	r1, [r4, #0]
 8007648:	6054      	str	r4, [r2, #4]
 800764a:	e7ca      	b.n	80075e2 <_free_r+0x26>
 800764c:	b003      	add	sp, #12
 800764e:	bd30      	pop	{r4, r5, pc}
 8007650:	200006e8 	.word	0x200006e8

08007654 <malloc>:
 8007654:	4b02      	ldr	r3, [pc, #8]	; (8007660 <malloc+0xc>)
 8007656:	4601      	mov	r1, r0
 8007658:	6818      	ldr	r0, [r3, #0]
 800765a:	f000 b823 	b.w	80076a4 <_malloc_r>
 800765e:	bf00      	nop
 8007660:	2000006c 	.word	0x2000006c

08007664 <sbrk_aligned>:
 8007664:	b570      	push	{r4, r5, r6, lr}
 8007666:	4e0e      	ldr	r6, [pc, #56]	; (80076a0 <sbrk_aligned+0x3c>)
 8007668:	460c      	mov	r4, r1
 800766a:	6831      	ldr	r1, [r6, #0]
 800766c:	4605      	mov	r5, r0
 800766e:	b911      	cbnz	r1, 8007676 <sbrk_aligned+0x12>
 8007670:	f000 fe40 	bl	80082f4 <_sbrk_r>
 8007674:	6030      	str	r0, [r6, #0]
 8007676:	4621      	mov	r1, r4
 8007678:	4628      	mov	r0, r5
 800767a:	f000 fe3b 	bl	80082f4 <_sbrk_r>
 800767e:	1c43      	adds	r3, r0, #1
 8007680:	d00a      	beq.n	8007698 <sbrk_aligned+0x34>
 8007682:	1cc4      	adds	r4, r0, #3
 8007684:	f024 0403 	bic.w	r4, r4, #3
 8007688:	42a0      	cmp	r0, r4
 800768a:	d007      	beq.n	800769c <sbrk_aligned+0x38>
 800768c:	1a21      	subs	r1, r4, r0
 800768e:	4628      	mov	r0, r5
 8007690:	f000 fe30 	bl	80082f4 <_sbrk_r>
 8007694:	3001      	adds	r0, #1
 8007696:	d101      	bne.n	800769c <sbrk_aligned+0x38>
 8007698:	f04f 34ff 	mov.w	r4, #4294967295
 800769c:	4620      	mov	r0, r4
 800769e:	bd70      	pop	{r4, r5, r6, pc}
 80076a0:	200006ec 	.word	0x200006ec

080076a4 <_malloc_r>:
 80076a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076a8:	1ccd      	adds	r5, r1, #3
 80076aa:	f025 0503 	bic.w	r5, r5, #3
 80076ae:	3508      	adds	r5, #8
 80076b0:	2d0c      	cmp	r5, #12
 80076b2:	bf38      	it	cc
 80076b4:	250c      	movcc	r5, #12
 80076b6:	2d00      	cmp	r5, #0
 80076b8:	4607      	mov	r7, r0
 80076ba:	db01      	blt.n	80076c0 <_malloc_r+0x1c>
 80076bc:	42a9      	cmp	r1, r5
 80076be:	d905      	bls.n	80076cc <_malloc_r+0x28>
 80076c0:	230c      	movs	r3, #12
 80076c2:	603b      	str	r3, [r7, #0]
 80076c4:	2600      	movs	r6, #0
 80076c6:	4630      	mov	r0, r6
 80076c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80077a0 <_malloc_r+0xfc>
 80076d0:	f000 f868 	bl	80077a4 <__malloc_lock>
 80076d4:	f8d8 3000 	ldr.w	r3, [r8]
 80076d8:	461c      	mov	r4, r3
 80076da:	bb5c      	cbnz	r4, 8007734 <_malloc_r+0x90>
 80076dc:	4629      	mov	r1, r5
 80076de:	4638      	mov	r0, r7
 80076e0:	f7ff ffc0 	bl	8007664 <sbrk_aligned>
 80076e4:	1c43      	adds	r3, r0, #1
 80076e6:	4604      	mov	r4, r0
 80076e8:	d155      	bne.n	8007796 <_malloc_r+0xf2>
 80076ea:	f8d8 4000 	ldr.w	r4, [r8]
 80076ee:	4626      	mov	r6, r4
 80076f0:	2e00      	cmp	r6, #0
 80076f2:	d145      	bne.n	8007780 <_malloc_r+0xdc>
 80076f4:	2c00      	cmp	r4, #0
 80076f6:	d048      	beq.n	800778a <_malloc_r+0xe6>
 80076f8:	6823      	ldr	r3, [r4, #0]
 80076fa:	4631      	mov	r1, r6
 80076fc:	4638      	mov	r0, r7
 80076fe:	eb04 0903 	add.w	r9, r4, r3
 8007702:	f000 fdf7 	bl	80082f4 <_sbrk_r>
 8007706:	4581      	cmp	r9, r0
 8007708:	d13f      	bne.n	800778a <_malloc_r+0xe6>
 800770a:	6821      	ldr	r1, [r4, #0]
 800770c:	1a6d      	subs	r5, r5, r1
 800770e:	4629      	mov	r1, r5
 8007710:	4638      	mov	r0, r7
 8007712:	f7ff ffa7 	bl	8007664 <sbrk_aligned>
 8007716:	3001      	adds	r0, #1
 8007718:	d037      	beq.n	800778a <_malloc_r+0xe6>
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	442b      	add	r3, r5
 800771e:	6023      	str	r3, [r4, #0]
 8007720:	f8d8 3000 	ldr.w	r3, [r8]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d038      	beq.n	800779a <_malloc_r+0xf6>
 8007728:	685a      	ldr	r2, [r3, #4]
 800772a:	42a2      	cmp	r2, r4
 800772c:	d12b      	bne.n	8007786 <_malloc_r+0xe2>
 800772e:	2200      	movs	r2, #0
 8007730:	605a      	str	r2, [r3, #4]
 8007732:	e00f      	b.n	8007754 <_malloc_r+0xb0>
 8007734:	6822      	ldr	r2, [r4, #0]
 8007736:	1b52      	subs	r2, r2, r5
 8007738:	d41f      	bmi.n	800777a <_malloc_r+0xd6>
 800773a:	2a0b      	cmp	r2, #11
 800773c:	d917      	bls.n	800776e <_malloc_r+0xca>
 800773e:	1961      	adds	r1, r4, r5
 8007740:	42a3      	cmp	r3, r4
 8007742:	6025      	str	r5, [r4, #0]
 8007744:	bf18      	it	ne
 8007746:	6059      	strne	r1, [r3, #4]
 8007748:	6863      	ldr	r3, [r4, #4]
 800774a:	bf08      	it	eq
 800774c:	f8c8 1000 	streq.w	r1, [r8]
 8007750:	5162      	str	r2, [r4, r5]
 8007752:	604b      	str	r3, [r1, #4]
 8007754:	4638      	mov	r0, r7
 8007756:	f104 060b 	add.w	r6, r4, #11
 800775a:	f000 f829 	bl	80077b0 <__malloc_unlock>
 800775e:	f026 0607 	bic.w	r6, r6, #7
 8007762:	1d23      	adds	r3, r4, #4
 8007764:	1af2      	subs	r2, r6, r3
 8007766:	d0ae      	beq.n	80076c6 <_malloc_r+0x22>
 8007768:	1b9b      	subs	r3, r3, r6
 800776a:	50a3      	str	r3, [r4, r2]
 800776c:	e7ab      	b.n	80076c6 <_malloc_r+0x22>
 800776e:	42a3      	cmp	r3, r4
 8007770:	6862      	ldr	r2, [r4, #4]
 8007772:	d1dd      	bne.n	8007730 <_malloc_r+0x8c>
 8007774:	f8c8 2000 	str.w	r2, [r8]
 8007778:	e7ec      	b.n	8007754 <_malloc_r+0xb0>
 800777a:	4623      	mov	r3, r4
 800777c:	6864      	ldr	r4, [r4, #4]
 800777e:	e7ac      	b.n	80076da <_malloc_r+0x36>
 8007780:	4634      	mov	r4, r6
 8007782:	6876      	ldr	r6, [r6, #4]
 8007784:	e7b4      	b.n	80076f0 <_malloc_r+0x4c>
 8007786:	4613      	mov	r3, r2
 8007788:	e7cc      	b.n	8007724 <_malloc_r+0x80>
 800778a:	230c      	movs	r3, #12
 800778c:	603b      	str	r3, [r7, #0]
 800778e:	4638      	mov	r0, r7
 8007790:	f000 f80e 	bl	80077b0 <__malloc_unlock>
 8007794:	e797      	b.n	80076c6 <_malloc_r+0x22>
 8007796:	6025      	str	r5, [r4, #0]
 8007798:	e7dc      	b.n	8007754 <_malloc_r+0xb0>
 800779a:	605b      	str	r3, [r3, #4]
 800779c:	deff      	udf	#255	; 0xff
 800779e:	bf00      	nop
 80077a0:	200006e8 	.word	0x200006e8

080077a4 <__malloc_lock>:
 80077a4:	4801      	ldr	r0, [pc, #4]	; (80077ac <__malloc_lock+0x8>)
 80077a6:	f7ff b88c 	b.w	80068c2 <__retarget_lock_acquire_recursive>
 80077aa:	bf00      	nop
 80077ac:	200006e4 	.word	0x200006e4

080077b0 <__malloc_unlock>:
 80077b0:	4801      	ldr	r0, [pc, #4]	; (80077b8 <__malloc_unlock+0x8>)
 80077b2:	f7ff b887 	b.w	80068c4 <__retarget_lock_release_recursive>
 80077b6:	bf00      	nop
 80077b8:	200006e4 	.word	0x200006e4

080077bc <_Balloc>:
 80077bc:	b570      	push	{r4, r5, r6, lr}
 80077be:	69c6      	ldr	r6, [r0, #28]
 80077c0:	4604      	mov	r4, r0
 80077c2:	460d      	mov	r5, r1
 80077c4:	b976      	cbnz	r6, 80077e4 <_Balloc+0x28>
 80077c6:	2010      	movs	r0, #16
 80077c8:	f7ff ff44 	bl	8007654 <malloc>
 80077cc:	4602      	mov	r2, r0
 80077ce:	61e0      	str	r0, [r4, #28]
 80077d0:	b920      	cbnz	r0, 80077dc <_Balloc+0x20>
 80077d2:	4b18      	ldr	r3, [pc, #96]	; (8007834 <_Balloc+0x78>)
 80077d4:	4818      	ldr	r0, [pc, #96]	; (8007838 <_Balloc+0x7c>)
 80077d6:	216b      	movs	r1, #107	; 0x6b
 80077d8:	f000 fdaa 	bl	8008330 <__assert_func>
 80077dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077e0:	6006      	str	r6, [r0, #0]
 80077e2:	60c6      	str	r6, [r0, #12]
 80077e4:	69e6      	ldr	r6, [r4, #28]
 80077e6:	68f3      	ldr	r3, [r6, #12]
 80077e8:	b183      	cbz	r3, 800780c <_Balloc+0x50>
 80077ea:	69e3      	ldr	r3, [r4, #28]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077f2:	b9b8      	cbnz	r0, 8007824 <_Balloc+0x68>
 80077f4:	2101      	movs	r1, #1
 80077f6:	fa01 f605 	lsl.w	r6, r1, r5
 80077fa:	1d72      	adds	r2, r6, #5
 80077fc:	0092      	lsls	r2, r2, #2
 80077fe:	4620      	mov	r0, r4
 8007800:	f000 fdb4 	bl	800836c <_calloc_r>
 8007804:	b160      	cbz	r0, 8007820 <_Balloc+0x64>
 8007806:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800780a:	e00e      	b.n	800782a <_Balloc+0x6e>
 800780c:	2221      	movs	r2, #33	; 0x21
 800780e:	2104      	movs	r1, #4
 8007810:	4620      	mov	r0, r4
 8007812:	f000 fdab 	bl	800836c <_calloc_r>
 8007816:	69e3      	ldr	r3, [r4, #28]
 8007818:	60f0      	str	r0, [r6, #12]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e4      	bne.n	80077ea <_Balloc+0x2e>
 8007820:	2000      	movs	r0, #0
 8007822:	bd70      	pop	{r4, r5, r6, pc}
 8007824:	6802      	ldr	r2, [r0, #0]
 8007826:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800782a:	2300      	movs	r3, #0
 800782c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007830:	e7f7      	b.n	8007822 <_Balloc+0x66>
 8007832:	bf00      	nop
 8007834:	08008a99 	.word	0x08008a99
 8007838:	08008b19 	.word	0x08008b19

0800783c <_Bfree>:
 800783c:	b570      	push	{r4, r5, r6, lr}
 800783e:	69c6      	ldr	r6, [r0, #28]
 8007840:	4605      	mov	r5, r0
 8007842:	460c      	mov	r4, r1
 8007844:	b976      	cbnz	r6, 8007864 <_Bfree+0x28>
 8007846:	2010      	movs	r0, #16
 8007848:	f7ff ff04 	bl	8007654 <malloc>
 800784c:	4602      	mov	r2, r0
 800784e:	61e8      	str	r0, [r5, #28]
 8007850:	b920      	cbnz	r0, 800785c <_Bfree+0x20>
 8007852:	4b09      	ldr	r3, [pc, #36]	; (8007878 <_Bfree+0x3c>)
 8007854:	4809      	ldr	r0, [pc, #36]	; (800787c <_Bfree+0x40>)
 8007856:	218f      	movs	r1, #143	; 0x8f
 8007858:	f000 fd6a 	bl	8008330 <__assert_func>
 800785c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007860:	6006      	str	r6, [r0, #0]
 8007862:	60c6      	str	r6, [r0, #12]
 8007864:	b13c      	cbz	r4, 8007876 <_Bfree+0x3a>
 8007866:	69eb      	ldr	r3, [r5, #28]
 8007868:	6862      	ldr	r2, [r4, #4]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007870:	6021      	str	r1, [r4, #0]
 8007872:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007876:	bd70      	pop	{r4, r5, r6, pc}
 8007878:	08008a99 	.word	0x08008a99
 800787c:	08008b19 	.word	0x08008b19

08007880 <__multadd>:
 8007880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007884:	690d      	ldr	r5, [r1, #16]
 8007886:	4607      	mov	r7, r0
 8007888:	460c      	mov	r4, r1
 800788a:	461e      	mov	r6, r3
 800788c:	f101 0c14 	add.w	ip, r1, #20
 8007890:	2000      	movs	r0, #0
 8007892:	f8dc 3000 	ldr.w	r3, [ip]
 8007896:	b299      	uxth	r1, r3
 8007898:	fb02 6101 	mla	r1, r2, r1, r6
 800789c:	0c1e      	lsrs	r6, r3, #16
 800789e:	0c0b      	lsrs	r3, r1, #16
 80078a0:	fb02 3306 	mla	r3, r2, r6, r3
 80078a4:	b289      	uxth	r1, r1
 80078a6:	3001      	adds	r0, #1
 80078a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078ac:	4285      	cmp	r5, r0
 80078ae:	f84c 1b04 	str.w	r1, [ip], #4
 80078b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078b6:	dcec      	bgt.n	8007892 <__multadd+0x12>
 80078b8:	b30e      	cbz	r6, 80078fe <__multadd+0x7e>
 80078ba:	68a3      	ldr	r3, [r4, #8]
 80078bc:	42ab      	cmp	r3, r5
 80078be:	dc19      	bgt.n	80078f4 <__multadd+0x74>
 80078c0:	6861      	ldr	r1, [r4, #4]
 80078c2:	4638      	mov	r0, r7
 80078c4:	3101      	adds	r1, #1
 80078c6:	f7ff ff79 	bl	80077bc <_Balloc>
 80078ca:	4680      	mov	r8, r0
 80078cc:	b928      	cbnz	r0, 80078da <__multadd+0x5a>
 80078ce:	4602      	mov	r2, r0
 80078d0:	4b0c      	ldr	r3, [pc, #48]	; (8007904 <__multadd+0x84>)
 80078d2:	480d      	ldr	r0, [pc, #52]	; (8007908 <__multadd+0x88>)
 80078d4:	21ba      	movs	r1, #186	; 0xba
 80078d6:	f000 fd2b 	bl	8008330 <__assert_func>
 80078da:	6922      	ldr	r2, [r4, #16]
 80078dc:	3202      	adds	r2, #2
 80078de:	f104 010c 	add.w	r1, r4, #12
 80078e2:	0092      	lsls	r2, r2, #2
 80078e4:	300c      	adds	r0, #12
 80078e6:	f000 fd15 	bl	8008314 <memcpy>
 80078ea:	4621      	mov	r1, r4
 80078ec:	4638      	mov	r0, r7
 80078ee:	f7ff ffa5 	bl	800783c <_Bfree>
 80078f2:	4644      	mov	r4, r8
 80078f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078f8:	3501      	adds	r5, #1
 80078fa:	615e      	str	r6, [r3, #20]
 80078fc:	6125      	str	r5, [r4, #16]
 80078fe:	4620      	mov	r0, r4
 8007900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007904:	08008b08 	.word	0x08008b08
 8007908:	08008b19 	.word	0x08008b19

0800790c <__hi0bits>:
 800790c:	0c03      	lsrs	r3, r0, #16
 800790e:	041b      	lsls	r3, r3, #16
 8007910:	b9d3      	cbnz	r3, 8007948 <__hi0bits+0x3c>
 8007912:	0400      	lsls	r0, r0, #16
 8007914:	2310      	movs	r3, #16
 8007916:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800791a:	bf04      	itt	eq
 800791c:	0200      	lsleq	r0, r0, #8
 800791e:	3308      	addeq	r3, #8
 8007920:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007924:	bf04      	itt	eq
 8007926:	0100      	lsleq	r0, r0, #4
 8007928:	3304      	addeq	r3, #4
 800792a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800792e:	bf04      	itt	eq
 8007930:	0080      	lsleq	r0, r0, #2
 8007932:	3302      	addeq	r3, #2
 8007934:	2800      	cmp	r0, #0
 8007936:	db05      	blt.n	8007944 <__hi0bits+0x38>
 8007938:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800793c:	f103 0301 	add.w	r3, r3, #1
 8007940:	bf08      	it	eq
 8007942:	2320      	moveq	r3, #32
 8007944:	4618      	mov	r0, r3
 8007946:	4770      	bx	lr
 8007948:	2300      	movs	r3, #0
 800794a:	e7e4      	b.n	8007916 <__hi0bits+0xa>

0800794c <__lo0bits>:
 800794c:	6803      	ldr	r3, [r0, #0]
 800794e:	f013 0207 	ands.w	r2, r3, #7
 8007952:	d00c      	beq.n	800796e <__lo0bits+0x22>
 8007954:	07d9      	lsls	r1, r3, #31
 8007956:	d422      	bmi.n	800799e <__lo0bits+0x52>
 8007958:	079a      	lsls	r2, r3, #30
 800795a:	bf49      	itett	mi
 800795c:	085b      	lsrmi	r3, r3, #1
 800795e:	089b      	lsrpl	r3, r3, #2
 8007960:	6003      	strmi	r3, [r0, #0]
 8007962:	2201      	movmi	r2, #1
 8007964:	bf5c      	itt	pl
 8007966:	6003      	strpl	r3, [r0, #0]
 8007968:	2202      	movpl	r2, #2
 800796a:	4610      	mov	r0, r2
 800796c:	4770      	bx	lr
 800796e:	b299      	uxth	r1, r3
 8007970:	b909      	cbnz	r1, 8007976 <__lo0bits+0x2a>
 8007972:	0c1b      	lsrs	r3, r3, #16
 8007974:	2210      	movs	r2, #16
 8007976:	b2d9      	uxtb	r1, r3
 8007978:	b909      	cbnz	r1, 800797e <__lo0bits+0x32>
 800797a:	3208      	adds	r2, #8
 800797c:	0a1b      	lsrs	r3, r3, #8
 800797e:	0719      	lsls	r1, r3, #28
 8007980:	bf04      	itt	eq
 8007982:	091b      	lsreq	r3, r3, #4
 8007984:	3204      	addeq	r2, #4
 8007986:	0799      	lsls	r1, r3, #30
 8007988:	bf04      	itt	eq
 800798a:	089b      	lsreq	r3, r3, #2
 800798c:	3202      	addeq	r2, #2
 800798e:	07d9      	lsls	r1, r3, #31
 8007990:	d403      	bmi.n	800799a <__lo0bits+0x4e>
 8007992:	085b      	lsrs	r3, r3, #1
 8007994:	f102 0201 	add.w	r2, r2, #1
 8007998:	d003      	beq.n	80079a2 <__lo0bits+0x56>
 800799a:	6003      	str	r3, [r0, #0]
 800799c:	e7e5      	b.n	800796a <__lo0bits+0x1e>
 800799e:	2200      	movs	r2, #0
 80079a0:	e7e3      	b.n	800796a <__lo0bits+0x1e>
 80079a2:	2220      	movs	r2, #32
 80079a4:	e7e1      	b.n	800796a <__lo0bits+0x1e>
	...

080079a8 <__i2b>:
 80079a8:	b510      	push	{r4, lr}
 80079aa:	460c      	mov	r4, r1
 80079ac:	2101      	movs	r1, #1
 80079ae:	f7ff ff05 	bl	80077bc <_Balloc>
 80079b2:	4602      	mov	r2, r0
 80079b4:	b928      	cbnz	r0, 80079c2 <__i2b+0x1a>
 80079b6:	4b05      	ldr	r3, [pc, #20]	; (80079cc <__i2b+0x24>)
 80079b8:	4805      	ldr	r0, [pc, #20]	; (80079d0 <__i2b+0x28>)
 80079ba:	f240 1145 	movw	r1, #325	; 0x145
 80079be:	f000 fcb7 	bl	8008330 <__assert_func>
 80079c2:	2301      	movs	r3, #1
 80079c4:	6144      	str	r4, [r0, #20]
 80079c6:	6103      	str	r3, [r0, #16]
 80079c8:	bd10      	pop	{r4, pc}
 80079ca:	bf00      	nop
 80079cc:	08008b08 	.word	0x08008b08
 80079d0:	08008b19 	.word	0x08008b19

080079d4 <__multiply>:
 80079d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d8:	4691      	mov	r9, r2
 80079da:	690a      	ldr	r2, [r1, #16]
 80079dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	bfb8      	it	lt
 80079e4:	460b      	movlt	r3, r1
 80079e6:	460c      	mov	r4, r1
 80079e8:	bfbc      	itt	lt
 80079ea:	464c      	movlt	r4, r9
 80079ec:	4699      	movlt	r9, r3
 80079ee:	6927      	ldr	r7, [r4, #16]
 80079f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079f4:	68a3      	ldr	r3, [r4, #8]
 80079f6:	6861      	ldr	r1, [r4, #4]
 80079f8:	eb07 060a 	add.w	r6, r7, sl
 80079fc:	42b3      	cmp	r3, r6
 80079fe:	b085      	sub	sp, #20
 8007a00:	bfb8      	it	lt
 8007a02:	3101      	addlt	r1, #1
 8007a04:	f7ff feda 	bl	80077bc <_Balloc>
 8007a08:	b930      	cbnz	r0, 8007a18 <__multiply+0x44>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	4b44      	ldr	r3, [pc, #272]	; (8007b20 <__multiply+0x14c>)
 8007a0e:	4845      	ldr	r0, [pc, #276]	; (8007b24 <__multiply+0x150>)
 8007a10:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007a14:	f000 fc8c 	bl	8008330 <__assert_func>
 8007a18:	f100 0514 	add.w	r5, r0, #20
 8007a1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a20:	462b      	mov	r3, r5
 8007a22:	2200      	movs	r2, #0
 8007a24:	4543      	cmp	r3, r8
 8007a26:	d321      	bcc.n	8007a6c <__multiply+0x98>
 8007a28:	f104 0314 	add.w	r3, r4, #20
 8007a2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a30:	f109 0314 	add.w	r3, r9, #20
 8007a34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a38:	9202      	str	r2, [sp, #8]
 8007a3a:	1b3a      	subs	r2, r7, r4
 8007a3c:	3a15      	subs	r2, #21
 8007a3e:	f022 0203 	bic.w	r2, r2, #3
 8007a42:	3204      	adds	r2, #4
 8007a44:	f104 0115 	add.w	r1, r4, #21
 8007a48:	428f      	cmp	r7, r1
 8007a4a:	bf38      	it	cc
 8007a4c:	2204      	movcc	r2, #4
 8007a4e:	9201      	str	r2, [sp, #4]
 8007a50:	9a02      	ldr	r2, [sp, #8]
 8007a52:	9303      	str	r3, [sp, #12]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d80c      	bhi.n	8007a72 <__multiply+0x9e>
 8007a58:	2e00      	cmp	r6, #0
 8007a5a:	dd03      	ble.n	8007a64 <__multiply+0x90>
 8007a5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d05b      	beq.n	8007b1c <__multiply+0x148>
 8007a64:	6106      	str	r6, [r0, #16]
 8007a66:	b005      	add	sp, #20
 8007a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6c:	f843 2b04 	str.w	r2, [r3], #4
 8007a70:	e7d8      	b.n	8007a24 <__multiply+0x50>
 8007a72:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a76:	f1ba 0f00 	cmp.w	sl, #0
 8007a7a:	d024      	beq.n	8007ac6 <__multiply+0xf2>
 8007a7c:	f104 0e14 	add.w	lr, r4, #20
 8007a80:	46a9      	mov	r9, r5
 8007a82:	f04f 0c00 	mov.w	ip, #0
 8007a86:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a8a:	f8d9 1000 	ldr.w	r1, [r9]
 8007a8e:	fa1f fb82 	uxth.w	fp, r2
 8007a92:	b289      	uxth	r1, r1
 8007a94:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a9c:	f8d9 2000 	ldr.w	r2, [r9]
 8007aa0:	4461      	add	r1, ip
 8007aa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007aa6:	fb0a c20b 	mla	r2, sl, fp, ip
 8007aaa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007aae:	b289      	uxth	r1, r1
 8007ab0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ab4:	4577      	cmp	r7, lr
 8007ab6:	f849 1b04 	str.w	r1, [r9], #4
 8007aba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007abe:	d8e2      	bhi.n	8007a86 <__multiply+0xb2>
 8007ac0:	9a01      	ldr	r2, [sp, #4]
 8007ac2:	f845 c002 	str.w	ip, [r5, r2]
 8007ac6:	9a03      	ldr	r2, [sp, #12]
 8007ac8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007acc:	3304      	adds	r3, #4
 8007ace:	f1b9 0f00 	cmp.w	r9, #0
 8007ad2:	d021      	beq.n	8007b18 <__multiply+0x144>
 8007ad4:	6829      	ldr	r1, [r5, #0]
 8007ad6:	f104 0c14 	add.w	ip, r4, #20
 8007ada:	46ae      	mov	lr, r5
 8007adc:	f04f 0a00 	mov.w	sl, #0
 8007ae0:	f8bc b000 	ldrh.w	fp, [ip]
 8007ae4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007ae8:	fb09 220b 	mla	r2, r9, fp, r2
 8007aec:	4452      	add	r2, sl
 8007aee:	b289      	uxth	r1, r1
 8007af0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007af4:	f84e 1b04 	str.w	r1, [lr], #4
 8007af8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007afc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b00:	f8be 1000 	ldrh.w	r1, [lr]
 8007b04:	fb09 110a 	mla	r1, r9, sl, r1
 8007b08:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007b0c:	4567      	cmp	r7, ip
 8007b0e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b12:	d8e5      	bhi.n	8007ae0 <__multiply+0x10c>
 8007b14:	9a01      	ldr	r2, [sp, #4]
 8007b16:	50a9      	str	r1, [r5, r2]
 8007b18:	3504      	adds	r5, #4
 8007b1a:	e799      	b.n	8007a50 <__multiply+0x7c>
 8007b1c:	3e01      	subs	r6, #1
 8007b1e:	e79b      	b.n	8007a58 <__multiply+0x84>
 8007b20:	08008b08 	.word	0x08008b08
 8007b24:	08008b19 	.word	0x08008b19

08007b28 <__pow5mult>:
 8007b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b2c:	4615      	mov	r5, r2
 8007b2e:	f012 0203 	ands.w	r2, r2, #3
 8007b32:	4606      	mov	r6, r0
 8007b34:	460f      	mov	r7, r1
 8007b36:	d007      	beq.n	8007b48 <__pow5mult+0x20>
 8007b38:	4c25      	ldr	r4, [pc, #148]	; (8007bd0 <__pow5mult+0xa8>)
 8007b3a:	3a01      	subs	r2, #1
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b42:	f7ff fe9d 	bl	8007880 <__multadd>
 8007b46:	4607      	mov	r7, r0
 8007b48:	10ad      	asrs	r5, r5, #2
 8007b4a:	d03d      	beq.n	8007bc8 <__pow5mult+0xa0>
 8007b4c:	69f4      	ldr	r4, [r6, #28]
 8007b4e:	b97c      	cbnz	r4, 8007b70 <__pow5mult+0x48>
 8007b50:	2010      	movs	r0, #16
 8007b52:	f7ff fd7f 	bl	8007654 <malloc>
 8007b56:	4602      	mov	r2, r0
 8007b58:	61f0      	str	r0, [r6, #28]
 8007b5a:	b928      	cbnz	r0, 8007b68 <__pow5mult+0x40>
 8007b5c:	4b1d      	ldr	r3, [pc, #116]	; (8007bd4 <__pow5mult+0xac>)
 8007b5e:	481e      	ldr	r0, [pc, #120]	; (8007bd8 <__pow5mult+0xb0>)
 8007b60:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007b64:	f000 fbe4 	bl	8008330 <__assert_func>
 8007b68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b6c:	6004      	str	r4, [r0, #0]
 8007b6e:	60c4      	str	r4, [r0, #12]
 8007b70:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007b74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b78:	b94c      	cbnz	r4, 8007b8e <__pow5mult+0x66>
 8007b7a:	f240 2171 	movw	r1, #625	; 0x271
 8007b7e:	4630      	mov	r0, r6
 8007b80:	f7ff ff12 	bl	80079a8 <__i2b>
 8007b84:	2300      	movs	r3, #0
 8007b86:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	6003      	str	r3, [r0, #0]
 8007b8e:	f04f 0900 	mov.w	r9, #0
 8007b92:	07eb      	lsls	r3, r5, #31
 8007b94:	d50a      	bpl.n	8007bac <__pow5mult+0x84>
 8007b96:	4639      	mov	r1, r7
 8007b98:	4622      	mov	r2, r4
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	f7ff ff1a 	bl	80079d4 <__multiply>
 8007ba0:	4639      	mov	r1, r7
 8007ba2:	4680      	mov	r8, r0
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	f7ff fe49 	bl	800783c <_Bfree>
 8007baa:	4647      	mov	r7, r8
 8007bac:	106d      	asrs	r5, r5, #1
 8007bae:	d00b      	beq.n	8007bc8 <__pow5mult+0xa0>
 8007bb0:	6820      	ldr	r0, [r4, #0]
 8007bb2:	b938      	cbnz	r0, 8007bc4 <__pow5mult+0x9c>
 8007bb4:	4622      	mov	r2, r4
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	4630      	mov	r0, r6
 8007bba:	f7ff ff0b 	bl	80079d4 <__multiply>
 8007bbe:	6020      	str	r0, [r4, #0]
 8007bc0:	f8c0 9000 	str.w	r9, [r0]
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	e7e4      	b.n	8007b92 <__pow5mult+0x6a>
 8007bc8:	4638      	mov	r0, r7
 8007bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bce:	bf00      	nop
 8007bd0:	08008c68 	.word	0x08008c68
 8007bd4:	08008a99 	.word	0x08008a99
 8007bd8:	08008b19 	.word	0x08008b19

08007bdc <__lshift>:
 8007bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007be0:	460c      	mov	r4, r1
 8007be2:	6849      	ldr	r1, [r1, #4]
 8007be4:	6923      	ldr	r3, [r4, #16]
 8007be6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bea:	68a3      	ldr	r3, [r4, #8]
 8007bec:	4607      	mov	r7, r0
 8007bee:	4691      	mov	r9, r2
 8007bf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bf4:	f108 0601 	add.w	r6, r8, #1
 8007bf8:	42b3      	cmp	r3, r6
 8007bfa:	db0b      	blt.n	8007c14 <__lshift+0x38>
 8007bfc:	4638      	mov	r0, r7
 8007bfe:	f7ff fddd 	bl	80077bc <_Balloc>
 8007c02:	4605      	mov	r5, r0
 8007c04:	b948      	cbnz	r0, 8007c1a <__lshift+0x3e>
 8007c06:	4602      	mov	r2, r0
 8007c08:	4b28      	ldr	r3, [pc, #160]	; (8007cac <__lshift+0xd0>)
 8007c0a:	4829      	ldr	r0, [pc, #164]	; (8007cb0 <__lshift+0xd4>)
 8007c0c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007c10:	f000 fb8e 	bl	8008330 <__assert_func>
 8007c14:	3101      	adds	r1, #1
 8007c16:	005b      	lsls	r3, r3, #1
 8007c18:	e7ee      	b.n	8007bf8 <__lshift+0x1c>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f100 0114 	add.w	r1, r0, #20
 8007c20:	f100 0210 	add.w	r2, r0, #16
 8007c24:	4618      	mov	r0, r3
 8007c26:	4553      	cmp	r3, sl
 8007c28:	db33      	blt.n	8007c92 <__lshift+0xb6>
 8007c2a:	6920      	ldr	r0, [r4, #16]
 8007c2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c30:	f104 0314 	add.w	r3, r4, #20
 8007c34:	f019 091f 	ands.w	r9, r9, #31
 8007c38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c40:	d02b      	beq.n	8007c9a <__lshift+0xbe>
 8007c42:	f1c9 0e20 	rsb	lr, r9, #32
 8007c46:	468a      	mov	sl, r1
 8007c48:	2200      	movs	r2, #0
 8007c4a:	6818      	ldr	r0, [r3, #0]
 8007c4c:	fa00 f009 	lsl.w	r0, r0, r9
 8007c50:	4310      	orrs	r0, r2
 8007c52:	f84a 0b04 	str.w	r0, [sl], #4
 8007c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c5a:	459c      	cmp	ip, r3
 8007c5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c60:	d8f3      	bhi.n	8007c4a <__lshift+0x6e>
 8007c62:	ebac 0304 	sub.w	r3, ip, r4
 8007c66:	3b15      	subs	r3, #21
 8007c68:	f023 0303 	bic.w	r3, r3, #3
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	f104 0015 	add.w	r0, r4, #21
 8007c72:	4584      	cmp	ip, r0
 8007c74:	bf38      	it	cc
 8007c76:	2304      	movcc	r3, #4
 8007c78:	50ca      	str	r2, [r1, r3]
 8007c7a:	b10a      	cbz	r2, 8007c80 <__lshift+0xa4>
 8007c7c:	f108 0602 	add.w	r6, r8, #2
 8007c80:	3e01      	subs	r6, #1
 8007c82:	4638      	mov	r0, r7
 8007c84:	612e      	str	r6, [r5, #16]
 8007c86:	4621      	mov	r1, r4
 8007c88:	f7ff fdd8 	bl	800783c <_Bfree>
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c92:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c96:	3301      	adds	r3, #1
 8007c98:	e7c5      	b.n	8007c26 <__lshift+0x4a>
 8007c9a:	3904      	subs	r1, #4
 8007c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ca0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ca4:	459c      	cmp	ip, r3
 8007ca6:	d8f9      	bhi.n	8007c9c <__lshift+0xc0>
 8007ca8:	e7ea      	b.n	8007c80 <__lshift+0xa4>
 8007caa:	bf00      	nop
 8007cac:	08008b08 	.word	0x08008b08
 8007cb0:	08008b19 	.word	0x08008b19

08007cb4 <__mcmp>:
 8007cb4:	b530      	push	{r4, r5, lr}
 8007cb6:	6902      	ldr	r2, [r0, #16]
 8007cb8:	690c      	ldr	r4, [r1, #16]
 8007cba:	1b12      	subs	r2, r2, r4
 8007cbc:	d10e      	bne.n	8007cdc <__mcmp+0x28>
 8007cbe:	f100 0314 	add.w	r3, r0, #20
 8007cc2:	3114      	adds	r1, #20
 8007cc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007cc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007ccc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007cd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007cd4:	42a5      	cmp	r5, r4
 8007cd6:	d003      	beq.n	8007ce0 <__mcmp+0x2c>
 8007cd8:	d305      	bcc.n	8007ce6 <__mcmp+0x32>
 8007cda:	2201      	movs	r2, #1
 8007cdc:	4610      	mov	r0, r2
 8007cde:	bd30      	pop	{r4, r5, pc}
 8007ce0:	4283      	cmp	r3, r0
 8007ce2:	d3f3      	bcc.n	8007ccc <__mcmp+0x18>
 8007ce4:	e7fa      	b.n	8007cdc <__mcmp+0x28>
 8007ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cea:	e7f7      	b.n	8007cdc <__mcmp+0x28>

08007cec <__mdiff>:
 8007cec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf0:	460c      	mov	r4, r1
 8007cf2:	4606      	mov	r6, r0
 8007cf4:	4611      	mov	r1, r2
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	4690      	mov	r8, r2
 8007cfa:	f7ff ffdb 	bl	8007cb4 <__mcmp>
 8007cfe:	1e05      	subs	r5, r0, #0
 8007d00:	d110      	bne.n	8007d24 <__mdiff+0x38>
 8007d02:	4629      	mov	r1, r5
 8007d04:	4630      	mov	r0, r6
 8007d06:	f7ff fd59 	bl	80077bc <_Balloc>
 8007d0a:	b930      	cbnz	r0, 8007d1a <__mdiff+0x2e>
 8007d0c:	4b3a      	ldr	r3, [pc, #232]	; (8007df8 <__mdiff+0x10c>)
 8007d0e:	4602      	mov	r2, r0
 8007d10:	f240 2137 	movw	r1, #567	; 0x237
 8007d14:	4839      	ldr	r0, [pc, #228]	; (8007dfc <__mdiff+0x110>)
 8007d16:	f000 fb0b 	bl	8008330 <__assert_func>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d24:	bfa4      	itt	ge
 8007d26:	4643      	movge	r3, r8
 8007d28:	46a0      	movge	r8, r4
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d30:	bfa6      	itte	ge
 8007d32:	461c      	movge	r4, r3
 8007d34:	2500      	movge	r5, #0
 8007d36:	2501      	movlt	r5, #1
 8007d38:	f7ff fd40 	bl	80077bc <_Balloc>
 8007d3c:	b920      	cbnz	r0, 8007d48 <__mdiff+0x5c>
 8007d3e:	4b2e      	ldr	r3, [pc, #184]	; (8007df8 <__mdiff+0x10c>)
 8007d40:	4602      	mov	r2, r0
 8007d42:	f240 2145 	movw	r1, #581	; 0x245
 8007d46:	e7e5      	b.n	8007d14 <__mdiff+0x28>
 8007d48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d4c:	6926      	ldr	r6, [r4, #16]
 8007d4e:	60c5      	str	r5, [r0, #12]
 8007d50:	f104 0914 	add.w	r9, r4, #20
 8007d54:	f108 0514 	add.w	r5, r8, #20
 8007d58:	f100 0e14 	add.w	lr, r0, #20
 8007d5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007d60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d64:	f108 0210 	add.w	r2, r8, #16
 8007d68:	46f2      	mov	sl, lr
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d74:	fa11 f88b 	uxtah	r8, r1, fp
 8007d78:	b299      	uxth	r1, r3
 8007d7a:	0c1b      	lsrs	r3, r3, #16
 8007d7c:	eba8 0801 	sub.w	r8, r8, r1
 8007d80:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d84:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d88:	fa1f f888 	uxth.w	r8, r8
 8007d8c:	1419      	asrs	r1, r3, #16
 8007d8e:	454e      	cmp	r6, r9
 8007d90:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d94:	f84a 3b04 	str.w	r3, [sl], #4
 8007d98:	d8e8      	bhi.n	8007d6c <__mdiff+0x80>
 8007d9a:	1b33      	subs	r3, r6, r4
 8007d9c:	3b15      	subs	r3, #21
 8007d9e:	f023 0303 	bic.w	r3, r3, #3
 8007da2:	3304      	adds	r3, #4
 8007da4:	3415      	adds	r4, #21
 8007da6:	42a6      	cmp	r6, r4
 8007da8:	bf38      	it	cc
 8007daa:	2304      	movcc	r3, #4
 8007dac:	441d      	add	r5, r3
 8007dae:	4473      	add	r3, lr
 8007db0:	469e      	mov	lr, r3
 8007db2:	462e      	mov	r6, r5
 8007db4:	4566      	cmp	r6, ip
 8007db6:	d30e      	bcc.n	8007dd6 <__mdiff+0xea>
 8007db8:	f10c 0203 	add.w	r2, ip, #3
 8007dbc:	1b52      	subs	r2, r2, r5
 8007dbe:	f022 0203 	bic.w	r2, r2, #3
 8007dc2:	3d03      	subs	r5, #3
 8007dc4:	45ac      	cmp	ip, r5
 8007dc6:	bf38      	it	cc
 8007dc8:	2200      	movcc	r2, #0
 8007dca:	4413      	add	r3, r2
 8007dcc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007dd0:	b17a      	cbz	r2, 8007df2 <__mdiff+0x106>
 8007dd2:	6107      	str	r7, [r0, #16]
 8007dd4:	e7a4      	b.n	8007d20 <__mdiff+0x34>
 8007dd6:	f856 8b04 	ldr.w	r8, [r6], #4
 8007dda:	fa11 f288 	uxtah	r2, r1, r8
 8007dde:	1414      	asrs	r4, r2, #16
 8007de0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007de4:	b292      	uxth	r2, r2
 8007de6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007dea:	f84e 2b04 	str.w	r2, [lr], #4
 8007dee:	1421      	asrs	r1, r4, #16
 8007df0:	e7e0      	b.n	8007db4 <__mdiff+0xc8>
 8007df2:	3f01      	subs	r7, #1
 8007df4:	e7ea      	b.n	8007dcc <__mdiff+0xe0>
 8007df6:	bf00      	nop
 8007df8:	08008b08 	.word	0x08008b08
 8007dfc:	08008b19 	.word	0x08008b19

08007e00 <__d2b>:
 8007e00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e04:	460f      	mov	r7, r1
 8007e06:	2101      	movs	r1, #1
 8007e08:	ec59 8b10 	vmov	r8, r9, d0
 8007e0c:	4616      	mov	r6, r2
 8007e0e:	f7ff fcd5 	bl	80077bc <_Balloc>
 8007e12:	4604      	mov	r4, r0
 8007e14:	b930      	cbnz	r0, 8007e24 <__d2b+0x24>
 8007e16:	4602      	mov	r2, r0
 8007e18:	4b24      	ldr	r3, [pc, #144]	; (8007eac <__d2b+0xac>)
 8007e1a:	4825      	ldr	r0, [pc, #148]	; (8007eb0 <__d2b+0xb0>)
 8007e1c:	f240 310f 	movw	r1, #783	; 0x30f
 8007e20:	f000 fa86 	bl	8008330 <__assert_func>
 8007e24:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e2c:	bb2d      	cbnz	r5, 8007e7a <__d2b+0x7a>
 8007e2e:	9301      	str	r3, [sp, #4]
 8007e30:	f1b8 0300 	subs.w	r3, r8, #0
 8007e34:	d026      	beq.n	8007e84 <__d2b+0x84>
 8007e36:	4668      	mov	r0, sp
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	f7ff fd87 	bl	800794c <__lo0bits>
 8007e3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e42:	b1e8      	cbz	r0, 8007e80 <__d2b+0x80>
 8007e44:	f1c0 0320 	rsb	r3, r0, #32
 8007e48:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4c:	430b      	orrs	r3, r1
 8007e4e:	40c2      	lsrs	r2, r0
 8007e50:	6163      	str	r3, [r4, #20]
 8007e52:	9201      	str	r2, [sp, #4]
 8007e54:	9b01      	ldr	r3, [sp, #4]
 8007e56:	61a3      	str	r3, [r4, #24]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	bf14      	ite	ne
 8007e5c:	2202      	movne	r2, #2
 8007e5e:	2201      	moveq	r2, #1
 8007e60:	6122      	str	r2, [r4, #16]
 8007e62:	b1bd      	cbz	r5, 8007e94 <__d2b+0x94>
 8007e64:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e68:	4405      	add	r5, r0
 8007e6a:	603d      	str	r5, [r7, #0]
 8007e6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e70:	6030      	str	r0, [r6, #0]
 8007e72:	4620      	mov	r0, r4
 8007e74:	b003      	add	sp, #12
 8007e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e7e:	e7d6      	b.n	8007e2e <__d2b+0x2e>
 8007e80:	6161      	str	r1, [r4, #20]
 8007e82:	e7e7      	b.n	8007e54 <__d2b+0x54>
 8007e84:	a801      	add	r0, sp, #4
 8007e86:	f7ff fd61 	bl	800794c <__lo0bits>
 8007e8a:	9b01      	ldr	r3, [sp, #4]
 8007e8c:	6163      	str	r3, [r4, #20]
 8007e8e:	3020      	adds	r0, #32
 8007e90:	2201      	movs	r2, #1
 8007e92:	e7e5      	b.n	8007e60 <__d2b+0x60>
 8007e94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e9c:	6038      	str	r0, [r7, #0]
 8007e9e:	6918      	ldr	r0, [r3, #16]
 8007ea0:	f7ff fd34 	bl	800790c <__hi0bits>
 8007ea4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ea8:	e7e2      	b.n	8007e70 <__d2b+0x70>
 8007eaa:	bf00      	nop
 8007eac:	08008b08 	.word	0x08008b08
 8007eb0:	08008b19 	.word	0x08008b19

08007eb4 <__ssputs_r>:
 8007eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb8:	688e      	ldr	r6, [r1, #8]
 8007eba:	461f      	mov	r7, r3
 8007ebc:	42be      	cmp	r6, r7
 8007ebe:	680b      	ldr	r3, [r1, #0]
 8007ec0:	4682      	mov	sl, r0
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	4690      	mov	r8, r2
 8007ec6:	d82c      	bhi.n	8007f22 <__ssputs_r+0x6e>
 8007ec8:	898a      	ldrh	r2, [r1, #12]
 8007eca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ece:	d026      	beq.n	8007f1e <__ssputs_r+0x6a>
 8007ed0:	6965      	ldr	r5, [r4, #20]
 8007ed2:	6909      	ldr	r1, [r1, #16]
 8007ed4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ed8:	eba3 0901 	sub.w	r9, r3, r1
 8007edc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ee0:	1c7b      	adds	r3, r7, #1
 8007ee2:	444b      	add	r3, r9
 8007ee4:	106d      	asrs	r5, r5, #1
 8007ee6:	429d      	cmp	r5, r3
 8007ee8:	bf38      	it	cc
 8007eea:	461d      	movcc	r5, r3
 8007eec:	0553      	lsls	r3, r2, #21
 8007eee:	d527      	bpl.n	8007f40 <__ssputs_r+0x8c>
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	f7ff fbd7 	bl	80076a4 <_malloc_r>
 8007ef6:	4606      	mov	r6, r0
 8007ef8:	b360      	cbz	r0, 8007f54 <__ssputs_r+0xa0>
 8007efa:	6921      	ldr	r1, [r4, #16]
 8007efc:	464a      	mov	r2, r9
 8007efe:	f000 fa09 	bl	8008314 <memcpy>
 8007f02:	89a3      	ldrh	r3, [r4, #12]
 8007f04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f0c:	81a3      	strh	r3, [r4, #12]
 8007f0e:	6126      	str	r6, [r4, #16]
 8007f10:	6165      	str	r5, [r4, #20]
 8007f12:	444e      	add	r6, r9
 8007f14:	eba5 0509 	sub.w	r5, r5, r9
 8007f18:	6026      	str	r6, [r4, #0]
 8007f1a:	60a5      	str	r5, [r4, #8]
 8007f1c:	463e      	mov	r6, r7
 8007f1e:	42be      	cmp	r6, r7
 8007f20:	d900      	bls.n	8007f24 <__ssputs_r+0x70>
 8007f22:	463e      	mov	r6, r7
 8007f24:	6820      	ldr	r0, [r4, #0]
 8007f26:	4632      	mov	r2, r6
 8007f28:	4641      	mov	r1, r8
 8007f2a:	f000 f9c9 	bl	80082c0 <memmove>
 8007f2e:	68a3      	ldr	r3, [r4, #8]
 8007f30:	1b9b      	subs	r3, r3, r6
 8007f32:	60a3      	str	r3, [r4, #8]
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	4433      	add	r3, r6
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f40:	462a      	mov	r2, r5
 8007f42:	f000 fa3b 	bl	80083bc <_realloc_r>
 8007f46:	4606      	mov	r6, r0
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d1e0      	bne.n	8007f0e <__ssputs_r+0x5a>
 8007f4c:	6921      	ldr	r1, [r4, #16]
 8007f4e:	4650      	mov	r0, sl
 8007f50:	f7ff fb34 	bl	80075bc <_free_r>
 8007f54:	230c      	movs	r3, #12
 8007f56:	f8ca 3000 	str.w	r3, [sl]
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f60:	81a3      	strh	r3, [r4, #12]
 8007f62:	f04f 30ff 	mov.w	r0, #4294967295
 8007f66:	e7e9      	b.n	8007f3c <__ssputs_r+0x88>

08007f68 <_svfiprintf_r>:
 8007f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6c:	4698      	mov	r8, r3
 8007f6e:	898b      	ldrh	r3, [r1, #12]
 8007f70:	061b      	lsls	r3, r3, #24
 8007f72:	b09d      	sub	sp, #116	; 0x74
 8007f74:	4607      	mov	r7, r0
 8007f76:	460d      	mov	r5, r1
 8007f78:	4614      	mov	r4, r2
 8007f7a:	d50e      	bpl.n	8007f9a <_svfiprintf_r+0x32>
 8007f7c:	690b      	ldr	r3, [r1, #16]
 8007f7e:	b963      	cbnz	r3, 8007f9a <_svfiprintf_r+0x32>
 8007f80:	2140      	movs	r1, #64	; 0x40
 8007f82:	f7ff fb8f 	bl	80076a4 <_malloc_r>
 8007f86:	6028      	str	r0, [r5, #0]
 8007f88:	6128      	str	r0, [r5, #16]
 8007f8a:	b920      	cbnz	r0, 8007f96 <_svfiprintf_r+0x2e>
 8007f8c:	230c      	movs	r3, #12
 8007f8e:	603b      	str	r3, [r7, #0]
 8007f90:	f04f 30ff 	mov.w	r0, #4294967295
 8007f94:	e0d0      	b.n	8008138 <_svfiprintf_r+0x1d0>
 8007f96:	2340      	movs	r3, #64	; 0x40
 8007f98:	616b      	str	r3, [r5, #20]
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f9e:	2320      	movs	r3, #32
 8007fa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fa8:	2330      	movs	r3, #48	; 0x30
 8007faa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008150 <_svfiprintf_r+0x1e8>
 8007fae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fb2:	f04f 0901 	mov.w	r9, #1
 8007fb6:	4623      	mov	r3, r4
 8007fb8:	469a      	mov	sl, r3
 8007fba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fbe:	b10a      	cbz	r2, 8007fc4 <_svfiprintf_r+0x5c>
 8007fc0:	2a25      	cmp	r2, #37	; 0x25
 8007fc2:	d1f9      	bne.n	8007fb8 <_svfiprintf_r+0x50>
 8007fc4:	ebba 0b04 	subs.w	fp, sl, r4
 8007fc8:	d00b      	beq.n	8007fe2 <_svfiprintf_r+0x7a>
 8007fca:	465b      	mov	r3, fp
 8007fcc:	4622      	mov	r2, r4
 8007fce:	4629      	mov	r1, r5
 8007fd0:	4638      	mov	r0, r7
 8007fd2:	f7ff ff6f 	bl	8007eb4 <__ssputs_r>
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	f000 80a9 	beq.w	800812e <_svfiprintf_r+0x1c6>
 8007fdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fde:	445a      	add	r2, fp
 8007fe0:	9209      	str	r2, [sp, #36]	; 0x24
 8007fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f000 80a1 	beq.w	800812e <_svfiprintf_r+0x1c6>
 8007fec:	2300      	movs	r3, #0
 8007fee:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ff6:	f10a 0a01 	add.w	sl, sl, #1
 8007ffa:	9304      	str	r3, [sp, #16]
 8007ffc:	9307      	str	r3, [sp, #28]
 8007ffe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008002:	931a      	str	r3, [sp, #104]	; 0x68
 8008004:	4654      	mov	r4, sl
 8008006:	2205      	movs	r2, #5
 8008008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800800c:	4850      	ldr	r0, [pc, #320]	; (8008150 <_svfiprintf_r+0x1e8>)
 800800e:	f7f8 f8df 	bl	80001d0 <memchr>
 8008012:	9a04      	ldr	r2, [sp, #16]
 8008014:	b9d8      	cbnz	r0, 800804e <_svfiprintf_r+0xe6>
 8008016:	06d0      	lsls	r0, r2, #27
 8008018:	bf44      	itt	mi
 800801a:	2320      	movmi	r3, #32
 800801c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008020:	0711      	lsls	r1, r2, #28
 8008022:	bf44      	itt	mi
 8008024:	232b      	movmi	r3, #43	; 0x2b
 8008026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800802a:	f89a 3000 	ldrb.w	r3, [sl]
 800802e:	2b2a      	cmp	r3, #42	; 0x2a
 8008030:	d015      	beq.n	800805e <_svfiprintf_r+0xf6>
 8008032:	9a07      	ldr	r2, [sp, #28]
 8008034:	4654      	mov	r4, sl
 8008036:	2000      	movs	r0, #0
 8008038:	f04f 0c0a 	mov.w	ip, #10
 800803c:	4621      	mov	r1, r4
 800803e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008042:	3b30      	subs	r3, #48	; 0x30
 8008044:	2b09      	cmp	r3, #9
 8008046:	d94d      	bls.n	80080e4 <_svfiprintf_r+0x17c>
 8008048:	b1b0      	cbz	r0, 8008078 <_svfiprintf_r+0x110>
 800804a:	9207      	str	r2, [sp, #28]
 800804c:	e014      	b.n	8008078 <_svfiprintf_r+0x110>
 800804e:	eba0 0308 	sub.w	r3, r0, r8
 8008052:	fa09 f303 	lsl.w	r3, r9, r3
 8008056:	4313      	orrs	r3, r2
 8008058:	9304      	str	r3, [sp, #16]
 800805a:	46a2      	mov	sl, r4
 800805c:	e7d2      	b.n	8008004 <_svfiprintf_r+0x9c>
 800805e:	9b03      	ldr	r3, [sp, #12]
 8008060:	1d19      	adds	r1, r3, #4
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	9103      	str	r1, [sp, #12]
 8008066:	2b00      	cmp	r3, #0
 8008068:	bfbb      	ittet	lt
 800806a:	425b      	neglt	r3, r3
 800806c:	f042 0202 	orrlt.w	r2, r2, #2
 8008070:	9307      	strge	r3, [sp, #28]
 8008072:	9307      	strlt	r3, [sp, #28]
 8008074:	bfb8      	it	lt
 8008076:	9204      	strlt	r2, [sp, #16]
 8008078:	7823      	ldrb	r3, [r4, #0]
 800807a:	2b2e      	cmp	r3, #46	; 0x2e
 800807c:	d10c      	bne.n	8008098 <_svfiprintf_r+0x130>
 800807e:	7863      	ldrb	r3, [r4, #1]
 8008080:	2b2a      	cmp	r3, #42	; 0x2a
 8008082:	d134      	bne.n	80080ee <_svfiprintf_r+0x186>
 8008084:	9b03      	ldr	r3, [sp, #12]
 8008086:	1d1a      	adds	r2, r3, #4
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	9203      	str	r2, [sp, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	bfb8      	it	lt
 8008090:	f04f 33ff 	movlt.w	r3, #4294967295
 8008094:	3402      	adds	r4, #2
 8008096:	9305      	str	r3, [sp, #20]
 8008098:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008160 <_svfiprintf_r+0x1f8>
 800809c:	7821      	ldrb	r1, [r4, #0]
 800809e:	2203      	movs	r2, #3
 80080a0:	4650      	mov	r0, sl
 80080a2:	f7f8 f895 	bl	80001d0 <memchr>
 80080a6:	b138      	cbz	r0, 80080b8 <_svfiprintf_r+0x150>
 80080a8:	9b04      	ldr	r3, [sp, #16]
 80080aa:	eba0 000a 	sub.w	r0, r0, sl
 80080ae:	2240      	movs	r2, #64	; 0x40
 80080b0:	4082      	lsls	r2, r0
 80080b2:	4313      	orrs	r3, r2
 80080b4:	3401      	adds	r4, #1
 80080b6:	9304      	str	r3, [sp, #16]
 80080b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080bc:	4825      	ldr	r0, [pc, #148]	; (8008154 <_svfiprintf_r+0x1ec>)
 80080be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080c2:	2206      	movs	r2, #6
 80080c4:	f7f8 f884 	bl	80001d0 <memchr>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d038      	beq.n	800813e <_svfiprintf_r+0x1d6>
 80080cc:	4b22      	ldr	r3, [pc, #136]	; (8008158 <_svfiprintf_r+0x1f0>)
 80080ce:	bb1b      	cbnz	r3, 8008118 <_svfiprintf_r+0x1b0>
 80080d0:	9b03      	ldr	r3, [sp, #12]
 80080d2:	3307      	adds	r3, #7
 80080d4:	f023 0307 	bic.w	r3, r3, #7
 80080d8:	3308      	adds	r3, #8
 80080da:	9303      	str	r3, [sp, #12]
 80080dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080de:	4433      	add	r3, r6
 80080e0:	9309      	str	r3, [sp, #36]	; 0x24
 80080e2:	e768      	b.n	8007fb6 <_svfiprintf_r+0x4e>
 80080e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80080e8:	460c      	mov	r4, r1
 80080ea:	2001      	movs	r0, #1
 80080ec:	e7a6      	b.n	800803c <_svfiprintf_r+0xd4>
 80080ee:	2300      	movs	r3, #0
 80080f0:	3401      	adds	r4, #1
 80080f2:	9305      	str	r3, [sp, #20]
 80080f4:	4619      	mov	r1, r3
 80080f6:	f04f 0c0a 	mov.w	ip, #10
 80080fa:	4620      	mov	r0, r4
 80080fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008100:	3a30      	subs	r2, #48	; 0x30
 8008102:	2a09      	cmp	r2, #9
 8008104:	d903      	bls.n	800810e <_svfiprintf_r+0x1a6>
 8008106:	2b00      	cmp	r3, #0
 8008108:	d0c6      	beq.n	8008098 <_svfiprintf_r+0x130>
 800810a:	9105      	str	r1, [sp, #20]
 800810c:	e7c4      	b.n	8008098 <_svfiprintf_r+0x130>
 800810e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008112:	4604      	mov	r4, r0
 8008114:	2301      	movs	r3, #1
 8008116:	e7f0      	b.n	80080fa <_svfiprintf_r+0x192>
 8008118:	ab03      	add	r3, sp, #12
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	462a      	mov	r2, r5
 800811e:	4b0f      	ldr	r3, [pc, #60]	; (800815c <_svfiprintf_r+0x1f4>)
 8008120:	a904      	add	r1, sp, #16
 8008122:	4638      	mov	r0, r7
 8008124:	f7fd fe4c 	bl	8005dc0 <_printf_float>
 8008128:	1c42      	adds	r2, r0, #1
 800812a:	4606      	mov	r6, r0
 800812c:	d1d6      	bne.n	80080dc <_svfiprintf_r+0x174>
 800812e:	89ab      	ldrh	r3, [r5, #12]
 8008130:	065b      	lsls	r3, r3, #25
 8008132:	f53f af2d 	bmi.w	8007f90 <_svfiprintf_r+0x28>
 8008136:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008138:	b01d      	add	sp, #116	; 0x74
 800813a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813e:	ab03      	add	r3, sp, #12
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	462a      	mov	r2, r5
 8008144:	4b05      	ldr	r3, [pc, #20]	; (800815c <_svfiprintf_r+0x1f4>)
 8008146:	a904      	add	r1, sp, #16
 8008148:	4638      	mov	r0, r7
 800814a:	f7fe f8dd 	bl	8006308 <_printf_i>
 800814e:	e7eb      	b.n	8008128 <_svfiprintf_r+0x1c0>
 8008150:	08008c74 	.word	0x08008c74
 8008154:	08008c7e 	.word	0x08008c7e
 8008158:	08005dc1 	.word	0x08005dc1
 800815c:	08007eb5 	.word	0x08007eb5
 8008160:	08008c7a 	.word	0x08008c7a

08008164 <__sflush_r>:
 8008164:	898a      	ldrh	r2, [r1, #12]
 8008166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800816a:	4605      	mov	r5, r0
 800816c:	0710      	lsls	r0, r2, #28
 800816e:	460c      	mov	r4, r1
 8008170:	d458      	bmi.n	8008224 <__sflush_r+0xc0>
 8008172:	684b      	ldr	r3, [r1, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	dc05      	bgt.n	8008184 <__sflush_r+0x20>
 8008178:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800817a:	2b00      	cmp	r3, #0
 800817c:	dc02      	bgt.n	8008184 <__sflush_r+0x20>
 800817e:	2000      	movs	r0, #0
 8008180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008186:	2e00      	cmp	r6, #0
 8008188:	d0f9      	beq.n	800817e <__sflush_r+0x1a>
 800818a:	2300      	movs	r3, #0
 800818c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008190:	682f      	ldr	r7, [r5, #0]
 8008192:	6a21      	ldr	r1, [r4, #32]
 8008194:	602b      	str	r3, [r5, #0]
 8008196:	d032      	beq.n	80081fe <__sflush_r+0x9a>
 8008198:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800819a:	89a3      	ldrh	r3, [r4, #12]
 800819c:	075a      	lsls	r2, r3, #29
 800819e:	d505      	bpl.n	80081ac <__sflush_r+0x48>
 80081a0:	6863      	ldr	r3, [r4, #4]
 80081a2:	1ac0      	subs	r0, r0, r3
 80081a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081a6:	b10b      	cbz	r3, 80081ac <__sflush_r+0x48>
 80081a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081aa:	1ac0      	subs	r0, r0, r3
 80081ac:	2300      	movs	r3, #0
 80081ae:	4602      	mov	r2, r0
 80081b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081b2:	6a21      	ldr	r1, [r4, #32]
 80081b4:	4628      	mov	r0, r5
 80081b6:	47b0      	blx	r6
 80081b8:	1c43      	adds	r3, r0, #1
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	d106      	bne.n	80081cc <__sflush_r+0x68>
 80081be:	6829      	ldr	r1, [r5, #0]
 80081c0:	291d      	cmp	r1, #29
 80081c2:	d82b      	bhi.n	800821c <__sflush_r+0xb8>
 80081c4:	4a29      	ldr	r2, [pc, #164]	; (800826c <__sflush_r+0x108>)
 80081c6:	410a      	asrs	r2, r1
 80081c8:	07d6      	lsls	r6, r2, #31
 80081ca:	d427      	bmi.n	800821c <__sflush_r+0xb8>
 80081cc:	2200      	movs	r2, #0
 80081ce:	6062      	str	r2, [r4, #4]
 80081d0:	04d9      	lsls	r1, r3, #19
 80081d2:	6922      	ldr	r2, [r4, #16]
 80081d4:	6022      	str	r2, [r4, #0]
 80081d6:	d504      	bpl.n	80081e2 <__sflush_r+0x7e>
 80081d8:	1c42      	adds	r2, r0, #1
 80081da:	d101      	bne.n	80081e0 <__sflush_r+0x7c>
 80081dc:	682b      	ldr	r3, [r5, #0]
 80081de:	b903      	cbnz	r3, 80081e2 <__sflush_r+0x7e>
 80081e0:	6560      	str	r0, [r4, #84]	; 0x54
 80081e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081e4:	602f      	str	r7, [r5, #0]
 80081e6:	2900      	cmp	r1, #0
 80081e8:	d0c9      	beq.n	800817e <__sflush_r+0x1a>
 80081ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081ee:	4299      	cmp	r1, r3
 80081f0:	d002      	beq.n	80081f8 <__sflush_r+0x94>
 80081f2:	4628      	mov	r0, r5
 80081f4:	f7ff f9e2 	bl	80075bc <_free_r>
 80081f8:	2000      	movs	r0, #0
 80081fa:	6360      	str	r0, [r4, #52]	; 0x34
 80081fc:	e7c0      	b.n	8008180 <__sflush_r+0x1c>
 80081fe:	2301      	movs	r3, #1
 8008200:	4628      	mov	r0, r5
 8008202:	47b0      	blx	r6
 8008204:	1c41      	adds	r1, r0, #1
 8008206:	d1c8      	bne.n	800819a <__sflush_r+0x36>
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0c5      	beq.n	800819a <__sflush_r+0x36>
 800820e:	2b1d      	cmp	r3, #29
 8008210:	d001      	beq.n	8008216 <__sflush_r+0xb2>
 8008212:	2b16      	cmp	r3, #22
 8008214:	d101      	bne.n	800821a <__sflush_r+0xb6>
 8008216:	602f      	str	r7, [r5, #0]
 8008218:	e7b1      	b.n	800817e <__sflush_r+0x1a>
 800821a:	89a3      	ldrh	r3, [r4, #12]
 800821c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008220:	81a3      	strh	r3, [r4, #12]
 8008222:	e7ad      	b.n	8008180 <__sflush_r+0x1c>
 8008224:	690f      	ldr	r7, [r1, #16]
 8008226:	2f00      	cmp	r7, #0
 8008228:	d0a9      	beq.n	800817e <__sflush_r+0x1a>
 800822a:	0793      	lsls	r3, r2, #30
 800822c:	680e      	ldr	r6, [r1, #0]
 800822e:	bf08      	it	eq
 8008230:	694b      	ldreq	r3, [r1, #20]
 8008232:	600f      	str	r7, [r1, #0]
 8008234:	bf18      	it	ne
 8008236:	2300      	movne	r3, #0
 8008238:	eba6 0807 	sub.w	r8, r6, r7
 800823c:	608b      	str	r3, [r1, #8]
 800823e:	f1b8 0f00 	cmp.w	r8, #0
 8008242:	dd9c      	ble.n	800817e <__sflush_r+0x1a>
 8008244:	6a21      	ldr	r1, [r4, #32]
 8008246:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008248:	4643      	mov	r3, r8
 800824a:	463a      	mov	r2, r7
 800824c:	4628      	mov	r0, r5
 800824e:	47b0      	blx	r6
 8008250:	2800      	cmp	r0, #0
 8008252:	dc06      	bgt.n	8008262 <__sflush_r+0xfe>
 8008254:	89a3      	ldrh	r3, [r4, #12]
 8008256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800825a:	81a3      	strh	r3, [r4, #12]
 800825c:	f04f 30ff 	mov.w	r0, #4294967295
 8008260:	e78e      	b.n	8008180 <__sflush_r+0x1c>
 8008262:	4407      	add	r7, r0
 8008264:	eba8 0800 	sub.w	r8, r8, r0
 8008268:	e7e9      	b.n	800823e <__sflush_r+0xda>
 800826a:	bf00      	nop
 800826c:	dfbffffe 	.word	0xdfbffffe

08008270 <_fflush_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	690b      	ldr	r3, [r1, #16]
 8008274:	4605      	mov	r5, r0
 8008276:	460c      	mov	r4, r1
 8008278:	b913      	cbnz	r3, 8008280 <_fflush_r+0x10>
 800827a:	2500      	movs	r5, #0
 800827c:	4628      	mov	r0, r5
 800827e:	bd38      	pop	{r3, r4, r5, pc}
 8008280:	b118      	cbz	r0, 800828a <_fflush_r+0x1a>
 8008282:	6a03      	ldr	r3, [r0, #32]
 8008284:	b90b      	cbnz	r3, 800828a <_fflush_r+0x1a>
 8008286:	f7fe f9ed 	bl	8006664 <__sinit>
 800828a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0f3      	beq.n	800827a <_fflush_r+0xa>
 8008292:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008294:	07d0      	lsls	r0, r2, #31
 8008296:	d404      	bmi.n	80082a2 <_fflush_r+0x32>
 8008298:	0599      	lsls	r1, r3, #22
 800829a:	d402      	bmi.n	80082a2 <_fflush_r+0x32>
 800829c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800829e:	f7fe fb10 	bl	80068c2 <__retarget_lock_acquire_recursive>
 80082a2:	4628      	mov	r0, r5
 80082a4:	4621      	mov	r1, r4
 80082a6:	f7ff ff5d 	bl	8008164 <__sflush_r>
 80082aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082ac:	07da      	lsls	r2, r3, #31
 80082ae:	4605      	mov	r5, r0
 80082b0:	d4e4      	bmi.n	800827c <_fflush_r+0xc>
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	059b      	lsls	r3, r3, #22
 80082b6:	d4e1      	bmi.n	800827c <_fflush_r+0xc>
 80082b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082ba:	f7fe fb03 	bl	80068c4 <__retarget_lock_release_recursive>
 80082be:	e7dd      	b.n	800827c <_fflush_r+0xc>

080082c0 <memmove>:
 80082c0:	4288      	cmp	r0, r1
 80082c2:	b510      	push	{r4, lr}
 80082c4:	eb01 0402 	add.w	r4, r1, r2
 80082c8:	d902      	bls.n	80082d0 <memmove+0x10>
 80082ca:	4284      	cmp	r4, r0
 80082cc:	4623      	mov	r3, r4
 80082ce:	d807      	bhi.n	80082e0 <memmove+0x20>
 80082d0:	1e43      	subs	r3, r0, #1
 80082d2:	42a1      	cmp	r1, r4
 80082d4:	d008      	beq.n	80082e8 <memmove+0x28>
 80082d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082de:	e7f8      	b.n	80082d2 <memmove+0x12>
 80082e0:	4402      	add	r2, r0
 80082e2:	4601      	mov	r1, r0
 80082e4:	428a      	cmp	r2, r1
 80082e6:	d100      	bne.n	80082ea <memmove+0x2a>
 80082e8:	bd10      	pop	{r4, pc}
 80082ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082f2:	e7f7      	b.n	80082e4 <memmove+0x24>

080082f4 <_sbrk_r>:
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	4d06      	ldr	r5, [pc, #24]	; (8008310 <_sbrk_r+0x1c>)
 80082f8:	2300      	movs	r3, #0
 80082fa:	4604      	mov	r4, r0
 80082fc:	4608      	mov	r0, r1
 80082fe:	602b      	str	r3, [r5, #0]
 8008300:	f7f9 fb3c 	bl	800197c <_sbrk>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d102      	bne.n	800830e <_sbrk_r+0x1a>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	b103      	cbz	r3, 800830e <_sbrk_r+0x1a>
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	200006e0 	.word	0x200006e0

08008314 <memcpy>:
 8008314:	440a      	add	r2, r1
 8008316:	4291      	cmp	r1, r2
 8008318:	f100 33ff 	add.w	r3, r0, #4294967295
 800831c:	d100      	bne.n	8008320 <memcpy+0xc>
 800831e:	4770      	bx	lr
 8008320:	b510      	push	{r4, lr}
 8008322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008326:	f803 4f01 	strb.w	r4, [r3, #1]!
 800832a:	4291      	cmp	r1, r2
 800832c:	d1f9      	bne.n	8008322 <memcpy+0xe>
 800832e:	bd10      	pop	{r4, pc}

08008330 <__assert_func>:
 8008330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008332:	4614      	mov	r4, r2
 8008334:	461a      	mov	r2, r3
 8008336:	4b09      	ldr	r3, [pc, #36]	; (800835c <__assert_func+0x2c>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4605      	mov	r5, r0
 800833c:	68d8      	ldr	r0, [r3, #12]
 800833e:	b14c      	cbz	r4, 8008354 <__assert_func+0x24>
 8008340:	4b07      	ldr	r3, [pc, #28]	; (8008360 <__assert_func+0x30>)
 8008342:	9100      	str	r1, [sp, #0]
 8008344:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008348:	4906      	ldr	r1, [pc, #24]	; (8008364 <__assert_func+0x34>)
 800834a:	462b      	mov	r3, r5
 800834c:	f000 f872 	bl	8008434 <fiprintf>
 8008350:	f000 f882 	bl	8008458 <abort>
 8008354:	4b04      	ldr	r3, [pc, #16]	; (8008368 <__assert_func+0x38>)
 8008356:	461c      	mov	r4, r3
 8008358:	e7f3      	b.n	8008342 <__assert_func+0x12>
 800835a:	bf00      	nop
 800835c:	2000006c 	.word	0x2000006c
 8008360:	08008c8f 	.word	0x08008c8f
 8008364:	08008c9c 	.word	0x08008c9c
 8008368:	08008cca 	.word	0x08008cca

0800836c <_calloc_r>:
 800836c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800836e:	fba1 2402 	umull	r2, r4, r1, r2
 8008372:	b94c      	cbnz	r4, 8008388 <_calloc_r+0x1c>
 8008374:	4611      	mov	r1, r2
 8008376:	9201      	str	r2, [sp, #4]
 8008378:	f7ff f994 	bl	80076a4 <_malloc_r>
 800837c:	9a01      	ldr	r2, [sp, #4]
 800837e:	4605      	mov	r5, r0
 8008380:	b930      	cbnz	r0, 8008390 <_calloc_r+0x24>
 8008382:	4628      	mov	r0, r5
 8008384:	b003      	add	sp, #12
 8008386:	bd30      	pop	{r4, r5, pc}
 8008388:	220c      	movs	r2, #12
 800838a:	6002      	str	r2, [r0, #0]
 800838c:	2500      	movs	r5, #0
 800838e:	e7f8      	b.n	8008382 <_calloc_r+0x16>
 8008390:	4621      	mov	r1, r4
 8008392:	f7fe fa19 	bl	80067c8 <memset>
 8008396:	e7f4      	b.n	8008382 <_calloc_r+0x16>

08008398 <__ascii_mbtowc>:
 8008398:	b082      	sub	sp, #8
 800839a:	b901      	cbnz	r1, 800839e <__ascii_mbtowc+0x6>
 800839c:	a901      	add	r1, sp, #4
 800839e:	b142      	cbz	r2, 80083b2 <__ascii_mbtowc+0x1a>
 80083a0:	b14b      	cbz	r3, 80083b6 <__ascii_mbtowc+0x1e>
 80083a2:	7813      	ldrb	r3, [r2, #0]
 80083a4:	600b      	str	r3, [r1, #0]
 80083a6:	7812      	ldrb	r2, [r2, #0]
 80083a8:	1e10      	subs	r0, r2, #0
 80083aa:	bf18      	it	ne
 80083ac:	2001      	movne	r0, #1
 80083ae:	b002      	add	sp, #8
 80083b0:	4770      	bx	lr
 80083b2:	4610      	mov	r0, r2
 80083b4:	e7fb      	b.n	80083ae <__ascii_mbtowc+0x16>
 80083b6:	f06f 0001 	mvn.w	r0, #1
 80083ba:	e7f8      	b.n	80083ae <__ascii_mbtowc+0x16>

080083bc <_realloc_r>:
 80083bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c0:	4680      	mov	r8, r0
 80083c2:	4614      	mov	r4, r2
 80083c4:	460e      	mov	r6, r1
 80083c6:	b921      	cbnz	r1, 80083d2 <_realloc_r+0x16>
 80083c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083cc:	4611      	mov	r1, r2
 80083ce:	f7ff b969 	b.w	80076a4 <_malloc_r>
 80083d2:	b92a      	cbnz	r2, 80083e0 <_realloc_r+0x24>
 80083d4:	f7ff f8f2 	bl	80075bc <_free_r>
 80083d8:	4625      	mov	r5, r4
 80083da:	4628      	mov	r0, r5
 80083dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083e0:	f000 f841 	bl	8008466 <_malloc_usable_size_r>
 80083e4:	4284      	cmp	r4, r0
 80083e6:	4607      	mov	r7, r0
 80083e8:	d802      	bhi.n	80083f0 <_realloc_r+0x34>
 80083ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083ee:	d812      	bhi.n	8008416 <_realloc_r+0x5a>
 80083f0:	4621      	mov	r1, r4
 80083f2:	4640      	mov	r0, r8
 80083f4:	f7ff f956 	bl	80076a4 <_malloc_r>
 80083f8:	4605      	mov	r5, r0
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d0ed      	beq.n	80083da <_realloc_r+0x1e>
 80083fe:	42bc      	cmp	r4, r7
 8008400:	4622      	mov	r2, r4
 8008402:	4631      	mov	r1, r6
 8008404:	bf28      	it	cs
 8008406:	463a      	movcs	r2, r7
 8008408:	f7ff ff84 	bl	8008314 <memcpy>
 800840c:	4631      	mov	r1, r6
 800840e:	4640      	mov	r0, r8
 8008410:	f7ff f8d4 	bl	80075bc <_free_r>
 8008414:	e7e1      	b.n	80083da <_realloc_r+0x1e>
 8008416:	4635      	mov	r5, r6
 8008418:	e7df      	b.n	80083da <_realloc_r+0x1e>

0800841a <__ascii_wctomb>:
 800841a:	b149      	cbz	r1, 8008430 <__ascii_wctomb+0x16>
 800841c:	2aff      	cmp	r2, #255	; 0xff
 800841e:	bf85      	ittet	hi
 8008420:	238a      	movhi	r3, #138	; 0x8a
 8008422:	6003      	strhi	r3, [r0, #0]
 8008424:	700a      	strbls	r2, [r1, #0]
 8008426:	f04f 30ff 	movhi.w	r0, #4294967295
 800842a:	bf98      	it	ls
 800842c:	2001      	movls	r0, #1
 800842e:	4770      	bx	lr
 8008430:	4608      	mov	r0, r1
 8008432:	4770      	bx	lr

08008434 <fiprintf>:
 8008434:	b40e      	push	{r1, r2, r3}
 8008436:	b503      	push	{r0, r1, lr}
 8008438:	4601      	mov	r1, r0
 800843a:	ab03      	add	r3, sp, #12
 800843c:	4805      	ldr	r0, [pc, #20]	; (8008454 <fiprintf+0x20>)
 800843e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008442:	6800      	ldr	r0, [r0, #0]
 8008444:	9301      	str	r3, [sp, #4]
 8008446:	f000 f83f 	bl	80084c8 <_vfiprintf_r>
 800844a:	b002      	add	sp, #8
 800844c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008450:	b003      	add	sp, #12
 8008452:	4770      	bx	lr
 8008454:	2000006c 	.word	0x2000006c

08008458 <abort>:
 8008458:	b508      	push	{r3, lr}
 800845a:	2006      	movs	r0, #6
 800845c:	f000 fa0c 	bl	8008878 <raise>
 8008460:	2001      	movs	r0, #1
 8008462:	f7f9 fa13 	bl	800188c <_exit>

08008466 <_malloc_usable_size_r>:
 8008466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800846a:	1f18      	subs	r0, r3, #4
 800846c:	2b00      	cmp	r3, #0
 800846e:	bfbc      	itt	lt
 8008470:	580b      	ldrlt	r3, [r1, r0]
 8008472:	18c0      	addlt	r0, r0, r3
 8008474:	4770      	bx	lr

08008476 <__sfputc_r>:
 8008476:	6893      	ldr	r3, [r2, #8]
 8008478:	3b01      	subs	r3, #1
 800847a:	2b00      	cmp	r3, #0
 800847c:	b410      	push	{r4}
 800847e:	6093      	str	r3, [r2, #8]
 8008480:	da08      	bge.n	8008494 <__sfputc_r+0x1e>
 8008482:	6994      	ldr	r4, [r2, #24]
 8008484:	42a3      	cmp	r3, r4
 8008486:	db01      	blt.n	800848c <__sfputc_r+0x16>
 8008488:	290a      	cmp	r1, #10
 800848a:	d103      	bne.n	8008494 <__sfputc_r+0x1e>
 800848c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008490:	f000 b934 	b.w	80086fc <__swbuf_r>
 8008494:	6813      	ldr	r3, [r2, #0]
 8008496:	1c58      	adds	r0, r3, #1
 8008498:	6010      	str	r0, [r2, #0]
 800849a:	7019      	strb	r1, [r3, #0]
 800849c:	4608      	mov	r0, r1
 800849e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <__sfputs_r>:
 80084a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a6:	4606      	mov	r6, r0
 80084a8:	460f      	mov	r7, r1
 80084aa:	4614      	mov	r4, r2
 80084ac:	18d5      	adds	r5, r2, r3
 80084ae:	42ac      	cmp	r4, r5
 80084b0:	d101      	bne.n	80084b6 <__sfputs_r+0x12>
 80084b2:	2000      	movs	r0, #0
 80084b4:	e007      	b.n	80084c6 <__sfputs_r+0x22>
 80084b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ba:	463a      	mov	r2, r7
 80084bc:	4630      	mov	r0, r6
 80084be:	f7ff ffda 	bl	8008476 <__sfputc_r>
 80084c2:	1c43      	adds	r3, r0, #1
 80084c4:	d1f3      	bne.n	80084ae <__sfputs_r+0xa>
 80084c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084c8 <_vfiprintf_r>:
 80084c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	460d      	mov	r5, r1
 80084ce:	b09d      	sub	sp, #116	; 0x74
 80084d0:	4614      	mov	r4, r2
 80084d2:	4698      	mov	r8, r3
 80084d4:	4606      	mov	r6, r0
 80084d6:	b118      	cbz	r0, 80084e0 <_vfiprintf_r+0x18>
 80084d8:	6a03      	ldr	r3, [r0, #32]
 80084da:	b90b      	cbnz	r3, 80084e0 <_vfiprintf_r+0x18>
 80084dc:	f7fe f8c2 	bl	8006664 <__sinit>
 80084e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084e2:	07d9      	lsls	r1, r3, #31
 80084e4:	d405      	bmi.n	80084f2 <_vfiprintf_r+0x2a>
 80084e6:	89ab      	ldrh	r3, [r5, #12]
 80084e8:	059a      	lsls	r2, r3, #22
 80084ea:	d402      	bmi.n	80084f2 <_vfiprintf_r+0x2a>
 80084ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084ee:	f7fe f9e8 	bl	80068c2 <__retarget_lock_acquire_recursive>
 80084f2:	89ab      	ldrh	r3, [r5, #12]
 80084f4:	071b      	lsls	r3, r3, #28
 80084f6:	d501      	bpl.n	80084fc <_vfiprintf_r+0x34>
 80084f8:	692b      	ldr	r3, [r5, #16]
 80084fa:	b99b      	cbnz	r3, 8008524 <_vfiprintf_r+0x5c>
 80084fc:	4629      	mov	r1, r5
 80084fe:	4630      	mov	r0, r6
 8008500:	f000 f93a 	bl	8008778 <__swsetup_r>
 8008504:	b170      	cbz	r0, 8008524 <_vfiprintf_r+0x5c>
 8008506:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008508:	07dc      	lsls	r4, r3, #31
 800850a:	d504      	bpl.n	8008516 <_vfiprintf_r+0x4e>
 800850c:	f04f 30ff 	mov.w	r0, #4294967295
 8008510:	b01d      	add	sp, #116	; 0x74
 8008512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008516:	89ab      	ldrh	r3, [r5, #12]
 8008518:	0598      	lsls	r0, r3, #22
 800851a:	d4f7      	bmi.n	800850c <_vfiprintf_r+0x44>
 800851c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800851e:	f7fe f9d1 	bl	80068c4 <__retarget_lock_release_recursive>
 8008522:	e7f3      	b.n	800850c <_vfiprintf_r+0x44>
 8008524:	2300      	movs	r3, #0
 8008526:	9309      	str	r3, [sp, #36]	; 0x24
 8008528:	2320      	movs	r3, #32
 800852a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800852e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008532:	2330      	movs	r3, #48	; 0x30
 8008534:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80086e8 <_vfiprintf_r+0x220>
 8008538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800853c:	f04f 0901 	mov.w	r9, #1
 8008540:	4623      	mov	r3, r4
 8008542:	469a      	mov	sl, r3
 8008544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008548:	b10a      	cbz	r2, 800854e <_vfiprintf_r+0x86>
 800854a:	2a25      	cmp	r2, #37	; 0x25
 800854c:	d1f9      	bne.n	8008542 <_vfiprintf_r+0x7a>
 800854e:	ebba 0b04 	subs.w	fp, sl, r4
 8008552:	d00b      	beq.n	800856c <_vfiprintf_r+0xa4>
 8008554:	465b      	mov	r3, fp
 8008556:	4622      	mov	r2, r4
 8008558:	4629      	mov	r1, r5
 800855a:	4630      	mov	r0, r6
 800855c:	f7ff ffa2 	bl	80084a4 <__sfputs_r>
 8008560:	3001      	adds	r0, #1
 8008562:	f000 80a9 	beq.w	80086b8 <_vfiprintf_r+0x1f0>
 8008566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008568:	445a      	add	r2, fp
 800856a:	9209      	str	r2, [sp, #36]	; 0x24
 800856c:	f89a 3000 	ldrb.w	r3, [sl]
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 80a1 	beq.w	80086b8 <_vfiprintf_r+0x1f0>
 8008576:	2300      	movs	r3, #0
 8008578:	f04f 32ff 	mov.w	r2, #4294967295
 800857c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008580:	f10a 0a01 	add.w	sl, sl, #1
 8008584:	9304      	str	r3, [sp, #16]
 8008586:	9307      	str	r3, [sp, #28]
 8008588:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800858c:	931a      	str	r3, [sp, #104]	; 0x68
 800858e:	4654      	mov	r4, sl
 8008590:	2205      	movs	r2, #5
 8008592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008596:	4854      	ldr	r0, [pc, #336]	; (80086e8 <_vfiprintf_r+0x220>)
 8008598:	f7f7 fe1a 	bl	80001d0 <memchr>
 800859c:	9a04      	ldr	r2, [sp, #16]
 800859e:	b9d8      	cbnz	r0, 80085d8 <_vfiprintf_r+0x110>
 80085a0:	06d1      	lsls	r1, r2, #27
 80085a2:	bf44      	itt	mi
 80085a4:	2320      	movmi	r3, #32
 80085a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085aa:	0713      	lsls	r3, r2, #28
 80085ac:	bf44      	itt	mi
 80085ae:	232b      	movmi	r3, #43	; 0x2b
 80085b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085b4:	f89a 3000 	ldrb.w	r3, [sl]
 80085b8:	2b2a      	cmp	r3, #42	; 0x2a
 80085ba:	d015      	beq.n	80085e8 <_vfiprintf_r+0x120>
 80085bc:	9a07      	ldr	r2, [sp, #28]
 80085be:	4654      	mov	r4, sl
 80085c0:	2000      	movs	r0, #0
 80085c2:	f04f 0c0a 	mov.w	ip, #10
 80085c6:	4621      	mov	r1, r4
 80085c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085cc:	3b30      	subs	r3, #48	; 0x30
 80085ce:	2b09      	cmp	r3, #9
 80085d0:	d94d      	bls.n	800866e <_vfiprintf_r+0x1a6>
 80085d2:	b1b0      	cbz	r0, 8008602 <_vfiprintf_r+0x13a>
 80085d4:	9207      	str	r2, [sp, #28]
 80085d6:	e014      	b.n	8008602 <_vfiprintf_r+0x13a>
 80085d8:	eba0 0308 	sub.w	r3, r0, r8
 80085dc:	fa09 f303 	lsl.w	r3, r9, r3
 80085e0:	4313      	orrs	r3, r2
 80085e2:	9304      	str	r3, [sp, #16]
 80085e4:	46a2      	mov	sl, r4
 80085e6:	e7d2      	b.n	800858e <_vfiprintf_r+0xc6>
 80085e8:	9b03      	ldr	r3, [sp, #12]
 80085ea:	1d19      	adds	r1, r3, #4
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	9103      	str	r1, [sp, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	bfbb      	ittet	lt
 80085f4:	425b      	neglt	r3, r3
 80085f6:	f042 0202 	orrlt.w	r2, r2, #2
 80085fa:	9307      	strge	r3, [sp, #28]
 80085fc:	9307      	strlt	r3, [sp, #28]
 80085fe:	bfb8      	it	lt
 8008600:	9204      	strlt	r2, [sp, #16]
 8008602:	7823      	ldrb	r3, [r4, #0]
 8008604:	2b2e      	cmp	r3, #46	; 0x2e
 8008606:	d10c      	bne.n	8008622 <_vfiprintf_r+0x15a>
 8008608:	7863      	ldrb	r3, [r4, #1]
 800860a:	2b2a      	cmp	r3, #42	; 0x2a
 800860c:	d134      	bne.n	8008678 <_vfiprintf_r+0x1b0>
 800860e:	9b03      	ldr	r3, [sp, #12]
 8008610:	1d1a      	adds	r2, r3, #4
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	9203      	str	r2, [sp, #12]
 8008616:	2b00      	cmp	r3, #0
 8008618:	bfb8      	it	lt
 800861a:	f04f 33ff 	movlt.w	r3, #4294967295
 800861e:	3402      	adds	r4, #2
 8008620:	9305      	str	r3, [sp, #20]
 8008622:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80086f8 <_vfiprintf_r+0x230>
 8008626:	7821      	ldrb	r1, [r4, #0]
 8008628:	2203      	movs	r2, #3
 800862a:	4650      	mov	r0, sl
 800862c:	f7f7 fdd0 	bl	80001d0 <memchr>
 8008630:	b138      	cbz	r0, 8008642 <_vfiprintf_r+0x17a>
 8008632:	9b04      	ldr	r3, [sp, #16]
 8008634:	eba0 000a 	sub.w	r0, r0, sl
 8008638:	2240      	movs	r2, #64	; 0x40
 800863a:	4082      	lsls	r2, r0
 800863c:	4313      	orrs	r3, r2
 800863e:	3401      	adds	r4, #1
 8008640:	9304      	str	r3, [sp, #16]
 8008642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008646:	4829      	ldr	r0, [pc, #164]	; (80086ec <_vfiprintf_r+0x224>)
 8008648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800864c:	2206      	movs	r2, #6
 800864e:	f7f7 fdbf 	bl	80001d0 <memchr>
 8008652:	2800      	cmp	r0, #0
 8008654:	d03f      	beq.n	80086d6 <_vfiprintf_r+0x20e>
 8008656:	4b26      	ldr	r3, [pc, #152]	; (80086f0 <_vfiprintf_r+0x228>)
 8008658:	bb1b      	cbnz	r3, 80086a2 <_vfiprintf_r+0x1da>
 800865a:	9b03      	ldr	r3, [sp, #12]
 800865c:	3307      	adds	r3, #7
 800865e:	f023 0307 	bic.w	r3, r3, #7
 8008662:	3308      	adds	r3, #8
 8008664:	9303      	str	r3, [sp, #12]
 8008666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008668:	443b      	add	r3, r7
 800866a:	9309      	str	r3, [sp, #36]	; 0x24
 800866c:	e768      	b.n	8008540 <_vfiprintf_r+0x78>
 800866e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008672:	460c      	mov	r4, r1
 8008674:	2001      	movs	r0, #1
 8008676:	e7a6      	b.n	80085c6 <_vfiprintf_r+0xfe>
 8008678:	2300      	movs	r3, #0
 800867a:	3401      	adds	r4, #1
 800867c:	9305      	str	r3, [sp, #20]
 800867e:	4619      	mov	r1, r3
 8008680:	f04f 0c0a 	mov.w	ip, #10
 8008684:	4620      	mov	r0, r4
 8008686:	f810 2b01 	ldrb.w	r2, [r0], #1
 800868a:	3a30      	subs	r2, #48	; 0x30
 800868c:	2a09      	cmp	r2, #9
 800868e:	d903      	bls.n	8008698 <_vfiprintf_r+0x1d0>
 8008690:	2b00      	cmp	r3, #0
 8008692:	d0c6      	beq.n	8008622 <_vfiprintf_r+0x15a>
 8008694:	9105      	str	r1, [sp, #20]
 8008696:	e7c4      	b.n	8008622 <_vfiprintf_r+0x15a>
 8008698:	fb0c 2101 	mla	r1, ip, r1, r2
 800869c:	4604      	mov	r4, r0
 800869e:	2301      	movs	r3, #1
 80086a0:	e7f0      	b.n	8008684 <_vfiprintf_r+0x1bc>
 80086a2:	ab03      	add	r3, sp, #12
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	462a      	mov	r2, r5
 80086a8:	4b12      	ldr	r3, [pc, #72]	; (80086f4 <_vfiprintf_r+0x22c>)
 80086aa:	a904      	add	r1, sp, #16
 80086ac:	4630      	mov	r0, r6
 80086ae:	f7fd fb87 	bl	8005dc0 <_printf_float>
 80086b2:	4607      	mov	r7, r0
 80086b4:	1c78      	adds	r0, r7, #1
 80086b6:	d1d6      	bne.n	8008666 <_vfiprintf_r+0x19e>
 80086b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086ba:	07d9      	lsls	r1, r3, #31
 80086bc:	d405      	bmi.n	80086ca <_vfiprintf_r+0x202>
 80086be:	89ab      	ldrh	r3, [r5, #12]
 80086c0:	059a      	lsls	r2, r3, #22
 80086c2:	d402      	bmi.n	80086ca <_vfiprintf_r+0x202>
 80086c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086c6:	f7fe f8fd 	bl	80068c4 <__retarget_lock_release_recursive>
 80086ca:	89ab      	ldrh	r3, [r5, #12]
 80086cc:	065b      	lsls	r3, r3, #25
 80086ce:	f53f af1d 	bmi.w	800850c <_vfiprintf_r+0x44>
 80086d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086d4:	e71c      	b.n	8008510 <_vfiprintf_r+0x48>
 80086d6:	ab03      	add	r3, sp, #12
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	462a      	mov	r2, r5
 80086dc:	4b05      	ldr	r3, [pc, #20]	; (80086f4 <_vfiprintf_r+0x22c>)
 80086de:	a904      	add	r1, sp, #16
 80086e0:	4630      	mov	r0, r6
 80086e2:	f7fd fe11 	bl	8006308 <_printf_i>
 80086e6:	e7e4      	b.n	80086b2 <_vfiprintf_r+0x1ea>
 80086e8:	08008c74 	.word	0x08008c74
 80086ec:	08008c7e 	.word	0x08008c7e
 80086f0:	08005dc1 	.word	0x08005dc1
 80086f4:	080084a5 	.word	0x080084a5
 80086f8:	08008c7a 	.word	0x08008c7a

080086fc <__swbuf_r>:
 80086fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fe:	460e      	mov	r6, r1
 8008700:	4614      	mov	r4, r2
 8008702:	4605      	mov	r5, r0
 8008704:	b118      	cbz	r0, 800870e <__swbuf_r+0x12>
 8008706:	6a03      	ldr	r3, [r0, #32]
 8008708:	b90b      	cbnz	r3, 800870e <__swbuf_r+0x12>
 800870a:	f7fd ffab 	bl	8006664 <__sinit>
 800870e:	69a3      	ldr	r3, [r4, #24]
 8008710:	60a3      	str	r3, [r4, #8]
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	071a      	lsls	r2, r3, #28
 8008716:	d525      	bpl.n	8008764 <__swbuf_r+0x68>
 8008718:	6923      	ldr	r3, [r4, #16]
 800871a:	b31b      	cbz	r3, 8008764 <__swbuf_r+0x68>
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	6922      	ldr	r2, [r4, #16]
 8008720:	1a98      	subs	r0, r3, r2
 8008722:	6963      	ldr	r3, [r4, #20]
 8008724:	b2f6      	uxtb	r6, r6
 8008726:	4283      	cmp	r3, r0
 8008728:	4637      	mov	r7, r6
 800872a:	dc04      	bgt.n	8008736 <__swbuf_r+0x3a>
 800872c:	4621      	mov	r1, r4
 800872e:	4628      	mov	r0, r5
 8008730:	f7ff fd9e 	bl	8008270 <_fflush_r>
 8008734:	b9e0      	cbnz	r0, 8008770 <__swbuf_r+0x74>
 8008736:	68a3      	ldr	r3, [r4, #8]
 8008738:	3b01      	subs	r3, #1
 800873a:	60a3      	str	r3, [r4, #8]
 800873c:	6823      	ldr	r3, [r4, #0]
 800873e:	1c5a      	adds	r2, r3, #1
 8008740:	6022      	str	r2, [r4, #0]
 8008742:	701e      	strb	r6, [r3, #0]
 8008744:	6962      	ldr	r2, [r4, #20]
 8008746:	1c43      	adds	r3, r0, #1
 8008748:	429a      	cmp	r2, r3
 800874a:	d004      	beq.n	8008756 <__swbuf_r+0x5a>
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	07db      	lsls	r3, r3, #31
 8008750:	d506      	bpl.n	8008760 <__swbuf_r+0x64>
 8008752:	2e0a      	cmp	r6, #10
 8008754:	d104      	bne.n	8008760 <__swbuf_r+0x64>
 8008756:	4621      	mov	r1, r4
 8008758:	4628      	mov	r0, r5
 800875a:	f7ff fd89 	bl	8008270 <_fflush_r>
 800875e:	b938      	cbnz	r0, 8008770 <__swbuf_r+0x74>
 8008760:	4638      	mov	r0, r7
 8008762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008764:	4621      	mov	r1, r4
 8008766:	4628      	mov	r0, r5
 8008768:	f000 f806 	bl	8008778 <__swsetup_r>
 800876c:	2800      	cmp	r0, #0
 800876e:	d0d5      	beq.n	800871c <__swbuf_r+0x20>
 8008770:	f04f 37ff 	mov.w	r7, #4294967295
 8008774:	e7f4      	b.n	8008760 <__swbuf_r+0x64>
	...

08008778 <__swsetup_r>:
 8008778:	b538      	push	{r3, r4, r5, lr}
 800877a:	4b2a      	ldr	r3, [pc, #168]	; (8008824 <__swsetup_r+0xac>)
 800877c:	4605      	mov	r5, r0
 800877e:	6818      	ldr	r0, [r3, #0]
 8008780:	460c      	mov	r4, r1
 8008782:	b118      	cbz	r0, 800878c <__swsetup_r+0x14>
 8008784:	6a03      	ldr	r3, [r0, #32]
 8008786:	b90b      	cbnz	r3, 800878c <__swsetup_r+0x14>
 8008788:	f7fd ff6c 	bl	8006664 <__sinit>
 800878c:	89a3      	ldrh	r3, [r4, #12]
 800878e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008792:	0718      	lsls	r0, r3, #28
 8008794:	d422      	bmi.n	80087dc <__swsetup_r+0x64>
 8008796:	06d9      	lsls	r1, r3, #27
 8008798:	d407      	bmi.n	80087aa <__swsetup_r+0x32>
 800879a:	2309      	movs	r3, #9
 800879c:	602b      	str	r3, [r5, #0]
 800879e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087a2:	81a3      	strh	r3, [r4, #12]
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295
 80087a8:	e034      	b.n	8008814 <__swsetup_r+0x9c>
 80087aa:	0758      	lsls	r0, r3, #29
 80087ac:	d512      	bpl.n	80087d4 <__swsetup_r+0x5c>
 80087ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087b0:	b141      	cbz	r1, 80087c4 <__swsetup_r+0x4c>
 80087b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087b6:	4299      	cmp	r1, r3
 80087b8:	d002      	beq.n	80087c0 <__swsetup_r+0x48>
 80087ba:	4628      	mov	r0, r5
 80087bc:	f7fe fefe 	bl	80075bc <_free_r>
 80087c0:	2300      	movs	r3, #0
 80087c2:	6363      	str	r3, [r4, #52]	; 0x34
 80087c4:	89a3      	ldrh	r3, [r4, #12]
 80087c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087ca:	81a3      	strh	r3, [r4, #12]
 80087cc:	2300      	movs	r3, #0
 80087ce:	6063      	str	r3, [r4, #4]
 80087d0:	6923      	ldr	r3, [r4, #16]
 80087d2:	6023      	str	r3, [r4, #0]
 80087d4:	89a3      	ldrh	r3, [r4, #12]
 80087d6:	f043 0308 	orr.w	r3, r3, #8
 80087da:	81a3      	strh	r3, [r4, #12]
 80087dc:	6923      	ldr	r3, [r4, #16]
 80087de:	b94b      	cbnz	r3, 80087f4 <__swsetup_r+0x7c>
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087ea:	d003      	beq.n	80087f4 <__swsetup_r+0x7c>
 80087ec:	4621      	mov	r1, r4
 80087ee:	4628      	mov	r0, r5
 80087f0:	f000 f884 	bl	80088fc <__smakebuf_r>
 80087f4:	89a0      	ldrh	r0, [r4, #12]
 80087f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087fa:	f010 0301 	ands.w	r3, r0, #1
 80087fe:	d00a      	beq.n	8008816 <__swsetup_r+0x9e>
 8008800:	2300      	movs	r3, #0
 8008802:	60a3      	str	r3, [r4, #8]
 8008804:	6963      	ldr	r3, [r4, #20]
 8008806:	425b      	negs	r3, r3
 8008808:	61a3      	str	r3, [r4, #24]
 800880a:	6923      	ldr	r3, [r4, #16]
 800880c:	b943      	cbnz	r3, 8008820 <__swsetup_r+0xa8>
 800880e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008812:	d1c4      	bne.n	800879e <__swsetup_r+0x26>
 8008814:	bd38      	pop	{r3, r4, r5, pc}
 8008816:	0781      	lsls	r1, r0, #30
 8008818:	bf58      	it	pl
 800881a:	6963      	ldrpl	r3, [r4, #20]
 800881c:	60a3      	str	r3, [r4, #8]
 800881e:	e7f4      	b.n	800880a <__swsetup_r+0x92>
 8008820:	2000      	movs	r0, #0
 8008822:	e7f7      	b.n	8008814 <__swsetup_r+0x9c>
 8008824:	2000006c 	.word	0x2000006c

08008828 <_raise_r>:
 8008828:	291f      	cmp	r1, #31
 800882a:	b538      	push	{r3, r4, r5, lr}
 800882c:	4604      	mov	r4, r0
 800882e:	460d      	mov	r5, r1
 8008830:	d904      	bls.n	800883c <_raise_r+0x14>
 8008832:	2316      	movs	r3, #22
 8008834:	6003      	str	r3, [r0, #0]
 8008836:	f04f 30ff 	mov.w	r0, #4294967295
 800883a:	bd38      	pop	{r3, r4, r5, pc}
 800883c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800883e:	b112      	cbz	r2, 8008846 <_raise_r+0x1e>
 8008840:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008844:	b94b      	cbnz	r3, 800885a <_raise_r+0x32>
 8008846:	4620      	mov	r0, r4
 8008848:	f000 f830 	bl	80088ac <_getpid_r>
 800884c:	462a      	mov	r2, r5
 800884e:	4601      	mov	r1, r0
 8008850:	4620      	mov	r0, r4
 8008852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008856:	f000 b817 	b.w	8008888 <_kill_r>
 800885a:	2b01      	cmp	r3, #1
 800885c:	d00a      	beq.n	8008874 <_raise_r+0x4c>
 800885e:	1c59      	adds	r1, r3, #1
 8008860:	d103      	bne.n	800886a <_raise_r+0x42>
 8008862:	2316      	movs	r3, #22
 8008864:	6003      	str	r3, [r0, #0]
 8008866:	2001      	movs	r0, #1
 8008868:	e7e7      	b.n	800883a <_raise_r+0x12>
 800886a:	2400      	movs	r4, #0
 800886c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008870:	4628      	mov	r0, r5
 8008872:	4798      	blx	r3
 8008874:	2000      	movs	r0, #0
 8008876:	e7e0      	b.n	800883a <_raise_r+0x12>

08008878 <raise>:
 8008878:	4b02      	ldr	r3, [pc, #8]	; (8008884 <raise+0xc>)
 800887a:	4601      	mov	r1, r0
 800887c:	6818      	ldr	r0, [r3, #0]
 800887e:	f7ff bfd3 	b.w	8008828 <_raise_r>
 8008882:	bf00      	nop
 8008884:	2000006c 	.word	0x2000006c

08008888 <_kill_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4d07      	ldr	r5, [pc, #28]	; (80088a8 <_kill_r+0x20>)
 800888c:	2300      	movs	r3, #0
 800888e:	4604      	mov	r4, r0
 8008890:	4608      	mov	r0, r1
 8008892:	4611      	mov	r1, r2
 8008894:	602b      	str	r3, [r5, #0]
 8008896:	f7f8 ffe9 	bl	800186c <_kill>
 800889a:	1c43      	adds	r3, r0, #1
 800889c:	d102      	bne.n	80088a4 <_kill_r+0x1c>
 800889e:	682b      	ldr	r3, [r5, #0]
 80088a0:	b103      	cbz	r3, 80088a4 <_kill_r+0x1c>
 80088a2:	6023      	str	r3, [r4, #0]
 80088a4:	bd38      	pop	{r3, r4, r5, pc}
 80088a6:	bf00      	nop
 80088a8:	200006e0 	.word	0x200006e0

080088ac <_getpid_r>:
 80088ac:	f7f8 bfd6 	b.w	800185c <_getpid>

080088b0 <__swhatbuf_r>:
 80088b0:	b570      	push	{r4, r5, r6, lr}
 80088b2:	460c      	mov	r4, r1
 80088b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b8:	2900      	cmp	r1, #0
 80088ba:	b096      	sub	sp, #88	; 0x58
 80088bc:	4615      	mov	r5, r2
 80088be:	461e      	mov	r6, r3
 80088c0:	da0d      	bge.n	80088de <__swhatbuf_r+0x2e>
 80088c2:	89a3      	ldrh	r3, [r4, #12]
 80088c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80088c8:	f04f 0100 	mov.w	r1, #0
 80088cc:	bf0c      	ite	eq
 80088ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80088d2:	2340      	movne	r3, #64	; 0x40
 80088d4:	2000      	movs	r0, #0
 80088d6:	6031      	str	r1, [r6, #0]
 80088d8:	602b      	str	r3, [r5, #0]
 80088da:	b016      	add	sp, #88	; 0x58
 80088dc:	bd70      	pop	{r4, r5, r6, pc}
 80088de:	466a      	mov	r2, sp
 80088e0:	f000 f848 	bl	8008974 <_fstat_r>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	dbec      	blt.n	80088c2 <__swhatbuf_r+0x12>
 80088e8:	9901      	ldr	r1, [sp, #4]
 80088ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80088ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80088f2:	4259      	negs	r1, r3
 80088f4:	4159      	adcs	r1, r3
 80088f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088fa:	e7eb      	b.n	80088d4 <__swhatbuf_r+0x24>

080088fc <__smakebuf_r>:
 80088fc:	898b      	ldrh	r3, [r1, #12]
 80088fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008900:	079d      	lsls	r5, r3, #30
 8008902:	4606      	mov	r6, r0
 8008904:	460c      	mov	r4, r1
 8008906:	d507      	bpl.n	8008918 <__smakebuf_r+0x1c>
 8008908:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	6123      	str	r3, [r4, #16]
 8008910:	2301      	movs	r3, #1
 8008912:	6163      	str	r3, [r4, #20]
 8008914:	b002      	add	sp, #8
 8008916:	bd70      	pop	{r4, r5, r6, pc}
 8008918:	ab01      	add	r3, sp, #4
 800891a:	466a      	mov	r2, sp
 800891c:	f7ff ffc8 	bl	80088b0 <__swhatbuf_r>
 8008920:	9900      	ldr	r1, [sp, #0]
 8008922:	4605      	mov	r5, r0
 8008924:	4630      	mov	r0, r6
 8008926:	f7fe febd 	bl	80076a4 <_malloc_r>
 800892a:	b948      	cbnz	r0, 8008940 <__smakebuf_r+0x44>
 800892c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008930:	059a      	lsls	r2, r3, #22
 8008932:	d4ef      	bmi.n	8008914 <__smakebuf_r+0x18>
 8008934:	f023 0303 	bic.w	r3, r3, #3
 8008938:	f043 0302 	orr.w	r3, r3, #2
 800893c:	81a3      	strh	r3, [r4, #12]
 800893e:	e7e3      	b.n	8008908 <__smakebuf_r+0xc>
 8008940:	89a3      	ldrh	r3, [r4, #12]
 8008942:	6020      	str	r0, [r4, #0]
 8008944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008948:	81a3      	strh	r3, [r4, #12]
 800894a:	9b00      	ldr	r3, [sp, #0]
 800894c:	6163      	str	r3, [r4, #20]
 800894e:	9b01      	ldr	r3, [sp, #4]
 8008950:	6120      	str	r0, [r4, #16]
 8008952:	b15b      	cbz	r3, 800896c <__smakebuf_r+0x70>
 8008954:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008958:	4630      	mov	r0, r6
 800895a:	f000 f81d 	bl	8008998 <_isatty_r>
 800895e:	b128      	cbz	r0, 800896c <__smakebuf_r+0x70>
 8008960:	89a3      	ldrh	r3, [r4, #12]
 8008962:	f023 0303 	bic.w	r3, r3, #3
 8008966:	f043 0301 	orr.w	r3, r3, #1
 800896a:	81a3      	strh	r3, [r4, #12]
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	431d      	orrs	r5, r3
 8008970:	81a5      	strh	r5, [r4, #12]
 8008972:	e7cf      	b.n	8008914 <__smakebuf_r+0x18>

08008974 <_fstat_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4d07      	ldr	r5, [pc, #28]	; (8008994 <_fstat_r+0x20>)
 8008978:	2300      	movs	r3, #0
 800897a:	4604      	mov	r4, r0
 800897c:	4608      	mov	r0, r1
 800897e:	4611      	mov	r1, r2
 8008980:	602b      	str	r3, [r5, #0]
 8008982:	f7f8 ffd2 	bl	800192a <_fstat>
 8008986:	1c43      	adds	r3, r0, #1
 8008988:	d102      	bne.n	8008990 <_fstat_r+0x1c>
 800898a:	682b      	ldr	r3, [r5, #0]
 800898c:	b103      	cbz	r3, 8008990 <_fstat_r+0x1c>
 800898e:	6023      	str	r3, [r4, #0]
 8008990:	bd38      	pop	{r3, r4, r5, pc}
 8008992:	bf00      	nop
 8008994:	200006e0 	.word	0x200006e0

08008998 <_isatty_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4d06      	ldr	r5, [pc, #24]	; (80089b4 <_isatty_r+0x1c>)
 800899c:	2300      	movs	r3, #0
 800899e:	4604      	mov	r4, r0
 80089a0:	4608      	mov	r0, r1
 80089a2:	602b      	str	r3, [r5, #0]
 80089a4:	f7f8 ffd1 	bl	800194a <_isatty>
 80089a8:	1c43      	adds	r3, r0, #1
 80089aa:	d102      	bne.n	80089b2 <_isatty_r+0x1a>
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	b103      	cbz	r3, 80089b2 <_isatty_r+0x1a>
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	bd38      	pop	{r3, r4, r5, pc}
 80089b4:	200006e0 	.word	0x200006e0

080089b8 <_init>:
 80089b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ba:	bf00      	nop
 80089bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089be:	bc08      	pop	{r3}
 80089c0:	469e      	mov	lr, r3
 80089c2:	4770      	bx	lr

080089c4 <_fini>:
 80089c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c6:	bf00      	nop
 80089c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ca:	bc08      	pop	{r3}
 80089cc:	469e      	mov	lr, r3
 80089ce:	4770      	bx	lr
