
Lab1_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c030  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800c1c0  0800c1c0  0001c1c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7bc  0800c7bc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7bc  0800c7bc  0001c7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7c4  0800c7c4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7c4  0800c7c4  0001c7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7c8  0800c7c8  0001c7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800c7cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  200001f4  0800c9c0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  0800c9c0  00020754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013ef0  00000000  00000000  00020267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d1d  00000000  00000000  00034157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  00036e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000deb  00000000  00000000  00038078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002918b  00000000  00000000  00038e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018cb0  00000000  00000000  00061fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f054a  00000000  00000000  0007ac9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c7c  00000000  00000000  0016b1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00170e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c1a8 	.word	0x0800c1a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800c1a8 	.word	0x0800c1a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Interrrupt Handler for Blue Button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f54:	d102      	bne.n	8000f5c <HAL_GPIO_EXTI_Callback+0x18>
		unmount = 1;
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <HAL_GPIO_EXTI_Callback+0x24>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
	}
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	200003b4 	.word	0x200003b4

08000f6c <myprintf>:

void myprintf(const char *fmt, ...) {
 8000f6c:	b40f      	push	{r0, r1, r2, r3}
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
	static char buffer[512];
	va_list args;
	va_start(args, fmt);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f82:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <myprintf+0x44>)
 8000f84:	f009 f808 	bl	8009f98 <vsniprintf>
	va_end(args);
	int len = strlen(buffer);
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <myprintf+0x44>)
 8000f8a:	f7ff f971 	bl	8000270 <strlen>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, len, -1);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	4905      	ldr	r1, [pc, #20]	; (8000fb0 <myprintf+0x44>)
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <myprintf+0x48>)
 8000f9e:	f004 fb25 	bl	80055ec <HAL_UART_Transmit>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fac:	b004      	add	sp, #16
 8000fae:	4770      	bx	lr
 8000fb0:	200003b8 	.word	0x200003b8
 8000fb4:	2000032c 	.word	0x2000032c

08000fb8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fbc:	f5ad 6da7 	sub.w	sp, sp, #1336	; 0x538
 8000fc0:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fc2:	f000 ff17 	bl	8001df4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fc6:	f000 fadd 	bl	8001584 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fca:	f000 fc19 	bl	8001800 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000fce:	f000 fbe7 	bl	80017a0 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000fd2:	f000 fb29 	bl	8001628 <MX_I2C1_Init>
	MX_SPI2_Init();
 8000fd6:	f000 fb67 	bl	80016a8 <MX_SPI2_Init>
	MX_SPI3_Init();
 8000fda:	f000 fba3 	bl	8001724 <MX_SPI3_Init>
	MX_FATFS_Init();
 8000fde:	f005 f85d 	bl	800609c <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */

	// Tell BH1721 to start measurements
	ret = HAL_I2C_Master_Transmit(&hi2c1, BH1721_ADDR_write, &BH1721_start, 1,
 8000fe2:	4bbd      	ldr	r3, [pc, #756]	; (80012d8 <main+0x320>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	b299      	uxth	r1, r3
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	4aba      	ldr	r2, [pc, #744]	; (80012dc <main+0x324>)
 8000ff2:	48bb      	ldr	r0, [pc, #748]	; (80012e0 <main+0x328>)
 8000ff4:	f001 fb26 	bl	8002644 <HAL_I2C_Master_Transmit>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f887 351a 	strb.w	r3, [r7, #1306]	; 0x51a
	HAL_MAX_DELAY);
	if (ret != HAL_OK) {
 8000ffe:	f897 351a 	ldrb.w	r3, [r7, #1306]	; 0x51a
 8001002:	2b00      	cmp	r3, #0
 8001004:	d002      	beq.n	800100c <main+0x54>
		myprintf("Error!\n"); // error message in UART
 8001006:	48b7      	ldr	r0, [pc, #732]	; (80012e4 <main+0x32c>)
 8001008:	f7ff ffb0 	bl	8000f6c <myprintf>
	}

	// Mount SD Card
	fres = f_mount(&FatFs, "", 1); //1=mount now
 800100c:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001010:	2201      	movs	r2, #1
 8001012:	49b5      	ldr	r1, [pc, #724]	; (80012e8 <main+0x330>)
 8001014:	4618      	mov	r0, r3
 8001016:	f007 facd 	bl	80085b4 <f_mount>
 800101a:	4603      	mov	r3, r0
 800101c:	f887 3519 	strb.w	r3, [r7, #1305]	; 0x519
	if (fres != FR_OK) {
 8001020:	f897 3519 	ldrb.w	r3, [r7, #1305]	; 0x519
 8001024:	2b00      	cmp	r3, #0
 8001026:	d006      	beq.n	8001036 <main+0x7e>
		myprintf("f_mount error (%i)\r\n", fres);
 8001028:	f897 3519 	ldrb.w	r3, [r7, #1305]	; 0x519
 800102c:	4619      	mov	r1, r3
 800102e:	48af      	ldr	r0, [pc, #700]	; (80012ec <main+0x334>)
 8001030:	f7ff ff9c 	bl	8000f6c <myprintf>
		while (1)
 8001034:	e7fe      	b.n	8001034 <main+0x7c>

	// Check available space on SD Card
	DWORD free_clusters, free_sectors, total_sectors;
	FATFS *getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 8001036:	1d3a      	adds	r2, r7, #4
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	4619      	mov	r1, r3
 800103e:	48aa      	ldr	r0, [pc, #680]	; (80012e8 <main+0x330>)
 8001040:	f008 f8e2 	bl	8009208 <f_getfree>
 8001044:	4603      	mov	r3, r0
 8001046:	f887 3519 	strb.w	r3, [r7, #1305]	; 0x519
	if (fres != FR_OK) {
 800104a:	f897 3519 	ldrb.w	r3, [r7, #1305]	; 0x519
 800104e:	2b00      	cmp	r3, #0
 8001050:	d006      	beq.n	8001060 <main+0xa8>
		myprintf("f_getfree error (%i)\r\n", fres);
 8001052:	f897 3519 	ldrb.w	r3, [r7, #1305]	; 0x519
 8001056:	4619      	mov	r1, r3
 8001058:	48a5      	ldr	r0, [pc, #660]	; (80012f0 <main+0x338>)
 800105a:	f7ff ff87 	bl	8000f6c <myprintf>
		while (1)
 800105e:	e7fe      	b.n	800105e <main+0xa6>
			;
	}
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8001060:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001064:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	3b02      	subs	r3, #2
 800106e:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8001072:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 8001076:	6812      	ldr	r2, [r2, #0]
 8001078:	8952      	ldrh	r2, [r2, #10]
 800107a:	fb02 f303 	mul.w	r3, r2, r3
 800107e:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
	free_sectors = free_clusters * getFreeFs->csize;
 8001082:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001086:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	895b      	ldrh	r3, [r3, #10]
 800108e:	461a      	mov	r2, r3
 8001090:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001094:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	fb02 f303 	mul.w	r3, r2, r3
 800109e:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510

	myprintf(
 80010a2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80010a6:	0859      	lsrs	r1, r3, #1
 80010a8:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80010ac:	085b      	lsrs	r3, r3, #1
 80010ae:	461a      	mov	r2, r3
 80010b0:	4890      	ldr	r0, [pc, #576]	; (80012f4 <main+0x33c>)
 80010b2:	f7ff ff5b 	bl	8000f6c <myprintf>
	// Write File Header
	fres = f_open(&fil, "data.bin", FA_CREATE_ALWAYS | FA_WRITE); // new file is created
	f_close(&fil); // close file
#else
	// Write File Header
	fres = f_open(&fil, "data.txt", FA_CREATE_ALWAYS | FA_WRITE); // new file is created
 80010b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80010ba:	220a      	movs	r2, #10
 80010bc:	498e      	ldr	r1, [pc, #568]	; (80012f8 <main+0x340>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f007 fabe 	bl	8008640 <f_open>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f887 3519 	strb.w	r3, [r7, #1305]	; 0x519
	f_lseek(&fil, f_size(&fil)); //put the file pointer to end of file
 80010ca:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80010ce:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80010d8:	4611      	mov	r1, r2
 80010da:	4618      	mov	r0, r3
 80010dc:	f007 fe8b 	bl	8008df6 <f_lseek>
	str_buf_len = sprintf(str_buf, "Time; Temperature; Luminosity\r\n"); // generate string to write
 80010e0:	f107 0318 	add.w	r3, r7, #24
 80010e4:	4985      	ldr	r1, [pc, #532]	; (80012fc <main+0x344>)
 80010e6:	4618      	mov	r0, r3
 80010e8:	f008 fec8 	bl	8009e7c <siprintf>
 80010ec:	f8c7 050c 	str.w	r0, [r7, #1292]	; 0x50c
	fres = f_write(&fil, str_buf, str_buf_len, &bytesWrote); //write
 80010f0:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
 80010f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010f8:	f107 0118 	add.w	r1, r7, #24
 80010fc:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8001100:	f007 fc5c 	bl	80089bc <f_write>
 8001104:	4603      	mov	r3, r0
 8001106:	f887 3519 	strb.w	r3, [r7, #1305]	; 0x519
	f_close(&fil); // close file
 800110a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800110e:	4618      	mov	r0, r3
 8001110:	f007 fe47 	bl	8008da2 <f_close>
#endif
	// LED on
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //PA5 is Green LED
 8001114:	2201      	movs	r2, #1
 8001116:	2120      	movs	r1, #32
 8001118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111c:	f001 f9c6 	bl	80024ac <HAL_GPIO_WritePin>
	led_tick = HAL_GetTick();
 8001120:	f000 fed8 	bl	8001ed4 <HAL_GetTick>
 8001124:	f8c7 051c 	str.w	r0, [r7, #1308]	; 0x51c
	led_state = ~0;
 8001128:	23ff      	movs	r3, #255	; 0xff
 800112a:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b

	// Set SPI3 CS Low
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2110      	movs	r1, #16
 8001132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001136:	f001 f9b9 	bl	80024ac <HAL_GPIO_WritePin>

	// Configure BH1721 to do low resolution continuously
	ret = HAL_I2C_Master_Transmit(&hi2c1, BH1721_ADDR_write, &BH1721_LRC, 1,
 800113a:	4b67      	ldr	r3, [pc, #412]	; (80012d8 <main+0x320>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b299      	uxth	r1, r3
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2301      	movs	r3, #1
 8001148:	4a6d      	ldr	r2, [pc, #436]	; (8001300 <main+0x348>)
 800114a:	4865      	ldr	r0, [pc, #404]	; (80012e0 <main+0x328>)
 800114c:	f001 fa7a 	bl	8002644 <HAL_I2C_Master_Transmit>
 8001150:	4603      	mov	r3, r0
 8001152:	f887 351a 	strb.w	r3, [r7, #1306]	; 0x51a
	HAL_MAX_DELAY);
	if (ret != HAL_OK) {
 8001156:	f897 351a 	ldrb.w	r3, [r7, #1306]	; 0x51a
 800115a:	2b00      	cmp	r3, #0
 800115c:	d002      	beq.n	8001164 <main+0x1ac>
		myprintf("Error!\n"); // error message in UART
 800115e:	4861      	ldr	r0, [pc, #388]	; (80012e4 <main+0x32c>)
 8001160:	f7ff ff04 	bl	8000f6c <myprintf>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // SPI3 CS on
 8001164:	2201      	movs	r2, #1
 8001166:	2110      	movs	r1, #16
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f001 f99e 	bl	80024ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*) &TC72_WR, 1, HAL_MAX_DELAY);
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	2201      	movs	r2, #1
 8001176:	4963      	ldr	r1, [pc, #396]	; (8001304 <main+0x34c>)
 8001178:	4863      	ldr	r0, [pc, #396]	; (8001308 <main+0x350>)
 800117a:	f003 fb5e 	bl	800483a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, (uint8_t*) &TC72_OP, 1, HAL_MAX_DELAY);
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	2201      	movs	r2, #1
 8001184:	4961      	ldr	r1, [pc, #388]	; (800130c <main+0x354>)
 8001186:	4860      	ldr	r0, [pc, #384]	; (8001308 <main+0x350>)
 8001188:	f003 fb57 	bl	800483a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // SPI3 CS off
 800118c:	2200      	movs	r2, #0
 800118e:	2110      	movs	r1, #16
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f001 f98a 	bl	80024ac <HAL_GPIO_WritePin>

	init_tick = HAL_GetTick();
 8001198:	f000 fe9c 	bl	8001ed4 <HAL_GetTick>
 800119c:	f8c7 0508 	str.w	r0, [r7, #1288]	; 0x508
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		// Read 2 bytes from BH1721 into a buffer
		ret = HAL_I2C_Master_Receive(&hi2c1, BH1721_ADDR_read, buf, 2,
 80011a0:	4b5b      	ldr	r3, [pc, #364]	; (8001310 <main+0x358>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b299      	uxth	r1, r3
 80011a6:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2302      	movs	r3, #2
 80011b2:	484b      	ldr	r0, [pc, #300]	; (80012e0 <main+0x328>)
 80011b4:	f001 fb5e 	bl	8002874 <HAL_I2C_Master_Receive>
 80011b8:	4603      	mov	r3, r0
 80011ba:	f887 351a 	strb.w	r3, [r7, #1306]	; 0x51a
		HAL_MAX_DELAY);
		if (ret != HAL_OK) {
 80011be:	f897 351a 	ldrb.w	r3, [r7, #1306]	; 0x51a
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <main+0x214>
			myprintf("Error!\n"); // error message in UART
 80011c6:	4847      	ldr	r0, [pc, #284]	; (80012e4 <main+0x32c>)
 80011c8:	f7ff fed0 	bl	8000f6c <myprintf>
		}

		// Convert into Lux
		light_val = (buf[0] << 8) | buf[1];
 80011cc:	f897 34e8 	ldrb.w	r3, [r7, #1256]	; 0x4e8
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	f897 34e9 	ldrb.w	r3, [r7, #1257]	; 0x4e9
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4313      	orrs	r3, r2
 80011dc:	b21b      	sxth	r3, r3
 80011de:	f8a7 3506 	strh.w	r3, [r7, #1286]	; 0x506
		lux = light_val / 1.2;
 80011e2:	f8b7 3506 	ldrh.w	r3, [r7, #1286]	; 0x506
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f99c 	bl	8000524 <__aeabi_i2d>
 80011ec:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80011f0:	4b48      	ldr	r3, [pc, #288]	; (8001314 <main+0x35c>)
 80011f2:	f7ff fb2b 	bl	800084c <__aeabi_ddiv>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fcd3 	bl	8000ba8 <__aeabi_d2f>
 8001202:	4603      	mov	r3, r0
 8001204:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8001208:	6013      	str	r3, [r2, #0]

		// Send 0x80 and 0x15 to Temp Sensor
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // SPI3 CS on
 800120a:	2201      	movs	r2, #1
 800120c:	2110      	movs	r1, #16
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f001 f94b 	bl	80024ac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (uint8_t*) &TC72_WR, 1, HAL_MAX_DELAY);
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	2201      	movs	r2, #1
 800121c:	4939      	ldr	r1, [pc, #228]	; (8001304 <main+0x34c>)
 800121e:	483a      	ldr	r0, [pc, #232]	; (8001308 <main+0x350>)
 8001220:	f003 fb0b 	bl	800483a <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, (uint8_t*) &TC72_TEMP, 1, HAL_MAX_DELAY);
 8001224:	f04f 33ff 	mov.w	r3, #4294967295
 8001228:	2201      	movs	r2, #1
 800122a:	493b      	ldr	r1, [pc, #236]	; (8001318 <main+0x360>)
 800122c:	4836      	ldr	r0, [pc, #216]	; (8001308 <main+0x350>)
 800122e:	f003 fb04 	bl	800483a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // SPI3 CS off
 8001232:	2200      	movs	r2, #0
 8001234:	2110      	movs	r1, #16
 8001236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123a:	f001 f937 	bl	80024ac <HAL_GPIO_WritePin>

		HAL_Delay(150);
 800123e:	2096      	movs	r0, #150	; 0x96
 8001240:	f000 fe54 	bl	8001eec <HAL_Delay>

		// Send 0x03 to Temp Sensor and Read 4 Bytes into SPI Buffer
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // SPI3 CS on
 8001244:	2201      	movs	r2, #1
 8001246:	2110      	movs	r1, #16
 8001248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124c:	f001 f92e 	bl	80024ac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (uint8_t*) &TC72_RR, 1, HAL_MAX_DELAY);
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
 8001254:	2201      	movs	r2, #1
 8001256:	4931      	ldr	r1, [pc, #196]	; (800131c <main+0x364>)
 8001258:	482b      	ldr	r0, [pc, #172]	; (8001308 <main+0x350>)
 800125a:	f003 faee 	bl	800483a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, (uint8_t*) spi_buf, 4, HAL_MAX_DELAY);
 800125e:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	2204      	movs	r2, #4
 8001268:	4827      	ldr	r0, [pc, #156]	; (8001308 <main+0x350>)
 800126a:	f003 fc5b 	bl	8004b24 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // SPI3 CS off
 800126e:	2200      	movs	r2, #0
 8001270:	2110      	movs	r1, #16
 8001272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001276:	f001 f919 	bl	80024ac <HAL_GPIO_WritePin>

		// Convert Temp Data into Celsius
		flag = spi_buf[2] >> 6; //right shift by 6 bits
 800127a:	f897 34e2 	ldrb.w	r3, [r7, #1250]	; 0x4e2
 800127e:	099b      	lsrs	r3, r3, #6
 8001280:	f887 34ff 	strb.w	r3, [r7, #1279]	; 0x4ff

		if (spi_buf[1] >= 128) { //cause 128 means -0
 8001284:	f897 34e1 	ldrb.w	r3, [r7, #1249]	; 0x4e1
 8001288:	b25b      	sxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	da4a      	bge.n	8001324 <main+0x36c>
			temp = -((spi_buf[1]) - 128) - (flag * 0.25);
 800128e:	f897 34e1 	ldrb.w	r3, [r7, #1249]	; 0x4e1
 8001292:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f944 	bl	8000524 <__aeabi_i2d>
 800129c:	4604      	mov	r4, r0
 800129e:	460d      	mov	r5, r1
 80012a0:	f897 34ff 	ldrb.w	r3, [r7, #1279]	; 0x4ff
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f93d 	bl	8000524 <__aeabi_i2d>
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <main+0x368>)
 80012b0:	f7ff f9a2 	bl	80005f8 <__aeabi_dmul>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4620      	mov	r0, r4
 80012ba:	4629      	mov	r1, r5
 80012bc:	f7fe ffe4 	bl	8000288 <__aeabi_dsub>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fc6e 	bl	8000ba8 <__aeabi_d2f>
 80012cc:	4603      	mov	r3, r0
 80012ce:	f207 5224 	addw	r2, r7, #1316	; 0x524
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	e047      	b.n	8001366 <main+0x3ae>
 80012d6:	bf00      	nop
 80012d8:	20000001 	.word	0x20000001
 80012dc:	20000002 	.word	0x20000002
 80012e0:	20000210 	.word	0x20000210
 80012e4:	0800c1c0 	.word	0x0800c1c0
 80012e8:	0800c1c8 	.word	0x0800c1c8
 80012ec:	0800c1cc 	.word	0x0800c1cc
 80012f0:	0800c1e4 	.word	0x0800c1e4
 80012f4:	0800c1fc 	.word	0x0800c1fc
 80012f8:	0800c23c 	.word	0x0800c23c
 80012fc:	0800c248 	.word	0x0800c248
 8001300:	20000003 	.word	0x20000003
 8001304:	20000004 	.word	0x20000004
 8001308:	200002c8 	.word	0x200002c8
 800130c:	20000006 	.word	0x20000006
 8001310:	20000000 	.word	0x20000000
 8001314:	3ff33333 	.word	0x3ff33333
 8001318:	20000005 	.word	0x20000005
 800131c:	20000007 	.word	0x20000007
 8001320:	3fd00000 	.word	0x3fd00000
		} else {
			temp = spi_buf[1] + (flag * 0.25);
 8001324:	f897 34e1 	ldrb.w	r3, [r7, #1249]	; 0x4e1
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f8fb 	bl	8000524 <__aeabi_i2d>
 800132e:	4604      	mov	r4, r0
 8001330:	460d      	mov	r5, r1
 8001332:	f897 34ff 	ldrb.w	r3, [r7, #1279]	; 0x4ff
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f8f4 	bl	8000524 <__aeabi_i2d>
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	4b82      	ldr	r3, [pc, #520]	; (800154c <main+0x594>)
 8001342:	f7ff f959 	bl	80005f8 <__aeabi_dmul>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4620      	mov	r0, r4
 800134c:	4629      	mov	r1, r5
 800134e:	f7fe ff9d 	bl	800028c <__adddf3>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff fc25 	bl	8000ba8 <__aeabi_d2f>
 800135e:	4603      	mov	r3, r0
 8001360:	f207 5224 	addw	r2, r7, #1316	; 0x524
 8001364:	6013      	str	r3, [r2, #0]
		}

		curr_tick = HAL_GetTick();
 8001366:	f000 fdb5 	bl	8001ed4 <HAL_GetTick>
 800136a:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8
		time = (float) (curr_tick - init_tick) / 1000;
 800136e:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 8001372:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	ee07 3a90 	vmov	s15, r3
 800137c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001380:	eddf 6a73 	vldr	s13, [pc, #460]	; 8001550 <main+0x598>
 8001384:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001388:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 800138c:	edc3 7a00 	vstr	s15, [r3]

#ifdef DEBUG_PRINT
		myprintf("Light: %.2f lux\r\n", lux);
 8001390:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	f7ff f8d7 	bl	8000548 <__aeabi_f2d>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	486d      	ldr	r0, [pc, #436]	; (8001554 <main+0x59c>)
 80013a0:	f7ff fde4 	bl	8000f6c <myprintf>

		myprintf("Temp Val: %x %x %x %x\r\n", spi_buf[0], spi_buf[1],
 80013a4:	f897 34e0 	ldrb.w	r3, [r7, #1248]	; 0x4e0
 80013a8:	4619      	mov	r1, r3
 80013aa:	f897 34e1 	ldrb.w	r3, [r7, #1249]	; 0x4e1
 80013ae:	461a      	mov	r2, r3
				spi_buf[2], spi_buf[3]);
 80013b0:	f897 34e2 	ldrb.w	r3, [r7, #1250]	; 0x4e2
		myprintf("Temp Val: %x %x %x %x\r\n", spi_buf[0], spi_buf[1],
 80013b4:	4618      	mov	r0, r3
				spi_buf[2], spi_buf[3]);
 80013b6:	f897 34e3 	ldrb.w	r3, [r7, #1251]	; 0x4e3
		myprintf("Temp Val: %x %x %x %x\r\n", spi_buf[0], spi_buf[1],
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	4603      	mov	r3, r0
 80013be:	4866      	ldr	r0, [pc, #408]	; (8001558 <main+0x5a0>)
 80013c0:	f7ff fdd4 	bl	8000f6c <myprintf>

		myprintf("Temp : %.2f\r\n", temp);
 80013c4:	f207 5324 	addw	r3, r7, #1316	; 0x524
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	f7ff f8bd 	bl	8000548 <__aeabi_f2d>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4862      	ldr	r0, [pc, #392]	; (800155c <main+0x5a4>)
 80013d4:	f7ff fdca 	bl	8000f6c <myprintf>
#endif

#ifdef REALTIME
		myprintf("LIVE,%.2f,%.2f\r\n", temp, lux);
 80013d8:	f207 5324 	addw	r3, r7, #1316	; 0x524
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	f7ff f8b3 	bl	8000548 <__aeabi_f2d>
 80013e2:	4604      	mov	r4, r0
 80013e4:	460d      	mov	r5, r1
 80013e6:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	f7ff f8ac 	bl	8000548 <__aeabi_f2d>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	e9cd 2300 	strd	r2, r3, [sp]
 80013f8:	4622      	mov	r2, r4
 80013fa:	462b      	mov	r3, r5
 80013fc:	4858      	ldr	r0, [pc, #352]	; (8001560 <main+0x5a8>)
 80013fe:	f7ff fdb5 	bl	8000f6c <myprintf>
		write_buf[1] = temp;
		write_buf[2] = lux;
		fres = f_write(&fil, write_buf, sizeof(write_buf), &bytesWrote);
		f_close(&fil); // close file
#else
		fres = f_open(&fil, "data.txt", FA_WRITE | FA_OPEN_APPEND);
 8001402:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001406:	2232      	movs	r2, #50	; 0x32
 8001408:	4956      	ldr	r1, [pc, #344]	; (8001564 <main+0x5ac>)
 800140a:	4618      	mov	r0, r3
 800140c:	f007 f918 	bl	8008640 <f_open>
 8001410:	4603      	mov	r3, r0
 8001412:	f887 3519 	strb.w	r3, [r7, #1305]	; 0x519
		f_lseek(&fil, f_size(&fil)); //put the file pointer to end of file
 8001416:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800141a:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 800141e:	68da      	ldr	r2, [r3, #12]
 8001420:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f007 fce5 	bl	8008df6 <f_lseek>
		str_buf_len = sprintf(str_buf, "%.3f;%.2f;%.2f\r\n", time, temp, lux); // generate string to write
 800142c:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 8001430:	6818      	ldr	r0, [r3, #0]
 8001432:	f7ff f889 	bl	8000548 <__aeabi_f2d>
 8001436:	4680      	mov	r8, r0
 8001438:	4689      	mov	r9, r1
 800143a:	f207 5324 	addw	r3, r7, #1316	; 0x524
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	f7ff f882 	bl	8000548 <__aeabi_f2d>
 8001444:	4604      	mov	r4, r0
 8001446:	460d      	mov	r5, r1
 8001448:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	f7ff f87b 	bl	8000548 <__aeabi_f2d>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	f107 0018 	add.w	r0, r7, #24
 800145a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800145e:	e9cd 4500 	strd	r4, r5, [sp]
 8001462:	4642      	mov	r2, r8
 8001464:	464b      	mov	r3, r9
 8001466:	4940      	ldr	r1, [pc, #256]	; (8001568 <main+0x5b0>)
 8001468:	f008 fd08 	bl	8009e7c <siprintf>
 800146c:	f8c7 050c 	str.w	r0, [r7, #1292]	; 0x50c
		fres = f_write(&fil, str_buf, str_buf_len, &bytesWrote); //write
 8001470:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
 8001474:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001478:	f107 0118 	add.w	r1, r7, #24
 800147c:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8001480:	f007 fa9c 	bl	80089bc <f_write>
 8001484:	4603      	mov	r3, r0
 8001486:	f887 3519 	strb.w	r3, [r7, #1305]	; 0x519
		f_close(&fil); // close file
 800148a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800148e:	4618      	mov	r0, r3
 8001490:	f007 fc87 	bl	8008da2 <f_close>
#endif

		delta_tick = HAL_GetTick() - prev_tick;
 8001494:	f000 fd1e 	bl	8001ed4 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
		prev_tick = HAL_GetTick();
 80014a4:	f000 fd16 	bl	8001ed4 <HAL_GetTick>
 80014a8:	f8c7 0520 	str.w	r0, [r7, #1312]	; 0x520

		myprintf("Time between measurement: %d\r\n", delta_tick);
 80014ac:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 80014b0:	482e      	ldr	r0, [pc, #184]	; (800156c <main+0x5b4>)
 80014b2:	f7ff fd5b 	bl	8000f6c <myprintf>

		// check if writing worked
#ifdef DEBUG_PRINT
		if (fres == FR_OK) {
 80014b6:	f897 3519 	ldrb.w	r3, [r7, #1305]	; 0x519
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d109      	bne.n	80014d2 <main+0x51a>
			myprintf("Wrote %i bytes to 'data.txt'!\r\n", bytesWrote);
 80014be:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80014c2:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	4829      	ldr	r0, [pc, #164]	; (8001570 <main+0x5b8>)
 80014cc:	f7ff fd4e 	bl	8000f6c <myprintf>
 80014d0:	e002      	b.n	80014d8 <main+0x520>
		} else {
			myprintf("f_write error\r\n");
 80014d2:	4828      	ldr	r0, [pc, #160]	; (8001574 <main+0x5bc>)
 80014d4:	f7ff fd4a 	bl	8000f6c <myprintf>
		}
#endif

		// If blue button is pressed, unmount SD Card
		if (unmount) {
 80014d8:	4b27      	ldr	r3, [pc, #156]	; (8001578 <main+0x5c0>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00f      	beq.n	8001500 <main+0x548>
			fres = f_mount(NULL, "", 1);
 80014e0:	2201      	movs	r2, #1
 80014e2:	4926      	ldr	r1, [pc, #152]	; (800157c <main+0x5c4>)
 80014e4:	2000      	movs	r0, #0
 80014e6:	f007 f865 	bl	80085b4 <f_mount>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f887 3519 	strb.w	r3, [r7, #1305]	; 0x519
			if (fres == FR_OK) {
 80014f0:	f897 3519 	ldrb.w	r3, [r7, #1305]	; 0x519
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <main+0x546>
				myprintf("SD CARD UNMOUNTED successfully...\r\n");
 80014f8:	4821      	ldr	r0, [pc, #132]	; (8001580 <main+0x5c8>)
 80014fa:	f7ff fd37 	bl	8000f6c <myprintf>
			}
			while (1)
 80014fe:	e7fe      	b.n	80014fe <main+0x546>
				; // Halt the programme
		}

		// Turn off LED
		if (HAL_GetTick() - led_tick > 500) {
 8001500:	f000 fce8 	bl	8001ed4 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001510:	f67f ae46 	bls.w	80011a0 <main+0x1e8>
			if (led_state) {
 8001514:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8001518:	2b00      	cmp	r3, #0
 800151a:	d006      	beq.n	800152a <main+0x572>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	2120      	movs	r1, #32
 8001520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001524:	f000 ffc2 	bl	80024ac <HAL_GPIO_WritePin>
 8001528:	e005      	b.n	8001536 <main+0x57e>
			} else {
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800152a:	2201      	movs	r2, #1
 800152c:	2120      	movs	r1, #32
 800152e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001532:	f000 ffbb 	bl	80024ac <HAL_GPIO_WritePin>
			}
			led_state = ~led_state; // Invert LED State
 8001536:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 800153a:	43db      	mvns	r3, r3
 800153c:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
			led_tick = HAL_GetTick();
 8001540:	f000 fcc8 	bl	8001ed4 <HAL_GetTick>
 8001544:	f8c7 051c 	str.w	r0, [r7, #1308]	; 0x51c
		ret = HAL_I2C_Master_Receive(&hi2c1, BH1721_ADDR_read, buf, 2,
 8001548:	e62a      	b.n	80011a0 <main+0x1e8>
 800154a:	bf00      	nop
 800154c:	3fd00000 	.word	0x3fd00000
 8001550:	447a0000 	.word	0x447a0000
 8001554:	0800c268 	.word	0x0800c268
 8001558:	0800c27c 	.word	0x0800c27c
 800155c:	0800c294 	.word	0x0800c294
 8001560:	0800c2a4 	.word	0x0800c2a4
 8001564:	0800c23c 	.word	0x0800c23c
 8001568:	0800c2b8 	.word	0x0800c2b8
 800156c:	0800c2cc 	.word	0x0800c2cc
 8001570:	0800c2ec 	.word	0x0800c2ec
 8001574:	0800c30c 	.word	0x0800c30c
 8001578:	200003b4 	.word	0x200003b4
 800157c:	0800c1c8 	.word	0x0800c1c8
 8001580:	0800c31c 	.word	0x0800c31c

08001584 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b096      	sub	sp, #88	; 0x58
 8001588:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	2244      	movs	r2, #68	; 0x44
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f008 fd0e 	bl	8009fb4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001598:	463b      	mov	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80015a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015aa:	f001 fd91 	bl	80030d0 <HAL_PWREx_ControlVoltageScaling>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80015b4:	f000 f992 	bl	80018dc <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015b8:	2302      	movs	r3, #2
 80015ba:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015c2:	2310      	movs	r3, #16
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c6:	2302      	movs	r3, #2
 80015c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ca:	2302      	movs	r3, #2
 80015cc:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80015d2:	230a      	movs	r3, #10
 80015d4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015d6:	2307      	movs	r3, #7
 80015d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015da:	2302      	movs	r3, #2
 80015dc:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015de:	2302      	movs	r3, #2
 80015e0:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 fdc8 	bl	800317c <HAL_RCC_OscConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <SystemClock_Config+0x72>
		Error_Handler();
 80015f2:	f000 f973 	bl	80018dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80015f6:	230f      	movs	r3, #15
 80015f8:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015fa:	2303      	movs	r3, #3
 80015fc:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800160a:	463b      	mov	r3, r7
 800160c:	2104      	movs	r1, #4
 800160e:	4618      	mov	r0, r3
 8001610:	f002 f990 	bl	8003934 <HAL_RCC_ClockConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0x9a>
		Error_Handler();
 800161a:	f000 f95f 	bl	80018dc <Error_Handler>
	}
}
 800161e:	bf00      	nop
 8001620:	3758      	adds	r7, #88	; 0x58
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <MX_I2C1_Init+0x74>)
 800162e:	4a1c      	ldr	r2, [pc, #112]	; (80016a0 <MX_I2C1_Init+0x78>)
 8001630:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10909CEC;
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <MX_I2C1_Init+0x74>)
 8001634:	4a1b      	ldr	r2, [pc, #108]	; (80016a4 <MX_I2C1_Init+0x7c>)
 8001636:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <MX_I2C1_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <MX_I2C1_Init+0x74>)
 8001640:	2201      	movs	r2, #1
 8001642:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <MX_I2C1_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <MX_I2C1_Init+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <MX_I2C1_Init+0x74>)
 8001652:	2200      	movs	r2, #0
 8001654:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <MX_I2C1_Init+0x74>)
 8001658:	2200      	movs	r2, #0
 800165a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <MX_I2C1_Init+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001662:	480e      	ldr	r0, [pc, #56]	; (800169c <MX_I2C1_Init+0x74>)
 8001664:	f000 ff52 	bl	800250c <HAL_I2C_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_I2C1_Init+0x4a>
		Error_Handler();
 800166e:	f000 f935 	bl	80018dc <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001672:	2100      	movs	r1, #0
 8001674:	4809      	ldr	r0, [pc, #36]	; (800169c <MX_I2C1_Init+0x74>)
 8001676:	f001 fc85 	bl	8002f84 <HAL_I2CEx_ConfigAnalogFilter>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001680:	f000 f92c 	bl	80018dc <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001684:	2100      	movs	r1, #0
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_I2C1_Init+0x74>)
 8001688:	f001 fcc7 	bl	800301a <HAL_I2CEx_ConfigDigitalFilter>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8001692:	f000 f923 	bl	80018dc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000210 	.word	0x20000210
 80016a0:	40005400 	.word	0x40005400
 80016a4:	10909cec 	.word	0x10909cec

080016a8 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <MX_SPI2_Init+0x74>)
 80016ae:	4a1c      	ldr	r2, [pc, #112]	; (8001720 <MX_SPI2_Init+0x78>)
 80016b0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <MX_SPI2_Init+0x74>)
 80016b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016b8:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <MX_SPI2_Init+0x74>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016c0:	4b16      	ldr	r3, [pc, #88]	; (800171c <MX_SPI2_Init+0x74>)
 80016c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016c6:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_SPI2_Init+0x74>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <MX_SPI2_Init+0x74>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_SPI2_Init+0x74>)
 80016d6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016da:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_SPI2_Init+0x74>)
 80016de:	2230      	movs	r2, #48	; 0x30
 80016e0:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_SPI2_Init+0x74>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_SPI2_Init+0x74>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <MX_SPI2_Init+0x74>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_SPI2_Init+0x74>)
 80016f6:	2207      	movs	r2, #7
 80016f8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <MX_SPI2_Init+0x74>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_SPI2_Init+0x74>)
 8001702:	2208      	movs	r2, #8
 8001704:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_SPI2_Init+0x74>)
 8001708:	f002 fff4 	bl	80046f4 <HAL_SPI_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_SPI2_Init+0x6e>
		Error_Handler();
 8001712:	f000 f8e3 	bl	80018dc <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000264 	.word	0x20000264
 8001720:	40003800 	.word	0x40003800

08001724 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <MX_SPI3_Init+0x74>)
 800172a:	4a1c      	ldr	r2, [pc, #112]	; (800179c <MX_SPI3_Init+0x78>)
 800172c:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <MX_SPI3_Init+0x74>)
 8001730:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001734:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001736:	4b18      	ldr	r3, [pc, #96]	; (8001798 <MX_SPI3_Init+0x74>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <MX_SPI3_Init+0x74>)
 800173e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001742:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <MX_SPI3_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <MX_SPI3_Init+0x74>)
 800174c:	2201      	movs	r2, #1
 800174e:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <MX_SPI3_Init+0x74>)
 8001752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001756:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <MX_SPI3_Init+0x74>)
 800175a:	2230      	movs	r2, #48	; 0x30
 800175c:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <MX_SPI3_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <MX_SPI3_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <MX_SPI3_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 7;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MX_SPI3_Init+0x74>)
 8001772:	2207      	movs	r2, #7
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <MX_SPI3_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MX_SPI3_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_SPI3_Init+0x74>)
 8001784:	f002 ffb6 	bl	80046f4 <HAL_SPI_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_SPI3_Init+0x6e>
		Error_Handler();
 800178e:	f000 f8a5 	bl	80018dc <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200002c8 	.word	0x200002c8
 800179c:	40003c00 	.word	0x40003c00

080017a0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017a6:	4a15      	ldr	r2, [pc, #84]	; (80017fc <MX_USART2_UART_Init+0x5c>)
 80017a8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017e4:	f003 feb4 	bl	8005550 <HAL_UART_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80017ee:	f000 f875 	bl	80018dc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000032c 	.word	0x2000032c
 80017fc:	40004400 	.word	0x40004400

08001800 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001816:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <MX_GPIO_Init+0xd4>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	4a2e      	ldr	r2, [pc, #184]	; (80018d4 <MX_GPIO_Init+0xd4>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001822:	4b2c      	ldr	r3, [pc, #176]	; (80018d4 <MX_GPIO_Init+0xd4>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800182e:	4b29      	ldr	r3, [pc, #164]	; (80018d4 <MX_GPIO_Init+0xd4>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	4a28      	ldr	r2, [pc, #160]	; (80018d4 <MX_GPIO_Init+0xd4>)
 8001834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183a:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <MX_GPIO_Init+0xd4>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <MX_GPIO_Init+0xd4>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4a22      	ldr	r2, [pc, #136]	; (80018d4 <MX_GPIO_Init+0xd4>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <MX_GPIO_Init+0xd4>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <MX_GPIO_Init+0xd4>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a1c      	ldr	r2, [pc, #112]	; (80018d4 <MX_GPIO_Init+0xd4>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <MX_GPIO_Init+0xd4>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	2120      	movs	r1, #32
 800187a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187e:	f000 fe15 	bl	80024ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001886:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001888:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800188c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	480f      	ldr	r0, [pc, #60]	; (80018d8 <MX_GPIO_Init+0xd8>)
 800189a:	f000 fc5d 	bl	8002158 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800189e:	2320      	movs	r3, #32
 80018a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b8:	f000 fc4e 	bl	8002158 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	2028      	movs	r0, #40	; 0x28
 80018c2:	f000 fc12 	bl	80020ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018c6:	2028      	movs	r0, #40	; 0x28
 80018c8:	f000 fc2b 	bl	8002122 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	; 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000
 80018d8:	48000800 	.word	0x48000800

080018dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e0:	b672      	cpsid	i
}
 80018e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80018e4:	e7fe      	b.n	80018e4 <Error_Handler+0x8>
	...

080018e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <HAL_MspInit+0x44>)
 80018f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f2:	4a0e      	ldr	r2, [pc, #56]	; (800192c <HAL_MspInit+0x44>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6613      	str	r3, [r2, #96]	; 0x60
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_MspInit+0x44>)
 80018fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_MspInit+0x44>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	4a08      	ldr	r2, [pc, #32]	; (800192c <HAL_MspInit+0x44>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001910:	6593      	str	r3, [r2, #88]	; 0x58
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_MspInit+0x44>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000

08001930 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b0ac      	sub	sp, #176	; 0xb0
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	2288      	movs	r2, #136	; 0x88
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f008 fb2f 	bl	8009fb4 <memset>
  if(hi2c->Instance==I2C1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a21      	ldr	r2, [pc, #132]	; (80019e0 <HAL_I2C_MspInit+0xb0>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d13b      	bne.n	80019d8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001960:	2340      	movs	r3, #64	; 0x40
 8001962:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001964:	2300      	movs	r3, #0
 8001966:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	4618      	mov	r0, r3
 800196e:	f002 fa05 	bl	8003d7c <HAL_RCCEx_PeriphCLKConfig>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001978:	f7ff ffb0 	bl	80018dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HAL_I2C_MspInit+0xb4>)
 800197e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001980:	4a18      	ldr	r2, [pc, #96]	; (80019e4 <HAL_I2C_MspInit+0xb4>)
 8001982:	f043 0302 	orr.w	r3, r3, #2
 8001986:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001988:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <HAL_I2C_MspInit+0xb4>)
 800198a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001994:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001998:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800199c:	2312      	movs	r3, #18
 800199e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a8:	2303      	movs	r3, #3
 80019aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ae:	2304      	movs	r3, #4
 80019b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019b8:	4619      	mov	r1, r3
 80019ba:	480b      	ldr	r0, [pc, #44]	; (80019e8 <HAL_I2C_MspInit+0xb8>)
 80019bc:	f000 fbcc 	bl	8002158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <HAL_I2C_MspInit+0xb4>)
 80019c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c4:	4a07      	ldr	r2, [pc, #28]	; (80019e4 <HAL_I2C_MspInit+0xb4>)
 80019c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019ca:	6593      	str	r3, [r2, #88]	; 0x58
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_I2C_MspInit+0xb4>)
 80019ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019d8:	bf00      	nop
 80019da:	37b0      	adds	r7, #176	; 0xb0
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40005400 	.word	0x40005400
 80019e4:	40021000 	.word	0x40021000
 80019e8:	48000400 	.word	0x48000400

080019ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08c      	sub	sp, #48	; 0x30
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a2e      	ldr	r2, [pc, #184]	; (8001ac4 <HAL_SPI_MspInit+0xd8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d129      	bne.n	8001a62 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <HAL_SPI_MspInit+0xdc>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	4a2d      	ldr	r2, [pc, #180]	; (8001ac8 <HAL_SPI_MspInit+0xdc>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a18:	6593      	str	r3, [r2, #88]	; 0x58
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <HAL_SPI_MspInit+0xdc>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a22:	61bb      	str	r3, [r7, #24]
 8001a24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <HAL_SPI_MspInit+0xdc>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	4a27      	ldr	r2, [pc, #156]	; (8001ac8 <HAL_SPI_MspInit+0xdc>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a32:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <HAL_SPI_MspInit+0xdc>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697b      	ldr	r3, [r7, #20]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001a3e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a50:	2305      	movs	r3, #5
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	4619      	mov	r1, r3
 8001a5a:	481c      	ldr	r0, [pc, #112]	; (8001acc <HAL_SPI_MspInit+0xe0>)
 8001a5c:	f000 fb7c 	bl	8002158 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a60:	e02c      	b.n	8001abc <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1a      	ldr	r2, [pc, #104]	; (8001ad0 <HAL_SPI_MspInit+0xe4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d127      	bne.n	8001abc <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a6c:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <HAL_SPI_MspInit+0xdc>)
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a70:	4a15      	ldr	r2, [pc, #84]	; (8001ac8 <HAL_SPI_MspInit+0xdc>)
 8001a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a76:	6593      	str	r3, [r2, #88]	; 0x58
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <HAL_SPI_MspInit+0xdc>)
 8001a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a84:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_SPI_MspInit+0xdc>)
 8001a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a88:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <HAL_SPI_MspInit+0xdc>)
 8001a8a:	f043 0302 	orr.w	r3, r3, #2
 8001a8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <HAL_SPI_MspInit+0xdc>)
 8001a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001a9c:	2338      	movs	r3, #56	; 0x38
 8001a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001aac:	2306      	movs	r3, #6
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <HAL_SPI_MspInit+0xe0>)
 8001ab8:	f000 fb4e 	bl	8002158 <HAL_GPIO_Init>
}
 8001abc:	bf00      	nop
 8001abe:	3730      	adds	r7, #48	; 0x30
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40003800 	.word	0x40003800
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	48000400 	.word	0x48000400
 8001ad0:	40003c00 	.word	0x40003c00

08001ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b0ac      	sub	sp, #176	; 0xb0
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2288      	movs	r2, #136	; 0x88
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f008 fa5d 	bl	8009fb4 <memset>
  if(huart->Instance==USART2)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a21      	ldr	r2, [pc, #132]	; (8001b84 <HAL_UART_MspInit+0xb0>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d13b      	bne.n	8001b7c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b04:	2302      	movs	r3, #2
 8001b06:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4618      	mov	r0, r3
 8001b12:	f002 f933 	bl	8003d7c <HAL_RCCEx_PeriphCLKConfig>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b1c:	f7ff fede 	bl	80018dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_UART_MspInit+0xb4>)
 8001b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b24:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <HAL_UART_MspInit+0xb4>)
 8001b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b2c:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <HAL_UART_MspInit+0xb4>)
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <HAL_UART_MspInit+0xb4>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3c:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <HAL_UART_MspInit+0xb4>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_UART_MspInit+0xb4>)
 8001b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b50:	230c      	movs	r3, #12
 8001b52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b62:	2303      	movs	r3, #3
 8001b64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b68:	2307      	movs	r3, #7
 8001b6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b72:	4619      	mov	r1, r3
 8001b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b78:	f000 faee 	bl	8002158 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b7c:	bf00      	nop
 8001b7e:	37b0      	adds	r7, #176	; 0xb0
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40004400 	.word	0x40004400
 8001b88:	40021000 	.word	0x40021000

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <NMI_Handler+0x4>

08001b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <HardFault_Handler+0x4>

08001b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <MemManage_Handler+0x4>

08001b9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <BusFault_Handler+0x4>

08001ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <UsageFault_Handler+0x4>

08001baa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd8:	f000 f968 	bl	8001eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001be4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001be8:	f000 fc78 	bl	80024dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return 1;
 8001bf4:	2301      	movs	r3, #1
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <_kill>:

int _kill(int pid, int sig)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c0a:	f008 fa25 	bl	800a058 <__errno>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2216      	movs	r2, #22
 8001c12:	601a      	str	r2, [r3, #0]
  return -1;
 8001c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_exit>:

void _exit (int status)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ffe7 	bl	8001c00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c32:	e7fe      	b.n	8001c32 <_exit+0x12>

08001c34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	e00a      	b.n	8001c5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c46:	f3af 8000 	nop.w
 8001c4a:	4601      	mov	r1, r0
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	60ba      	str	r2, [r7, #8]
 8001c52:	b2ca      	uxtb	r2, r1
 8001c54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	dbf0      	blt.n	8001c46 <_read+0x12>
  }

  return len;
 8001c64:	687b      	ldr	r3, [r7, #4]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	e009      	b.n	8001c94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	60ba      	str	r2, [r7, #8]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3301      	adds	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	dbf1      	blt.n	8001c80 <_write+0x12>
  }
  return len;
 8001c9c:	687b      	ldr	r3, [r7, #4]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_close>:

int _close(int file)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cce:	605a      	str	r2, [r3, #4]
  return 0;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <_isatty>:

int _isatty(int file)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ce6:	2301      	movs	r3, #1
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d18:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <_sbrk+0x5c>)
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <_sbrk+0x60>)
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <_sbrk+0x64>)
 8001d2e:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <_sbrk+0x68>)
 8001d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d207      	bcs.n	8001d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d40:	f008 f98a 	bl	800a058 <__errno>
 8001d44:	4603      	mov	r3, r0
 8001d46:	220c      	movs	r2, #12
 8001d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	e009      	b.n	8001d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <_sbrk+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <_sbrk+0x64>)
 8001d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d62:	68fb      	ldr	r3, [r7, #12]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20018000 	.word	0x20018000
 8001d70:	00000400 	.word	0x00000400
 8001d74:	200005b8 	.word	0x200005b8
 8001d78:	20000758 	.word	0x20000758

08001d7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <SystemInit+0x20>)
 8001d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d86:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <SystemInit+0x20>)
 8001d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001da4:	f7ff ffea 	bl	8001d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da8:	480c      	ldr	r0, [pc, #48]	; (8001ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8001daa:	490d      	ldr	r1, [pc, #52]	; (8001de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dac:	4a0d      	ldr	r2, [pc, #52]	; (8001de4 <LoopForever+0xe>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db0:	e002      	b.n	8001db8 <LoopCopyDataInit>

08001db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db6:	3304      	adds	r3, #4

08001db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dbc:	d3f9      	bcc.n	8001db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dc0:	4c0a      	ldr	r4, [pc, #40]	; (8001dec <LoopForever+0x16>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc4:	e001      	b.n	8001dca <LoopFillZerobss>

08001dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc8:	3204      	adds	r2, #4

08001dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dcc:	d3fb      	bcc.n	8001dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dce:	f008 f949 	bl	800a064 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dd2:	f7ff f8f1 	bl	8000fb8 <main>

08001dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001dd6:	e7fe      	b.n	8001dd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001de4:	0800c7cc 	.word	0x0800c7cc
  ldr r2, =_sbss
 8001de8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001dec:	20000754 	.word	0x20000754

08001df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001df0:	e7fe      	b.n	8001df0 <ADC1_2_IRQHandler>
	...

08001df4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <HAL_Init+0x3c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <HAL_Init+0x3c>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0a:	2003      	movs	r0, #3
 8001e0c:	f000 f962 	bl	80020d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e10:	2000      	movs	r0, #0
 8001e12:	f000 f80f 	bl	8001e34 <HAL_InitTick>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	71fb      	strb	r3, [r7, #7]
 8001e20:	e001      	b.n	8001e26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e22:	f7ff fd61 	bl	80018e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e26:	79fb      	ldrb	r3, [r7, #7]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40022000 	.word	0x40022000

08001e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e40:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <HAL_InitTick+0x6c>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d023      	beq.n	8001e90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e48:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <HAL_InitTick+0x70>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <HAL_InitTick+0x6c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4619      	mov	r1, r3
 8001e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 f96d 	bl	800213e <HAL_SYSTICK_Config>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10f      	bne.n	8001e8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b0f      	cmp	r3, #15
 8001e6e:	d809      	bhi.n	8001e84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e70:	2200      	movs	r2, #0
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f000 f937 	bl	80020ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <HAL_InitTick+0x74>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e007      	b.n	8001e94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
 8001e88:	e004      	b.n	8001e94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	73fb      	strb	r3, [r7, #15]
 8001e8e:	e001      	b.n	8001e94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000010 	.word	0x20000010
 8001ea4:	20000008 	.word	0x20000008
 8001ea8:	2000000c 	.word	0x2000000c

08001eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_IncTick+0x20>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x24>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <HAL_IncTick+0x24>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000010 	.word	0x20000010
 8001ed0:	200005bc 	.word	0x200005bc

08001ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_GetTick+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	200005bc 	.word	0x200005bc

08001eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef4:	f7ff ffee 	bl	8001ed4 <HAL_GetTick>
 8001ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f04:	d005      	beq.n	8001f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_Delay+0x44>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f12:	bf00      	nop
 8001f14:	f7ff ffde 	bl	8001ed4 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d8f7      	bhi.n	8001f14 <HAL_Delay+0x28>
  {
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000010 	.word	0x20000010

08001f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f50:	4013      	ands	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f66:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	60d3      	str	r3, [r2, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <__NVIC_GetPriorityGrouping+0x18>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	f003 0307 	and.w	r3, r3, #7
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	db0b      	blt.n	8001fc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	4907      	ldr	r1, [pc, #28]	; (8001fd0 <__NVIC_EnableIRQ+0x38>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	2001      	movs	r0, #1
 8001fba:	fa00 f202 	lsl.w	r2, r0, r2
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000e100 	.word	0xe000e100

08001fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	db0a      	blt.n	8001ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	490c      	ldr	r1, [pc, #48]	; (8002020 <__NVIC_SetPriority+0x4c>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	0112      	lsls	r2, r2, #4
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ffc:	e00a      	b.n	8002014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4908      	ldr	r1, [pc, #32]	; (8002024 <__NVIC_SetPriority+0x50>)
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	3b04      	subs	r3, #4
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	440b      	add	r3, r1
 8002012:	761a      	strb	r2, [r3, #24]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000e100 	.word	0xe000e100
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	; 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f1c3 0307 	rsb	r3, r3, #7
 8002042:	2b04      	cmp	r3, #4
 8002044:	bf28      	it	cs
 8002046:	2304      	movcs	r3, #4
 8002048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3304      	adds	r3, #4
 800204e:	2b06      	cmp	r3, #6
 8002050:	d902      	bls.n	8002058 <NVIC_EncodePriority+0x30>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3b03      	subs	r3, #3
 8002056:	e000      	b.n	800205a <NVIC_EncodePriority+0x32>
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002070:	f04f 31ff 	mov.w	r1, #4294967295
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43d9      	mvns	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	4313      	orrs	r3, r2
         );
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	; 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a0:	d301      	bcc.n	80020a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00f      	b.n	80020c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <SysTick_Config+0x40>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ae:	210f      	movs	r1, #15
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f7ff ff8e 	bl	8001fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <SysTick_Config+0x40>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020be:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <SysTick_Config+0x40>)
 80020c0:	2207      	movs	r2, #7
 80020c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	e000e010 	.word	0xe000e010

080020d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ff29 	bl	8001f34 <__NVIC_SetPriorityGrouping>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020fc:	f7ff ff3e 	bl	8001f7c <__NVIC_GetPriorityGrouping>
 8002100:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	6978      	ldr	r0, [r7, #20]
 8002108:	f7ff ff8e 	bl	8002028 <NVIC_EncodePriority>
 800210c:	4602      	mov	r2, r0
 800210e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff5d 	bl	8001fd4 <__NVIC_SetPriority>
}
 800211a:	bf00      	nop
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff31 	bl	8001f98 <__NVIC_EnableIRQ>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ffa2 	bl	8002090 <SysTick_Config>
 800214c:	4603      	mov	r3, r0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002166:	e17f      	b.n	8002468 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2101      	movs	r1, #1
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	4013      	ands	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 8171 	beq.w	8002462 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b01      	cmp	r3, #1
 800218a:	d005      	beq.n	8002198 <HAL_GPIO_Init+0x40>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d130      	bne.n	80021fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021ce:	2201      	movs	r2, #1
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	f003 0201 	and.w	r2, r3, #1
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b03      	cmp	r3, #3
 8002204:	d118      	bne.n	8002238 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800220c:	2201      	movs	r2, #1
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	f003 0201 	and.w	r2, r3, #1
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b03      	cmp	r3, #3
 8002242:	d017      	beq.n	8002274 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	2203      	movs	r2, #3
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d123      	bne.n	80022c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	08da      	lsrs	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3208      	adds	r2, #8
 8002288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	220f      	movs	r2, #15
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	08da      	lsrs	r2, r3, #3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3208      	adds	r2, #8
 80022c2:	6939      	ldr	r1, [r7, #16]
 80022c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0203 	and.w	r2, r3, #3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80ac 	beq.w	8002462 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230a:	4b5f      	ldr	r3, [pc, #380]	; (8002488 <HAL_GPIO_Init+0x330>)
 800230c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230e:	4a5e      	ldr	r2, [pc, #376]	; (8002488 <HAL_GPIO_Init+0x330>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6613      	str	r3, [r2, #96]	; 0x60
 8002316:	4b5c      	ldr	r3, [pc, #368]	; (8002488 <HAL_GPIO_Init+0x330>)
 8002318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002322:	4a5a      	ldr	r2, [pc, #360]	; (800248c <HAL_GPIO_Init+0x334>)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	089b      	lsrs	r3, r3, #2
 8002328:	3302      	adds	r3, #2
 800232a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	220f      	movs	r2, #15
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800234c:	d025      	beq.n	800239a <HAL_GPIO_Init+0x242>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a4f      	ldr	r2, [pc, #316]	; (8002490 <HAL_GPIO_Init+0x338>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d01f      	beq.n	8002396 <HAL_GPIO_Init+0x23e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a4e      	ldr	r2, [pc, #312]	; (8002494 <HAL_GPIO_Init+0x33c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d019      	beq.n	8002392 <HAL_GPIO_Init+0x23a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4d      	ldr	r2, [pc, #308]	; (8002498 <HAL_GPIO_Init+0x340>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d013      	beq.n	800238e <HAL_GPIO_Init+0x236>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a4c      	ldr	r2, [pc, #304]	; (800249c <HAL_GPIO_Init+0x344>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00d      	beq.n	800238a <HAL_GPIO_Init+0x232>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a4b      	ldr	r2, [pc, #300]	; (80024a0 <HAL_GPIO_Init+0x348>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d007      	beq.n	8002386 <HAL_GPIO_Init+0x22e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4a      	ldr	r2, [pc, #296]	; (80024a4 <HAL_GPIO_Init+0x34c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d101      	bne.n	8002382 <HAL_GPIO_Init+0x22a>
 800237e:	2306      	movs	r3, #6
 8002380:	e00c      	b.n	800239c <HAL_GPIO_Init+0x244>
 8002382:	2307      	movs	r3, #7
 8002384:	e00a      	b.n	800239c <HAL_GPIO_Init+0x244>
 8002386:	2305      	movs	r3, #5
 8002388:	e008      	b.n	800239c <HAL_GPIO_Init+0x244>
 800238a:	2304      	movs	r3, #4
 800238c:	e006      	b.n	800239c <HAL_GPIO_Init+0x244>
 800238e:	2303      	movs	r3, #3
 8002390:	e004      	b.n	800239c <HAL_GPIO_Init+0x244>
 8002392:	2302      	movs	r3, #2
 8002394:	e002      	b.n	800239c <HAL_GPIO_Init+0x244>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_GPIO_Init+0x244>
 800239a:	2300      	movs	r3, #0
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	f002 0203 	and.w	r2, r2, #3
 80023a2:	0092      	lsls	r2, r2, #2
 80023a4:	4093      	lsls	r3, r2
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023ac:	4937      	ldr	r1, [pc, #220]	; (800248c <HAL_GPIO_Init+0x334>)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	3302      	adds	r3, #2
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023ba:	4b3b      	ldr	r3, [pc, #236]	; (80024a8 <HAL_GPIO_Init+0x350>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023de:	4a32      	ldr	r2, [pc, #200]	; (80024a8 <HAL_GPIO_Init+0x350>)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023e4:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <HAL_GPIO_Init+0x350>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002408:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <HAL_GPIO_Init+0x350>)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800240e:	4b26      	ldr	r3, [pc, #152]	; (80024a8 <HAL_GPIO_Init+0x350>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002432:	4a1d      	ldr	r2, [pc, #116]	; (80024a8 <HAL_GPIO_Init+0x350>)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002438:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <HAL_GPIO_Init+0x350>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	43db      	mvns	r3, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800245c:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <HAL_GPIO_Init+0x350>)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3301      	adds	r3, #1
 8002466:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	f47f ae78 	bne.w	8002168 <HAL_GPIO_Init+0x10>
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40021000 	.word	0x40021000
 800248c:	40010000 	.word	0x40010000
 8002490:	48000400 	.word	0x48000400
 8002494:	48000800 	.word	0x48000800
 8002498:	48000c00 	.word	0x48000c00
 800249c:	48001000 	.word	0x48001000
 80024a0:	48001400 	.word	0x48001400
 80024a4:	48001800 	.word	0x48001800
 80024a8:	40010400 	.word	0x40010400

080024ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	807b      	strh	r3, [r7, #2]
 80024b8:	4613      	mov	r3, r2
 80024ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024bc:	787b      	ldrb	r3, [r7, #1]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024c8:	e002      	b.n	80024d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024ca:	887a      	ldrh	r2, [r7, #2]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d006      	beq.n	8002500 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024f2:	4a05      	ldr	r2, [pc, #20]	; (8002508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024f8:	88fb      	ldrh	r3, [r7, #6]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe fd22 	bl	8000f44 <HAL_GPIO_EXTI_Callback>
  }
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40010400 	.word	0x40010400

0800250c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e08d      	b.n	800263a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d106      	bne.n	8002538 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff f9fc 	bl	8001930 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2224      	movs	r2, #36	; 0x24
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800255c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800256c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d107      	bne.n	8002586 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	e006      	b.n	8002594 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002592:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d108      	bne.n	80025ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	e007      	b.n	80025be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69d9      	ldr	r1, [r3, #28]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1a      	ldr	r2, [r3, #32]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2220      	movs	r2, #32
 8002626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af02      	add	r7, sp, #8
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	461a      	mov	r2, r3
 8002650:	460b      	mov	r3, r1
 8002652:	817b      	strh	r3, [r7, #10]
 8002654:	4613      	mov	r3, r2
 8002656:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b20      	cmp	r3, #32
 8002662:	f040 80fd 	bne.w	8002860 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_I2C_Master_Transmit+0x30>
 8002670:	2302      	movs	r3, #2
 8002672:	e0f6      	b.n	8002862 <HAL_I2C_Master_Transmit+0x21e>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800267c:	f7ff fc2a 	bl	8001ed4 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	2319      	movs	r3, #25
 8002688:	2201      	movs	r2, #1
 800268a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fa0a 	bl	8002aa8 <I2C_WaitOnFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e0e1      	b.n	8002862 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2221      	movs	r2, #33	; 0x21
 80026a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2210      	movs	r2, #16
 80026aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	893a      	ldrh	r2, [r7, #8]
 80026be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2bff      	cmp	r3, #255	; 0xff
 80026ce:	d906      	bls.n	80026de <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	22ff      	movs	r2, #255	; 0xff
 80026d4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80026d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	e007      	b.n	80026ee <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80026e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ec:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d024      	beq.n	8002740 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	781a      	ldrb	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272a:	b2db      	uxtb	r3, r3
 800272c:	3301      	adds	r3, #1
 800272e:	b2da      	uxtb	r2, r3
 8002730:	8979      	ldrh	r1, [r7, #10]
 8002732:	4b4e      	ldr	r3, [pc, #312]	; (800286c <HAL_I2C_Master_Transmit+0x228>)
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 fbf1 	bl	8002f20 <I2C_TransferConfig>
 800273e:	e066      	b.n	800280e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002744:	b2da      	uxtb	r2, r3
 8002746:	8979      	ldrh	r1, [r7, #10]
 8002748:	4b48      	ldr	r3, [pc, #288]	; (800286c <HAL_I2C_Master_Transmit+0x228>)
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fbe6 	bl	8002f20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002754:	e05b      	b.n	800280e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	6a39      	ldr	r1, [r7, #32]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f9f3 	bl	8002b46 <I2C_WaitOnTXISFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e07b      	b.n	8002862 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	781a      	ldrb	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d034      	beq.n	800280e <HAL_I2C_Master_Transmit+0x1ca>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d130      	bne.n	800280e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	2200      	movs	r2, #0
 80027b4:	2180      	movs	r1, #128	; 0x80
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f976 	bl	8002aa8 <I2C_WaitOnFlagUntilTimeout>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e04d      	b.n	8002862 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2bff      	cmp	r3, #255	; 0xff
 80027ce:	d90e      	bls.n	80027ee <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	22ff      	movs	r2, #255	; 0xff
 80027d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	8979      	ldrh	r1, [r7, #10]
 80027de:	2300      	movs	r3, #0
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 fb9a 	bl	8002f20 <I2C_TransferConfig>
 80027ec:	e00f      	b.n	800280e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	8979      	ldrh	r1, [r7, #10]
 8002800:	2300      	movs	r3, #0
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 fb89 	bl	8002f20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d19e      	bne.n	8002756 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	6a39      	ldr	r1, [r7, #32]
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 f9d9 	bl	8002bd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e01a      	b.n	8002862 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2220      	movs	r2, #32
 8002832:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6859      	ldr	r1, [r3, #4]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <HAL_I2C_Master_Transmit+0x22c>)
 8002840:	400b      	ands	r3, r1
 8002842:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	e000      	b.n	8002862 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002860:	2302      	movs	r3, #2
  }
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	80002000 	.word	0x80002000
 8002870:	fe00e800 	.word	0xfe00e800

08002874 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af02      	add	r7, sp, #8
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	461a      	mov	r2, r3
 8002880:	460b      	mov	r3, r1
 8002882:	817b      	strh	r3, [r7, #10]
 8002884:	4613      	mov	r3, r2
 8002886:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b20      	cmp	r3, #32
 8002892:	f040 80db 	bne.w	8002a4c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_I2C_Master_Receive+0x30>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e0d4      	b.n	8002a4e <HAL_I2C_Master_Receive+0x1da>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028ac:	f7ff fb12 	bl	8001ed4 <HAL_GetTick>
 80028b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	2319      	movs	r3, #25
 80028b8:	2201      	movs	r2, #1
 80028ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f8f2 	bl	8002aa8 <I2C_WaitOnFlagUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e0bf      	b.n	8002a4e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2222      	movs	r2, #34	; 0x22
 80028d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2210      	movs	r2, #16
 80028da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	893a      	ldrh	r2, [r7, #8]
 80028ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	2bff      	cmp	r3, #255	; 0xff
 80028fe:	d90e      	bls.n	800291e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	22ff      	movs	r2, #255	; 0xff
 8002904:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290a:	b2da      	uxtb	r2, r3
 800290c:	8979      	ldrh	r1, [r7, #10]
 800290e:	4b52      	ldr	r3, [pc, #328]	; (8002a58 <HAL_I2C_Master_Receive+0x1e4>)
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fb02 	bl	8002f20 <I2C_TransferConfig>
 800291c:	e06d      	b.n	80029fa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292c:	b2da      	uxtb	r2, r3
 800292e:	8979      	ldrh	r1, [r7, #10]
 8002930:	4b49      	ldr	r3, [pc, #292]	; (8002a58 <HAL_I2C_Master_Receive+0x1e4>)
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 faf1 	bl	8002f20 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800293e:	e05c      	b.n	80029fa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	6a39      	ldr	r1, [r7, #32]
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f989 	bl	8002c5c <I2C_WaitOnRXNEFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e07c      	b.n	8002a4e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	1c5a      	adds	r2, r3, #1
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297c:	b29b      	uxth	r3, r3
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298a:	b29b      	uxth	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d034      	beq.n	80029fa <HAL_I2C_Master_Receive+0x186>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002994:	2b00      	cmp	r3, #0
 8002996:	d130      	bne.n	80029fa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	2200      	movs	r2, #0
 80029a0:	2180      	movs	r1, #128	; 0x80
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f880 	bl	8002aa8 <I2C_WaitOnFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e04d      	b.n	8002a4e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2bff      	cmp	r3, #255	; 0xff
 80029ba:	d90e      	bls.n	80029da <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	22ff      	movs	r2, #255	; 0xff
 80029c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	8979      	ldrh	r1, [r7, #10]
 80029ca:	2300      	movs	r3, #0
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 faa4 	bl	8002f20 <I2C_TransferConfig>
 80029d8:	e00f      	b.n	80029fa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029de:	b29a      	uxth	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	8979      	ldrh	r1, [r7, #10]
 80029ec:	2300      	movs	r3, #0
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fa93 	bl	8002f20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d19d      	bne.n	8002940 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	6a39      	ldr	r1, [r7, #32]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f8e3 	bl	8002bd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e01a      	b.n	8002a4e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6859      	ldr	r1, [r3, #4]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <HAL_I2C_Master_Receive+0x1e8>)
 8002a2c:	400b      	ands	r3, r1
 8002a2e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e000      	b.n	8002a4e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002a4c:	2302      	movs	r3, #2
  }
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	80002400 	.word	0x80002400
 8002a5c:	fe00e800 	.word	0xfe00e800

08002a60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d103      	bne.n	8002a7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d007      	beq.n	8002a9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	619a      	str	r2, [r3, #24]
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ab8:	e031      	b.n	8002b1e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d02d      	beq.n	8002b1e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac2:	f7ff fa07 	bl	8001ed4 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d302      	bcc.n	8002ad8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d122      	bne.n	8002b1e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699a      	ldr	r2, [r3, #24]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d113      	bne.n	8002b1e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f043 0220 	orr.w	r2, r3, #32
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e00f      	b.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699a      	ldr	r2, [r3, #24]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4013      	ands	r3, r2
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	bf0c      	ite	eq
 8002b2e:	2301      	moveq	r3, #1
 8002b30:	2300      	movne	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d0be      	beq.n	8002aba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b52:	e033      	b.n	8002bbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f901 	bl	8002d60 <I2C_IsErrorOccurred>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e031      	b.n	8002bcc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6e:	d025      	beq.n	8002bbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b70:	f7ff f9b0 	bl	8001ed4 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d302      	bcc.n	8002b86 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d11a      	bne.n	8002bbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d013      	beq.n	8002bbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e007      	b.n	8002bcc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d1c4      	bne.n	8002b54 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002be0:	e02f      	b.n	8002c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f8ba 	bl	8002d60 <I2C_IsErrorOccurred>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e02d      	b.n	8002c52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf6:	f7ff f96d 	bl	8001ed4 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d302      	bcc.n	8002c0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d11a      	bne.n	8002c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	d013      	beq.n	8002c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f043 0220 	orr.w	r2, r3, #32
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e007      	b.n	8002c52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d1c8      	bne.n	8002be2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c68:	e06b      	b.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f876 	bl	8002d60 <I2C_IsErrorOccurred>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e069      	b.n	8002d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f003 0320 	and.w	r3, r3, #32
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d138      	bne.n	8002cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d105      	bne.n	8002ca6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	e055      	b.n	8002d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b10      	cmp	r3, #16
 8002cb2:	d107      	bne.n	8002cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2210      	movs	r2, #16
 8002cba:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	645a      	str	r2, [r3, #68]	; 0x44
 8002cc2:	e002      	b.n	8002cca <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6859      	ldr	r1, [r3, #4]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4b1f      	ldr	r3, [pc, #124]	; (8002d5c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002cde:	400b      	ands	r3, r1
 8002ce0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e029      	b.n	8002d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfe:	f7ff f8e9 	bl	8001ed4 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d302      	bcc.n	8002d14 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d116      	bne.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d00f      	beq.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	f043 0220 	orr.w	r2, r3, #32
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e007      	b.n	8002d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d18c      	bne.n	8002c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	fe00e800 	.word	0xfe00e800

08002d60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d068      	beq.n	8002e5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2210      	movs	r2, #16
 8002d92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d94:	e049      	b.n	8002e2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d045      	beq.n	8002e2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d9e:	f7ff f899 	bl	8001ed4 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d302      	bcc.n	8002db4 <I2C_IsErrorOccurred+0x54>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d13a      	bne.n	8002e2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002dc6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd6:	d121      	bne.n	8002e1c <I2C_IsErrorOccurred+0xbc>
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dde:	d01d      	beq.n	8002e1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	d01a      	beq.n	8002e1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002df4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002df6:	f7ff f86d 	bl	8001ed4 <HAL_GetTick>
 8002dfa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dfc:	e00e      	b.n	8002e1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002dfe:	f7ff f869 	bl	8001ed4 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b19      	cmp	r3, #25
 8002e0a:	d907      	bls.n	8002e1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	f043 0320 	orr.w	r3, r3, #32
 8002e12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002e1a:	e006      	b.n	8002e2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	d1e9      	bne.n	8002dfe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d003      	beq.n	8002e40 <I2C_IsErrorOccurred+0xe0>
 8002e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0aa      	beq.n	8002d96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d103      	bne.n	8002e50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	f043 0304 	orr.w	r3, r3, #4
 8002e56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00b      	beq.n	8002e88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	f043 0308 	orr.w	r3, r3, #8
 8002e98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ea2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00b      	beq.n	8002ecc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	f043 0302 	orr.w	r3, r3, #2
 8002eba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d01c      	beq.n	8002f0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f7ff fdc3 	bl	8002a60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6859      	ldr	r1, [r3, #4]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <I2C_IsErrorOccurred+0x1bc>)
 8002ee6:	400b      	ands	r3, r1
 8002ee8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3728      	adds	r7, #40	; 0x28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	fe00e800 	.word	0xfe00e800

08002f20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	817b      	strh	r3, [r7, #10]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f32:	897b      	ldrh	r3, [r7, #10]
 8002f34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f38:	7a7b      	ldrb	r3, [r7, #9]
 8002f3a:	041b      	lsls	r3, r3, #16
 8002f3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	0d5b      	lsrs	r3, r3, #21
 8002f5a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f5e:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <I2C_TransferConfig+0x60>)
 8002f60:	430b      	orrs	r3, r1
 8002f62:	43db      	mvns	r3, r3
 8002f64:	ea02 0103 	and.w	r1, r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f72:	bf00      	nop
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	03ff63ff 	.word	0x03ff63ff

08002f84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b20      	cmp	r3, #32
 8002f98:	d138      	bne.n	800300c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e032      	b.n	800300e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2224      	movs	r2, #36	; 0x24
 8002fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0201 	bic.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6819      	ldr	r1, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	e000      	b.n	800300e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800300c:	2302      	movs	r3, #2
  }
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800301a:	b480      	push	{r7}
 800301c:	b085      	sub	sp, #20
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b20      	cmp	r3, #32
 800302e:	d139      	bne.n	80030a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800303a:	2302      	movs	r3, #2
 800303c:	e033      	b.n	80030a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2224      	movs	r2, #36	; 0x24
 800304a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800306c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4313      	orrs	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	e000      	b.n	80030a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030a4:	2302      	movs	r3, #2
  }
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <HAL_PWREx_GetVoltageRange+0x18>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40007000 	.word	0x40007000

080030d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030de:	d130      	bne.n	8003142 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030e0:	4b23      	ldr	r3, [pc, #140]	; (8003170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ec:	d038      	beq.n	8003160 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030ee:	4b20      	ldr	r3, [pc, #128]	; (8003170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030f6:	4a1e      	ldr	r2, [pc, #120]	; (8003170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030fe:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2232      	movs	r2, #50	; 0x32
 8003104:	fb02 f303 	mul.w	r3, r2, r3
 8003108:	4a1b      	ldr	r2, [pc, #108]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800310a:	fba2 2303 	umull	r2, r3, r2, r3
 800310e:	0c9b      	lsrs	r3, r3, #18
 8003110:	3301      	adds	r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003114:	e002      	b.n	800311c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3b01      	subs	r3, #1
 800311a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800311c:	4b14      	ldr	r3, [pc, #80]	; (8003170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003128:	d102      	bne.n	8003130 <HAL_PWREx_ControlVoltageScaling+0x60>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1f2      	bne.n	8003116 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003130:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313c:	d110      	bne.n	8003160 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e00f      	b.n	8003162 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003142:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800314a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800314e:	d007      	beq.n	8003160 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003150:	4b07      	ldr	r3, [pc, #28]	; (8003170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003158:	4a05      	ldr	r2, [pc, #20]	; (8003170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800315a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800315e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40007000 	.word	0x40007000
 8003174:	20000008 	.word	0x20000008
 8003178:	431bde83 	.word	0x431bde83

0800317c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e3ca      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800318e:	4b97      	ldr	r3, [pc, #604]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003198:	4b94      	ldr	r3, [pc, #592]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80e4 	beq.w	8003378 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d007      	beq.n	80031c6 <HAL_RCC_OscConfig+0x4a>
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2b0c      	cmp	r3, #12
 80031ba:	f040 808b 	bne.w	80032d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	f040 8087 	bne.w	80032d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031c6:	4b89      	ldr	r3, [pc, #548]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <HAL_RCC_OscConfig+0x62>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e3a2      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1a      	ldr	r2, [r3, #32]
 80031e2:	4b82      	ldr	r3, [pc, #520]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d004      	beq.n	80031f8 <HAL_RCC_OscConfig+0x7c>
 80031ee:	4b7f      	ldr	r3, [pc, #508]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031f6:	e005      	b.n	8003204 <HAL_RCC_OscConfig+0x88>
 80031f8:	4b7c      	ldr	r3, [pc, #496]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80031fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003204:	4293      	cmp	r3, r2
 8003206:	d223      	bcs.n	8003250 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fd55 	bl	8003cbc <RCC_SetFlashLatencyFromMSIRange>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e383      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800321c:	4b73      	ldr	r3, [pc, #460]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a72      	ldr	r2, [pc, #456]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003222:	f043 0308 	orr.w	r3, r3, #8
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	4b70      	ldr	r3, [pc, #448]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	496d      	ldr	r1, [pc, #436]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800323a:	4b6c      	ldr	r3, [pc, #432]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	021b      	lsls	r3, r3, #8
 8003248:	4968      	ldr	r1, [pc, #416]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 800324a:	4313      	orrs	r3, r2
 800324c:	604b      	str	r3, [r1, #4]
 800324e:	e025      	b.n	800329c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003250:	4b66      	ldr	r3, [pc, #408]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a65      	ldr	r2, [pc, #404]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003256:	f043 0308 	orr.w	r3, r3, #8
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	4b63      	ldr	r3, [pc, #396]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	4960      	ldr	r1, [pc, #384]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800326e:	4b5f      	ldr	r3, [pc, #380]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	495b      	ldr	r1, [pc, #364]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 800327e:	4313      	orrs	r3, r2
 8003280:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d109      	bne.n	800329c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fd15 	bl	8003cbc <RCC_SetFlashLatencyFromMSIRange>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e343      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800329c:	f000 fc4a 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4b52      	ldr	r3, [pc, #328]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	4950      	ldr	r1, [pc, #320]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 80032ae:	5ccb      	ldrb	r3, [r1, r3]
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
 80032b8:	4a4e      	ldr	r2, [pc, #312]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 80032ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032bc:	4b4e      	ldr	r3, [pc, #312]	; (80033f8 <HAL_RCC_OscConfig+0x27c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fe fdb7 	bl	8001e34 <HAL_InitTick>
 80032c6:	4603      	mov	r3, r0
 80032c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d052      	beq.n	8003376 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	e327      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d032      	beq.n	8003342 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032dc:	4b43      	ldr	r3, [pc, #268]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a42      	ldr	r2, [pc, #264]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032e8:	f7fe fdf4 	bl	8001ed4 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032f0:	f7fe fdf0 	bl	8001ed4 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e310      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003302:	4b3a      	ldr	r3, [pc, #232]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800330e:	4b37      	ldr	r3, [pc, #220]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a36      	ldr	r2, [pc, #216]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003314:	f043 0308 	orr.w	r3, r3, #8
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	4b34      	ldr	r3, [pc, #208]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	4931      	ldr	r1, [pc, #196]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003328:	4313      	orrs	r3, r2
 800332a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800332c:	4b2f      	ldr	r3, [pc, #188]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	021b      	lsls	r3, r3, #8
 800333a:	492c      	ldr	r1, [pc, #176]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]
 8003340:	e01a      	b.n	8003378 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003342:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a29      	ldr	r2, [pc, #164]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003348:	f023 0301 	bic.w	r3, r3, #1
 800334c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800334e:	f7fe fdc1 	bl	8001ed4 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003356:	f7fe fdbd 	bl	8001ed4 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e2dd      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003368:	4b20      	ldr	r3, [pc, #128]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f0      	bne.n	8003356 <HAL_RCC_OscConfig+0x1da>
 8003374:	e000      	b.n	8003378 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003376:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d074      	beq.n	800346e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b08      	cmp	r3, #8
 8003388:	d005      	beq.n	8003396 <HAL_RCC_OscConfig+0x21a>
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b0c      	cmp	r3, #12
 800338e:	d10e      	bne.n	80033ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2b03      	cmp	r3, #3
 8003394:	d10b      	bne.n	80033ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003396:	4b15      	ldr	r3, [pc, #84]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d064      	beq.n	800346c <HAL_RCC_OscConfig+0x2f0>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d160      	bne.n	800346c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e2ba      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b6:	d106      	bne.n	80033c6 <HAL_RCC_OscConfig+0x24a>
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a0b      	ldr	r2, [pc, #44]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80033be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	e026      	b.n	8003414 <HAL_RCC_OscConfig+0x298>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033ce:	d115      	bne.n	80033fc <HAL_RCC_OscConfig+0x280>
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a05      	ldr	r2, [pc, #20]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80033d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	4b03      	ldr	r3, [pc, #12]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a02      	ldr	r2, [pc, #8]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80033e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	e014      	b.n	8003414 <HAL_RCC_OscConfig+0x298>
 80033ea:	bf00      	nop
 80033ec:	40021000 	.word	0x40021000
 80033f0:	0800c384 	.word	0x0800c384
 80033f4:	20000008 	.word	0x20000008
 80033f8:	2000000c 	.word	0x2000000c
 80033fc:	4ba0      	ldr	r3, [pc, #640]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a9f      	ldr	r2, [pc, #636]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 8003402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b9d      	ldr	r3, [pc, #628]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a9c      	ldr	r2, [pc, #624]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 800340e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d013      	beq.n	8003444 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fe fd5a 	bl	8001ed4 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003424:	f7fe fd56 	bl	8001ed4 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	; 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e276      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003436:	4b92      	ldr	r3, [pc, #584]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0x2a8>
 8003442:	e014      	b.n	800346e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7fe fd46 	bl	8001ed4 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800344c:	f7fe fd42 	bl	8001ed4 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	; 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e262      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800345e:	4b88      	ldr	r3, [pc, #544]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x2d0>
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d060      	beq.n	800353c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2b04      	cmp	r3, #4
 800347e:	d005      	beq.n	800348c <HAL_RCC_OscConfig+0x310>
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2b0c      	cmp	r3, #12
 8003484:	d119      	bne.n	80034ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d116      	bne.n	80034ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800348c:	4b7c      	ldr	r3, [pc, #496]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_RCC_OscConfig+0x328>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e23f      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b76      	ldr	r3, [pc, #472]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	061b      	lsls	r3, r3, #24
 80034b2:	4973      	ldr	r1, [pc, #460]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b8:	e040      	b.n	800353c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d023      	beq.n	800350a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c2:	4b6f      	ldr	r3, [pc, #444]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a6e      	ldr	r2, [pc, #440]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 80034c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ce:	f7fe fd01 	bl	8001ed4 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d6:	f7fe fcfd 	bl	8001ed4 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e21d      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034e8:	4b65      	ldr	r3, [pc, #404]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f4:	4b62      	ldr	r3, [pc, #392]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	061b      	lsls	r3, r3, #24
 8003502:	495f      	ldr	r1, [pc, #380]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 8003504:	4313      	orrs	r3, r2
 8003506:	604b      	str	r3, [r1, #4]
 8003508:	e018      	b.n	800353c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800350a:	4b5d      	ldr	r3, [pc, #372]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a5c      	ldr	r2, [pc, #368]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 8003510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003516:	f7fe fcdd 	bl	8001ed4 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351e:	f7fe fcd9 	bl	8001ed4 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e1f9      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003530:	4b53      	ldr	r3, [pc, #332]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1f0      	bne.n	800351e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d03c      	beq.n	80035c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d01c      	beq.n	800358a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003550:	4b4b      	ldr	r3, [pc, #300]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 8003552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003556:	4a4a      	ldr	r2, [pc, #296]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fe fcb8 	bl	8001ed4 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003568:	f7fe fcb4 	bl	8001ed4 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e1d4      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800357a:	4b41      	ldr	r3, [pc, #260]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 800357c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0ef      	beq.n	8003568 <HAL_RCC_OscConfig+0x3ec>
 8003588:	e01b      	b.n	80035c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800358a:	4b3d      	ldr	r3, [pc, #244]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 800358c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003590:	4a3b      	ldr	r2, [pc, #236]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359a:	f7fe fc9b 	bl	8001ed4 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a2:	f7fe fc97 	bl	8001ed4 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e1b7      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035b4:	4b32      	ldr	r3, [pc, #200]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 80035b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1ef      	bne.n	80035a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 80a6 	beq.w	800371c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d0:	2300      	movs	r3, #0
 80035d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035d4:	4b2a      	ldr	r3, [pc, #168]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10d      	bne.n	80035fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e0:	4b27      	ldr	r3, [pc, #156]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 80035e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e4:	4a26      	ldr	r2, [pc, #152]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 80035e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ea:	6593      	str	r3, [r2, #88]	; 0x58
 80035ec:	4b24      	ldr	r3, [pc, #144]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 80035ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f8:	2301      	movs	r3, #1
 80035fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035fc:	4b21      	ldr	r3, [pc, #132]	; (8003684 <HAL_RCC_OscConfig+0x508>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d118      	bne.n	800363a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003608:	4b1e      	ldr	r3, [pc, #120]	; (8003684 <HAL_RCC_OscConfig+0x508>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1d      	ldr	r2, [pc, #116]	; (8003684 <HAL_RCC_OscConfig+0x508>)
 800360e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003612:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003614:	f7fe fc5e 	bl	8001ed4 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361c:	f7fe fc5a 	bl	8001ed4 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e17a      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800362e:	4b15      	ldr	r3, [pc, #84]	; (8003684 <HAL_RCC_OscConfig+0x508>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d108      	bne.n	8003654 <HAL_RCC_OscConfig+0x4d8>
 8003642:	4b0f      	ldr	r3, [pc, #60]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 8003644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003648:	4a0d      	ldr	r2, [pc, #52]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003652:	e029      	b.n	80036a8 <HAL_RCC_OscConfig+0x52c>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b05      	cmp	r3, #5
 800365a:	d115      	bne.n	8003688 <HAL_RCC_OscConfig+0x50c>
 800365c:	4b08      	ldr	r3, [pc, #32]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	4a07      	ldr	r2, [pc, #28]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 8003664:	f043 0304 	orr.w	r3, r3, #4
 8003668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800366c:	4b04      	ldr	r3, [pc, #16]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003672:	4a03      	ldr	r2, [pc, #12]	; (8003680 <HAL_RCC_OscConfig+0x504>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800367c:	e014      	b.n	80036a8 <HAL_RCC_OscConfig+0x52c>
 800367e:	bf00      	nop
 8003680:	40021000 	.word	0x40021000
 8003684:	40007000 	.word	0x40007000
 8003688:	4b9c      	ldr	r3, [pc, #624]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368e:	4a9b      	ldr	r2, [pc, #620]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 8003690:	f023 0301 	bic.w	r3, r3, #1
 8003694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003698:	4b98      	ldr	r3, [pc, #608]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	4a97      	ldr	r2, [pc, #604]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 80036a0:	f023 0304 	bic.w	r3, r3, #4
 80036a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d016      	beq.n	80036de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b0:	f7fe fc10 	bl	8001ed4 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b6:	e00a      	b.n	80036ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b8:	f7fe fc0c 	bl	8001ed4 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e12a      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ce:	4b8b      	ldr	r3, [pc, #556]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0ed      	beq.n	80036b8 <HAL_RCC_OscConfig+0x53c>
 80036dc:	e015      	b.n	800370a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036de:	f7fe fbf9 	bl	8001ed4 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036e4:	e00a      	b.n	80036fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e6:	f7fe fbf5 	bl	8001ed4 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e113      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036fc:	4b7f      	ldr	r3, [pc, #508]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1ed      	bne.n	80036e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800370a:	7ffb      	ldrb	r3, [r7, #31]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d105      	bne.n	800371c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003710:	4b7a      	ldr	r3, [pc, #488]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 8003712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003714:	4a79      	ldr	r2, [pc, #484]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 8003716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80fe 	beq.w	8003922 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372a:	2b02      	cmp	r3, #2
 800372c:	f040 80d0 	bne.w	80038d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003730:	4b72      	ldr	r3, [pc, #456]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f003 0203 	and.w	r2, r3, #3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	429a      	cmp	r2, r3
 8003742:	d130      	bne.n	80037a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	3b01      	subs	r3, #1
 8003750:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003752:	429a      	cmp	r2, r3
 8003754:	d127      	bne.n	80037a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003760:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003762:	429a      	cmp	r2, r3
 8003764:	d11f      	bne.n	80037a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003770:	2a07      	cmp	r2, #7
 8003772:	bf14      	ite	ne
 8003774:	2201      	movne	r2, #1
 8003776:	2200      	moveq	r2, #0
 8003778:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800377a:	4293      	cmp	r3, r2
 800377c:	d113      	bne.n	80037a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003788:	085b      	lsrs	r3, r3, #1
 800378a:	3b01      	subs	r3, #1
 800378c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800378e:	429a      	cmp	r2, r3
 8003790:	d109      	bne.n	80037a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	085b      	lsrs	r3, r3, #1
 800379e:	3b01      	subs	r3, #1
 80037a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d06e      	beq.n	8003884 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b0c      	cmp	r3, #12
 80037aa:	d069      	beq.n	8003880 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037ac:	4b53      	ldr	r3, [pc, #332]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d105      	bne.n	80037c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037b8:	4b50      	ldr	r3, [pc, #320]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0ad      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037c8:	4b4c      	ldr	r3, [pc, #304]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a4b      	ldr	r2, [pc, #300]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 80037ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037d4:	f7fe fb7e 	bl	8001ed4 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037dc:	f7fe fb7a 	bl	8001ed4 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e09a      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ee:	4b43      	ldr	r3, [pc, #268]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037fa:	4b40      	ldr	r3, [pc, #256]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	4b40      	ldr	r3, [pc, #256]	; (8003900 <HAL_RCC_OscConfig+0x784>)
 8003800:	4013      	ands	r3, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800380a:	3a01      	subs	r2, #1
 800380c:	0112      	lsls	r2, r2, #4
 800380e:	4311      	orrs	r1, r2
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003814:	0212      	lsls	r2, r2, #8
 8003816:	4311      	orrs	r1, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800381c:	0852      	lsrs	r2, r2, #1
 800381e:	3a01      	subs	r2, #1
 8003820:	0552      	lsls	r2, r2, #21
 8003822:	4311      	orrs	r1, r2
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003828:	0852      	lsrs	r2, r2, #1
 800382a:	3a01      	subs	r2, #1
 800382c:	0652      	lsls	r2, r2, #25
 800382e:	4311      	orrs	r1, r2
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003834:	0912      	lsrs	r2, r2, #4
 8003836:	0452      	lsls	r2, r2, #17
 8003838:	430a      	orrs	r2, r1
 800383a:	4930      	ldr	r1, [pc, #192]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 800383c:	4313      	orrs	r3, r2
 800383e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003840:	4b2e      	ldr	r3, [pc, #184]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a2d      	ldr	r2, [pc, #180]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 8003846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800384a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800384c:	4b2b      	ldr	r3, [pc, #172]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4a2a      	ldr	r2, [pc, #168]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 8003852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003856:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003858:	f7fe fb3c 	bl	8001ed4 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003860:	f7fe fb38 	bl	8001ed4 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e058      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003872:	4b22      	ldr	r3, [pc, #136]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800387e:	e050      	b.n	8003922 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e04f      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003884:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d148      	bne.n	8003922 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003890:	4b1a      	ldr	r3, [pc, #104]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a19      	ldr	r2, [pc, #100]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 8003896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800389c:	4b17      	ldr	r3, [pc, #92]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4a16      	ldr	r2, [pc, #88]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 80038a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038a8:	f7fe fb14 	bl	8001ed4 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fe fb10 	bl	8001ed4 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e030      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c2:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x734>
 80038ce:	e028      	b.n	8003922 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	2b0c      	cmp	r3, #12
 80038d4:	d023      	beq.n	800391e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d6:	4b09      	ldr	r3, [pc, #36]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a08      	ldr	r2, [pc, #32]	; (80038fc <HAL_RCC_OscConfig+0x780>)
 80038dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e2:	f7fe faf7 	bl	8001ed4 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e8:	e00c      	b.n	8003904 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ea:	f7fe faf3 	bl	8001ed4 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d905      	bls.n	8003904 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e013      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
 80038fc:	40021000 	.word	0x40021000
 8003900:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003904:	4b09      	ldr	r3, [pc, #36]	; (800392c <HAL_RCC_OscConfig+0x7b0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1ec      	bne.n	80038ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003910:	4b06      	ldr	r3, [pc, #24]	; (800392c <HAL_RCC_OscConfig+0x7b0>)
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	4905      	ldr	r1, [pc, #20]	; (800392c <HAL_RCC_OscConfig+0x7b0>)
 8003916:	4b06      	ldr	r3, [pc, #24]	; (8003930 <HAL_RCC_OscConfig+0x7b4>)
 8003918:	4013      	ands	r3, r2
 800391a:	60cb      	str	r3, [r1, #12]
 800391c:	e001      	b.n	8003922 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3720      	adds	r7, #32
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40021000 	.word	0x40021000
 8003930:	feeefffc 	.word	0xfeeefffc

08003934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0e7      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003948:	4b75      	ldr	r3, [pc, #468]	; (8003b20 <HAL_RCC_ClockConfig+0x1ec>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d910      	bls.n	8003978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003956:	4b72      	ldr	r3, [pc, #456]	; (8003b20 <HAL_RCC_ClockConfig+0x1ec>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 0207 	bic.w	r2, r3, #7
 800395e:	4970      	ldr	r1, [pc, #448]	; (8003b20 <HAL_RCC_ClockConfig+0x1ec>)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003966:	4b6e      	ldr	r3, [pc, #440]	; (8003b20 <HAL_RCC_ClockConfig+0x1ec>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0cf      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d010      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	4b66      	ldr	r3, [pc, #408]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003990:	429a      	cmp	r2, r3
 8003992:	d908      	bls.n	80039a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003994:	4b63      	ldr	r3, [pc, #396]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	4960      	ldr	r1, [pc, #384]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d04c      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d107      	bne.n	80039ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ba:	4b5a      	ldr	r3, [pc, #360]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d121      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e0a6      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d107      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039d2:	4b54      	ldr	r3, [pc, #336]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d115      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e09a      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d107      	bne.n	80039fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039ea:	4b4e      	ldr	r3, [pc, #312]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d109      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e08e      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039fa:	4b4a      	ldr	r3, [pc, #296]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e086      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a0a:	4b46      	ldr	r3, [pc, #280]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f023 0203 	bic.w	r2, r3, #3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	4943      	ldr	r1, [pc, #268]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a1c:	f7fe fa5a 	bl	8001ed4 <HAL_GetTick>
 8003a20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a22:	e00a      	b.n	8003a3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a24:	f7fe fa56 	bl	8001ed4 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e06e      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3a:	4b3a      	ldr	r3, [pc, #232]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 020c 	and.w	r2, r3, #12
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d1eb      	bne.n	8003a24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d010      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	4b31      	ldr	r3, [pc, #196]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d208      	bcs.n	8003a7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a68:	4b2e      	ldr	r3, [pc, #184]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	492b      	ldr	r1, [pc, #172]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a7a:	4b29      	ldr	r3, [pc, #164]	; (8003b20 <HAL_RCC_ClockConfig+0x1ec>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d210      	bcs.n	8003aaa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a88:	4b25      	ldr	r3, [pc, #148]	; (8003b20 <HAL_RCC_ClockConfig+0x1ec>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f023 0207 	bic.w	r2, r3, #7
 8003a90:	4923      	ldr	r1, [pc, #140]	; (8003b20 <HAL_RCC_ClockConfig+0x1ec>)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a98:	4b21      	ldr	r3, [pc, #132]	; (8003b20 <HAL_RCC_ClockConfig+0x1ec>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d001      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e036      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab6:	4b1b      	ldr	r3, [pc, #108]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	4918      	ldr	r1, [pc, #96]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d009      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ad4:	4b13      	ldr	r3, [pc, #76]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4910      	ldr	r1, [pc, #64]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ae8:	f000 f824 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	091b      	lsrs	r3, r3, #4
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	490b      	ldr	r1, [pc, #44]	; (8003b28 <HAL_RCC_ClockConfig+0x1f4>)
 8003afa:	5ccb      	ldrb	r3, [r1, r3]
 8003afc:	f003 031f 	and.w	r3, r3, #31
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
 8003b04:	4a09      	ldr	r2, [pc, #36]	; (8003b2c <HAL_RCC_ClockConfig+0x1f8>)
 8003b06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b08:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <HAL_RCC_ClockConfig+0x1fc>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fe f991 	bl	8001e34 <HAL_InitTick>
 8003b12:	4603      	mov	r3, r0
 8003b14:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b16:	7afb      	ldrb	r3, [r7, #11]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40022000 	.word	0x40022000
 8003b24:	40021000 	.word	0x40021000
 8003b28:	0800c384 	.word	0x0800c384
 8003b2c:	20000008 	.word	0x20000008
 8003b30:	2000000c 	.word	0x2000000c

08003b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b089      	sub	sp, #36	; 0x24
 8003b38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b42:	4b3e      	ldr	r3, [pc, #248]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b4c:	4b3b      	ldr	r3, [pc, #236]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0x34>
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	2b0c      	cmp	r3, #12
 8003b60:	d121      	bne.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d11e      	bne.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b68:	4b34      	ldr	r3, [pc, #208]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0308 	and.w	r3, r3, #8
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d107      	bne.n	8003b84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b74:	4b31      	ldr	r3, [pc, #196]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b7a:	0a1b      	lsrs	r3, r3, #8
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	61fb      	str	r3, [r7, #28]
 8003b82:	e005      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b84:	4b2d      	ldr	r3, [pc, #180]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b90:	4a2b      	ldr	r2, [pc, #172]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10d      	bne.n	8003bbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ba4:	e00a      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d102      	bne.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bac:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bae:	61bb      	str	r3, [r7, #24]
 8003bb0:	e004      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d101      	bne.n	8003bbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bb8:	4b23      	ldr	r3, [pc, #140]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	2b0c      	cmp	r3, #12
 8003bc0:	d134      	bne.n	8003c2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bc2:	4b1e      	ldr	r3, [pc, #120]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d003      	beq.n	8003bda <HAL_RCC_GetSysClockFreq+0xa6>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d003      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0xac>
 8003bd8:	e005      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003bda:	4b1a      	ldr	r3, [pc, #104]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bdc:	617b      	str	r3, [r7, #20]
      break;
 8003bde:	e005      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003be0:	4b19      	ldr	r3, [pc, #100]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x114>)
 8003be2:	617b      	str	r3, [r7, #20]
      break;
 8003be4:	e002      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	617b      	str	r3, [r7, #20]
      break;
 8003bea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bec:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	091b      	lsrs	r3, r3, #4
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bfa:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	0a1b      	lsrs	r3, r3, #8
 8003c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	fb03 f202 	mul.w	r2, r3, r2
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c12:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	0e5b      	lsrs	r3, r3, #25
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c2c:	69bb      	ldr	r3, [r7, #24]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3724      	adds	r7, #36	; 0x24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	0800c39c 	.word	0x0800c39c
 8003c44:	00f42400 	.word	0x00f42400
 8003c48:	007a1200 	.word	0x007a1200

08003c4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	20000008 	.word	0x20000008

08003c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c68:	f7ff fff0 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	0a1b      	lsrs	r3, r3, #8
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	4904      	ldr	r1, [pc, #16]	; (8003c8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c7a:	5ccb      	ldrb	r3, [r1, r3]
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	0800c394 	.word	0x0800c394

08003c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c94:	f7ff ffda 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	0adb      	lsrs	r3, r3, #11
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	4904      	ldr	r1, [pc, #16]	; (8003cb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ca6:	5ccb      	ldrb	r3, [r1, r3]
 8003ca8:	f003 031f 	and.w	r3, r3, #31
 8003cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	0800c394 	.word	0x0800c394

08003cbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cc8:	4b2a      	ldr	r3, [pc, #168]	; (8003d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cd4:	f7ff f9ee 	bl	80030b4 <HAL_PWREx_GetVoltageRange>
 8003cd8:	6178      	str	r0, [r7, #20]
 8003cda:	e014      	b.n	8003d06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cdc:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce0:	4a24      	ldr	r2, [pc, #144]	; (8003d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ce8:	4b22      	ldr	r3, [pc, #136]	; (8003d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cf4:	f7ff f9de 	bl	80030b4 <HAL_PWREx_GetVoltageRange>
 8003cf8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cfa:	4b1e      	ldr	r3, [pc, #120]	; (8003d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfe:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d0c:	d10b      	bne.n	8003d26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b80      	cmp	r3, #128	; 0x80
 8003d12:	d919      	bls.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2ba0      	cmp	r3, #160	; 0xa0
 8003d18:	d902      	bls.n	8003d20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	e013      	b.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d20:	2301      	movs	r3, #1
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	e010      	b.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b80      	cmp	r3, #128	; 0x80
 8003d2a:	d902      	bls.n	8003d32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	e00a      	b.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b80      	cmp	r3, #128	; 0x80
 8003d36:	d102      	bne.n	8003d3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d38:	2302      	movs	r3, #2
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	e004      	b.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b70      	cmp	r3, #112	; 0x70
 8003d42:	d101      	bne.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d44:	2301      	movs	r3, #1
 8003d46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f023 0207 	bic.w	r2, r3, #7
 8003d50:	4909      	ldr	r1, [pc, #36]	; (8003d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d58:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d001      	beq.n	8003d6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40021000 	.word	0x40021000
 8003d78:	40022000 	.word	0x40022000

08003d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d84:	2300      	movs	r3, #0
 8003d86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d88:	2300      	movs	r3, #0
 8003d8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d041      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003da0:	d02a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003da2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003da6:	d824      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003da8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dac:	d008      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003dae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003db2:	d81e      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dbc:	d010      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003dbe:	e018      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dc0:	4b86      	ldr	r3, [pc, #536]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4a85      	ldr	r2, [pc, #532]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dcc:	e015      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fabb 	bl	8004350 <RCCEx_PLLSAI1_Config>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dde:	e00c      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3320      	adds	r3, #32
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fba6 	bl	8004538 <RCCEx_PLLSAI2_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003df0:	e003      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	74fb      	strb	r3, [r7, #19]
      break;
 8003df6:	e000      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dfa:	7cfb      	ldrb	r3, [r7, #19]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10b      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e00:	4b76      	ldr	r3, [pc, #472]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e0e:	4973      	ldr	r1, [pc, #460]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e16:	e001      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d041      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e30:	d02a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003e32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e36:	d824      	bhi.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e3c:	d008      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e42:	d81e      	bhi.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e4c:	d010      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e4e:	e018      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e50:	4b62      	ldr	r3, [pc, #392]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4a61      	ldr	r2, [pc, #388]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e5c:	e015      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3304      	adds	r3, #4
 8003e62:	2100      	movs	r1, #0
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fa73 	bl	8004350 <RCCEx_PLLSAI1_Config>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e6e:	e00c      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3320      	adds	r3, #32
 8003e74:	2100      	movs	r1, #0
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fb5e 	bl	8004538 <RCCEx_PLLSAI2_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e80:	e003      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	74fb      	strb	r3, [r7, #19]
      break;
 8003e86:	e000      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e8a:	7cfb      	ldrb	r3, [r7, #19]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10b      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e90:	4b52      	ldr	r3, [pc, #328]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e9e:	494f      	ldr	r1, [pc, #316]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ea6:	e001      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea8:	7cfb      	ldrb	r3, [r7, #19]
 8003eaa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 80a0 	beq.w	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ebe:	4b47      	ldr	r3, [pc, #284]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00d      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed4:	4b41      	ldr	r3, [pc, #260]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed8:	4a40      	ldr	r2, [pc, #256]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ede:	6593      	str	r3, [r2, #88]	; 0x58
 8003ee0:	4b3e      	ldr	r3, [pc, #248]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	60bb      	str	r3, [r7, #8]
 8003eea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eec:	2301      	movs	r3, #1
 8003eee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef0:	4b3b      	ldr	r3, [pc, #236]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a3a      	ldr	r2, [pc, #232]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003efc:	f7fd ffea 	bl	8001ed4 <HAL_GetTick>
 8003f00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f02:	e009      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f04:	f7fd ffe6 	bl	8001ed4 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d902      	bls.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	74fb      	strb	r3, [r7, #19]
        break;
 8003f16:	e005      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f18:	4b31      	ldr	r3, [pc, #196]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0ef      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003f24:	7cfb      	ldrb	r3, [r7, #19]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d15c      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f2a:	4b2c      	ldr	r3, [pc, #176]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01f      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d019      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f48:	4b24      	ldr	r3, [pc, #144]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f54:	4b21      	ldr	r3, [pc, #132]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	4a20      	ldr	r2, [pc, #128]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f64:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6a:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f74:	4a19      	ldr	r2, [pc, #100]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d016      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f86:	f7fd ffa5 	bl	8001ed4 <HAL_GetTick>
 8003f8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f8c:	e00b      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8e:	f7fd ffa1 	bl	8001ed4 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d902      	bls.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	74fb      	strb	r3, [r7, #19]
            break;
 8003fa4:	e006      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0ec      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003fb4:	7cfb      	ldrb	r3, [r7, #19]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fba:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fca:	4904      	ldr	r1, [pc, #16]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fd2:	e009      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
 8003fd6:	74bb      	strb	r3, [r7, #18]
 8003fd8:	e006      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003fda:	bf00      	nop
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fe8:	7c7b      	ldrb	r3, [r7, #17]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d105      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fee:	4b9e      	ldr	r3, [pc, #632]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	4a9d      	ldr	r2, [pc, #628]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004006:	4b98      	ldr	r3, [pc, #608]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400c:	f023 0203 	bic.w	r2, r3, #3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	4994      	ldr	r1, [pc, #592]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004028:	4b8f      	ldr	r3, [pc, #572]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	f023 020c 	bic.w	r2, r3, #12
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	498c      	ldr	r1, [pc, #560]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800404a:	4b87      	ldr	r3, [pc, #540]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004050:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	4983      	ldr	r1, [pc, #524]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800406c:	4b7e      	ldr	r3, [pc, #504]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004072:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	497b      	ldr	r1, [pc, #492]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800408e:	4b76      	ldr	r3, [pc, #472]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800409c:	4972      	ldr	r1, [pc, #456]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040b0:	4b6d      	ldr	r3, [pc, #436]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040be:	496a      	ldr	r1, [pc, #424]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040d2:	4b65      	ldr	r3, [pc, #404]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e0:	4961      	ldr	r1, [pc, #388]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040f4:	4b5c      	ldr	r3, [pc, #368]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004102:	4959      	ldr	r1, [pc, #356]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004116:	4b54      	ldr	r3, [pc, #336]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004124:	4950      	ldr	r1, [pc, #320]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004138:	4b4b      	ldr	r3, [pc, #300]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	4948      	ldr	r1, [pc, #288]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800415a:	4b43      	ldr	r3, [pc, #268]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004168:	493f      	ldr	r1, [pc, #252]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d028      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800417c:	4b3a      	ldr	r3, [pc, #232]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800418a:	4937      	ldr	r1, [pc, #220]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800419a:	d106      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800419c:	4b32      	ldr	r3, [pc, #200]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	4a31      	ldr	r2, [pc, #196]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041a6:	60d3      	str	r3, [r2, #12]
 80041a8:	e011      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041b2:	d10c      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	2101      	movs	r1, #1
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 f8c8 	bl	8004350 <RCCEx_PLLSAI1_Config>
 80041c0:	4603      	mov	r3, r0
 80041c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80041ca:	7cfb      	ldrb	r3, [r7, #19]
 80041cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d028      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041da:	4b23      	ldr	r3, [pc, #140]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	491f      	ldr	r1, [pc, #124]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041f8:	d106      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041fa:	4b1b      	ldr	r3, [pc, #108]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	4a1a      	ldr	r2, [pc, #104]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004204:	60d3      	str	r3, [r2, #12]
 8004206:	e011      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004210:	d10c      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3304      	adds	r3, #4
 8004216:	2101      	movs	r1, #1
 8004218:	4618      	mov	r0, r3
 800421a:	f000 f899 	bl	8004350 <RCCEx_PLLSAI1_Config>
 800421e:	4603      	mov	r3, r0
 8004220:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004222:	7cfb      	ldrb	r3, [r7, #19]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004228:	7cfb      	ldrb	r3, [r7, #19]
 800422a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d02b      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004246:	4908      	ldr	r1, [pc, #32]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004256:	d109      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004258:	4b03      	ldr	r3, [pc, #12]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4a02      	ldr	r2, [pc, #8]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004262:	60d3      	str	r3, [r2, #12]
 8004264:	e014      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004266:	bf00      	nop
 8004268:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004270:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004274:	d10c      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3304      	adds	r3, #4
 800427a:	2101      	movs	r1, #1
 800427c:	4618      	mov	r0, r3
 800427e:	f000 f867 	bl	8004350 <RCCEx_PLLSAI1_Config>
 8004282:	4603      	mov	r3, r0
 8004284:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004286:	7cfb      	ldrb	r3, [r7, #19]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800428c:	7cfb      	ldrb	r3, [r7, #19]
 800428e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d02f      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800429c:	4b2b      	ldr	r3, [pc, #172]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042aa:	4928      	ldr	r1, [pc, #160]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042ba:	d10d      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	2102      	movs	r1, #2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 f844 	bl	8004350 <RCCEx_PLLSAI1_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042cc:	7cfb      	ldrb	r3, [r7, #19]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d014      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042d2:	7cfb      	ldrb	r3, [r7, #19]
 80042d4:	74bb      	strb	r3, [r7, #18]
 80042d6:	e011      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042e0:	d10c      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	3320      	adds	r3, #32
 80042e6:	2102      	movs	r1, #2
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 f925 	bl	8004538 <RCCEx_PLLSAI2_Config>
 80042ee:	4603      	mov	r3, r0
 80042f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042f2:	7cfb      	ldrb	r3, [r7, #19]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042f8:	7cfb      	ldrb	r3, [r7, #19]
 80042fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004308:	4b10      	ldr	r3, [pc, #64]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004316:	490d      	ldr	r1, [pc, #52]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800432a:	4b08      	ldr	r3, [pc, #32]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004330:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800433a:	4904      	ldr	r1, [pc, #16]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004342:	7cbb      	ldrb	r3, [r7, #18]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40021000 	.word	0x40021000

08004350 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800435e:	4b75      	ldr	r3, [pc, #468]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d018      	beq.n	800439c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800436a:	4b72      	ldr	r3, [pc, #456]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f003 0203 	and.w	r2, r3, #3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d10d      	bne.n	8004396 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
       ||
 800437e:	2b00      	cmp	r3, #0
 8004380:	d009      	beq.n	8004396 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004382:	4b6c      	ldr	r3, [pc, #432]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
       ||
 8004392:	429a      	cmp	r2, r3
 8004394:	d047      	beq.n	8004426 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	73fb      	strb	r3, [r7, #15]
 800439a:	e044      	b.n	8004426 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d018      	beq.n	80043d6 <RCCEx_PLLSAI1_Config+0x86>
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d825      	bhi.n	80043f4 <RCCEx_PLLSAI1_Config+0xa4>
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d002      	beq.n	80043b2 <RCCEx_PLLSAI1_Config+0x62>
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d009      	beq.n	80043c4 <RCCEx_PLLSAI1_Config+0x74>
 80043b0:	e020      	b.n	80043f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043b2:	4b60      	ldr	r3, [pc, #384]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d11d      	bne.n	80043fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c2:	e01a      	b.n	80043fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043c4:	4b5b      	ldr	r3, [pc, #364]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d116      	bne.n	80043fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d4:	e013      	b.n	80043fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043d6:	4b57      	ldr	r3, [pc, #348]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10f      	bne.n	8004402 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043e2:	4b54      	ldr	r3, [pc, #336]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043f2:	e006      	b.n	8004402 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
      break;
 80043f8:	e004      	b.n	8004404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043fa:	bf00      	nop
 80043fc:	e002      	b.n	8004404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004402:	bf00      	nop
    }

    if(status == HAL_OK)
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10d      	bne.n	8004426 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800440a:	4b4a      	ldr	r3, [pc, #296]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6819      	ldr	r1, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	3b01      	subs	r3, #1
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	430b      	orrs	r3, r1
 8004420:	4944      	ldr	r1, [pc, #272]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004422:	4313      	orrs	r3, r2
 8004424:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d17d      	bne.n	8004528 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800442c:	4b41      	ldr	r3, [pc, #260]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a40      	ldr	r2, [pc, #256]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004432:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004438:	f7fd fd4c 	bl	8001ed4 <HAL_GetTick>
 800443c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800443e:	e009      	b.n	8004454 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004440:	f7fd fd48 	bl	8001ed4 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d902      	bls.n	8004454 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	73fb      	strb	r3, [r7, #15]
        break;
 8004452:	e005      	b.n	8004460 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004454:	4b37      	ldr	r3, [pc, #220]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1ef      	bne.n	8004440 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004460:	7bfb      	ldrb	r3, [r7, #15]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d160      	bne.n	8004528 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d111      	bne.n	8004490 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800446c:	4b31      	ldr	r3, [pc, #196]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6892      	ldr	r2, [r2, #8]
 800447c:	0211      	lsls	r1, r2, #8
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68d2      	ldr	r2, [r2, #12]
 8004482:	0912      	lsrs	r2, r2, #4
 8004484:	0452      	lsls	r2, r2, #17
 8004486:	430a      	orrs	r2, r1
 8004488:	492a      	ldr	r1, [pc, #168]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800448a:	4313      	orrs	r3, r2
 800448c:	610b      	str	r3, [r1, #16]
 800448e:	e027      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d112      	bne.n	80044bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004496:	4b27      	ldr	r3, [pc, #156]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800449e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6892      	ldr	r2, [r2, #8]
 80044a6:	0211      	lsls	r1, r2, #8
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6912      	ldr	r2, [r2, #16]
 80044ac:	0852      	lsrs	r2, r2, #1
 80044ae:	3a01      	subs	r2, #1
 80044b0:	0552      	lsls	r2, r2, #21
 80044b2:	430a      	orrs	r2, r1
 80044b4:	491f      	ldr	r1, [pc, #124]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	610b      	str	r3, [r1, #16]
 80044ba:	e011      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044bc:	4b1d      	ldr	r3, [pc, #116]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6892      	ldr	r2, [r2, #8]
 80044cc:	0211      	lsls	r1, r2, #8
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6952      	ldr	r2, [r2, #20]
 80044d2:	0852      	lsrs	r2, r2, #1
 80044d4:	3a01      	subs	r2, #1
 80044d6:	0652      	lsls	r2, r2, #25
 80044d8:	430a      	orrs	r2, r1
 80044da:	4916      	ldr	r1, [pc, #88]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044e0:	4b14      	ldr	r3, [pc, #80]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a13      	ldr	r2, [pc, #76]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fd fcf2 	bl	8001ed4 <HAL_GetTick>
 80044f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044f2:	e009      	b.n	8004508 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044f4:	f7fd fcee 	bl	8001ed4 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d902      	bls.n	8004508 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	73fb      	strb	r3, [r7, #15]
          break;
 8004506:	e005      	b.n	8004514 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004508:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0ef      	beq.n	80044f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800451a:	4b06      	ldr	r3, [pc, #24]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	4904      	ldr	r1, [pc, #16]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004524:	4313      	orrs	r3, r2
 8004526:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004528:	7bfb      	ldrb	r3, [r7, #15]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40021000 	.word	0x40021000

08004538 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004546:	4b6a      	ldr	r3, [pc, #424]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d018      	beq.n	8004584 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004552:	4b67      	ldr	r3, [pc, #412]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f003 0203 	and.w	r2, r3, #3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d10d      	bne.n	800457e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
       ||
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800456a:	4b61      	ldr	r3, [pc, #388]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	091b      	lsrs	r3, r3, #4
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
       ||
 800457a:	429a      	cmp	r2, r3
 800457c:	d047      	beq.n	800460e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
 8004582:	e044      	b.n	800460e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b03      	cmp	r3, #3
 800458a:	d018      	beq.n	80045be <RCCEx_PLLSAI2_Config+0x86>
 800458c:	2b03      	cmp	r3, #3
 800458e:	d825      	bhi.n	80045dc <RCCEx_PLLSAI2_Config+0xa4>
 8004590:	2b01      	cmp	r3, #1
 8004592:	d002      	beq.n	800459a <RCCEx_PLLSAI2_Config+0x62>
 8004594:	2b02      	cmp	r3, #2
 8004596:	d009      	beq.n	80045ac <RCCEx_PLLSAI2_Config+0x74>
 8004598:	e020      	b.n	80045dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800459a:	4b55      	ldr	r3, [pc, #340]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d11d      	bne.n	80045e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045aa:	e01a      	b.n	80045e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045ac:	4b50      	ldr	r3, [pc, #320]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d116      	bne.n	80045e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045bc:	e013      	b.n	80045e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045be:	4b4c      	ldr	r3, [pc, #304]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10f      	bne.n	80045ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045ca:	4b49      	ldr	r3, [pc, #292]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045da:	e006      	b.n	80045ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
      break;
 80045e0:	e004      	b.n	80045ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045e2:	bf00      	nop
 80045e4:	e002      	b.n	80045ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045e6:	bf00      	nop
 80045e8:	e000      	b.n	80045ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10d      	bne.n	800460e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045f2:	4b3f      	ldr	r3, [pc, #252]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6819      	ldr	r1, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	3b01      	subs	r3, #1
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	430b      	orrs	r3, r1
 8004608:	4939      	ldr	r1, [pc, #228]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800460a:	4313      	orrs	r3, r2
 800460c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800460e:	7bfb      	ldrb	r3, [r7, #15]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d167      	bne.n	80046e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004614:	4b36      	ldr	r3, [pc, #216]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a35      	ldr	r2, [pc, #212]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800461a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800461e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004620:	f7fd fc58 	bl	8001ed4 <HAL_GetTick>
 8004624:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004626:	e009      	b.n	800463c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004628:	f7fd fc54 	bl	8001ed4 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d902      	bls.n	800463c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	73fb      	strb	r3, [r7, #15]
        break;
 800463a:	e005      	b.n	8004648 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800463c:	4b2c      	ldr	r3, [pc, #176]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1ef      	bne.n	8004628 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d14a      	bne.n	80046e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d111      	bne.n	8004678 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004654:	4b26      	ldr	r3, [pc, #152]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800465c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6892      	ldr	r2, [r2, #8]
 8004664:	0211      	lsls	r1, r2, #8
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68d2      	ldr	r2, [r2, #12]
 800466a:	0912      	lsrs	r2, r2, #4
 800466c:	0452      	lsls	r2, r2, #17
 800466e:	430a      	orrs	r2, r1
 8004670:	491f      	ldr	r1, [pc, #124]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004672:	4313      	orrs	r3, r2
 8004674:	614b      	str	r3, [r1, #20]
 8004676:	e011      	b.n	800469c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004678:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004680:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6892      	ldr	r2, [r2, #8]
 8004688:	0211      	lsls	r1, r2, #8
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6912      	ldr	r2, [r2, #16]
 800468e:	0852      	lsrs	r2, r2, #1
 8004690:	3a01      	subs	r2, #1
 8004692:	0652      	lsls	r2, r2, #25
 8004694:	430a      	orrs	r2, r1
 8004696:	4916      	ldr	r1, [pc, #88]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004698:	4313      	orrs	r3, r2
 800469a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800469c:	4b14      	ldr	r3, [pc, #80]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a13      	ldr	r2, [pc, #76]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a8:	f7fd fc14 	bl	8001ed4 <HAL_GetTick>
 80046ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046ae:	e009      	b.n	80046c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046b0:	f7fd fc10 	bl	8001ed4 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d902      	bls.n	80046c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	73fb      	strb	r3, [r7, #15]
          break;
 80046c2:	e005      	b.n	80046d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046c4:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0ef      	beq.n	80046b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d8:	695a      	ldr	r2, [r3, #20]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	4904      	ldr	r1, [pc, #16]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40021000 	.word	0x40021000

080046f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e095      	b.n	8004832 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	2b00      	cmp	r3, #0
 800470c:	d108      	bne.n	8004720 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004716:	d009      	beq.n	800472c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	61da      	str	r2, [r3, #28]
 800471e:	e005      	b.n	800472c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d106      	bne.n	800474c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fd f950 	bl	80019ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004762:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800476c:	d902      	bls.n	8004774 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	e002      	b.n	800477a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004778:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004782:	d007      	beq.n	8004794 <HAL_SPI_Init+0xa0>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800478c:	d002      	beq.n	8004794 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	431a      	orrs	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d6:	ea42 0103 	orr.w	r1, r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	0c1b      	lsrs	r3, r3, #16
 80047f0:	f003 0204 	and.w	r2, r3, #4
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004810:	ea42 0103 	orr.w	r1, r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b088      	sub	sp, #32
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	603b      	str	r3, [r7, #0]
 8004846:	4613      	mov	r3, r2
 8004848:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_SPI_Transmit+0x22>
 8004858:	2302      	movs	r3, #2
 800485a:	e15f      	b.n	8004b1c <HAL_SPI_Transmit+0x2e2>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004864:	f7fd fb36 	bl	8001ed4 <HAL_GetTick>
 8004868:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b01      	cmp	r3, #1
 8004878:	d002      	beq.n	8004880 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800487a:	2302      	movs	r3, #2
 800487c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800487e:	e148      	b.n	8004b12 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_SPI_Transmit+0x52>
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d102      	bne.n	8004892 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004890:	e13f      	b.n	8004b12 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2203      	movs	r2, #3
 8004896:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	88fa      	ldrh	r2, [r7, #6]
 80048aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	88fa      	ldrh	r2, [r7, #6]
 80048b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048dc:	d10f      	bne.n	80048fe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004908:	2b40      	cmp	r3, #64	; 0x40
 800490a:	d007      	beq.n	800491c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800491a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004924:	d94f      	bls.n	80049c6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <HAL_SPI_Transmit+0xfa>
 800492e:	8afb      	ldrh	r3, [r7, #22]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d142      	bne.n	80049ba <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004938:	881a      	ldrh	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004944:	1c9a      	adds	r2, r3, #2
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004958:	e02f      	b.n	80049ba <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b02      	cmp	r3, #2
 8004966:	d112      	bne.n	800498e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	881a      	ldrh	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	1c9a      	adds	r2, r3, #2
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800498c:	e015      	b.n	80049ba <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800498e:	f7fd faa1 	bl	8001ed4 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d803      	bhi.n	80049a6 <HAL_SPI_Transmit+0x16c>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a4:	d102      	bne.n	80049ac <HAL_SPI_Transmit+0x172>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d106      	bne.n	80049ba <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80049b8:	e0ab      	b.n	8004b12 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1ca      	bne.n	800495a <HAL_SPI_Transmit+0x120>
 80049c4:	e080      	b.n	8004ac8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_SPI_Transmit+0x19a>
 80049ce:	8afb      	ldrh	r3, [r7, #22]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d174      	bne.n	8004abe <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d912      	bls.n	8004a04 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e2:	881a      	ldrh	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	1c9a      	adds	r2, r3, #2
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	3b02      	subs	r3, #2
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a02:	e05c      	b.n	8004abe <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	330c      	adds	r3, #12
 8004a0e:	7812      	ldrb	r2, [r2, #0]
 8004a10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004a2a:	e048      	b.n	8004abe <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d12b      	bne.n	8004a92 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d912      	bls.n	8004a6a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	881a      	ldrh	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a54:	1c9a      	adds	r2, r3, #2
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b02      	subs	r3, #2
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a68:	e029      	b.n	8004abe <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	330c      	adds	r3, #12
 8004a74:	7812      	ldrb	r2, [r2, #0]
 8004a76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a90:	e015      	b.n	8004abe <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a92:	f7fd fa1f 	bl	8001ed4 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d803      	bhi.n	8004aaa <HAL_SPI_Transmit+0x270>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa8:	d102      	bne.n	8004ab0 <HAL_SPI_Transmit+0x276>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d106      	bne.n	8004abe <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004abc:	e029      	b.n	8004b12 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1b1      	bne.n	8004a2c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	6839      	ldr	r1, [r7, #0]
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 fcf9 	bl	80054c4 <SPI_EndRxTxTransaction>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10a      	bne.n	8004afc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d002      	beq.n	8004b0a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	77fb      	strb	r3, [r7, #31]
 8004b08:	e003      	b.n	8004b12 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3720      	adds	r7, #32
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	4613      	mov	r3, r2
 8004b32:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b34:	2300      	movs	r3, #0
 8004b36:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d002      	beq.n	8004b4a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004b44:	2302      	movs	r3, #2
 8004b46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b48:	e11a      	b.n	8004d80 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b52:	d112      	bne.n	8004b7a <HAL_SPI_Receive+0x56>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10e      	bne.n	8004b7a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2204      	movs	r2, #4
 8004b60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b64:	88fa      	ldrh	r2, [r7, #6]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f90e 	bl	8004d92 <HAL_SPI_TransmitReceive>
 8004b76:	4603      	mov	r3, r0
 8004b78:	e107      	b.n	8004d8a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_SPI_Receive+0x64>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e100      	b.n	8004d8a <HAL_SPI_Receive+0x266>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b90:	f7fd f9a0 	bl	8001ed4 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <HAL_SPI_Receive+0x7e>
 8004b9c:	88fb      	ldrh	r3, [r7, #6]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d102      	bne.n	8004ba8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ba6:	e0eb      	b.n	8004d80 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2204      	movs	r2, #4
 8004bac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	88fa      	ldrh	r2, [r7, #6]
 8004bc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	88fa      	ldrh	r2, [r7, #6]
 8004bc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bf2:	d908      	bls.n	8004c06 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c02:	605a      	str	r2, [r3, #4]
 8004c04:	e007      	b.n	8004c16 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c14:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c1e:	d10f      	bne.n	8004c40 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c3e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4a:	2b40      	cmp	r3, #64	; 0x40
 8004c4c:	d007      	beq.n	8004c5e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c5c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c66:	d86f      	bhi.n	8004d48 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c68:	e034      	b.n	8004cd4 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d117      	bne.n	8004ca8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f103 020c 	add.w	r2, r3, #12
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	7812      	ldrb	r2, [r2, #0]
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004ca6:	e015      	b.n	8004cd4 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ca8:	f7fd f914 	bl	8001ed4 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d803      	bhi.n	8004cc0 <HAL_SPI_Receive+0x19c>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbe:	d102      	bne.n	8004cc6 <HAL_SPI_Receive+0x1a2>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004cd2:	e055      	b.n	8004d80 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1c4      	bne.n	8004c6a <HAL_SPI_Receive+0x146>
 8004ce0:	e038      	b.n	8004d54 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d115      	bne.n	8004d1c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	b292      	uxth	r2, r2
 8004cfc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	1c9a      	adds	r2, r3, #2
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004d1a:	e015      	b.n	8004d48 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d1c:	f7fd f8da 	bl	8001ed4 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d803      	bhi.n	8004d34 <HAL_SPI_Receive+0x210>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d32:	d102      	bne.n	8004d3a <HAL_SPI_Receive+0x216>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004d46:	e01b      	b.n	8004d80 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1c6      	bne.n	8004ce2 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	6839      	ldr	r1, [r7, #0]
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 fb5b 	bl	8005414 <SPI_EndRxTransaction>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	75fb      	strb	r3, [r7, #23]
 8004d76:	e003      	b.n	8004d80 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b08a      	sub	sp, #40	; 0x28
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	607a      	str	r2, [r7, #4]
 8004d9e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004da0:	2301      	movs	r3, #1
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d101      	bne.n	8004db8 <HAL_SPI_TransmitReceive+0x26>
 8004db4:	2302      	movs	r3, #2
 8004db6:	e20a      	b.n	80051ce <HAL_SPI_TransmitReceive+0x43c>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dc0:	f7fd f888 	bl	8001ed4 <HAL_GetTick>
 8004dc4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dcc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004dd4:	887b      	ldrh	r3, [r7, #2]
 8004dd6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004dd8:	887b      	ldrh	r3, [r7, #2]
 8004dda:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ddc:	7efb      	ldrb	r3, [r7, #27]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d00e      	beq.n	8004e00 <HAL_SPI_TransmitReceive+0x6e>
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004de8:	d106      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d102      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x66>
 8004df2:	7efb      	ldrb	r3, [r7, #27]
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d003      	beq.n	8004e00 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004df8:	2302      	movs	r3, #2
 8004dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004dfe:	e1e0      	b.n	80051c2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <HAL_SPI_TransmitReceive+0x80>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <HAL_SPI_TransmitReceive+0x80>
 8004e0c:	887b      	ldrh	r3, [r7, #2]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d103      	bne.n	8004e1a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e18:	e1d3      	b.n	80051c2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d003      	beq.n	8004e2e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2205      	movs	r2, #5
 8004e2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	887a      	ldrh	r2, [r7, #2]
 8004e3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	887a      	ldrh	r2, [r7, #2]
 8004e46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	887a      	ldrh	r2, [r7, #2]
 8004e54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	887a      	ldrh	r2, [r7, #2]
 8004e5a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e70:	d802      	bhi.n	8004e78 <HAL_SPI_TransmitReceive+0xe6>
 8004e72:	8a3b      	ldrh	r3, [r7, #16]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d908      	bls.n	8004e8a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e86:	605a      	str	r2, [r3, #4]
 8004e88:	e007      	b.n	8004e9a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e98:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea4:	2b40      	cmp	r3, #64	; 0x40
 8004ea6:	d007      	beq.n	8004eb8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ec0:	f240 8081 	bls.w	8004fc6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <HAL_SPI_TransmitReceive+0x140>
 8004ecc:	8a7b      	ldrh	r3, [r7, #18]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d16d      	bne.n	8004fae <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	881a      	ldrh	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee2:	1c9a      	adds	r2, r3, #2
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef6:	e05a      	b.n	8004fae <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d11b      	bne.n	8004f3e <HAL_SPI_TransmitReceive+0x1ac>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d016      	beq.n	8004f3e <HAL_SPI_TransmitReceive+0x1ac>
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d113      	bne.n	8004f3e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	881a      	ldrh	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f26:	1c9a      	adds	r2, r3, #2
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d11c      	bne.n	8004f86 <HAL_SPI_TransmitReceive+0x1f4>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d016      	beq.n	8004f86 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	b292      	uxth	r2, r2
 8004f64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	1c9a      	adds	r2, r3, #2
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f82:	2301      	movs	r3, #1
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f86:	f7fc ffa5 	bl	8001ed4 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d80b      	bhi.n	8004fae <HAL_SPI_TransmitReceive+0x21c>
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9c:	d007      	beq.n	8004fae <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004fac:	e109      	b.n	80051c2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d19f      	bne.n	8004ef8 <HAL_SPI_TransmitReceive+0x166>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d199      	bne.n	8004ef8 <HAL_SPI_TransmitReceive+0x166>
 8004fc4:	e0e3      	b.n	800518e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_SPI_TransmitReceive+0x244>
 8004fce:	8a7b      	ldrh	r3, [r7, #18]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	f040 80cf 	bne.w	8005174 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d912      	bls.n	8005006 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	881a      	ldrh	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	1c9a      	adds	r2, r3, #2
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b02      	subs	r3, #2
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005004:	e0b6      	b.n	8005174 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	330c      	adds	r3, #12
 8005010:	7812      	ldrb	r2, [r2, #0]
 8005012:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005022:	b29b      	uxth	r3, r3
 8005024:	3b01      	subs	r3, #1
 8005026:	b29a      	uxth	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800502c:	e0a2      	b.n	8005174 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b02      	cmp	r3, #2
 800503a:	d134      	bne.n	80050a6 <HAL_SPI_TransmitReceive+0x314>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d02f      	beq.n	80050a6 <HAL_SPI_TransmitReceive+0x314>
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	2b01      	cmp	r3, #1
 800504a:	d12c      	bne.n	80050a6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005050:	b29b      	uxth	r3, r3
 8005052:	2b01      	cmp	r3, #1
 8005054:	d912      	bls.n	800507c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505a:	881a      	ldrh	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	1c9a      	adds	r2, r3, #2
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005070:	b29b      	uxth	r3, r3
 8005072:	3b02      	subs	r3, #2
 8005074:	b29a      	uxth	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	87da      	strh	r2, [r3, #62]	; 0x3e
 800507a:	e012      	b.n	80050a2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	330c      	adds	r3, #12
 8005086:	7812      	ldrb	r2, [r2, #0]
 8005088:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d148      	bne.n	8005146 <HAL_SPI_TransmitReceive+0x3b4>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d042      	beq.n	8005146 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d923      	bls.n	8005114 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	b292      	uxth	r2, r2
 80050d8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	1c9a      	adds	r2, r3, #2
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b02      	subs	r3, #2
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d81f      	bhi.n	8005142 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	e016      	b.n	8005142 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f103 020c 	add.w	r2, r3, #12
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	7812      	ldrb	r2, [r2, #0]
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005142:	2301      	movs	r3, #1
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005146:	f7fc fec5 	bl	8001ed4 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005152:	429a      	cmp	r2, r3
 8005154:	d803      	bhi.n	800515e <HAL_SPI_TransmitReceive+0x3cc>
 8005156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515c:	d102      	bne.n	8005164 <HAL_SPI_TransmitReceive+0x3d2>
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	2b00      	cmp	r3, #0
 8005162:	d107      	bne.n	8005174 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005172:	e026      	b.n	80051c2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005178:	b29b      	uxth	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	f47f af57 	bne.w	800502e <HAL_SPI_TransmitReceive+0x29c>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005186:	b29b      	uxth	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	f47f af50 	bne.w	800502e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 f996 	bl	80054c4 <SPI_EndRxTxTransaction>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d005      	beq.n	80051aa <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2220      	movs	r2, #32
 80051a8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b8:	e003      	b.n	80051c2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80051ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3728      	adds	r7, #40	; 0x28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
	...

080051d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	4613      	mov	r3, r2
 80051e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051e8:	f7fc fe74 	bl	8001ed4 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	1a9b      	subs	r3, r3, r2
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	4413      	add	r3, r2
 80051f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051f8:	f7fc fe6c 	bl	8001ed4 <HAL_GetTick>
 80051fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051fe:	4b39      	ldr	r3, [pc, #228]	; (80052e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	015b      	lsls	r3, r3, #5
 8005204:	0d1b      	lsrs	r3, r3, #20
 8005206:	69fa      	ldr	r2, [r7, #28]
 8005208:	fb02 f303 	mul.w	r3, r2, r3
 800520c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800520e:	e054      	b.n	80052ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005216:	d050      	beq.n	80052ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005218:	f7fc fe5c 	bl	8001ed4 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	69fa      	ldr	r2, [r7, #28]
 8005224:	429a      	cmp	r2, r3
 8005226:	d902      	bls.n	800522e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d13d      	bne.n	80052aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800523c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005246:	d111      	bne.n	800526c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005250:	d004      	beq.n	800525c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800525a:	d107      	bne.n	800526c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800526a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005274:	d10f      	bne.n	8005296 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005294:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e017      	b.n	80052da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	4013      	ands	r3, r2
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	bf0c      	ite	eq
 80052ca:	2301      	moveq	r3, #1
 80052cc:	2300      	movne	r3, #0
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	461a      	mov	r2, r3
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d19b      	bne.n	8005210 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3720      	adds	r7, #32
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	20000008 	.word	0x20000008

080052e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08a      	sub	sp, #40	; 0x28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80052f6:	2300      	movs	r3, #0
 80052f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80052fa:	f7fc fdeb 	bl	8001ed4 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005302:	1a9b      	subs	r3, r3, r2
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	4413      	add	r3, r2
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800530a:	f7fc fde3 	bl	8001ed4 <HAL_GetTick>
 800530e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	330c      	adds	r3, #12
 8005316:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005318:	4b3d      	ldr	r3, [pc, #244]	; (8005410 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	4613      	mov	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	00da      	lsls	r2, r3, #3
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	0d1b      	lsrs	r3, r3, #20
 8005328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532a:	fb02 f303 	mul.w	r3, r2, r3
 800532e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005330:	e060      	b.n	80053f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005338:	d107      	bne.n	800534a <SPI_WaitFifoStateUntilTimeout+0x62>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d104      	bne.n	800534a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005348:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005350:	d050      	beq.n	80053f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005352:	f7fc fdbf 	bl	8001ed4 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535e:	429a      	cmp	r2, r3
 8005360:	d902      	bls.n	8005368 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	2b00      	cmp	r3, #0
 8005366:	d13d      	bne.n	80053e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005376:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005380:	d111      	bne.n	80053a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800538a:	d004      	beq.n	8005396 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005394:	d107      	bne.n	80053a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ae:	d10f      	bne.n	80053d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e010      	b.n	8005406 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	4013      	ands	r3, r2
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	429a      	cmp	r2, r3
 8005402:	d196      	bne.n	8005332 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3728      	adds	r7, #40	; 0x28
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000008 	.word	0x20000008

08005414 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af02      	add	r7, sp, #8
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005428:	d111      	bne.n	800544e <SPI_EndRxTransaction+0x3a>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005432:	d004      	beq.n	800543e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800543c:	d107      	bne.n	800544e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800544c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2200      	movs	r2, #0
 8005456:	2180      	movs	r1, #128	; 0x80
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f7ff febd 	bl	80051d8 <SPI_WaitFlagStateUntilTimeout>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d007      	beq.n	8005474 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005468:	f043 0220 	orr.w	r2, r3, #32
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e023      	b.n	80054bc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800547c:	d11d      	bne.n	80054ba <SPI_EndRxTransaction+0xa6>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005486:	d004      	beq.n	8005492 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005490:	d113      	bne.n	80054ba <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2200      	movs	r2, #0
 800549a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f7ff ff22 	bl	80052e8 <SPI_WaitFifoStateUntilTimeout>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d007      	beq.n	80054ba <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ae:	f043 0220 	orr.w	r2, r3, #32
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e000      	b.n	80054bc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af02      	add	r7, sp, #8
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f7ff ff03 	bl	80052e8 <SPI_WaitFifoStateUntilTimeout>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d007      	beq.n	80054f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ec:	f043 0220 	orr.w	r2, r3, #32
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e027      	b.n	8005548 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2200      	movs	r2, #0
 8005500:	2180      	movs	r1, #128	; 0x80
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f7ff fe68 	bl	80051d8 <SPI_WaitFlagStateUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d007      	beq.n	800551e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005512:	f043 0220 	orr.w	r2, r3, #32
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e014      	b.n	8005548 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2200      	movs	r2, #0
 8005526:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f7ff fedc 	bl	80052e8 <SPI_WaitFifoStateUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d007      	beq.n	8005546 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553a:	f043 0220 	orr.w	r2, r3, #32
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e000      	b.n	8005548 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e040      	b.n	80055e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fc faae 	bl	8001ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2224      	movs	r2, #36	; 0x24
 800557c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0201 	bic.w	r2, r2, #1
 800558c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fb6a 	bl	8005c70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f8af 	bl	8005700 <UART_SetConfig>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e01b      	b.n	80055e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fbe9 	bl	8005db4 <UART_CheckIdleState>
 80055e2:	4603      	mov	r3, r0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08a      	sub	sp, #40	; 0x28
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	4613      	mov	r3, r2
 80055fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005600:	2b20      	cmp	r3, #32
 8005602:	d178      	bne.n	80056f6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_UART_Transmit+0x24>
 800560a:	88fb      	ldrh	r3, [r7, #6]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e071      	b.n	80056f8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2221      	movs	r2, #33	; 0x21
 8005620:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005622:	f7fc fc57 	bl	8001ed4 <HAL_GetTick>
 8005626:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	88fa      	ldrh	r2, [r7, #6]
 800562c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	88fa      	ldrh	r2, [r7, #6]
 8005634:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005640:	d108      	bne.n	8005654 <HAL_UART_Transmit+0x68>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d104      	bne.n	8005654 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	e003      	b.n	800565c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005658:	2300      	movs	r3, #0
 800565a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800565c:	e030      	b.n	80056c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2200      	movs	r2, #0
 8005666:	2180      	movs	r1, #128	; 0x80
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 fc4b 	bl	8005f04 <UART_WaitOnFlagUntilTimeout>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d004      	beq.n	800567e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2220      	movs	r2, #32
 8005678:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e03c      	b.n	80056f8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10b      	bne.n	800569c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	881a      	ldrh	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005690:	b292      	uxth	r2, r2
 8005692:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	3302      	adds	r3, #2
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	e008      	b.n	80056ae <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	781a      	ldrb	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	b292      	uxth	r2, r2
 80056a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	3301      	adds	r3, #1
 80056ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	3b01      	subs	r3, #1
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1c8      	bne.n	800565e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2200      	movs	r2, #0
 80056d4:	2140      	movs	r1, #64	; 0x40
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 fc14 	bl	8005f04 <UART_WaitOnFlagUntilTimeout>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d004      	beq.n	80056ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2220      	movs	r2, #32
 80056e6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e005      	b.n	80056f8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2220      	movs	r2, #32
 80056f0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	e000      	b.n	80056f8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80056f6:	2302      	movs	r3, #2
  }
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3720      	adds	r7, #32
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005704:	b08a      	sub	sp, #40	; 0x28
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	431a      	orrs	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	431a      	orrs	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	4313      	orrs	r3, r2
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	4ba4      	ldr	r3, [pc, #656]	; (80059c0 <UART_SetConfig+0x2c0>)
 8005730:	4013      	ands	r3, r2
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	6812      	ldr	r2, [r2, #0]
 8005736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005738:	430b      	orrs	r3, r1
 800573a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a99      	ldr	r2, [pc, #612]	; (80059c4 <UART_SetConfig+0x2c4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d004      	beq.n	800576c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005768:	4313      	orrs	r3, r2
 800576a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800577c:	430a      	orrs	r2, r1
 800577e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a90      	ldr	r2, [pc, #576]	; (80059c8 <UART_SetConfig+0x2c8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d126      	bne.n	80057d8 <UART_SetConfig+0xd8>
 800578a:	4b90      	ldr	r3, [pc, #576]	; (80059cc <UART_SetConfig+0x2cc>)
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005790:	f003 0303 	and.w	r3, r3, #3
 8005794:	2b03      	cmp	r3, #3
 8005796:	d81b      	bhi.n	80057d0 <UART_SetConfig+0xd0>
 8005798:	a201      	add	r2, pc, #4	; (adr r2, 80057a0 <UART_SetConfig+0xa0>)
 800579a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579e:	bf00      	nop
 80057a0:	080057b1 	.word	0x080057b1
 80057a4:	080057c1 	.word	0x080057c1
 80057a8:	080057b9 	.word	0x080057b9
 80057ac:	080057c9 	.word	0x080057c9
 80057b0:	2301      	movs	r3, #1
 80057b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b6:	e116      	b.n	80059e6 <UART_SetConfig+0x2e6>
 80057b8:	2302      	movs	r3, #2
 80057ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057be:	e112      	b.n	80059e6 <UART_SetConfig+0x2e6>
 80057c0:	2304      	movs	r3, #4
 80057c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057c6:	e10e      	b.n	80059e6 <UART_SetConfig+0x2e6>
 80057c8:	2308      	movs	r3, #8
 80057ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ce:	e10a      	b.n	80059e6 <UART_SetConfig+0x2e6>
 80057d0:	2310      	movs	r3, #16
 80057d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057d6:	e106      	b.n	80059e6 <UART_SetConfig+0x2e6>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a7c      	ldr	r2, [pc, #496]	; (80059d0 <UART_SetConfig+0x2d0>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d138      	bne.n	8005854 <UART_SetConfig+0x154>
 80057e2:	4b7a      	ldr	r3, [pc, #488]	; (80059cc <UART_SetConfig+0x2cc>)
 80057e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e8:	f003 030c 	and.w	r3, r3, #12
 80057ec:	2b0c      	cmp	r3, #12
 80057ee:	d82d      	bhi.n	800584c <UART_SetConfig+0x14c>
 80057f0:	a201      	add	r2, pc, #4	; (adr r2, 80057f8 <UART_SetConfig+0xf8>)
 80057f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f6:	bf00      	nop
 80057f8:	0800582d 	.word	0x0800582d
 80057fc:	0800584d 	.word	0x0800584d
 8005800:	0800584d 	.word	0x0800584d
 8005804:	0800584d 	.word	0x0800584d
 8005808:	0800583d 	.word	0x0800583d
 800580c:	0800584d 	.word	0x0800584d
 8005810:	0800584d 	.word	0x0800584d
 8005814:	0800584d 	.word	0x0800584d
 8005818:	08005835 	.word	0x08005835
 800581c:	0800584d 	.word	0x0800584d
 8005820:	0800584d 	.word	0x0800584d
 8005824:	0800584d 	.word	0x0800584d
 8005828:	08005845 	.word	0x08005845
 800582c:	2300      	movs	r3, #0
 800582e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005832:	e0d8      	b.n	80059e6 <UART_SetConfig+0x2e6>
 8005834:	2302      	movs	r3, #2
 8005836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800583a:	e0d4      	b.n	80059e6 <UART_SetConfig+0x2e6>
 800583c:	2304      	movs	r3, #4
 800583e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005842:	e0d0      	b.n	80059e6 <UART_SetConfig+0x2e6>
 8005844:	2308      	movs	r3, #8
 8005846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800584a:	e0cc      	b.n	80059e6 <UART_SetConfig+0x2e6>
 800584c:	2310      	movs	r3, #16
 800584e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005852:	e0c8      	b.n	80059e6 <UART_SetConfig+0x2e6>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a5e      	ldr	r2, [pc, #376]	; (80059d4 <UART_SetConfig+0x2d4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d125      	bne.n	80058aa <UART_SetConfig+0x1aa>
 800585e:	4b5b      	ldr	r3, [pc, #364]	; (80059cc <UART_SetConfig+0x2cc>)
 8005860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005864:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005868:	2b30      	cmp	r3, #48	; 0x30
 800586a:	d016      	beq.n	800589a <UART_SetConfig+0x19a>
 800586c:	2b30      	cmp	r3, #48	; 0x30
 800586e:	d818      	bhi.n	80058a2 <UART_SetConfig+0x1a2>
 8005870:	2b20      	cmp	r3, #32
 8005872:	d00a      	beq.n	800588a <UART_SetConfig+0x18a>
 8005874:	2b20      	cmp	r3, #32
 8005876:	d814      	bhi.n	80058a2 <UART_SetConfig+0x1a2>
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <UART_SetConfig+0x182>
 800587c:	2b10      	cmp	r3, #16
 800587e:	d008      	beq.n	8005892 <UART_SetConfig+0x192>
 8005880:	e00f      	b.n	80058a2 <UART_SetConfig+0x1a2>
 8005882:	2300      	movs	r3, #0
 8005884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005888:	e0ad      	b.n	80059e6 <UART_SetConfig+0x2e6>
 800588a:	2302      	movs	r3, #2
 800588c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005890:	e0a9      	b.n	80059e6 <UART_SetConfig+0x2e6>
 8005892:	2304      	movs	r3, #4
 8005894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005898:	e0a5      	b.n	80059e6 <UART_SetConfig+0x2e6>
 800589a:	2308      	movs	r3, #8
 800589c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a0:	e0a1      	b.n	80059e6 <UART_SetConfig+0x2e6>
 80058a2:	2310      	movs	r3, #16
 80058a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a8:	e09d      	b.n	80059e6 <UART_SetConfig+0x2e6>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a4a      	ldr	r2, [pc, #296]	; (80059d8 <UART_SetConfig+0x2d8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d125      	bne.n	8005900 <UART_SetConfig+0x200>
 80058b4:	4b45      	ldr	r3, [pc, #276]	; (80059cc <UART_SetConfig+0x2cc>)
 80058b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058be:	2bc0      	cmp	r3, #192	; 0xc0
 80058c0:	d016      	beq.n	80058f0 <UART_SetConfig+0x1f0>
 80058c2:	2bc0      	cmp	r3, #192	; 0xc0
 80058c4:	d818      	bhi.n	80058f8 <UART_SetConfig+0x1f8>
 80058c6:	2b80      	cmp	r3, #128	; 0x80
 80058c8:	d00a      	beq.n	80058e0 <UART_SetConfig+0x1e0>
 80058ca:	2b80      	cmp	r3, #128	; 0x80
 80058cc:	d814      	bhi.n	80058f8 <UART_SetConfig+0x1f8>
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <UART_SetConfig+0x1d8>
 80058d2:	2b40      	cmp	r3, #64	; 0x40
 80058d4:	d008      	beq.n	80058e8 <UART_SetConfig+0x1e8>
 80058d6:	e00f      	b.n	80058f8 <UART_SetConfig+0x1f8>
 80058d8:	2300      	movs	r3, #0
 80058da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058de:	e082      	b.n	80059e6 <UART_SetConfig+0x2e6>
 80058e0:	2302      	movs	r3, #2
 80058e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058e6:	e07e      	b.n	80059e6 <UART_SetConfig+0x2e6>
 80058e8:	2304      	movs	r3, #4
 80058ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ee:	e07a      	b.n	80059e6 <UART_SetConfig+0x2e6>
 80058f0:	2308      	movs	r3, #8
 80058f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058f6:	e076      	b.n	80059e6 <UART_SetConfig+0x2e6>
 80058f8:	2310      	movs	r3, #16
 80058fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058fe:	e072      	b.n	80059e6 <UART_SetConfig+0x2e6>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a35      	ldr	r2, [pc, #212]	; (80059dc <UART_SetConfig+0x2dc>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d12a      	bne.n	8005960 <UART_SetConfig+0x260>
 800590a:	4b30      	ldr	r3, [pc, #192]	; (80059cc <UART_SetConfig+0x2cc>)
 800590c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005918:	d01a      	beq.n	8005950 <UART_SetConfig+0x250>
 800591a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800591e:	d81b      	bhi.n	8005958 <UART_SetConfig+0x258>
 8005920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005924:	d00c      	beq.n	8005940 <UART_SetConfig+0x240>
 8005926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800592a:	d815      	bhi.n	8005958 <UART_SetConfig+0x258>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <UART_SetConfig+0x238>
 8005930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005934:	d008      	beq.n	8005948 <UART_SetConfig+0x248>
 8005936:	e00f      	b.n	8005958 <UART_SetConfig+0x258>
 8005938:	2300      	movs	r3, #0
 800593a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800593e:	e052      	b.n	80059e6 <UART_SetConfig+0x2e6>
 8005940:	2302      	movs	r3, #2
 8005942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005946:	e04e      	b.n	80059e6 <UART_SetConfig+0x2e6>
 8005948:	2304      	movs	r3, #4
 800594a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800594e:	e04a      	b.n	80059e6 <UART_SetConfig+0x2e6>
 8005950:	2308      	movs	r3, #8
 8005952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005956:	e046      	b.n	80059e6 <UART_SetConfig+0x2e6>
 8005958:	2310      	movs	r3, #16
 800595a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800595e:	e042      	b.n	80059e6 <UART_SetConfig+0x2e6>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a17      	ldr	r2, [pc, #92]	; (80059c4 <UART_SetConfig+0x2c4>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d13a      	bne.n	80059e0 <UART_SetConfig+0x2e0>
 800596a:	4b18      	ldr	r3, [pc, #96]	; (80059cc <UART_SetConfig+0x2cc>)
 800596c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005970:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005974:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005978:	d01a      	beq.n	80059b0 <UART_SetConfig+0x2b0>
 800597a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800597e:	d81b      	bhi.n	80059b8 <UART_SetConfig+0x2b8>
 8005980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005984:	d00c      	beq.n	80059a0 <UART_SetConfig+0x2a0>
 8005986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800598a:	d815      	bhi.n	80059b8 <UART_SetConfig+0x2b8>
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <UART_SetConfig+0x298>
 8005990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005994:	d008      	beq.n	80059a8 <UART_SetConfig+0x2a8>
 8005996:	e00f      	b.n	80059b8 <UART_SetConfig+0x2b8>
 8005998:	2300      	movs	r3, #0
 800599a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800599e:	e022      	b.n	80059e6 <UART_SetConfig+0x2e6>
 80059a0:	2302      	movs	r3, #2
 80059a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059a6:	e01e      	b.n	80059e6 <UART_SetConfig+0x2e6>
 80059a8:	2304      	movs	r3, #4
 80059aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ae:	e01a      	b.n	80059e6 <UART_SetConfig+0x2e6>
 80059b0:	2308      	movs	r3, #8
 80059b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059b6:	e016      	b.n	80059e6 <UART_SetConfig+0x2e6>
 80059b8:	2310      	movs	r3, #16
 80059ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059be:	e012      	b.n	80059e6 <UART_SetConfig+0x2e6>
 80059c0:	efff69f3 	.word	0xefff69f3
 80059c4:	40008000 	.word	0x40008000
 80059c8:	40013800 	.word	0x40013800
 80059cc:	40021000 	.word	0x40021000
 80059d0:	40004400 	.word	0x40004400
 80059d4:	40004800 	.word	0x40004800
 80059d8:	40004c00 	.word	0x40004c00
 80059dc:	40005000 	.word	0x40005000
 80059e0:	2310      	movs	r3, #16
 80059e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a9f      	ldr	r2, [pc, #636]	; (8005c68 <UART_SetConfig+0x568>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d17a      	bne.n	8005ae6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d824      	bhi.n	8005a42 <UART_SetConfig+0x342>
 80059f8:	a201      	add	r2, pc, #4	; (adr r2, 8005a00 <UART_SetConfig+0x300>)
 80059fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fe:	bf00      	nop
 8005a00:	08005a25 	.word	0x08005a25
 8005a04:	08005a43 	.word	0x08005a43
 8005a08:	08005a2d 	.word	0x08005a2d
 8005a0c:	08005a43 	.word	0x08005a43
 8005a10:	08005a33 	.word	0x08005a33
 8005a14:	08005a43 	.word	0x08005a43
 8005a18:	08005a43 	.word	0x08005a43
 8005a1c:	08005a43 	.word	0x08005a43
 8005a20:	08005a3b 	.word	0x08005a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a24:	f7fe f91e 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8005a28:	61f8      	str	r0, [r7, #28]
        break;
 8005a2a:	e010      	b.n	8005a4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a2c:	4b8f      	ldr	r3, [pc, #572]	; (8005c6c <UART_SetConfig+0x56c>)
 8005a2e:	61fb      	str	r3, [r7, #28]
        break;
 8005a30:	e00d      	b.n	8005a4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a32:	f7fe f87f 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 8005a36:	61f8      	str	r0, [r7, #28]
        break;
 8005a38:	e009      	b.n	8005a4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a3e:	61fb      	str	r3, [r7, #28]
        break;
 8005a40:	e005      	b.n	8005a4e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 80fb 	beq.w	8005c4c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	4413      	add	r3, r2
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d305      	bcc.n	8005a72 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a6c:	69fa      	ldr	r2, [r7, #28]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d903      	bls.n	8005a7a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a78:	e0e8      	b.n	8005c4c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	461c      	mov	r4, r3
 8005a80:	4615      	mov	r5, r2
 8005a82:	f04f 0200 	mov.w	r2, #0
 8005a86:	f04f 0300 	mov.w	r3, #0
 8005a8a:	022b      	lsls	r3, r5, #8
 8005a8c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005a90:	0222      	lsls	r2, r4, #8
 8005a92:	68f9      	ldr	r1, [r7, #12]
 8005a94:	6849      	ldr	r1, [r1, #4]
 8005a96:	0849      	lsrs	r1, r1, #1
 8005a98:	2000      	movs	r0, #0
 8005a9a:	4688      	mov	r8, r1
 8005a9c:	4681      	mov	r9, r0
 8005a9e:	eb12 0a08 	adds.w	sl, r2, r8
 8005aa2:	eb43 0b09 	adc.w	fp, r3, r9
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	603b      	str	r3, [r7, #0]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ab4:	4650      	mov	r0, sl
 8005ab6:	4659      	mov	r1, fp
 8005ab8:	f7fb f8c6 	bl	8000c48 <__aeabi_uldivmod>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aca:	d308      	bcc.n	8005ade <UART_SetConfig+0x3de>
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ad2:	d204      	bcs.n	8005ade <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	60da      	str	r2, [r3, #12]
 8005adc:	e0b6      	b.n	8005c4c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ae4:	e0b2      	b.n	8005c4c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aee:	d15e      	bne.n	8005bae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005af0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d828      	bhi.n	8005b4a <UART_SetConfig+0x44a>
 8005af8:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <UART_SetConfig+0x400>)
 8005afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afe:	bf00      	nop
 8005b00:	08005b25 	.word	0x08005b25
 8005b04:	08005b2d 	.word	0x08005b2d
 8005b08:	08005b35 	.word	0x08005b35
 8005b0c:	08005b4b 	.word	0x08005b4b
 8005b10:	08005b3b 	.word	0x08005b3b
 8005b14:	08005b4b 	.word	0x08005b4b
 8005b18:	08005b4b 	.word	0x08005b4b
 8005b1c:	08005b4b 	.word	0x08005b4b
 8005b20:	08005b43 	.word	0x08005b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b24:	f7fe f89e 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8005b28:	61f8      	str	r0, [r7, #28]
        break;
 8005b2a:	e014      	b.n	8005b56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b2c:	f7fe f8b0 	bl	8003c90 <HAL_RCC_GetPCLK2Freq>
 8005b30:	61f8      	str	r0, [r7, #28]
        break;
 8005b32:	e010      	b.n	8005b56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b34:	4b4d      	ldr	r3, [pc, #308]	; (8005c6c <UART_SetConfig+0x56c>)
 8005b36:	61fb      	str	r3, [r7, #28]
        break;
 8005b38:	e00d      	b.n	8005b56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b3a:	f7fd fffb 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 8005b3e:	61f8      	str	r0, [r7, #28]
        break;
 8005b40:	e009      	b.n	8005b56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b46:	61fb      	str	r3, [r7, #28]
        break;
 8005b48:	e005      	b.n	8005b56 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d077      	beq.n	8005c4c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	005a      	lsls	r2, r3, #1
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	085b      	lsrs	r3, r3, #1
 8005b66:	441a      	add	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	2b0f      	cmp	r3, #15
 8005b76:	d916      	bls.n	8005ba6 <UART_SetConfig+0x4a6>
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b7e:	d212      	bcs.n	8005ba6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f023 030f 	bic.w	r3, r3, #15
 8005b88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	085b      	lsrs	r3, r3, #1
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	8afb      	ldrh	r3, [r7, #22]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	8afa      	ldrh	r2, [r7, #22]
 8005ba2:	60da      	str	r2, [r3, #12]
 8005ba4:	e052      	b.n	8005c4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005bac:	e04e      	b.n	8005c4c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	d827      	bhi.n	8005c06 <UART_SetConfig+0x506>
 8005bb6:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <UART_SetConfig+0x4bc>)
 8005bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbc:	08005be1 	.word	0x08005be1
 8005bc0:	08005be9 	.word	0x08005be9
 8005bc4:	08005bf1 	.word	0x08005bf1
 8005bc8:	08005c07 	.word	0x08005c07
 8005bcc:	08005bf7 	.word	0x08005bf7
 8005bd0:	08005c07 	.word	0x08005c07
 8005bd4:	08005c07 	.word	0x08005c07
 8005bd8:	08005c07 	.word	0x08005c07
 8005bdc:	08005bff 	.word	0x08005bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be0:	f7fe f840 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8005be4:	61f8      	str	r0, [r7, #28]
        break;
 8005be6:	e014      	b.n	8005c12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005be8:	f7fe f852 	bl	8003c90 <HAL_RCC_GetPCLK2Freq>
 8005bec:	61f8      	str	r0, [r7, #28]
        break;
 8005bee:	e010      	b.n	8005c12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf0:	4b1e      	ldr	r3, [pc, #120]	; (8005c6c <UART_SetConfig+0x56c>)
 8005bf2:	61fb      	str	r3, [r7, #28]
        break;
 8005bf4:	e00d      	b.n	8005c12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bf6:	f7fd ff9d 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 8005bfa:	61f8      	str	r0, [r7, #28]
        break;
 8005bfc:	e009      	b.n	8005c12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c02:	61fb      	str	r3, [r7, #28]
        break;
 8005c04:	e005      	b.n	8005c12 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c10:	bf00      	nop
    }

    if (pclk != 0U)
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d019      	beq.n	8005c4c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	085a      	lsrs	r2, r3, #1
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	441a      	add	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	2b0f      	cmp	r3, #15
 8005c30:	d909      	bls.n	8005c46 <UART_SetConfig+0x546>
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c38:	d205      	bcs.n	8005c46 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	60da      	str	r2, [r3, #12]
 8005c44:	e002      	b.n	8005c4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005c58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3728      	adds	r7, #40	; 0x28
 8005c60:	46bd      	mov	sp, r7
 8005c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c66:	bf00      	nop
 8005c68:	40008000 	.word	0x40008000
 8005c6c:	00f42400 	.word	0x00f42400

08005c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	f003 0308 	and.w	r3, r3, #8
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00a      	beq.n	8005c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00a      	beq.n	8005cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d01a      	beq.n	8005d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d6e:	d10a      	bne.n	8005d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	605a      	str	r2, [r3, #4]
  }
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b098      	sub	sp, #96	; 0x60
 8005db8:	af02      	add	r7, sp, #8
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dc4:	f7fc f886 	bl	8001ed4 <HAL_GetTick>
 8005dc8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d12e      	bne.n	8005e36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005de0:	2200      	movs	r2, #0
 8005de2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f88c 	bl	8005f04 <UART_WaitOnFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d021      	beq.n	8005e36 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e06:	653b      	str	r3, [r7, #80]	; 0x50
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e10:	647b      	str	r3, [r7, #68]	; 0x44
 8005e12:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e18:	e841 2300 	strex	r3, r2, [r1]
 8005e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e6      	bne.n	8005df2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2220      	movs	r2, #32
 8005e28:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e062      	b.n	8005efc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d149      	bne.n	8005ed8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f856 	bl	8005f04 <UART_WaitOnFlagUntilTimeout>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d03c      	beq.n	8005ed8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	e853 3f00 	ldrex	r3, [r3]
 8005e6a:	623b      	str	r3, [r7, #32]
   return(result);
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e7e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e84:	e841 2300 	strex	r3, r2, [r1]
 8005e88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1e6      	bne.n	8005e5e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3308      	adds	r3, #8
 8005e96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	e853 3f00 	ldrex	r3, [r3]
 8005e9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0301 	bic.w	r3, r3, #1
 8005ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3308      	adds	r3, #8
 8005eae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eb0:	61fa      	str	r2, [r7, #28]
 8005eb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb4:	69b9      	ldr	r1, [r7, #24]
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	e841 2300 	strex	r3, r2, [r1]
 8005ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1e5      	bne.n	8005e90 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e011      	b.n	8005efc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3758      	adds	r7, #88	; 0x58
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	603b      	str	r3, [r7, #0]
 8005f10:	4613      	mov	r3, r2
 8005f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f14:	e049      	b.n	8005faa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1c:	d045      	beq.n	8005faa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f1e:	f7fb ffd9 	bl	8001ed4 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d302      	bcc.n	8005f34 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e048      	b.n	8005fca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0304 	and.w	r3, r3, #4
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d031      	beq.n	8005faa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	f003 0308 	and.w	r3, r3, #8
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d110      	bne.n	8005f76 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2208      	movs	r2, #8
 8005f5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f838 	bl	8005fd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2208      	movs	r2, #8
 8005f66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e029      	b.n	8005fca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f84:	d111      	bne.n	8005faa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f81e 	bl	8005fd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e00f      	b.n	8005fca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69da      	ldr	r2, [r3, #28]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	bf0c      	ite	eq
 8005fba:	2301      	moveq	r3, #1
 8005fbc:	2300      	movne	r3, #0
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d0a6      	beq.n	8005f16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b095      	sub	sp, #84	; 0x54
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff8:	643b      	str	r3, [r7, #64]	; 0x40
 8005ffa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ffe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006000:	e841 2300 	strex	r3, r2, [r1]
 8006004:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e6      	bne.n	8005fda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3308      	adds	r3, #8
 8006012:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	61fb      	str	r3, [r7, #28]
   return(result);
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f023 0301 	bic.w	r3, r3, #1
 8006022:	64bb      	str	r3, [r7, #72]	; 0x48
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3308      	adds	r3, #8
 800602a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800602c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800602e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e5      	bne.n	800600c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006044:	2b01      	cmp	r3, #1
 8006046:	d118      	bne.n	800607a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	60bb      	str	r3, [r7, #8]
   return(result);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f023 0310 	bic.w	r3, r3, #16
 800605c:	647b      	str	r3, [r7, #68]	; 0x44
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006066:	61bb      	str	r3, [r7, #24]
 8006068:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	6979      	ldr	r1, [r7, #20]
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	613b      	str	r3, [r7, #16]
   return(result);
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1e6      	bne.n	8006048 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800608e:	bf00      	nop
 8006090:	3754      	adds	r7, #84	; 0x54
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
	...

0800609c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80060a0:	4904      	ldr	r1, [pc, #16]	; (80060b4 <MX_FATFS_Init+0x18>)
 80060a2:	4805      	ldr	r0, [pc, #20]	; (80060b8 <MX_FATFS_Init+0x1c>)
 80060a4:	f003 f9b2 	bl	800940c <FATFS_LinkDriver>
 80060a8:	4603      	mov	r3, r0
 80060aa:	461a      	mov	r2, r3
 80060ac:	4b03      	ldr	r3, [pc, #12]	; (80060bc <MX_FATFS_Init+0x20>)
 80060ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80060b0:	bf00      	nop
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	200005c4 	.word	0x200005c4
 80060b8:	20000014 	.word	0x20000014
 80060bc:	200005c0 	.word	0x200005c0

080060c0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80060c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80060da:	79fb      	ldrb	r3, [r7, #7]
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 f9d9 	bl	8006494 <USER_SPI_initialize>
 80060e2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 fab7 	bl	800666c <USER_SPI_status>
 80060fe:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006100:	4618      	mov	r0, r3
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	60b9      	str	r1, [r7, #8]
 8006110:	607a      	str	r2, [r7, #4]
 8006112:	603b      	str	r3, [r7, #0]
 8006114:	4603      	mov	r3, r0
 8006116:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8006118:	7bf8      	ldrb	r0, [r7, #15]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	68b9      	ldr	r1, [r7, #8]
 8006120:	f000 faba 	bl	8006698 <USER_SPI_read>
 8006124:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	603b      	str	r3, [r7, #0]
 800613a:	4603      	mov	r3, r0
 800613c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800613e:	7bf8      	ldrb	r0, [r7, #15]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	68b9      	ldr	r1, [r7, #8]
 8006146:	f000 fb0d 	bl	8006764 <USER_SPI_write>
 800614a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	4603      	mov	r3, r0
 800615c:	603a      	str	r2, [r7, #0]
 800615e:	71fb      	strb	r3, [r7, #7]
 8006160:	460b      	mov	r3, r1
 8006162:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	73fb      	strb	r3, [r7, #15]
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8006168:	79b9      	ldrb	r1, [r7, #6]
 800616a:	79fb      	ldrb	r3, [r7, #7]
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f000 fb74 	bl	800685c <USER_SPI_ioctl>
 8006174:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006188:	f7fb fea4 	bl	8001ed4 <HAL_GetTick>
 800618c:	4603      	mov	r3, r0
 800618e:	4a04      	ldr	r2, [pc, #16]	; (80061a0 <SPI_Timer_On+0x20>)
 8006190:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006192:	4a04      	ldr	r2, [pc, #16]	; (80061a4 <SPI_Timer_On+0x24>)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6013      	str	r3, [r2, #0]
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	200005cc 	.word	0x200005cc
 80061a4:	200005d0 	.word	0x200005d0

080061a8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80061ac:	f7fb fe92 	bl	8001ed4 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	4b06      	ldr	r3, [pc, #24]	; (80061cc <SPI_Timer_Status+0x24>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	1ad2      	subs	r2, r2, r3
 80061b8:	4b05      	ldr	r3, [pc, #20]	; (80061d0 <SPI_Timer_Status+0x28>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	bf34      	ite	cc
 80061c0:	2301      	movcc	r3, #1
 80061c2:	2300      	movcs	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	200005cc 	.word	0x200005cc
 80061d0:	200005d0 	.word	0x200005d0

080061d4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af02      	add	r7, sp, #8
 80061da:	4603      	mov	r3, r0
 80061dc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80061de:	f107 020f 	add.w	r2, r7, #15
 80061e2:	1df9      	adds	r1, r7, #7
 80061e4:	2332      	movs	r3, #50	; 0x32
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	2301      	movs	r3, #1
 80061ea:	4804      	ldr	r0, [pc, #16]	; (80061fc <xchg_spi+0x28>)
 80061ec:	f7fe fdd1 	bl	8004d92 <HAL_SPI_TransmitReceive>
    return rxDat;
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20000264 	.word	0x20000264

08006200 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006200:	b590      	push	{r4, r7, lr}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]
 800620e:	e00a      	b.n	8006226 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	18d4      	adds	r4, r2, r3
 8006216:	20ff      	movs	r0, #255	; 0xff
 8006218:	f7ff ffdc 	bl	80061d4 <xchg_spi>
 800621c:	4603      	mov	r3, r0
 800621e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	3301      	adds	r3, #1
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d3f0      	bcc.n	8006210 <rcvr_spi_multi+0x10>
	}
}
 800622e:	bf00      	nop
 8006230:	bf00      	nop
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	bd90      	pop	{r4, r7, pc}

08006238 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	b29a      	uxth	r2, r3
 8006246:	f04f 33ff 	mov.w	r3, #4294967295
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	4803      	ldr	r0, [pc, #12]	; (800625c <xmit_spi_multi+0x24>)
 800624e:	f7fe faf4 	bl	800483a <HAL_SPI_Transmit>
}
 8006252:	bf00      	nop
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	20000264 	.word	0x20000264

08006260 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006268:	f7fb fe34 	bl	8001ed4 <HAL_GetTick>
 800626c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006272:	20ff      	movs	r0, #255	; 0xff
 8006274:	f7ff ffae 	bl	80061d4 <xchg_spi>
 8006278:	4603      	mov	r3, r0
 800627a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800627c:	7bfb      	ldrb	r3, [r7, #15]
 800627e:	2bff      	cmp	r3, #255	; 0xff
 8006280:	d007      	beq.n	8006292 <wait_ready+0x32>
 8006282:	f7fb fe27 	bl	8001ed4 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	429a      	cmp	r2, r3
 8006290:	d8ef      	bhi.n	8006272 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	2bff      	cmp	r3, #255	; 0xff
 8006296:	bf0c      	ite	eq
 8006298:	2301      	moveq	r3, #1
 800629a:	2300      	movne	r3, #0
 800629c:	b2db      	uxtb	r3, r3
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80062ac:	2201      	movs	r2, #1
 80062ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062b2:	4804      	ldr	r0, [pc, #16]	; (80062c4 <despiselect+0x1c>)
 80062b4:	f7fc f8fa 	bl	80024ac <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80062b8:	20ff      	movs	r0, #255	; 0xff
 80062ba:	f7ff ff8b 	bl	80061d4 <xchg_spi>

}
 80062be:	bf00      	nop
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	48000400 	.word	0x48000400

080062c8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80062cc:	2200      	movs	r2, #0
 80062ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062d2:	480a      	ldr	r0, [pc, #40]	; (80062fc <spiselect+0x34>)
 80062d4:	f7fc f8ea 	bl	80024ac <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80062d8:	20ff      	movs	r0, #255	; 0xff
 80062da:	f7ff ff7b 	bl	80061d4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80062de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80062e2:	f7ff ffbd 	bl	8006260 <wait_ready>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <spiselect+0x28>
 80062ec:	2301      	movs	r3, #1
 80062ee:	e002      	b.n	80062f6 <spiselect+0x2e>

	despiselect();
 80062f0:	f7ff ffda 	bl	80062a8 <despiselect>
	return 0;	/* Timeout */
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	48000400 	.word	0x48000400

08006300 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800630a:	20c8      	movs	r0, #200	; 0xc8
 800630c:	f7ff ff38 	bl	8006180 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006310:	20ff      	movs	r0, #255	; 0xff
 8006312:	f7ff ff5f 	bl	80061d4 <xchg_spi>
 8006316:	4603      	mov	r3, r0
 8006318:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800631a:	7bfb      	ldrb	r3, [r7, #15]
 800631c:	2bff      	cmp	r3, #255	; 0xff
 800631e:	d104      	bne.n	800632a <rcvr_datablock+0x2a>
 8006320:	f7ff ff42 	bl	80061a8 <SPI_Timer_Status>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1f2      	bne.n	8006310 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800632a:	7bfb      	ldrb	r3, [r7, #15]
 800632c:	2bfe      	cmp	r3, #254	; 0xfe
 800632e:	d001      	beq.n	8006334 <rcvr_datablock+0x34>
 8006330:	2300      	movs	r3, #0
 8006332:	e00a      	b.n	800634a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7ff ff62 	bl	8006200 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800633c:	20ff      	movs	r0, #255	; 0xff
 800633e:	f7ff ff49 	bl	80061d4 <xchg_spi>
 8006342:	20ff      	movs	r0, #255	; 0xff
 8006344:	f7ff ff46 	bl	80061d4 <xchg_spi>

	return 1;						/* Function succeeded */
 8006348:	2301      	movs	r3, #1
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	460b      	mov	r3, r1
 800635c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800635e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006362:	f7ff ff7d 	bl	8006260 <wait_ready>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <xmit_datablock+0x1e>
 800636c:	2300      	movs	r3, #0
 800636e:	e01e      	b.n	80063ae <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006370:	78fb      	ldrb	r3, [r7, #3]
 8006372:	4618      	mov	r0, r3
 8006374:	f7ff ff2e 	bl	80061d4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	2bfd      	cmp	r3, #253	; 0xfd
 800637c:	d016      	beq.n	80063ac <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800637e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7ff ff58 	bl	8006238 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006388:	20ff      	movs	r0, #255	; 0xff
 800638a:	f7ff ff23 	bl	80061d4 <xchg_spi>
 800638e:	20ff      	movs	r0, #255	; 0xff
 8006390:	f7ff ff20 	bl	80061d4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006394:	20ff      	movs	r0, #255	; 0xff
 8006396:	f7ff ff1d 	bl	80061d4 <xchg_spi>
 800639a:	4603      	mov	r3, r0
 800639c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800639e:	7bfb      	ldrb	r3, [r7, #15]
 80063a0:	f003 031f 	and.w	r3, r3, #31
 80063a4:	2b05      	cmp	r3, #5
 80063a6:	d001      	beq.n	80063ac <xmit_datablock+0x5a>
 80063a8:	2300      	movs	r3, #0
 80063aa:	e000      	b.n	80063ae <xmit_datablock+0x5c>
	}
	return 1;
 80063ac:	2301      	movs	r3, #1
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	4603      	mov	r3, r0
 80063be:	6039      	str	r1, [r7, #0]
 80063c0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80063c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	da0e      	bge.n	80063e8 <send_cmd+0x32>
		cmd &= 0x7F;
 80063ca:	79fb      	ldrb	r3, [r7, #7]
 80063cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063d0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80063d2:	2100      	movs	r1, #0
 80063d4:	2037      	movs	r0, #55	; 0x37
 80063d6:	f7ff ffee 	bl	80063b6 <send_cmd>
 80063da:	4603      	mov	r3, r0
 80063dc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d901      	bls.n	80063e8 <send_cmd+0x32>
 80063e4:	7bbb      	ldrb	r3, [r7, #14]
 80063e6:	e051      	b.n	800648c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	2b0c      	cmp	r3, #12
 80063ec:	d008      	beq.n	8006400 <send_cmd+0x4a>
		despiselect();
 80063ee:	f7ff ff5b 	bl	80062a8 <despiselect>
		if (!spiselect()) return 0xFF;
 80063f2:	f7ff ff69 	bl	80062c8 <spiselect>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <send_cmd+0x4a>
 80063fc:	23ff      	movs	r3, #255	; 0xff
 80063fe:	e045      	b.n	800648c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006406:	b2db      	uxtb	r3, r3
 8006408:	4618      	mov	r0, r3
 800640a:	f7ff fee3 	bl	80061d4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	0e1b      	lsrs	r3, r3, #24
 8006412:	b2db      	uxtb	r3, r3
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff fedd 	bl	80061d4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	0c1b      	lsrs	r3, r3, #16
 800641e:	b2db      	uxtb	r3, r3
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff fed7 	bl	80061d4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	0a1b      	lsrs	r3, r3, #8
 800642a:	b2db      	uxtb	r3, r3
 800642c:	4618      	mov	r0, r3
 800642e:	f7ff fed1 	bl	80061d4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	4618      	mov	r0, r3
 8006438:	f7ff fecc 	bl	80061d4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800643c:	2301      	movs	r3, #1
 800643e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006440:	79fb      	ldrb	r3, [r7, #7]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <send_cmd+0x94>
 8006446:	2395      	movs	r3, #149	; 0x95
 8006448:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800644a:	79fb      	ldrb	r3, [r7, #7]
 800644c:	2b08      	cmp	r3, #8
 800644e:	d101      	bne.n	8006454 <send_cmd+0x9e>
 8006450:	2387      	movs	r3, #135	; 0x87
 8006452:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006454:	7bfb      	ldrb	r3, [r7, #15]
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff febc 	bl	80061d4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800645c:	79fb      	ldrb	r3, [r7, #7]
 800645e:	2b0c      	cmp	r3, #12
 8006460:	d102      	bne.n	8006468 <send_cmd+0xb2>
 8006462:	20ff      	movs	r0, #255	; 0xff
 8006464:	f7ff feb6 	bl	80061d4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006468:	230a      	movs	r3, #10
 800646a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800646c:	20ff      	movs	r0, #255	; 0xff
 800646e:	f7ff feb1 	bl	80061d4 <xchg_spi>
 8006472:	4603      	mov	r3, r0
 8006474:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006476:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800647a:	2b00      	cmp	r3, #0
 800647c:	da05      	bge.n	800648a <send_cmd+0xd4>
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	3b01      	subs	r3, #1
 8006482:	73fb      	strb	r3, [r7, #15]
 8006484:	7bfb      	ldrb	r3, [r7, #15]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1f0      	bne.n	800646c <send_cmd+0xb6>

	return res;							/* Return received response */
 800648a:	7bbb      	ldrb	r3, [r7, #14]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006494:	b590      	push	{r4, r7, lr}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	4603      	mov	r3, r0
 800649c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <USER_SPI_initialize+0x14>
 80064a4:	2301      	movs	r3, #1
 80064a6:	e0d6      	b.n	8006656 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80064a8:	4b6d      	ldr	r3, [pc, #436]	; (8006660 <USER_SPI_initialize+0x1cc>)
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <USER_SPI_initialize+0x2a>
 80064b6:	4b6a      	ldr	r3, [pc, #424]	; (8006660 <USER_SPI_initialize+0x1cc>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	e0cb      	b.n	8006656 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80064be:	4b69      	ldr	r3, [pc, #420]	; (8006664 <USER_SPI_initialize+0x1d0>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80064c8:	4b66      	ldr	r3, [pc, #408]	; (8006664 <USER_SPI_initialize+0x1d0>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80064d0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80064d2:	230a      	movs	r3, #10
 80064d4:	73fb      	strb	r3, [r7, #15]
 80064d6:	e005      	b.n	80064e4 <USER_SPI_initialize+0x50>
 80064d8:	20ff      	movs	r0, #255	; 0xff
 80064da:	f7ff fe7b 	bl	80061d4 <xchg_spi>
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	73fb      	strb	r3, [r7, #15]
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1f6      	bne.n	80064d8 <USER_SPI_initialize+0x44>

	ty = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80064ee:	2100      	movs	r1, #0
 80064f0:	2000      	movs	r0, #0
 80064f2:	f7ff ff60 	bl	80063b6 <send_cmd>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	f040 808b 	bne.w	8006614 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80064fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006502:	f7ff fe3d 	bl	8006180 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006506:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800650a:	2008      	movs	r0, #8
 800650c:	f7ff ff53 	bl	80063b6 <send_cmd>
 8006510:	4603      	mov	r3, r0
 8006512:	2b01      	cmp	r3, #1
 8006514:	d151      	bne.n	80065ba <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006516:	2300      	movs	r3, #0
 8006518:	73fb      	strb	r3, [r7, #15]
 800651a:	e00d      	b.n	8006538 <USER_SPI_initialize+0xa4>
 800651c:	7bfc      	ldrb	r4, [r7, #15]
 800651e:	20ff      	movs	r0, #255	; 0xff
 8006520:	f7ff fe58 	bl	80061d4 <xchg_spi>
 8006524:	4603      	mov	r3, r0
 8006526:	461a      	mov	r2, r3
 8006528:	f104 0310 	add.w	r3, r4, #16
 800652c:	443b      	add	r3, r7
 800652e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006532:	7bfb      	ldrb	r3, [r7, #15]
 8006534:	3301      	adds	r3, #1
 8006536:	73fb      	strb	r3, [r7, #15]
 8006538:	7bfb      	ldrb	r3, [r7, #15]
 800653a:	2b03      	cmp	r3, #3
 800653c:	d9ee      	bls.n	800651c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800653e:	7abb      	ldrb	r3, [r7, #10]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d167      	bne.n	8006614 <USER_SPI_initialize+0x180>
 8006544:	7afb      	ldrb	r3, [r7, #11]
 8006546:	2baa      	cmp	r3, #170	; 0xaa
 8006548:	d164      	bne.n	8006614 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800654a:	bf00      	nop
 800654c:	f7ff fe2c 	bl	80061a8 <SPI_Timer_Status>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d007      	beq.n	8006566 <USER_SPI_initialize+0xd2>
 8006556:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800655a:	20a9      	movs	r0, #169	; 0xa9
 800655c:	f7ff ff2b 	bl	80063b6 <send_cmd>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1f2      	bne.n	800654c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006566:	f7ff fe1f 	bl	80061a8 <SPI_Timer_Status>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d051      	beq.n	8006614 <USER_SPI_initialize+0x180>
 8006570:	2100      	movs	r1, #0
 8006572:	203a      	movs	r0, #58	; 0x3a
 8006574:	f7ff ff1f 	bl	80063b6 <send_cmd>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d14a      	bne.n	8006614 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]
 8006582:	e00d      	b.n	80065a0 <USER_SPI_initialize+0x10c>
 8006584:	7bfc      	ldrb	r4, [r7, #15]
 8006586:	20ff      	movs	r0, #255	; 0xff
 8006588:	f7ff fe24 	bl	80061d4 <xchg_spi>
 800658c:	4603      	mov	r3, r0
 800658e:	461a      	mov	r2, r3
 8006590:	f104 0310 	add.w	r3, r4, #16
 8006594:	443b      	add	r3, r7
 8006596:	f803 2c08 	strb.w	r2, [r3, #-8]
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	3301      	adds	r3, #1
 800659e:	73fb      	strb	r3, [r7, #15]
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d9ee      	bls.n	8006584 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80065a6:	7a3b      	ldrb	r3, [r7, #8]
 80065a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <USER_SPI_initialize+0x120>
 80065b0:	230c      	movs	r3, #12
 80065b2:	e000      	b.n	80065b6 <USER_SPI_initialize+0x122>
 80065b4:	2304      	movs	r3, #4
 80065b6:	737b      	strb	r3, [r7, #13]
 80065b8:	e02c      	b.n	8006614 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80065ba:	2100      	movs	r1, #0
 80065bc:	20a9      	movs	r0, #169	; 0xa9
 80065be:	f7ff fefa 	bl	80063b6 <send_cmd>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d804      	bhi.n	80065d2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80065c8:	2302      	movs	r3, #2
 80065ca:	737b      	strb	r3, [r7, #13]
 80065cc:	23a9      	movs	r3, #169	; 0xa9
 80065ce:	73bb      	strb	r3, [r7, #14]
 80065d0:	e003      	b.n	80065da <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80065d2:	2301      	movs	r3, #1
 80065d4:	737b      	strb	r3, [r7, #13]
 80065d6:	2301      	movs	r3, #1
 80065d8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80065da:	bf00      	nop
 80065dc:	f7ff fde4 	bl	80061a8 <SPI_Timer_Status>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d007      	beq.n	80065f6 <USER_SPI_initialize+0x162>
 80065e6:	7bbb      	ldrb	r3, [r7, #14]
 80065e8:	2100      	movs	r1, #0
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7ff fee3 	bl	80063b6 <send_cmd>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1f2      	bne.n	80065dc <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80065f6:	f7ff fdd7 	bl	80061a8 <SPI_Timer_Status>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d007      	beq.n	8006610 <USER_SPI_initialize+0x17c>
 8006600:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006604:	2010      	movs	r0, #16
 8006606:	f7ff fed6 	bl	80063b6 <send_cmd>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <USER_SPI_initialize+0x180>
				ty = 0;
 8006610:	2300      	movs	r3, #0
 8006612:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006614:	4a14      	ldr	r2, [pc, #80]	; (8006668 <USER_SPI_initialize+0x1d4>)
 8006616:	7b7b      	ldrb	r3, [r7, #13]
 8006618:	7013      	strb	r3, [r2, #0]
	despiselect();
 800661a:	f7ff fe45 	bl	80062a8 <despiselect>

	if (ty) {			/* OK */
 800661e:	7b7b      	ldrb	r3, [r7, #13]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d012      	beq.n	800664a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006624:	4b0f      	ldr	r3, [pc, #60]	; (8006664 <USER_SPI_initialize+0x1d0>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800662e:	4b0d      	ldr	r3, [pc, #52]	; (8006664 <USER_SPI_initialize+0x1d0>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f042 0210 	orr.w	r2, r2, #16
 8006636:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006638:	4b09      	ldr	r3, [pc, #36]	; (8006660 <USER_SPI_initialize+0x1cc>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	b2db      	uxtb	r3, r3
 800663e:	f023 0301 	bic.w	r3, r3, #1
 8006642:	b2da      	uxtb	r2, r3
 8006644:	4b06      	ldr	r3, [pc, #24]	; (8006660 <USER_SPI_initialize+0x1cc>)
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	e002      	b.n	8006650 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800664a:	4b05      	ldr	r3, [pc, #20]	; (8006660 <USER_SPI_initialize+0x1cc>)
 800664c:	2201      	movs	r2, #1
 800664e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006650:	4b03      	ldr	r3, [pc, #12]	; (8006660 <USER_SPI_initialize+0x1cc>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	b2db      	uxtb	r3, r3
}
 8006656:	4618      	mov	r0, r3
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	bd90      	pop	{r4, r7, pc}
 800665e:	bf00      	nop
 8006660:	20000028 	.word	0x20000028
 8006664:	20000264 	.word	0x20000264
 8006668:	200005c8 	.word	0x200005c8

0800666c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	4603      	mov	r3, r0
 8006674:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006676:	79fb      	ldrb	r3, [r7, #7]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <USER_SPI_status+0x14>
 800667c:	2301      	movs	r3, #1
 800667e:	e002      	b.n	8006686 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006680:	4b04      	ldr	r3, [pc, #16]	; (8006694 <USER_SPI_status+0x28>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	b2db      	uxtb	r3, r3
}
 8006686:	4618      	mov	r0, r3
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	20000028 	.word	0x20000028

08006698 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	60b9      	str	r1, [r7, #8]
 80066a0:	607a      	str	r2, [r7, #4]
 80066a2:	603b      	str	r3, [r7, #0]
 80066a4:	4603      	mov	r3, r0
 80066a6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d102      	bne.n	80066b4 <USER_SPI_read+0x1c>
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <USER_SPI_read+0x20>
 80066b4:	2304      	movs	r3, #4
 80066b6:	e04d      	b.n	8006754 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80066b8:	4b28      	ldr	r3, [pc, #160]	; (800675c <USER_SPI_read+0xc4>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <USER_SPI_read+0x32>
 80066c6:	2303      	movs	r3, #3
 80066c8:	e044      	b.n	8006754 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80066ca:	4b25      	ldr	r3, [pc, #148]	; (8006760 <USER_SPI_read+0xc8>)
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	f003 0308 	and.w	r3, r3, #8
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d102      	bne.n	80066dc <USER_SPI_read+0x44>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	025b      	lsls	r3, r3, #9
 80066da:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d111      	bne.n	8006706 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80066e2:	6879      	ldr	r1, [r7, #4]
 80066e4:	2011      	movs	r0, #17
 80066e6:	f7ff fe66 	bl	80063b6 <send_cmd>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d129      	bne.n	8006744 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80066f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066f4:	68b8      	ldr	r0, [r7, #8]
 80066f6:	f7ff fe03 	bl	8006300 <rcvr_datablock>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d021      	beq.n	8006744 <USER_SPI_read+0xac>
			count = 0;
 8006700:	2300      	movs	r3, #0
 8006702:	603b      	str	r3, [r7, #0]
 8006704:	e01e      	b.n	8006744 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	2012      	movs	r0, #18
 800670a:	f7ff fe54 	bl	80063b6 <send_cmd>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d117      	bne.n	8006744 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006714:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006718:	68b8      	ldr	r0, [r7, #8]
 800671a:	f7ff fdf1 	bl	8006300 <rcvr_datablock>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00a      	beq.n	800673a <USER_SPI_read+0xa2>
				buff += 512;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800672a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	3b01      	subs	r3, #1
 8006730:	603b      	str	r3, [r7, #0]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1ed      	bne.n	8006714 <USER_SPI_read+0x7c>
 8006738:	e000      	b.n	800673c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800673a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800673c:	2100      	movs	r1, #0
 800673e:	200c      	movs	r0, #12
 8006740:	f7ff fe39 	bl	80063b6 <send_cmd>
		}
	}
	despiselect();
 8006744:	f7ff fdb0 	bl	80062a8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	bf14      	ite	ne
 800674e:	2301      	movne	r3, #1
 8006750:	2300      	moveq	r3, #0
 8006752:	b2db      	uxtb	r3, r3
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	20000028 	.word	0x20000028
 8006760:	200005c8 	.word	0x200005c8

08006764 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	60b9      	str	r1, [r7, #8]
 800676c:	607a      	str	r2, [r7, #4]
 800676e:	603b      	str	r3, [r7, #0]
 8006770:	4603      	mov	r3, r0
 8006772:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d102      	bne.n	8006780 <USER_SPI_write+0x1c>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <USER_SPI_write+0x20>
 8006780:	2304      	movs	r3, #4
 8006782:	e063      	b.n	800684c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006784:	4b33      	ldr	r3, [pc, #204]	; (8006854 <USER_SPI_write+0xf0>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	b2db      	uxtb	r3, r3
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <USER_SPI_write+0x32>
 8006792:	2303      	movs	r3, #3
 8006794:	e05a      	b.n	800684c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006796:	4b2f      	ldr	r3, [pc, #188]	; (8006854 <USER_SPI_write+0xf0>)
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	b2db      	uxtb	r3, r3
 800679c:	f003 0304 	and.w	r3, r3, #4
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <USER_SPI_write+0x44>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e051      	b.n	800684c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80067a8:	4b2b      	ldr	r3, [pc, #172]	; (8006858 <USER_SPI_write+0xf4>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	f003 0308 	and.w	r3, r3, #8
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d102      	bne.n	80067ba <USER_SPI_write+0x56>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	025b      	lsls	r3, r3, #9
 80067b8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d110      	bne.n	80067e2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	2018      	movs	r0, #24
 80067c4:	f7ff fdf7 	bl	80063b6 <send_cmd>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d136      	bne.n	800683c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80067ce:	21fe      	movs	r1, #254	; 0xfe
 80067d0:	68b8      	ldr	r0, [r7, #8]
 80067d2:	f7ff fdbe 	bl	8006352 <xmit_datablock>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d02f      	beq.n	800683c <USER_SPI_write+0xd8>
			count = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	e02c      	b.n	800683c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80067e2:	4b1d      	ldr	r3, [pc, #116]	; (8006858 <USER_SPI_write+0xf4>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	f003 0306 	and.w	r3, r3, #6
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <USER_SPI_write+0x92>
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	2097      	movs	r0, #151	; 0x97
 80067f2:	f7ff fde0 	bl	80063b6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	2019      	movs	r0, #25
 80067fa:	f7ff fddc 	bl	80063b6 <send_cmd>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d11b      	bne.n	800683c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006804:	21fc      	movs	r1, #252	; 0xfc
 8006806:	68b8      	ldr	r0, [r7, #8]
 8006808:	f7ff fda3 	bl	8006352 <xmit_datablock>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <USER_SPI_write+0xc4>
				buff += 512;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006818:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	3b01      	subs	r3, #1
 800681e:	603b      	str	r3, [r7, #0]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1ee      	bne.n	8006804 <USER_SPI_write+0xa0>
 8006826:	e000      	b.n	800682a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006828:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800682a:	21fd      	movs	r1, #253	; 0xfd
 800682c:	2000      	movs	r0, #0
 800682e:	f7ff fd90 	bl	8006352 <xmit_datablock>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <USER_SPI_write+0xd8>
 8006838:	2301      	movs	r3, #1
 800683a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800683c:	f7ff fd34 	bl	80062a8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	bf14      	ite	ne
 8006846:	2301      	movne	r3, #1
 8006848:	2300      	moveq	r3, #0
 800684a:	b2db      	uxtb	r3, r3
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	20000028 	.word	0x20000028
 8006858:	200005c8 	.word	0x200005c8

0800685c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08c      	sub	sp, #48	; 0x30
 8006860:	af00      	add	r7, sp, #0
 8006862:	4603      	mov	r3, r0
 8006864:	603a      	str	r2, [r7, #0]
 8006866:	71fb      	strb	r3, [r7, #7]
 8006868:	460b      	mov	r3, r1
 800686a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <USER_SPI_ioctl+0x1a>
 8006872:	2304      	movs	r3, #4
 8006874:	e15a      	b.n	8006b2c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006876:	4baf      	ldr	r3, [pc, #700]	; (8006b34 <USER_SPI_ioctl+0x2d8>)
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	b2db      	uxtb	r3, r3
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <USER_SPI_ioctl+0x2c>
 8006884:	2303      	movs	r3, #3
 8006886:	e151      	b.n	8006b2c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800688e:	79bb      	ldrb	r3, [r7, #6]
 8006890:	2b04      	cmp	r3, #4
 8006892:	f200 8136 	bhi.w	8006b02 <USER_SPI_ioctl+0x2a6>
 8006896:	a201      	add	r2, pc, #4	; (adr r2, 800689c <USER_SPI_ioctl+0x40>)
 8006898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689c:	080068b1 	.word	0x080068b1
 80068a0:	080068c5 	.word	0x080068c5
 80068a4:	08006b03 	.word	0x08006b03
 80068a8:	08006971 	.word	0x08006971
 80068ac:	08006a67 	.word	0x08006a67
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80068b0:	f7ff fd0a 	bl	80062c8 <spiselect>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 8127 	beq.w	8006b0a <USER_SPI_ioctl+0x2ae>
 80068bc:	2300      	movs	r3, #0
 80068be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80068c2:	e122      	b.n	8006b0a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80068c4:	2100      	movs	r1, #0
 80068c6:	2009      	movs	r0, #9
 80068c8:	f7ff fd75 	bl	80063b6 <send_cmd>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f040 811d 	bne.w	8006b0e <USER_SPI_ioctl+0x2b2>
 80068d4:	f107 030c 	add.w	r3, r7, #12
 80068d8:	2110      	movs	r1, #16
 80068da:	4618      	mov	r0, r3
 80068dc:	f7ff fd10 	bl	8006300 <rcvr_datablock>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 8113 	beq.w	8006b0e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80068e8:	7b3b      	ldrb	r3, [r7, #12]
 80068ea:	099b      	lsrs	r3, r3, #6
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d111      	bne.n	8006916 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80068f2:	7d7b      	ldrb	r3, [r7, #21]
 80068f4:	461a      	mov	r2, r3
 80068f6:	7d3b      	ldrb	r3, [r7, #20]
 80068f8:	021b      	lsls	r3, r3, #8
 80068fa:	4413      	add	r3, r2
 80068fc:	461a      	mov	r2, r3
 80068fe:	7cfb      	ldrb	r3, [r7, #19]
 8006900:	041b      	lsls	r3, r3, #16
 8006902:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006906:	4413      	add	r3, r2
 8006908:	3301      	adds	r3, #1
 800690a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	029a      	lsls	r2, r3, #10
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	e028      	b.n	8006968 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006916:	7c7b      	ldrb	r3, [r7, #17]
 8006918:	f003 030f 	and.w	r3, r3, #15
 800691c:	b2da      	uxtb	r2, r3
 800691e:	7dbb      	ldrb	r3, [r7, #22]
 8006920:	09db      	lsrs	r3, r3, #7
 8006922:	b2db      	uxtb	r3, r3
 8006924:	4413      	add	r3, r2
 8006926:	b2da      	uxtb	r2, r3
 8006928:	7d7b      	ldrb	r3, [r7, #21]
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	b2db      	uxtb	r3, r3
 800692e:	f003 0306 	and.w	r3, r3, #6
 8006932:	b2db      	uxtb	r3, r3
 8006934:	4413      	add	r3, r2
 8006936:	b2db      	uxtb	r3, r3
 8006938:	3302      	adds	r3, #2
 800693a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800693e:	7d3b      	ldrb	r3, [r7, #20]
 8006940:	099b      	lsrs	r3, r3, #6
 8006942:	b2db      	uxtb	r3, r3
 8006944:	461a      	mov	r2, r3
 8006946:	7cfb      	ldrb	r3, [r7, #19]
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	441a      	add	r2, r3
 800694c:	7cbb      	ldrb	r3, [r7, #18]
 800694e:	029b      	lsls	r3, r3, #10
 8006950:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006954:	4413      	add	r3, r2
 8006956:	3301      	adds	r3, #1
 8006958:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800695a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800695e:	3b09      	subs	r3, #9
 8006960:	69fa      	ldr	r2, [r7, #28]
 8006962:	409a      	lsls	r2, r3
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006968:	2300      	movs	r3, #0
 800696a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800696e:	e0ce      	b.n	8006b0e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006970:	4b71      	ldr	r3, [pc, #452]	; (8006b38 <USER_SPI_ioctl+0x2dc>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d031      	beq.n	80069e0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800697c:	2100      	movs	r1, #0
 800697e:	208d      	movs	r0, #141	; 0x8d
 8006980:	f7ff fd19 	bl	80063b6 <send_cmd>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	f040 80c3 	bne.w	8006b12 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800698c:	20ff      	movs	r0, #255	; 0xff
 800698e:	f7ff fc21 	bl	80061d4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006992:	f107 030c 	add.w	r3, r7, #12
 8006996:	2110      	movs	r1, #16
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff fcb1 	bl	8006300 <rcvr_datablock>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 80b6 	beq.w	8006b12 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80069a6:	2330      	movs	r3, #48	; 0x30
 80069a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80069ac:	e007      	b.n	80069be <USER_SPI_ioctl+0x162>
 80069ae:	20ff      	movs	r0, #255	; 0xff
 80069b0:	f7ff fc10 	bl	80061d4 <xchg_spi>
 80069b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80069b8:	3b01      	subs	r3, #1
 80069ba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80069be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1f3      	bne.n	80069ae <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80069c6:	7dbb      	ldrb	r3, [r7, #22]
 80069c8:	091b      	lsrs	r3, r3, #4
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	461a      	mov	r2, r3
 80069ce:	2310      	movs	r3, #16
 80069d0:	fa03 f202 	lsl.w	r2, r3, r2
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80069de:	e098      	b.n	8006b12 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80069e0:	2100      	movs	r1, #0
 80069e2:	2009      	movs	r0, #9
 80069e4:	f7ff fce7 	bl	80063b6 <send_cmd>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f040 8091 	bne.w	8006b12 <USER_SPI_ioctl+0x2b6>
 80069f0:	f107 030c 	add.w	r3, r7, #12
 80069f4:	2110      	movs	r1, #16
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7ff fc82 	bl	8006300 <rcvr_datablock>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 8087 	beq.w	8006b12 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006a04:	4b4c      	ldr	r3, [pc, #304]	; (8006b38 <USER_SPI_ioctl+0x2dc>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d012      	beq.n	8006a36 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006a10:	7dbb      	ldrb	r3, [r7, #22]
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006a18:	7dfa      	ldrb	r2, [r7, #23]
 8006a1a:	09d2      	lsrs	r2, r2, #7
 8006a1c:	b2d2      	uxtb	r2, r2
 8006a1e:	4413      	add	r3, r2
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	7e7b      	ldrb	r3, [r7, #25]
 8006a24:	099b      	lsrs	r3, r3, #6
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2e:	461a      	mov	r2, r3
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	e013      	b.n	8006a5e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006a36:	7dbb      	ldrb	r3, [r7, #22]
 8006a38:	109b      	asrs	r3, r3, #2
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f003 031f 	and.w	r3, r3, #31
 8006a40:	3301      	adds	r3, #1
 8006a42:	7dfa      	ldrb	r2, [r7, #23]
 8006a44:	00d2      	lsls	r2, r2, #3
 8006a46:	f002 0218 	and.w	r2, r2, #24
 8006a4a:	7df9      	ldrb	r1, [r7, #23]
 8006a4c:	0949      	lsrs	r1, r1, #5
 8006a4e:	b2c9      	uxtb	r1, r1
 8006a50:	440a      	add	r2, r1
 8006a52:	3201      	adds	r2, #1
 8006a54:	fb02 f303 	mul.w	r3, r2, r3
 8006a58:	461a      	mov	r2, r3
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006a64:	e055      	b.n	8006b12 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006a66:	4b34      	ldr	r3, [pc, #208]	; (8006b38 <USER_SPI_ioctl+0x2dc>)
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	f003 0306 	and.w	r3, r3, #6
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d051      	beq.n	8006b16 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006a72:	f107 020c 	add.w	r2, r7, #12
 8006a76:	79fb      	ldrb	r3, [r7, #7]
 8006a78:	210b      	movs	r1, #11
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff feee 	bl	800685c <USER_SPI_ioctl>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d149      	bne.n	8006b1a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006a86:	7b3b      	ldrb	r3, [r7, #12]
 8006a88:	099b      	lsrs	r3, r3, #6
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d104      	bne.n	8006a9a <USER_SPI_ioctl+0x23e>
 8006a90:	7dbb      	ldrb	r3, [r7, #22]
 8006a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d041      	beq.n	8006b1e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	623b      	str	r3, [r7, #32]
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8006aaa:	4b23      	ldr	r3, [pc, #140]	; (8006b38 <USER_SPI_ioctl+0x2dc>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d105      	bne.n	8006ac2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab8:	025b      	lsls	r3, r3, #9
 8006aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	025b      	lsls	r3, r3, #9
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006ac2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ac4:	2020      	movs	r0, #32
 8006ac6:	f7ff fc76 	bl	80063b6 <send_cmd>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d128      	bne.n	8006b22 <USER_SPI_ioctl+0x2c6>
 8006ad0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ad2:	2021      	movs	r0, #33	; 0x21
 8006ad4:	f7ff fc6f 	bl	80063b6 <send_cmd>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d121      	bne.n	8006b22 <USER_SPI_ioctl+0x2c6>
 8006ade:	2100      	movs	r1, #0
 8006ae0:	2026      	movs	r0, #38	; 0x26
 8006ae2:	f7ff fc68 	bl	80063b6 <send_cmd>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d11a      	bne.n	8006b22 <USER_SPI_ioctl+0x2c6>
 8006aec:	f247 5030 	movw	r0, #30000	; 0x7530
 8006af0:	f7ff fbb6 	bl	8006260 <wait_ready>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d013      	beq.n	8006b22 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006afa:	2300      	movs	r3, #0
 8006afc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006b00:	e00f      	b.n	8006b22 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006b02:	2304      	movs	r3, #4
 8006b04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006b08:	e00c      	b.n	8006b24 <USER_SPI_ioctl+0x2c8>
		break;
 8006b0a:	bf00      	nop
 8006b0c:	e00a      	b.n	8006b24 <USER_SPI_ioctl+0x2c8>
		break;
 8006b0e:	bf00      	nop
 8006b10:	e008      	b.n	8006b24 <USER_SPI_ioctl+0x2c8>
		break;
 8006b12:	bf00      	nop
 8006b14:	e006      	b.n	8006b24 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006b16:	bf00      	nop
 8006b18:	e004      	b.n	8006b24 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006b1a:	bf00      	nop
 8006b1c:	e002      	b.n	8006b24 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006b1e:	bf00      	nop
 8006b20:	e000      	b.n	8006b24 <USER_SPI_ioctl+0x2c8>
		break;
 8006b22:	bf00      	nop
	}

	despiselect();
 8006b24:	f7ff fbc0 	bl	80062a8 <despiselect>

	return res;
 8006b28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3730      	adds	r7, #48	; 0x30
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20000028 	.word	0x20000028
 8006b38:	200005c8 	.word	0x200005c8

08006b3c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	4603      	mov	r3, r0
 8006b44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006b46:	79fb      	ldrb	r3, [r7, #7]
 8006b48:	4a08      	ldr	r2, [pc, #32]	; (8006b6c <disk_status+0x30>)
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	79fa      	ldrb	r2, [r7, #7]
 8006b54:	4905      	ldr	r1, [pc, #20]	; (8006b6c <disk_status+0x30>)
 8006b56:	440a      	add	r2, r1
 8006b58:	7a12      	ldrb	r2, [r2, #8]
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	4798      	blx	r3
 8006b5e:	4603      	mov	r3, r0
 8006b60:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	200005fc 	.word	0x200005fc

08006b70 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	4603      	mov	r3, r0
 8006b78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006b7e:	79fb      	ldrb	r3, [r7, #7]
 8006b80:	4a0d      	ldr	r2, [pc, #52]	; (8006bb8 <disk_initialize+0x48>)
 8006b82:	5cd3      	ldrb	r3, [r2, r3]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d111      	bne.n	8006bac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006b88:	79fb      	ldrb	r3, [r7, #7]
 8006b8a:	4a0b      	ldr	r2, [pc, #44]	; (8006bb8 <disk_initialize+0x48>)
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006b90:	79fb      	ldrb	r3, [r7, #7]
 8006b92:	4a09      	ldr	r2, [pc, #36]	; (8006bb8 <disk_initialize+0x48>)
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	79fa      	ldrb	r2, [r7, #7]
 8006b9e:	4906      	ldr	r1, [pc, #24]	; (8006bb8 <disk_initialize+0x48>)
 8006ba0:	440a      	add	r2, r1
 8006ba2:	7a12      	ldrb	r2, [r2, #8]
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	4798      	blx	r3
 8006ba8:	4603      	mov	r3, r0
 8006baa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	200005fc 	.word	0x200005fc

08006bbc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006bbc:	b590      	push	{r4, r7, lr}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60b9      	str	r1, [r7, #8]
 8006bc4:	607a      	str	r2, [r7, #4]
 8006bc6:	603b      	str	r3, [r7, #0]
 8006bc8:	4603      	mov	r3, r0
 8006bca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	4a0a      	ldr	r2, [pc, #40]	; (8006bf8 <disk_read+0x3c>)
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	689c      	ldr	r4, [r3, #8]
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	4a07      	ldr	r2, [pc, #28]	; (8006bf8 <disk_read+0x3c>)
 8006bdc:	4413      	add	r3, r2
 8006bde:	7a18      	ldrb	r0, [r3, #8]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	68b9      	ldr	r1, [r7, #8]
 8006be6:	47a0      	blx	r4
 8006be8:	4603      	mov	r3, r0
 8006bea:	75fb      	strb	r3, [r7, #23]
  return res;
 8006bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	371c      	adds	r7, #28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd90      	pop	{r4, r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	200005fc 	.word	0x200005fc

08006bfc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006bfc:	b590      	push	{r4, r7, lr}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	607a      	str	r2, [r7, #4]
 8006c06:	603b      	str	r3, [r7, #0]
 8006c08:	4603      	mov	r3, r0
 8006c0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	4a0a      	ldr	r2, [pc, #40]	; (8006c38 <disk_write+0x3c>)
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	68dc      	ldr	r4, [r3, #12]
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	4a07      	ldr	r2, [pc, #28]	; (8006c38 <disk_write+0x3c>)
 8006c1c:	4413      	add	r3, r2
 8006c1e:	7a18      	ldrb	r0, [r3, #8]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	68b9      	ldr	r1, [r7, #8]
 8006c26:	47a0      	blx	r4
 8006c28:	4603      	mov	r3, r0
 8006c2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	371c      	adds	r7, #28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd90      	pop	{r4, r7, pc}
 8006c36:	bf00      	nop
 8006c38:	200005fc 	.word	0x200005fc

08006c3c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	4603      	mov	r3, r0
 8006c44:	603a      	str	r2, [r7, #0]
 8006c46:	71fb      	strb	r3, [r7, #7]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006c4c:	79fb      	ldrb	r3, [r7, #7]
 8006c4e:	4a09      	ldr	r2, [pc, #36]	; (8006c74 <disk_ioctl+0x38>)
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	79fa      	ldrb	r2, [r7, #7]
 8006c5a:	4906      	ldr	r1, [pc, #24]	; (8006c74 <disk_ioctl+0x38>)
 8006c5c:	440a      	add	r2, r1
 8006c5e:	7a10      	ldrb	r0, [r2, #8]
 8006c60:	79b9      	ldrb	r1, [r7, #6]
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	4798      	blx	r3
 8006c66:	4603      	mov	r3, r0
 8006c68:	73fb      	strb	r3, [r7, #15]
  return res;
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	200005fc 	.word	0x200005fc

08006c78 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3301      	adds	r3, #1
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006c88:	89fb      	ldrh	r3, [r7, #14]
 8006c8a:	021b      	lsls	r3, r3, #8
 8006c8c:	b21a      	sxth	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	b21b      	sxth	r3, r3
 8006c94:	4313      	orrs	r3, r2
 8006c96:	b21b      	sxth	r3, r3
 8006c98:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006c9a:	89fb      	ldrh	r3, [r7, #14]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	3303      	adds	r3, #3
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	021b      	lsls	r3, r3, #8
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	3202      	adds	r2, #2
 8006cc0:	7812      	ldrb	r2, [r2, #0]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	021b      	lsls	r3, r3, #8
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	3201      	adds	r2, #1
 8006cce:	7812      	ldrb	r2, [r2, #0]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	021b      	lsls	r3, r3, #8
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	7812      	ldrb	r2, [r2, #0]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]
	return rv;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	887a      	ldrh	r2, [r7, #2]
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	887b      	ldrh	r3, [r7, #2]
 8006d08:	0a1b      	lsrs	r3, r3, #8
 8006d0a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	607a      	str	r2, [r7, #4]
 8006d12:	887a      	ldrh	r2, [r7, #2]
 8006d14:	b2d2      	uxtb	r2, r2
 8006d16:	701a      	strb	r2, [r3, #0]
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	701a      	strb	r2, [r3, #0]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	0a1b      	lsrs	r3, r3, #8
 8006d3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	607a      	str	r2, [r7, #4]
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	b2d2      	uxtb	r2, r2
 8006d4a:	701a      	strb	r2, [r3, #0]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	0a1b      	lsrs	r3, r3, #8
 8006d50:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	607a      	str	r2, [r7, #4]
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	b2d2      	uxtb	r2, r2
 8006d5c:	701a      	strb	r2, [r3, #0]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	0a1b      	lsrs	r3, r3, #8
 8006d62:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	607a      	str	r2, [r7, #4]
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	b2d2      	uxtb	r2, r2
 8006d6e:	701a      	strb	r2, [r3, #0]
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00d      	beq.n	8006db2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	1c53      	adds	r3, r2, #1
 8006d9a:	613b      	str	r3, [r7, #16]
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	1c59      	adds	r1, r3, #1
 8006da0:	6179      	str	r1, [r7, #20]
 8006da2:	7812      	ldrb	r2, [r2, #0]
 8006da4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	607b      	str	r3, [r7, #4]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1f1      	bne.n	8006d96 <mem_cpy+0x1a>
	}
}
 8006db2:	bf00      	nop
 8006db4:	371c      	adds	r7, #28
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006dbe:	b480      	push	{r7}
 8006dc0:	b087      	sub	sp, #28
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	617a      	str	r2, [r7, #20]
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	607b      	str	r3, [r7, #4]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1f3      	bne.n	8006dce <mem_set+0x10>
}
 8006de6:	bf00      	nop
 8006de8:	bf00      	nop
 8006dea:	371c      	adds	r7, #28
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006df4:	b480      	push	{r7}
 8006df6:	b089      	sub	sp, #36	; 0x24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	61fb      	str	r3, [r7, #28]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	61fa      	str	r2, [r7, #28]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	4619      	mov	r1, r3
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	1c5a      	adds	r2, r3, #1
 8006e1a:	61ba      	str	r2, [r7, #24]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	1acb      	subs	r3, r1, r3
 8006e20:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	607b      	str	r3, [r7, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <mem_cmp+0x40>
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d0eb      	beq.n	8006e0c <mem_cmp+0x18>

	return r;
 8006e34:	697b      	ldr	r3, [r7, #20]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3724      	adds	r7, #36	; 0x24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006e4c:	e002      	b.n	8006e54 <chk_chr+0x12>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	3301      	adds	r3, #1
 8006e52:	607b      	str	r3, [r7, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d005      	beq.n	8006e68 <chk_chr+0x26>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	461a      	mov	r2, r3
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d1f2      	bne.n	8006e4e <chk_chr+0xc>
	return *str;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e82:	2300      	movs	r3, #0
 8006e84:	60bb      	str	r3, [r7, #8]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	60fb      	str	r3, [r7, #12]
 8006e8a:	e029      	b.n	8006ee0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006e8c:	4a27      	ldr	r2, [pc, #156]	; (8006f2c <chk_lock+0xb4>)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	011b      	lsls	r3, r3, #4
 8006e92:	4413      	add	r3, r2
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d01d      	beq.n	8006ed6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006e9a:	4a24      	ldr	r2, [pc, #144]	; (8006f2c <chk_lock+0xb4>)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	011b      	lsls	r3, r3, #4
 8006ea0:	4413      	add	r3, r2
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d116      	bne.n	8006eda <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006eac:	4a1f      	ldr	r2, [pc, #124]	; (8006f2c <chk_lock+0xb4>)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	011b      	lsls	r3, r3, #4
 8006eb2:	4413      	add	r3, r2
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d10c      	bne.n	8006eda <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006ec0:	4a1a      	ldr	r2, [pc, #104]	; (8006f2c <chk_lock+0xb4>)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	4413      	add	r3, r2
 8006ec8:	3308      	adds	r3, #8
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d102      	bne.n	8006eda <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006ed4:	e007      	b.n	8006ee6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3301      	adds	r3, #1
 8006ede:	60fb      	str	r3, [r7, #12]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d9d2      	bls.n	8006e8c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d109      	bne.n	8006f00 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d102      	bne.n	8006ef8 <chk_lock+0x80>
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d101      	bne.n	8006efc <chk_lock+0x84>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	e010      	b.n	8006f1e <chk_lock+0xa6>
 8006efc:	2312      	movs	r3, #18
 8006efe:	e00e      	b.n	8006f1e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d108      	bne.n	8006f18 <chk_lock+0xa0>
 8006f06:	4a09      	ldr	r2, [pc, #36]	; (8006f2c <chk_lock+0xb4>)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	011b      	lsls	r3, r3, #4
 8006f0c:	4413      	add	r3, r2
 8006f0e:	330c      	adds	r3, #12
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f16:	d101      	bne.n	8006f1c <chk_lock+0xa4>
 8006f18:	2310      	movs	r3, #16
 8006f1a:	e000      	b.n	8006f1e <chk_lock+0xa6>
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	200005dc 	.word	0x200005dc

08006f30 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f36:	2300      	movs	r3, #0
 8006f38:	607b      	str	r3, [r7, #4]
 8006f3a:	e002      	b.n	8006f42 <enq_lock+0x12>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	607b      	str	r3, [r7, #4]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d806      	bhi.n	8006f56 <enq_lock+0x26>
 8006f48:	4a09      	ldr	r2, [pc, #36]	; (8006f70 <enq_lock+0x40>)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	011b      	lsls	r3, r3, #4
 8006f4e:	4413      	add	r3, r2
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1f2      	bne.n	8006f3c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	bf14      	ite	ne
 8006f5c:	2301      	movne	r3, #1
 8006f5e:	2300      	moveq	r3, #0
 8006f60:	b2db      	uxtb	r3, r3
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	200005dc 	.word	0x200005dc

08006f74 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	e01f      	b.n	8006fc4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006f84:	4a41      	ldr	r2, [pc, #260]	; (800708c <inc_lock+0x118>)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	011b      	lsls	r3, r3, #4
 8006f8a:	4413      	add	r3, r2
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d113      	bne.n	8006fbe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006f96:	4a3d      	ldr	r2, [pc, #244]	; (800708c <inc_lock+0x118>)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	011b      	lsls	r3, r3, #4
 8006f9c:	4413      	add	r3, r2
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d109      	bne.n	8006fbe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006faa:	4a38      	ldr	r2, [pc, #224]	; (800708c <inc_lock+0x118>)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	011b      	lsls	r3, r3, #4
 8006fb0:	4413      	add	r3, r2
 8006fb2:	3308      	adds	r3, #8
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d006      	beq.n	8006fcc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d9dc      	bls.n	8006f84 <inc_lock+0x10>
 8006fca:	e000      	b.n	8006fce <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006fcc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d132      	bne.n	800703a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	e002      	b.n	8006fe0 <inc_lock+0x6c>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d806      	bhi.n	8006ff4 <inc_lock+0x80>
 8006fe6:	4a29      	ldr	r2, [pc, #164]	; (800708c <inc_lock+0x118>)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	011b      	lsls	r3, r3, #4
 8006fec:	4413      	add	r3, r2
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1f2      	bne.n	8006fda <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d101      	bne.n	8006ffe <inc_lock+0x8a>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	e040      	b.n	8007080 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	4922      	ldr	r1, [pc, #136]	; (800708c <inc_lock+0x118>)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	011b      	lsls	r3, r3, #4
 8007008:	440b      	add	r3, r1
 800700a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	491e      	ldr	r1, [pc, #120]	; (800708c <inc_lock+0x118>)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	011b      	lsls	r3, r3, #4
 8007016:	440b      	add	r3, r1
 8007018:	3304      	adds	r3, #4
 800701a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	695a      	ldr	r2, [r3, #20]
 8007020:	491a      	ldr	r1, [pc, #104]	; (800708c <inc_lock+0x118>)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	011b      	lsls	r3, r3, #4
 8007026:	440b      	add	r3, r1
 8007028:	3308      	adds	r3, #8
 800702a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800702c:	4a17      	ldr	r2, [pc, #92]	; (800708c <inc_lock+0x118>)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	011b      	lsls	r3, r3, #4
 8007032:	4413      	add	r3, r2
 8007034:	330c      	adds	r3, #12
 8007036:	2200      	movs	r2, #0
 8007038:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d009      	beq.n	8007054 <inc_lock+0xe0>
 8007040:	4a12      	ldr	r2, [pc, #72]	; (800708c <inc_lock+0x118>)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	4413      	add	r3, r2
 8007048:	330c      	adds	r3, #12
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <inc_lock+0xe0>
 8007050:	2300      	movs	r3, #0
 8007052:	e015      	b.n	8007080 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d108      	bne.n	800706c <inc_lock+0xf8>
 800705a:	4a0c      	ldr	r2, [pc, #48]	; (800708c <inc_lock+0x118>)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	011b      	lsls	r3, r3, #4
 8007060:	4413      	add	r3, r2
 8007062:	330c      	adds	r3, #12
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	3301      	adds	r3, #1
 8007068:	b29a      	uxth	r2, r3
 800706a:	e001      	b.n	8007070 <inc_lock+0xfc>
 800706c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007070:	4906      	ldr	r1, [pc, #24]	; (800708c <inc_lock+0x118>)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	011b      	lsls	r3, r3, #4
 8007076:	440b      	add	r3, r1
 8007078:	330c      	adds	r3, #12
 800707a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	3301      	adds	r3, #1
}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	200005dc 	.word	0x200005dc

08007090 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	3b01      	subs	r3, #1
 800709c:	607b      	str	r3, [r7, #4]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d825      	bhi.n	80070f0 <dec_lock+0x60>
		n = Files[i].ctr;
 80070a4:	4a17      	ldr	r2, [pc, #92]	; (8007104 <dec_lock+0x74>)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	011b      	lsls	r3, r3, #4
 80070aa:	4413      	add	r3, r2
 80070ac:	330c      	adds	r3, #12
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80070b2:	89fb      	ldrh	r3, [r7, #14]
 80070b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b8:	d101      	bne.n	80070be <dec_lock+0x2e>
 80070ba:	2300      	movs	r3, #0
 80070bc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80070be:	89fb      	ldrh	r3, [r7, #14]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <dec_lock+0x3a>
 80070c4:	89fb      	ldrh	r3, [r7, #14]
 80070c6:	3b01      	subs	r3, #1
 80070c8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80070ca:	4a0e      	ldr	r2, [pc, #56]	; (8007104 <dec_lock+0x74>)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	011b      	lsls	r3, r3, #4
 80070d0:	4413      	add	r3, r2
 80070d2:	330c      	adds	r3, #12
 80070d4:	89fa      	ldrh	r2, [r7, #14]
 80070d6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80070d8:	89fb      	ldrh	r3, [r7, #14]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d105      	bne.n	80070ea <dec_lock+0x5a>
 80070de:	4a09      	ldr	r2, [pc, #36]	; (8007104 <dec_lock+0x74>)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	011b      	lsls	r3, r3, #4
 80070e4:	4413      	add	r3, r2
 80070e6:	2200      	movs	r2, #0
 80070e8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	737b      	strb	r3, [r7, #13]
 80070ee:	e001      	b.n	80070f4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80070f0:	2302      	movs	r3, #2
 80070f2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80070f4:	7b7b      	ldrb	r3, [r7, #13]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	200005dc 	.word	0x200005dc

08007108 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007110:	2300      	movs	r3, #0
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	e010      	b.n	8007138 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007116:	4a0d      	ldr	r2, [pc, #52]	; (800714c <clear_lock+0x44>)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	4413      	add	r3, r2
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	429a      	cmp	r2, r3
 8007124:	d105      	bne.n	8007132 <clear_lock+0x2a>
 8007126:	4a09      	ldr	r2, [pc, #36]	; (800714c <clear_lock+0x44>)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	011b      	lsls	r3, r3, #4
 800712c:	4413      	add	r3, r2
 800712e:	2200      	movs	r2, #0
 8007130:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	3301      	adds	r3, #1
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d9eb      	bls.n	8007116 <clear_lock+0xe>
	}
}
 800713e:	bf00      	nop
 8007140:	bf00      	nop
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	200005dc 	.word	0x200005dc

08007150 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007158:	2300      	movs	r3, #0
 800715a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	78db      	ldrb	r3, [r3, #3]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d034      	beq.n	80071ce <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007168:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	7858      	ldrb	r0, [r3, #1]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007174:	2301      	movs	r3, #1
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	f7ff fd40 	bl	8006bfc <disk_write>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007182:	2301      	movs	r3, #1
 8007184:	73fb      	strb	r3, [r7, #15]
 8007186:	e022      	b.n	80071ce <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	1ad2      	subs	r2, r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	429a      	cmp	r2, r3
 800719c:	d217      	bcs.n	80071ce <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	789b      	ldrb	r3, [r3, #2]
 80071a2:	613b      	str	r3, [r7, #16]
 80071a4:	e010      	b.n	80071c8 <sync_window+0x78>
					wsect += fs->fsize;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	4413      	add	r3, r2
 80071ae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	7858      	ldrb	r0, [r3, #1]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071ba:	2301      	movs	r3, #1
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	f7ff fd1d 	bl	8006bfc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	3b01      	subs	r3, #1
 80071c6:	613b      	str	r3, [r7, #16]
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d8eb      	bhi.n	80071a6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3718      	adds	r7, #24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d01b      	beq.n	8007228 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7ff ffad 	bl	8007150 <sync_window>
 80071f6:	4603      	mov	r3, r0
 80071f8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d113      	bne.n	8007228 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	7858      	ldrb	r0, [r3, #1]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800720a:	2301      	movs	r3, #1
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	f7ff fcd5 	bl	8006bbc <disk_read>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d004      	beq.n	8007222 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007218:	f04f 33ff 	mov.w	r3, #4294967295
 800721c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800721e:	2301      	movs	r3, #1
 8007220:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007228:	7bfb      	ldrb	r3, [r7, #15]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
	...

08007234 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff ff87 	bl	8007150 <sync_window>
 8007242:	4603      	mov	r3, r0
 8007244:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007246:	7bfb      	ldrb	r3, [r7, #15]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d158      	bne.n	80072fe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	2b03      	cmp	r3, #3
 8007252:	d148      	bne.n	80072e6 <sync_fs+0xb2>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	791b      	ldrb	r3, [r3, #4]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d144      	bne.n	80072e6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	3330      	adds	r3, #48	; 0x30
 8007260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007264:	2100      	movs	r1, #0
 8007266:	4618      	mov	r0, r3
 8007268:	f7ff fda9 	bl	8006dbe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3330      	adds	r3, #48	; 0x30
 8007270:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007274:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff fd38 	bl	8006cee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	3330      	adds	r3, #48	; 0x30
 8007282:	4921      	ldr	r1, [pc, #132]	; (8007308 <sync_fs+0xd4>)
 8007284:	4618      	mov	r0, r3
 8007286:	f7ff fd4d 	bl	8006d24 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3330      	adds	r3, #48	; 0x30
 800728e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007292:	491e      	ldr	r1, [pc, #120]	; (800730c <sync_fs+0xd8>)
 8007294:	4618      	mov	r0, r3
 8007296:	f7ff fd45 	bl	8006d24 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	3330      	adds	r3, #48	; 0x30
 800729e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	4619      	mov	r1, r3
 80072a8:	4610      	mov	r0, r2
 80072aa:	f7ff fd3b 	bl	8006d24 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	3330      	adds	r3, #48	; 0x30
 80072b2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	4619      	mov	r1, r3
 80072bc:	4610      	mov	r0, r2
 80072be:	f7ff fd31 	bl	8006d24 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	69db      	ldr	r3, [r3, #28]
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	7858      	ldrb	r0, [r3, #1]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072da:	2301      	movs	r3, #1
 80072dc:	f7ff fc8e 	bl	8006bfc <disk_write>
			fs->fsi_flag = 0;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	785b      	ldrb	r3, [r3, #1]
 80072ea:	2200      	movs	r2, #0
 80072ec:	2100      	movs	r1, #0
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff fca4 	bl	8006c3c <disk_ioctl>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <sync_fs+0xca>
 80072fa:	2301      	movs	r3, #1
 80072fc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	41615252 	.word	0x41615252
 800730c:	61417272 	.word	0x61417272

08007310 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	3b02      	subs	r3, #2
 800731e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	3b02      	subs	r3, #2
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d301      	bcc.n	8007330 <clust2sect+0x20>
 800732c:	2300      	movs	r3, #0
 800732e:	e008      	b.n	8007342 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	895b      	ldrh	r3, [r3, #10]
 8007334:	461a      	mov	r2, r3
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	fb03 f202 	mul.w	r2, r3, r2
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007340:	4413      	add	r3, r2
}
 8007342:	4618      	mov	r0, r3
 8007344:	370c      	adds	r7, #12
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b086      	sub	sp, #24
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d904      	bls.n	800736e <get_fat+0x20>
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	683a      	ldr	r2, [r7, #0]
 800736a:	429a      	cmp	r2, r3
 800736c:	d302      	bcc.n	8007374 <get_fat+0x26>
		val = 1;	/* Internal error */
 800736e:	2301      	movs	r3, #1
 8007370:	617b      	str	r3, [r7, #20]
 8007372:	e08f      	b.n	8007494 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007374:	f04f 33ff 	mov.w	r3, #4294967295
 8007378:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b03      	cmp	r3, #3
 8007380:	d062      	beq.n	8007448 <get_fat+0xfa>
 8007382:	2b03      	cmp	r3, #3
 8007384:	dc7c      	bgt.n	8007480 <get_fat+0x132>
 8007386:	2b01      	cmp	r3, #1
 8007388:	d002      	beq.n	8007390 <get_fat+0x42>
 800738a:	2b02      	cmp	r3, #2
 800738c:	d042      	beq.n	8007414 <get_fat+0xc6>
 800738e:	e077      	b.n	8007480 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	085b      	lsrs	r3, r3, #1
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	4413      	add	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	6a1a      	ldr	r2, [r3, #32]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	0a5b      	lsrs	r3, r3, #9
 80073a6:	4413      	add	r3, r2
 80073a8:	4619      	mov	r1, r3
 80073aa:	6938      	ldr	r0, [r7, #16]
 80073ac:	f7ff ff14 	bl	80071d8 <move_window>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d167      	bne.n	8007486 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	60fa      	str	r2, [r7, #12]
 80073bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	4413      	add	r3, r2
 80073c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073c8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	6a1a      	ldr	r2, [r3, #32]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	0a5b      	lsrs	r3, r3, #9
 80073d2:	4413      	add	r3, r2
 80073d4:	4619      	mov	r1, r3
 80073d6:	6938      	ldr	r0, [r7, #16]
 80073d8:	f7ff fefe 	bl	80071d8 <move_window>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d153      	bne.n	800748a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	4413      	add	r3, r2
 80073ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073f0:	021b      	lsls	r3, r3, #8
 80073f2:	461a      	mov	r2, r3
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d002      	beq.n	800740a <get_fat+0xbc>
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	091b      	lsrs	r3, r3, #4
 8007408:	e002      	b.n	8007410 <get_fat+0xc2>
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007410:	617b      	str	r3, [r7, #20]
			break;
 8007412:	e03f      	b.n	8007494 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	6a1a      	ldr	r2, [r3, #32]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	0a1b      	lsrs	r3, r3, #8
 800741c:	4413      	add	r3, r2
 800741e:	4619      	mov	r1, r3
 8007420:	6938      	ldr	r0, [r7, #16]
 8007422:	f7ff fed9 	bl	80071d8 <move_window>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d130      	bne.n	800748e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	005b      	lsls	r3, r3, #1
 8007436:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800743a:	4413      	add	r3, r2
 800743c:	4618      	mov	r0, r3
 800743e:	f7ff fc1b 	bl	8006c78 <ld_word>
 8007442:	4603      	mov	r3, r0
 8007444:	617b      	str	r3, [r7, #20]
			break;
 8007446:	e025      	b.n	8007494 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	6a1a      	ldr	r2, [r3, #32]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	09db      	lsrs	r3, r3, #7
 8007450:	4413      	add	r3, r2
 8007452:	4619      	mov	r1, r3
 8007454:	6938      	ldr	r0, [r7, #16]
 8007456:	f7ff febf 	bl	80071d8 <move_window>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d118      	bne.n	8007492 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800746e:	4413      	add	r3, r2
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff fc19 	bl	8006ca8 <ld_dword>
 8007476:	4603      	mov	r3, r0
 8007478:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800747c:	617b      	str	r3, [r7, #20]
			break;
 800747e:	e009      	b.n	8007494 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007480:	2301      	movs	r3, #1
 8007482:	617b      	str	r3, [r7, #20]
 8007484:	e006      	b.n	8007494 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007486:	bf00      	nop
 8007488:	e004      	b.n	8007494 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800748a:	bf00      	nop
 800748c:	e002      	b.n	8007494 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800748e:	bf00      	nop
 8007490:	e000      	b.n	8007494 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007492:	bf00      	nop
		}
	}

	return val;
 8007494:	697b      	ldr	r3, [r7, #20]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800749e:	b590      	push	{r4, r7, lr}
 80074a0:	b089      	sub	sp, #36	; 0x24
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	60f8      	str	r0, [r7, #12]
 80074a6:	60b9      	str	r1, [r7, #8]
 80074a8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80074aa:	2302      	movs	r3, #2
 80074ac:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	f240 80d9 	bls.w	8007668 <put_fat+0x1ca>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	429a      	cmp	r2, r3
 80074be:	f080 80d3 	bcs.w	8007668 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	f000 8096 	beq.w	80075f8 <put_fat+0x15a>
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	f300 80cb 	bgt.w	8007668 <put_fat+0x1ca>
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d002      	beq.n	80074dc <put_fat+0x3e>
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d06e      	beq.n	80075b8 <put_fat+0x11a>
 80074da:	e0c5      	b.n	8007668 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	61bb      	str	r3, [r7, #24]
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	085b      	lsrs	r3, r3, #1
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	4413      	add	r3, r2
 80074e8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6a1a      	ldr	r2, [r3, #32]
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	0a5b      	lsrs	r3, r3, #9
 80074f2:	4413      	add	r3, r2
 80074f4:	4619      	mov	r1, r3
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f7ff fe6e 	bl	80071d8 <move_window>
 80074fc:	4603      	mov	r3, r0
 80074fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007500:	7ffb      	ldrb	r3, [r7, #31]
 8007502:	2b00      	cmp	r3, #0
 8007504:	f040 80a9 	bne.w	800765a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	1c59      	adds	r1, r3, #1
 8007512:	61b9      	str	r1, [r7, #24]
 8007514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007518:	4413      	add	r3, r2
 800751a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00d      	beq.n	8007542 <put_fat+0xa4>
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	b25b      	sxtb	r3, r3
 800752c:	f003 030f 	and.w	r3, r3, #15
 8007530:	b25a      	sxtb	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	b2db      	uxtb	r3, r3
 8007536:	011b      	lsls	r3, r3, #4
 8007538:	b25b      	sxtb	r3, r3
 800753a:	4313      	orrs	r3, r2
 800753c:	b25b      	sxtb	r3, r3
 800753e:	b2db      	uxtb	r3, r3
 8007540:	e001      	b.n	8007546 <put_fat+0xa8>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2201      	movs	r2, #1
 800754e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6a1a      	ldr	r2, [r3, #32]
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	0a5b      	lsrs	r3, r3, #9
 8007558:	4413      	add	r3, r2
 800755a:	4619      	mov	r1, r3
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f7ff fe3b 	bl	80071d8 <move_window>
 8007562:	4603      	mov	r3, r0
 8007564:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007566:	7ffb      	ldrb	r3, [r7, #31]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d178      	bne.n	800765e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007578:	4413      	add	r3, r2
 800757a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <put_fat+0xf0>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	091b      	lsrs	r3, r3, #4
 800758a:	b2db      	uxtb	r3, r3
 800758c:	e00e      	b.n	80075ac <put_fat+0x10e>
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	b25b      	sxtb	r3, r3
 8007594:	f023 030f 	bic.w	r3, r3, #15
 8007598:	b25a      	sxtb	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	0a1b      	lsrs	r3, r3, #8
 800759e:	b25b      	sxtb	r3, r3
 80075a0:	f003 030f 	and.w	r3, r3, #15
 80075a4:	b25b      	sxtb	r3, r3
 80075a6:	4313      	orrs	r3, r2
 80075a8:	b25b      	sxtb	r3, r3
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2201      	movs	r2, #1
 80075b4:	70da      	strb	r2, [r3, #3]
			break;
 80075b6:	e057      	b.n	8007668 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6a1a      	ldr	r2, [r3, #32]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	0a1b      	lsrs	r3, r3, #8
 80075c0:	4413      	add	r3, r2
 80075c2:	4619      	mov	r1, r3
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f7ff fe07 	bl	80071d8 <move_window>
 80075ca:	4603      	mov	r3, r0
 80075cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075ce:	7ffb      	ldrb	r3, [r7, #31]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d146      	bne.n	8007662 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80075e2:	4413      	add	r3, r2
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	b292      	uxth	r2, r2
 80075e8:	4611      	mov	r1, r2
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7ff fb7f 	bl	8006cee <st_word>
			fs->wflag = 1;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2201      	movs	r2, #1
 80075f4:	70da      	strb	r2, [r3, #3]
			break;
 80075f6:	e037      	b.n	8007668 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6a1a      	ldr	r2, [r3, #32]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	09db      	lsrs	r3, r3, #7
 8007600:	4413      	add	r3, r2
 8007602:	4619      	mov	r1, r3
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f7ff fde7 	bl	80071d8 <move_window>
 800760a:	4603      	mov	r3, r0
 800760c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800760e:	7ffb      	ldrb	r3, [r7, #31]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d128      	bne.n	8007666 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007628:	4413      	add	r3, r2
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff fb3c 	bl	8006ca8 <ld_dword>
 8007630:	4603      	mov	r3, r0
 8007632:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007636:	4323      	orrs	r3, r4
 8007638:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007648:	4413      	add	r3, r2
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	4618      	mov	r0, r3
 800764e:	f7ff fb69 	bl	8006d24 <st_dword>
			fs->wflag = 1;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2201      	movs	r2, #1
 8007656:	70da      	strb	r2, [r3, #3]
			break;
 8007658:	e006      	b.n	8007668 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800765a:	bf00      	nop
 800765c:	e004      	b.n	8007668 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800765e:	bf00      	nop
 8007660:	e002      	b.n	8007668 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007662:	bf00      	nop
 8007664:	e000      	b.n	8007668 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007666:	bf00      	nop
		}
	}
	return res;
 8007668:	7ffb      	ldrb	r3, [r7, #31]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3724      	adds	r7, #36	; 0x24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd90      	pop	{r4, r7, pc}

08007672 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b088      	sub	sp, #32
 8007676:	af00      	add	r7, sp, #0
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d904      	bls.n	8007698 <remove_chain+0x26>
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	429a      	cmp	r2, r3
 8007696:	d301      	bcc.n	800769c <remove_chain+0x2a>
 8007698:	2302      	movs	r3, #2
 800769a:	e04b      	b.n	8007734 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00c      	beq.n	80076bc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80076a2:	f04f 32ff 	mov.w	r2, #4294967295
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	69b8      	ldr	r0, [r7, #24]
 80076aa:	f7ff fef8 	bl	800749e <put_fat>
 80076ae:	4603      	mov	r3, r0
 80076b0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80076b2:	7ffb      	ldrb	r3, [r7, #31]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <remove_chain+0x4a>
 80076b8:	7ffb      	ldrb	r3, [r7, #31]
 80076ba:	e03b      	b.n	8007734 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80076bc:	68b9      	ldr	r1, [r7, #8]
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f7ff fe45 	bl	800734e <get_fat>
 80076c4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d031      	beq.n	8007730 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d101      	bne.n	80076d6 <remove_chain+0x64>
 80076d2:	2302      	movs	r3, #2
 80076d4:	e02e      	b.n	8007734 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076dc:	d101      	bne.n	80076e2 <remove_chain+0x70>
 80076de:	2301      	movs	r3, #1
 80076e0:	e028      	b.n	8007734 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80076e2:	2200      	movs	r2, #0
 80076e4:	68b9      	ldr	r1, [r7, #8]
 80076e6:	69b8      	ldr	r0, [r7, #24]
 80076e8:	f7ff fed9 	bl	800749e <put_fat>
 80076ec:	4603      	mov	r3, r0
 80076ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80076f0:	7ffb      	ldrb	r3, [r7, #31]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <remove_chain+0x88>
 80076f6:	7ffb      	ldrb	r3, [r7, #31]
 80076f8:	e01c      	b.n	8007734 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	691a      	ldr	r2, [r3, #16]
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	3b02      	subs	r3, #2
 8007704:	429a      	cmp	r2, r3
 8007706:	d20b      	bcs.n	8007720 <remove_chain+0xae>
			fs->free_clst++;
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	1c5a      	adds	r2, r3, #1
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	791b      	ldrb	r3, [r3, #4]
 8007716:	f043 0301 	orr.w	r3, r3, #1
 800771a:	b2da      	uxtb	r2, r3
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	429a      	cmp	r2, r3
 800772c:	d3c6      	bcc.n	80076bc <remove_chain+0x4a>
 800772e:	e000      	b.n	8007732 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007730:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3720      	adds	r7, #32
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10d      	bne.n	800776e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d004      	beq.n	8007768 <create_chain+0x2c>
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	429a      	cmp	r2, r3
 8007766:	d31b      	bcc.n	80077a0 <create_chain+0x64>
 8007768:	2301      	movs	r3, #1
 800776a:	61bb      	str	r3, [r7, #24]
 800776c:	e018      	b.n	80077a0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff fdec 	bl	800734e <get_fat>
 8007776:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d801      	bhi.n	8007782 <create_chain+0x46>
 800777e:	2301      	movs	r3, #1
 8007780:	e070      	b.n	8007864 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007788:	d101      	bne.n	800778e <create_chain+0x52>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	e06a      	b.n	8007864 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	429a      	cmp	r2, r3
 8007796:	d201      	bcs.n	800779c <create_chain+0x60>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	e063      	b.n	8007864 <create_chain+0x128>
		scl = clst;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	3301      	adds	r3, #1
 80077a8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	69fa      	ldr	r2, [r7, #28]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d307      	bcc.n	80077c4 <create_chain+0x88>
				ncl = 2;
 80077b4:	2302      	movs	r3, #2
 80077b6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80077b8:	69fa      	ldr	r2, [r7, #28]
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d901      	bls.n	80077c4 <create_chain+0x88>
 80077c0:	2300      	movs	r3, #0
 80077c2:	e04f      	b.n	8007864 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80077c4:	69f9      	ldr	r1, [r7, #28]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff fdc1 	bl	800734e <get_fat>
 80077cc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00e      	beq.n	80077f2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d003      	beq.n	80077e2 <create_chain+0xa6>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e0:	d101      	bne.n	80077e6 <create_chain+0xaa>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	e03e      	b.n	8007864 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80077e6:	69fa      	ldr	r2, [r7, #28]
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d1da      	bne.n	80077a4 <create_chain+0x68>
 80077ee:	2300      	movs	r3, #0
 80077f0:	e038      	b.n	8007864 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80077f2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80077f4:	f04f 32ff 	mov.w	r2, #4294967295
 80077f8:	69f9      	ldr	r1, [r7, #28]
 80077fa:	6938      	ldr	r0, [r7, #16]
 80077fc:	f7ff fe4f 	bl	800749e <put_fat>
 8007800:	4603      	mov	r3, r0
 8007802:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007804:	7dfb      	ldrb	r3, [r7, #23]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d109      	bne.n	800781e <create_chain+0xe2>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d006      	beq.n	800781e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007810:	69fa      	ldr	r2, [r7, #28]
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6938      	ldr	r0, [r7, #16]
 8007816:	f7ff fe42 	bl	800749e <put_fat>
 800781a:	4603      	mov	r3, r0
 800781c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800781e:	7dfb      	ldrb	r3, [r7, #23]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d116      	bne.n	8007852 <create_chain+0x116>
		fs->last_clst = ncl;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	69fa      	ldr	r2, [r7, #28]
 8007828:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	691a      	ldr	r2, [r3, #16]
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	3b02      	subs	r3, #2
 8007834:	429a      	cmp	r2, r3
 8007836:	d804      	bhi.n	8007842 <create_chain+0x106>
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	1e5a      	subs	r2, r3, #1
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	791b      	ldrb	r3, [r3, #4]
 8007846:	f043 0301 	orr.w	r3, r3, #1
 800784a:	b2da      	uxtb	r2, r3
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	711a      	strb	r2, [r3, #4]
 8007850:	e007      	b.n	8007862 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007852:	7dfb      	ldrb	r3, [r7, #23]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d102      	bne.n	800785e <create_chain+0x122>
 8007858:	f04f 33ff 	mov.w	r3, #4294967295
 800785c:	e000      	b.n	8007860 <create_chain+0x124>
 800785e:	2301      	movs	r3, #1
 8007860:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007862:	69fb      	ldr	r3, [r7, #28]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3720      	adds	r7, #32
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007880:	3304      	adds	r3, #4
 8007882:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	0a5b      	lsrs	r3, r3, #9
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	8952      	ldrh	r2, [r2, #10]
 800788c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007890:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	1d1a      	adds	r2, r3, #4
 8007896:	613a      	str	r2, [r7, #16]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <clmt_clust+0x3a>
 80078a2:	2300      	movs	r3, #0
 80078a4:	e010      	b.n	80078c8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d307      	bcc.n	80078be <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	617b      	str	r3, [r7, #20]
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	3304      	adds	r3, #4
 80078ba:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80078bc:	e7e9      	b.n	8007892 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80078be:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	4413      	add	r3, r2
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	371c      	adds	r7, #28
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078ea:	d204      	bcs.n	80078f6 <dir_sdi+0x22>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	f003 031f 	and.w	r3, r3, #31
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <dir_sdi+0x26>
		return FR_INT_ERR;
 80078f6:	2302      	movs	r3, #2
 80078f8:	e063      	b.n	80079c2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d106      	bne.n	800791a <dir_sdi+0x46>
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	2b02      	cmp	r3, #2
 8007912:	d902      	bls.n	800791a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10c      	bne.n	800793a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	095b      	lsrs	r3, r3, #5
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	8912      	ldrh	r2, [r2, #8]
 8007928:	4293      	cmp	r3, r2
 800792a:	d301      	bcc.n	8007930 <dir_sdi+0x5c>
 800792c:	2302      	movs	r3, #2
 800792e:	e048      	b.n	80079c2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	61da      	str	r2, [r3, #28]
 8007938:	e029      	b.n	800798e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	895b      	ldrh	r3, [r3, #10]
 800793e:	025b      	lsls	r3, r3, #9
 8007940:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007942:	e019      	b.n	8007978 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6979      	ldr	r1, [r7, #20]
 8007948:	4618      	mov	r0, r3
 800794a:	f7ff fd00 	bl	800734e <get_fat>
 800794e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007956:	d101      	bne.n	800795c <dir_sdi+0x88>
 8007958:	2301      	movs	r3, #1
 800795a:	e032      	b.n	80079c2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d904      	bls.n	800796c <dir_sdi+0x98>
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	429a      	cmp	r2, r3
 800796a:	d301      	bcc.n	8007970 <dir_sdi+0x9c>
 800796c:	2302      	movs	r3, #2
 800796e:	e028      	b.n	80079c2 <dir_sdi+0xee>
			ofs -= csz;
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007978:	683a      	ldr	r2, [r7, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	429a      	cmp	r2, r3
 800797e:	d2e1      	bcs.n	8007944 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007980:	6979      	ldr	r1, [r7, #20]
 8007982:	6938      	ldr	r0, [r7, #16]
 8007984:	f7ff fcc4 	bl	8007310 <clust2sect>
 8007988:	4602      	mov	r2, r0
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	69db      	ldr	r3, [r3, #28]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <dir_sdi+0xcc>
 800799c:	2302      	movs	r3, #2
 800799e:	e010      	b.n	80079c2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	69da      	ldr	r2, [r3, #28]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	0a5b      	lsrs	r3, r3, #9
 80079a8:	441a      	add	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ba:	441a      	add	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b086      	sub	sp, #24
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	3320      	adds	r3, #32
 80079e0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	69db      	ldr	r3, [r3, #28]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <dir_next+0x28>
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079f0:	d301      	bcc.n	80079f6 <dir_next+0x2c>
 80079f2:	2304      	movs	r3, #4
 80079f4:	e0aa      	b.n	8007b4c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f040 8098 	bne.w	8007b32 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	1c5a      	adds	r2, r3, #1
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10b      	bne.n	8007a2c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	095b      	lsrs	r3, r3, #5
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	8912      	ldrh	r2, [r2, #8]
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	f0c0 8088 	bcc.w	8007b32 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	61da      	str	r2, [r3, #28]
 8007a28:	2304      	movs	r3, #4
 8007a2a:	e08f      	b.n	8007b4c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	0a5b      	lsrs	r3, r3, #9
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	8952      	ldrh	r2, [r2, #10]
 8007a34:	3a01      	subs	r2, #1
 8007a36:	4013      	ands	r3, r2
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d17a      	bne.n	8007b32 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	4619      	mov	r1, r3
 8007a44:	4610      	mov	r0, r2
 8007a46:	f7ff fc82 	bl	800734e <get_fat>
 8007a4a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d801      	bhi.n	8007a56 <dir_next+0x8c>
 8007a52:	2302      	movs	r3, #2
 8007a54:	e07a      	b.n	8007b4c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5c:	d101      	bne.n	8007a62 <dir_next+0x98>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e074      	b.n	8007b4c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d358      	bcc.n	8007b1e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d104      	bne.n	8007a7c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	61da      	str	r2, [r3, #28]
 8007a78:	2304      	movs	r3, #4
 8007a7a:	e067      	b.n	8007b4c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	4619      	mov	r1, r3
 8007a84:	4610      	mov	r0, r2
 8007a86:	f7ff fe59 	bl	800773c <create_chain>
 8007a8a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <dir_next+0xcc>
 8007a92:	2307      	movs	r3, #7
 8007a94:	e05a      	b.n	8007b4c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d101      	bne.n	8007aa0 <dir_next+0xd6>
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	e055      	b.n	8007b4c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa6:	d101      	bne.n	8007aac <dir_next+0xe2>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e04f      	b.n	8007b4c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f7ff fb4f 	bl	8007150 <sync_window>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <dir_next+0xf2>
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e047      	b.n	8007b4c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3330      	adds	r3, #48	; 0x30
 8007ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7ff f979 	bl	8006dbe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007acc:	2300      	movs	r3, #0
 8007ace:	613b      	str	r3, [r7, #16]
 8007ad0:	6979      	ldr	r1, [r7, #20]
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f7ff fc1c 	bl	8007310 <clust2sect>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	62da      	str	r2, [r3, #44]	; 0x2c
 8007ade:	e012      	b.n	8007b06 <dir_next+0x13c>
						fs->wflag = 1;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f7ff fb32 	bl	8007150 <sync_window>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <dir_next+0x12c>
 8007af2:	2301      	movs	r3, #1
 8007af4:	e02a      	b.n	8007b4c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	3301      	adds	r3, #1
 8007afa:	613b      	str	r3, [r7, #16]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	1c5a      	adds	r2, r3, #1
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	895b      	ldrh	r3, [r3, #10]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d3e6      	bcc.n	8007ae0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	1ad2      	subs	r2, r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007b24:	6979      	ldr	r1, [r7, #20]
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f7ff fbf2 	bl	8007310 <clust2sect>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b44:	441a      	add	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007b64:	2100      	movs	r1, #0
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7ff feb4 	bl	80078d4 <dir_sdi>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d12b      	bne.n	8007bce <dir_alloc+0x7a>
		n = 0;
 8007b76:	2300      	movs	r3, #0
 8007b78:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	69db      	ldr	r3, [r3, #28]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f7ff fb29 	bl	80071d8 <move_window>
 8007b86:	4603      	mov	r3, r0
 8007b88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007b8a:	7dfb      	ldrb	r3, [r7, #23]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d11d      	bne.n	8007bcc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2be5      	cmp	r3, #229	; 0xe5
 8007b98:	d004      	beq.n	8007ba4 <dir_alloc+0x50>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d107      	bne.n	8007bb4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	613b      	str	r3, [r7, #16]
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d102      	bne.n	8007bb8 <dir_alloc+0x64>
 8007bb2:	e00c      	b.n	8007bce <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007bb8:	2101      	movs	r1, #1
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f7ff ff05 	bl	80079ca <dir_next>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007bc4:	7dfb      	ldrb	r3, [r7, #23]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0d7      	beq.n	8007b7a <dir_alloc+0x26>
 8007bca:	e000      	b.n	8007bce <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007bcc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007bce:	7dfb      	ldrb	r3, [r7, #23]
 8007bd0:	2b04      	cmp	r3, #4
 8007bd2:	d101      	bne.n	8007bd8 <dir_alloc+0x84>
 8007bd4:	2307      	movs	r3, #7
 8007bd6:	75fb      	strb	r3, [r7, #23]
	return res;
 8007bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	331a      	adds	r3, #26
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7ff f841 	bl	8006c78 <ld_word>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d109      	bne.n	8007c16 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	3314      	adds	r3, #20
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7ff f836 	bl	8006c78 <ld_word>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	041b      	lsls	r3, r3, #16
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007c16:	68fb      	ldr	r3, [r7, #12]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	331a      	adds	r3, #26
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	b292      	uxth	r2, r2
 8007c34:	4611      	mov	r1, r2
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7ff f859 	bl	8006cee <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	d109      	bne.n	8007c58 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	f103 0214 	add.w	r2, r3, #20
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	0c1b      	lsrs	r3, r3, #16
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	4619      	mov	r1, r3
 8007c52:	4610      	mov	r0, r2
 8007c54:	f7ff f84b 	bl	8006cee <st_word>
	}
}
 8007c58:	bf00      	nop
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007c6e:	2100      	movs	r1, #0
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7ff fe2f 	bl	80078d4 <dir_sdi>
 8007c76:	4603      	mov	r3, r0
 8007c78:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007c7a:	7dfb      	ldrb	r3, [r7, #23]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <dir_find+0x24>
 8007c80:	7dfb      	ldrb	r3, [r7, #23]
 8007c82:	e03e      	b.n	8007d02 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	69db      	ldr	r3, [r3, #28]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6938      	ldr	r0, [r7, #16]
 8007c8c:	f7ff faa4 	bl	80071d8 <move_window>
 8007c90:	4603      	mov	r3, r0
 8007c92:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007c94:	7dfb      	ldrb	r3, [r7, #23]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d12f      	bne.n	8007cfa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d102      	bne.n	8007cae <dir_find+0x4e>
 8007ca8:	2304      	movs	r3, #4
 8007caa:	75fb      	strb	r3, [r7, #23]
 8007cac:	e028      	b.n	8007d00 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	330b      	adds	r3, #11
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
 8007cc4:	330b      	adds	r3, #11
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	f003 0308 	and.w	r3, r3, #8
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10a      	bne.n	8007ce6 <dir_find+0x86>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a18      	ldr	r0, [r3, #32]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	3324      	adds	r3, #36	; 0x24
 8007cd8:	220b      	movs	r2, #11
 8007cda:	4619      	mov	r1, r3
 8007cdc:	f7ff f88a 	bl	8006df4 <mem_cmp>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00b      	beq.n	8007cfe <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7ff fe6e 	bl	80079ca <dir_next>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d0c5      	beq.n	8007c84 <dir_find+0x24>
 8007cf8:	e002      	b.n	8007d00 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007cfa:	bf00      	nop
 8007cfc:	e000      	b.n	8007d00 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007cfe:	bf00      	nop

	return res;
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007d18:	2101      	movs	r1, #1
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7ff ff1a 	bl	8007b54 <dir_alloc>
 8007d20:	4603      	mov	r3, r0
 8007d22:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d11c      	bne.n	8007d64 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	68b8      	ldr	r0, [r7, #8]
 8007d32:	f7ff fa51 	bl	80071d8 <move_window>
 8007d36:	4603      	mov	r3, r0
 8007d38:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007d3a:	7bfb      	ldrb	r3, [r7, #15]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d111      	bne.n	8007d64 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	2220      	movs	r2, #32
 8007d46:	2100      	movs	r1, #0
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff f838 	bl	8006dbe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a18      	ldr	r0, [r3, #32]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3324      	adds	r3, #36	; 0x24
 8007d56:	220b      	movs	r2, #11
 8007d58:	4619      	mov	r1, r3
 8007d5a:	f7ff f80f 	bl	8006d7c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2201      	movs	r2, #1
 8007d62:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
	...

08007d70 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b088      	sub	sp, #32
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	3324      	adds	r3, #36	; 0x24
 8007d84:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007d86:	220b      	movs	r2, #11
 8007d88:	2120      	movs	r1, #32
 8007d8a:	68b8      	ldr	r0, [r7, #8]
 8007d8c:	f7ff f817 	bl	8006dbe <mem_set>
	si = i = 0; ni = 8;
 8007d90:	2300      	movs	r3, #0
 8007d92:	613b      	str	r3, [r7, #16]
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	61fb      	str	r3, [r7, #28]
 8007d98:	2308      	movs	r3, #8
 8007d9a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	61fa      	str	r2, [r7, #28]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	4413      	add	r3, r2
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007daa:	7efb      	ldrb	r3, [r7, #27]
 8007dac:	2b20      	cmp	r3, #32
 8007dae:	d94e      	bls.n	8007e4e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007db0:	7efb      	ldrb	r3, [r7, #27]
 8007db2:	2b2f      	cmp	r3, #47	; 0x2f
 8007db4:	d006      	beq.n	8007dc4 <create_name+0x54>
 8007db6:	7efb      	ldrb	r3, [r7, #27]
 8007db8:	2b5c      	cmp	r3, #92	; 0x5c
 8007dba:	d110      	bne.n	8007dde <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007dbc:	e002      	b.n	8007dc4 <create_name+0x54>
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	61fb      	str	r3, [r7, #28]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	4413      	add	r3, r2
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	2b2f      	cmp	r3, #47	; 0x2f
 8007dce:	d0f6      	beq.n	8007dbe <create_name+0x4e>
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2b5c      	cmp	r3, #92	; 0x5c
 8007dda:	d0f0      	beq.n	8007dbe <create_name+0x4e>
			break;
 8007ddc:	e038      	b.n	8007e50 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007dde:	7efb      	ldrb	r3, [r7, #27]
 8007de0:	2b2e      	cmp	r3, #46	; 0x2e
 8007de2:	d003      	beq.n	8007dec <create_name+0x7c>
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d30c      	bcc.n	8007e06 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	2b0b      	cmp	r3, #11
 8007df0:	d002      	beq.n	8007df8 <create_name+0x88>
 8007df2:	7efb      	ldrb	r3, [r7, #27]
 8007df4:	2b2e      	cmp	r3, #46	; 0x2e
 8007df6:	d001      	beq.n	8007dfc <create_name+0x8c>
 8007df8:	2306      	movs	r3, #6
 8007dfa:	e044      	b.n	8007e86 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007dfc:	2308      	movs	r3, #8
 8007dfe:	613b      	str	r3, [r7, #16]
 8007e00:	230b      	movs	r3, #11
 8007e02:	617b      	str	r3, [r7, #20]
			continue;
 8007e04:	e022      	b.n	8007e4c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007e06:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	da04      	bge.n	8007e18 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007e0e:	7efb      	ldrb	r3, [r7, #27]
 8007e10:	3b80      	subs	r3, #128	; 0x80
 8007e12:	4a1f      	ldr	r2, [pc, #124]	; (8007e90 <create_name+0x120>)
 8007e14:	5cd3      	ldrb	r3, [r2, r3]
 8007e16:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007e18:	7efb      	ldrb	r3, [r7, #27]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	481d      	ldr	r0, [pc, #116]	; (8007e94 <create_name+0x124>)
 8007e1e:	f7ff f810 	bl	8006e42 <chk_chr>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <create_name+0xbc>
 8007e28:	2306      	movs	r3, #6
 8007e2a:	e02c      	b.n	8007e86 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007e2c:	7efb      	ldrb	r3, [r7, #27]
 8007e2e:	2b60      	cmp	r3, #96	; 0x60
 8007e30:	d905      	bls.n	8007e3e <create_name+0xce>
 8007e32:	7efb      	ldrb	r3, [r7, #27]
 8007e34:	2b7a      	cmp	r3, #122	; 0x7a
 8007e36:	d802      	bhi.n	8007e3e <create_name+0xce>
 8007e38:	7efb      	ldrb	r3, [r7, #27]
 8007e3a:	3b20      	subs	r3, #32
 8007e3c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	1c5a      	adds	r2, r3, #1
 8007e42:	613a      	str	r2, [r7, #16]
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	4413      	add	r3, r2
 8007e48:	7efa      	ldrb	r2, [r7, #27]
 8007e4a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007e4c:	e7a6      	b.n	8007d9c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007e4e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	441a      	add	r2, r3
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <create_name+0xf4>
 8007e60:	2306      	movs	r3, #6
 8007e62:	e010      	b.n	8007e86 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2be5      	cmp	r3, #229	; 0xe5
 8007e6a:	d102      	bne.n	8007e72 <create_name+0x102>
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	2205      	movs	r2, #5
 8007e70:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007e72:	7efb      	ldrb	r3, [r7, #27]
 8007e74:	2b20      	cmp	r3, #32
 8007e76:	d801      	bhi.n	8007e7c <create_name+0x10c>
 8007e78:	2204      	movs	r2, #4
 8007e7a:	e000      	b.n	8007e7e <create_name+0x10e>
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	330b      	adds	r3, #11
 8007e82:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007e84:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3720      	adds	r7, #32
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	0800c3cc 	.word	0x0800c3cc
 8007e94:	0800c340 	.word	0x0800c340

08007e98 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007eac:	e002      	b.n	8007eb4 <follow_path+0x1c>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	603b      	str	r3, [r7, #0]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	2b2f      	cmp	r3, #47	; 0x2f
 8007eba:	d0f8      	beq.n	8007eae <follow_path+0x16>
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	2b5c      	cmp	r3, #92	; 0x5c
 8007ec2:	d0f4      	beq.n	8007eae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	2b1f      	cmp	r3, #31
 8007ed0:	d80a      	bhi.n	8007ee8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2280      	movs	r2, #128	; 0x80
 8007ed6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007eda:	2100      	movs	r1, #0
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7ff fcf9 	bl	80078d4 <dir_sdi>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	75fb      	strb	r3, [r7, #23]
 8007ee6:	e043      	b.n	8007f70 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ee8:	463b      	mov	r3, r7
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f7ff ff3f 	bl	8007d70 <create_name>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d134      	bne.n	8007f66 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7ff feaf 	bl	8007c60 <dir_find>
 8007f02:	4603      	mov	r3, r0
 8007f04:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007f0c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00a      	beq.n	8007f2a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
 8007f16:	2b04      	cmp	r3, #4
 8007f18:	d127      	bne.n	8007f6a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007f1a:	7afb      	ldrb	r3, [r7, #11]
 8007f1c:	f003 0304 	and.w	r3, r3, #4
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d122      	bne.n	8007f6a <follow_path+0xd2>
 8007f24:	2305      	movs	r3, #5
 8007f26:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007f28:	e01f      	b.n	8007f6a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f2a:	7afb      	ldrb	r3, [r7, #11]
 8007f2c:	f003 0304 	and.w	r3, r3, #4
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d11c      	bne.n	8007f6e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	799b      	ldrb	r3, [r3, #6]
 8007f38:	f003 0310 	and.w	r3, r3, #16
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d102      	bne.n	8007f46 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007f40:	2305      	movs	r3, #5
 8007f42:	75fb      	strb	r3, [r7, #23]
 8007f44:	e014      	b.n	8007f70 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f54:	4413      	add	r3, r2
 8007f56:	4619      	mov	r1, r3
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f7ff fe42 	bl	8007be2 <ld_clust>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f64:	e7c0      	b.n	8007ee8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007f66:	bf00      	nop
 8007f68:	e002      	b.n	8007f70 <follow_path+0xd8>
				break;
 8007f6a:	bf00      	nop
 8007f6c:	e000      	b.n	8007f70 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f6e:	bf00      	nop
			}
		}
	}

	return res;
 8007f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b087      	sub	sp, #28
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007f82:	f04f 33ff 	mov.w	r3, #4294967295
 8007f86:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d031      	beq.n	8007ff4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	617b      	str	r3, [r7, #20]
 8007f96:	e002      	b.n	8007f9e <get_ldnumber+0x24>
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	617b      	str	r3, [r7, #20]
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	2b20      	cmp	r3, #32
 8007fa4:	d903      	bls.n	8007fae <get_ldnumber+0x34>
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	2b3a      	cmp	r3, #58	; 0x3a
 8007fac:	d1f4      	bne.n	8007f98 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	2b3a      	cmp	r3, #58	; 0x3a
 8007fb4:	d11c      	bne.n	8007ff0 <get_ldnumber+0x76>
			tp = *path;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	1c5a      	adds	r2, r3, #1
 8007fc0:	60fa      	str	r2, [r7, #12]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	3b30      	subs	r3, #48	; 0x30
 8007fc6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	2b09      	cmp	r3, #9
 8007fcc:	d80e      	bhi.n	8007fec <get_ldnumber+0x72>
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d10a      	bne.n	8007fec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d107      	bne.n	8007fec <get_ldnumber+0x72>
					vol = (int)i;
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	617b      	str	r3, [r7, #20]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	697a      	ldr	r2, [r7, #20]
 8007fea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	e002      	b.n	8007ff6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007ff4:	693b      	ldr	r3, [r7, #16]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	371c      	adds	r7, #28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
	...

08008004 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	70da      	strb	r2, [r3, #3]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f04f 32ff 	mov.w	r2, #4294967295
 800801a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff f8da 	bl	80071d8 <move_window>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <check_fs+0x2a>
 800802a:	2304      	movs	r3, #4
 800802c:	e038      	b.n	80080a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	3330      	adds	r3, #48	; 0x30
 8008032:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008036:	4618      	mov	r0, r3
 8008038:	f7fe fe1e 	bl	8006c78 <ld_word>
 800803c:	4603      	mov	r3, r0
 800803e:	461a      	mov	r2, r3
 8008040:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008044:	429a      	cmp	r2, r3
 8008046:	d001      	beq.n	800804c <check_fs+0x48>
 8008048:	2303      	movs	r3, #3
 800804a:	e029      	b.n	80080a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008052:	2be9      	cmp	r3, #233	; 0xe9
 8008054:	d009      	beq.n	800806a <check_fs+0x66>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800805c:	2beb      	cmp	r3, #235	; 0xeb
 800805e:	d11e      	bne.n	800809e <check_fs+0x9a>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008066:	2b90      	cmp	r3, #144	; 0x90
 8008068:	d119      	bne.n	800809e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	3330      	adds	r3, #48	; 0x30
 800806e:	3336      	adds	r3, #54	; 0x36
 8008070:	4618      	mov	r0, r3
 8008072:	f7fe fe19 	bl	8006ca8 <ld_dword>
 8008076:	4603      	mov	r3, r0
 8008078:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800807c:	4a0a      	ldr	r2, [pc, #40]	; (80080a8 <check_fs+0xa4>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d101      	bne.n	8008086 <check_fs+0x82>
 8008082:	2300      	movs	r3, #0
 8008084:	e00c      	b.n	80080a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	3330      	adds	r3, #48	; 0x30
 800808a:	3352      	adds	r3, #82	; 0x52
 800808c:	4618      	mov	r0, r3
 800808e:	f7fe fe0b 	bl	8006ca8 <ld_dword>
 8008092:	4603      	mov	r3, r0
 8008094:	4a05      	ldr	r2, [pc, #20]	; (80080ac <check_fs+0xa8>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d101      	bne.n	800809e <check_fs+0x9a>
 800809a:	2300      	movs	r3, #0
 800809c:	e000      	b.n	80080a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800809e:	2302      	movs	r3, #2
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	00544146 	.word	0x00544146
 80080ac:	33544146 	.word	0x33544146

080080b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b096      	sub	sp, #88	; 0x58
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	4613      	mov	r3, r2
 80080bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2200      	movs	r2, #0
 80080c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f7ff ff58 	bl	8007f7a <get_ldnumber>
 80080ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80080cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	da01      	bge.n	80080d6 <find_volume+0x26>
 80080d2:	230b      	movs	r3, #11
 80080d4:	e22d      	b.n	8008532 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80080d6:	4aa1      	ldr	r2, [pc, #644]	; (800835c <find_volume+0x2ac>)
 80080d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80080e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <find_volume+0x3a>
 80080e6:	230c      	movs	r3, #12
 80080e8:	e223      	b.n	8008532 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80080f0:	79fb      	ldrb	r3, [r7, #7]
 80080f2:	f023 0301 	bic.w	r3, r3, #1
 80080f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80080f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d01a      	beq.n	8008136 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	785b      	ldrb	r3, [r3, #1]
 8008104:	4618      	mov	r0, r3
 8008106:	f7fe fd19 	bl	8006b3c <disk_status>
 800810a:	4603      	mov	r3, r0
 800810c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008110:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10c      	bne.n	8008136 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800811c:	79fb      	ldrb	r3, [r7, #7]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d007      	beq.n	8008132 <find_volume+0x82>
 8008122:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008126:	f003 0304 	and.w	r3, r3, #4
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800812e:	230a      	movs	r3, #10
 8008130:	e1ff      	b.n	8008532 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008132:	2300      	movs	r3, #0
 8008134:	e1fd      	b.n	8008532 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008138:	2200      	movs	r2, #0
 800813a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800813c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800813e:	b2da      	uxtb	r2, r3
 8008140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008142:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008146:	785b      	ldrb	r3, [r3, #1]
 8008148:	4618      	mov	r0, r3
 800814a:	f7fe fd11 	bl	8006b70 <disk_initialize>
 800814e:	4603      	mov	r3, r0
 8008150:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008154:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008160:	2303      	movs	r3, #3
 8008162:	e1e6      	b.n	8008532 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008164:	79fb      	ldrb	r3, [r7, #7]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d007      	beq.n	800817a <find_volume+0xca>
 800816a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800816e:	f003 0304 	and.w	r3, r3, #4
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008176:	230a      	movs	r3, #10
 8008178:	e1db      	b.n	8008532 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800817a:	2300      	movs	r3, #0
 800817c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800817e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008180:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008182:	f7ff ff3f 	bl	8008004 <check_fs>
 8008186:	4603      	mov	r3, r0
 8008188:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800818c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008190:	2b02      	cmp	r3, #2
 8008192:	d149      	bne.n	8008228 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008194:	2300      	movs	r3, #0
 8008196:	643b      	str	r3, [r7, #64]	; 0x40
 8008198:	e01e      	b.n	80081d8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800819a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80081a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081a2:	011b      	lsls	r3, r3, #4
 80081a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80081a8:	4413      	add	r3, r2
 80081aa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	3304      	adds	r3, #4
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d006      	beq.n	80081c4 <find_volume+0x114>
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	3308      	adds	r3, #8
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fe fd74 	bl	8006ca8 <ld_dword>
 80081c0:	4602      	mov	r2, r0
 80081c2:	e000      	b.n	80081c6 <find_volume+0x116>
 80081c4:	2200      	movs	r2, #0
 80081c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	3358      	adds	r3, #88	; 0x58
 80081cc:	443b      	add	r3, r7
 80081ce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80081d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081d4:	3301      	adds	r3, #1
 80081d6:	643b      	str	r3, [r7, #64]	; 0x40
 80081d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d9dd      	bls.n	800819a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80081de:	2300      	movs	r3, #0
 80081e0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80081e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <find_volume+0x13e>
 80081e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081ea:	3b01      	subs	r3, #1
 80081ec:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80081ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	3358      	adds	r3, #88	; 0x58
 80081f4:	443b      	add	r3, r7
 80081f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80081fa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80081fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d005      	beq.n	800820e <find_volume+0x15e>
 8008202:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008204:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008206:	f7ff fefd 	bl	8008004 <check_fs>
 800820a:	4603      	mov	r3, r0
 800820c:	e000      	b.n	8008210 <find_volume+0x160>
 800820e:	2303      	movs	r3, #3
 8008210:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008214:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008218:	2b01      	cmp	r3, #1
 800821a:	d905      	bls.n	8008228 <find_volume+0x178>
 800821c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800821e:	3301      	adds	r3, #1
 8008220:	643b      	str	r3, [r7, #64]	; 0x40
 8008222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008224:	2b03      	cmp	r3, #3
 8008226:	d9e2      	bls.n	80081ee <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008228:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800822c:	2b04      	cmp	r3, #4
 800822e:	d101      	bne.n	8008234 <find_volume+0x184>
 8008230:	2301      	movs	r3, #1
 8008232:	e17e      	b.n	8008532 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008234:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008238:	2b01      	cmp	r3, #1
 800823a:	d901      	bls.n	8008240 <find_volume+0x190>
 800823c:	230d      	movs	r3, #13
 800823e:	e178      	b.n	8008532 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008242:	3330      	adds	r3, #48	; 0x30
 8008244:	330b      	adds	r3, #11
 8008246:	4618      	mov	r0, r3
 8008248:	f7fe fd16 	bl	8006c78 <ld_word>
 800824c:	4603      	mov	r3, r0
 800824e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008252:	d001      	beq.n	8008258 <find_volume+0x1a8>
 8008254:	230d      	movs	r3, #13
 8008256:	e16c      	b.n	8008532 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825a:	3330      	adds	r3, #48	; 0x30
 800825c:	3316      	adds	r3, #22
 800825e:	4618      	mov	r0, r3
 8008260:	f7fe fd0a 	bl	8006c78 <ld_word>
 8008264:	4603      	mov	r3, r0
 8008266:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800826a:	2b00      	cmp	r3, #0
 800826c:	d106      	bne.n	800827c <find_volume+0x1cc>
 800826e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008270:	3330      	adds	r3, #48	; 0x30
 8008272:	3324      	adds	r3, #36	; 0x24
 8008274:	4618      	mov	r0, r3
 8008276:	f7fe fd17 	bl	8006ca8 <ld_dword>
 800827a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800827c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008280:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008284:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800828c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828e:	789b      	ldrb	r3, [r3, #2]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d005      	beq.n	80082a0 <find_volume+0x1f0>
 8008294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008296:	789b      	ldrb	r3, [r3, #2]
 8008298:	2b02      	cmp	r3, #2
 800829a:	d001      	beq.n	80082a0 <find_volume+0x1f0>
 800829c:	230d      	movs	r3, #13
 800829e:	e148      	b.n	8008532 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80082a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a2:	789b      	ldrb	r3, [r3, #2]
 80082a4:	461a      	mov	r2, r3
 80082a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a8:	fb02 f303 	mul.w	r3, r2, r3
 80082ac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80082ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	895b      	ldrh	r3, [r3, #10]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d008      	beq.n	80082d4 <find_volume+0x224>
 80082c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c4:	895b      	ldrh	r3, [r3, #10]
 80082c6:	461a      	mov	r2, r3
 80082c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ca:	895b      	ldrh	r3, [r3, #10]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	4013      	ands	r3, r2
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d001      	beq.n	80082d8 <find_volume+0x228>
 80082d4:	230d      	movs	r3, #13
 80082d6:	e12c      	b.n	8008532 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80082d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082da:	3330      	adds	r3, #48	; 0x30
 80082dc:	3311      	adds	r3, #17
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fe fcca 	bl	8006c78 <ld_word>
 80082e4:	4603      	mov	r3, r0
 80082e6:	461a      	mov	r2, r3
 80082e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80082ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ee:	891b      	ldrh	r3, [r3, #8]
 80082f0:	f003 030f 	and.w	r3, r3, #15
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <find_volume+0x24e>
 80082fa:	230d      	movs	r3, #13
 80082fc:	e119      	b.n	8008532 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80082fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008300:	3330      	adds	r3, #48	; 0x30
 8008302:	3313      	adds	r3, #19
 8008304:	4618      	mov	r0, r3
 8008306:	f7fe fcb7 	bl	8006c78 <ld_word>
 800830a:	4603      	mov	r3, r0
 800830c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800830e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008310:	2b00      	cmp	r3, #0
 8008312:	d106      	bne.n	8008322 <find_volume+0x272>
 8008314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008316:	3330      	adds	r3, #48	; 0x30
 8008318:	3320      	adds	r3, #32
 800831a:	4618      	mov	r0, r3
 800831c:	f7fe fcc4 	bl	8006ca8 <ld_dword>
 8008320:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008324:	3330      	adds	r3, #48	; 0x30
 8008326:	330e      	adds	r3, #14
 8008328:	4618      	mov	r0, r3
 800832a:	f7fe fca5 	bl	8006c78 <ld_word>
 800832e:	4603      	mov	r3, r0
 8008330:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008332:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008334:	2b00      	cmp	r3, #0
 8008336:	d101      	bne.n	800833c <find_volume+0x28c>
 8008338:	230d      	movs	r3, #13
 800833a:	e0fa      	b.n	8008532 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800833c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800833e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008340:	4413      	add	r3, r2
 8008342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008344:	8912      	ldrh	r2, [r2, #8]
 8008346:	0912      	lsrs	r2, r2, #4
 8008348:	b292      	uxth	r2, r2
 800834a:	4413      	add	r3, r2
 800834c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800834e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008352:	429a      	cmp	r2, r3
 8008354:	d204      	bcs.n	8008360 <find_volume+0x2b0>
 8008356:	230d      	movs	r3, #13
 8008358:	e0eb      	b.n	8008532 <find_volume+0x482>
 800835a:	bf00      	nop
 800835c:	200005d4 	.word	0x200005d4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008368:	8952      	ldrh	r2, [r2, #10]
 800836a:	fbb3 f3f2 	udiv	r3, r3, r2
 800836e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	2b00      	cmp	r3, #0
 8008374:	d101      	bne.n	800837a <find_volume+0x2ca>
 8008376:	230d      	movs	r3, #13
 8008378:	e0db      	b.n	8008532 <find_volume+0x482>
		fmt = FS_FAT32;
 800837a:	2303      	movs	r3, #3
 800837c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008386:	4293      	cmp	r3, r2
 8008388:	d802      	bhi.n	8008390 <find_volume+0x2e0>
 800838a:	2302      	movs	r3, #2
 800838c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008392:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008396:	4293      	cmp	r3, r2
 8008398:	d802      	bhi.n	80083a0 <find_volume+0x2f0>
 800839a:	2301      	movs	r3, #1
 800839c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	1c9a      	adds	r2, r3, #2
 80083a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80083a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083ac:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80083ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80083b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083b2:	441a      	add	r2, r3
 80083b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80083b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083bc:	441a      	add	r2, r3
 80083be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80083c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d11e      	bne.n	8008408 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083cc:	3330      	adds	r3, #48	; 0x30
 80083ce:	332a      	adds	r3, #42	; 0x2a
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fe fc51 	bl	8006c78 <ld_word>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d001      	beq.n	80083e0 <find_volume+0x330>
 80083dc:	230d      	movs	r3, #13
 80083de:	e0a8      	b.n	8008532 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80083e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e2:	891b      	ldrh	r3, [r3, #8]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d001      	beq.n	80083ec <find_volume+0x33c>
 80083e8:	230d      	movs	r3, #13
 80083ea:	e0a2      	b.n	8008532 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80083ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ee:	3330      	adds	r3, #48	; 0x30
 80083f0:	332c      	adds	r3, #44	; 0x2c
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fe fc58 	bl	8006ca8 <ld_dword>
 80083f8:	4602      	mov	r2, r0
 80083fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80083fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	647b      	str	r3, [r7, #68]	; 0x44
 8008406:	e01f      	b.n	8008448 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840a:	891b      	ldrh	r3, [r3, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <find_volume+0x364>
 8008410:	230d      	movs	r3, #13
 8008412:	e08e      	b.n	8008532 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008416:	6a1a      	ldr	r2, [r3, #32]
 8008418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800841a:	441a      	add	r2, r3
 800841c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008420:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008424:	2b02      	cmp	r3, #2
 8008426:	d103      	bne.n	8008430 <find_volume+0x380>
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	005b      	lsls	r3, r3, #1
 800842e:	e00a      	b.n	8008446 <find_volume+0x396>
 8008430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008432:	695a      	ldr	r2, [r3, #20]
 8008434:	4613      	mov	r3, r2
 8008436:	005b      	lsls	r3, r3, #1
 8008438:	4413      	add	r3, r2
 800843a:	085a      	lsrs	r2, r3, #1
 800843c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843e:	695b      	ldr	r3, [r3, #20]
 8008440:	f003 0301 	and.w	r3, r3, #1
 8008444:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008446:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844a:	699a      	ldr	r2, [r3, #24]
 800844c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800844e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008452:	0a5b      	lsrs	r3, r3, #9
 8008454:	429a      	cmp	r2, r3
 8008456:	d201      	bcs.n	800845c <find_volume+0x3ac>
 8008458:	230d      	movs	r3, #13
 800845a:	e06a      	b.n	8008532 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800845c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845e:	f04f 32ff 	mov.w	r2, #4294967295
 8008462:	611a      	str	r2, [r3, #16]
 8008464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008466:	691a      	ldr	r2, [r3, #16]
 8008468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800846c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846e:	2280      	movs	r2, #128	; 0x80
 8008470:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008472:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008476:	2b03      	cmp	r3, #3
 8008478:	d149      	bne.n	800850e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800847a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847c:	3330      	adds	r3, #48	; 0x30
 800847e:	3330      	adds	r3, #48	; 0x30
 8008480:	4618      	mov	r0, r3
 8008482:	f7fe fbf9 	bl	8006c78 <ld_word>
 8008486:	4603      	mov	r3, r0
 8008488:	2b01      	cmp	r3, #1
 800848a:	d140      	bne.n	800850e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800848c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800848e:	3301      	adds	r3, #1
 8008490:	4619      	mov	r1, r3
 8008492:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008494:	f7fe fea0 	bl	80071d8 <move_window>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d137      	bne.n	800850e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800849e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a0:	2200      	movs	r2, #0
 80084a2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80084a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a6:	3330      	adds	r3, #48	; 0x30
 80084a8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7fe fbe3 	bl	8006c78 <ld_word>
 80084b2:	4603      	mov	r3, r0
 80084b4:	461a      	mov	r2, r3
 80084b6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d127      	bne.n	800850e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	3330      	adds	r3, #48	; 0x30
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fe fbf0 	bl	8006ca8 <ld_dword>
 80084c8:	4603      	mov	r3, r0
 80084ca:	4a1c      	ldr	r2, [pc, #112]	; (800853c <find_volume+0x48c>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d11e      	bne.n	800850e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80084d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d2:	3330      	adds	r3, #48	; 0x30
 80084d4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fe fbe5 	bl	8006ca8 <ld_dword>
 80084de:	4603      	mov	r3, r0
 80084e0:	4a17      	ldr	r2, [pc, #92]	; (8008540 <find_volume+0x490>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d113      	bne.n	800850e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80084e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e8:	3330      	adds	r3, #48	; 0x30
 80084ea:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fe fbda 	bl	8006ca8 <ld_dword>
 80084f4:	4602      	mov	r2, r0
 80084f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80084fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fc:	3330      	adds	r3, #48	; 0x30
 80084fe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008502:	4618      	mov	r0, r3
 8008504:	f7fe fbd0 	bl	8006ca8 <ld_dword>
 8008508:	4602      	mov	r2, r0
 800850a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800850e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008510:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008514:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008516:	4b0b      	ldr	r3, [pc, #44]	; (8008544 <find_volume+0x494>)
 8008518:	881b      	ldrh	r3, [r3, #0]
 800851a:	3301      	adds	r3, #1
 800851c:	b29a      	uxth	r2, r3
 800851e:	4b09      	ldr	r3, [pc, #36]	; (8008544 <find_volume+0x494>)
 8008520:	801a      	strh	r2, [r3, #0]
 8008522:	4b08      	ldr	r3, [pc, #32]	; (8008544 <find_volume+0x494>)
 8008524:	881a      	ldrh	r2, [r3, #0]
 8008526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008528:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800852a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800852c:	f7fe fdec 	bl	8007108 <clear_lock>
#endif
	return FR_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3758      	adds	r7, #88	; 0x58
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	41615252 	.word	0x41615252
 8008540:	61417272 	.word	0x61417272
 8008544:	200005d8 	.word	0x200005d8

08008548 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008552:	2309      	movs	r3, #9
 8008554:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d01c      	beq.n	8008596 <validate+0x4e>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d018      	beq.n	8008596 <validate+0x4e>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d013      	beq.n	8008596 <validate+0x4e>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	889a      	ldrh	r2, [r3, #4]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	88db      	ldrh	r3, [r3, #6]
 8008578:	429a      	cmp	r2, r3
 800857a:	d10c      	bne.n	8008596 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	785b      	ldrb	r3, [r3, #1]
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe fada 	bl	8006b3c <disk_status>
 8008588:	4603      	mov	r3, r0
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <validate+0x4e>
			res = FR_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008596:	7bfb      	ldrb	r3, [r7, #15]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d102      	bne.n	80085a2 <validate+0x5a>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	e000      	b.n	80085a4 <validate+0x5c>
 80085a2:	2300      	movs	r3, #0
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	6013      	str	r3, [r2, #0]
	return res;
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
	...

080085b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b088      	sub	sp, #32
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	4613      	mov	r3, r2
 80085c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80085c6:	f107 0310 	add.w	r3, r7, #16
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7ff fcd5 	bl	8007f7a <get_ldnumber>
 80085d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	da01      	bge.n	80085dc <f_mount+0x28>
 80085d8:	230b      	movs	r3, #11
 80085da:	e02b      	b.n	8008634 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80085dc:	4a17      	ldr	r2, [pc, #92]	; (800863c <f_mount+0x88>)
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d005      	beq.n	80085f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80085ec:	69b8      	ldr	r0, [r7, #24]
 80085ee:	f7fe fd8b 	bl	8007108 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	2200      	movs	r2, #0
 80085f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d002      	beq.n	8008604 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	490d      	ldr	r1, [pc, #52]	; (800863c <f_mount+0x88>)
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d002      	beq.n	800861a <f_mount+0x66>
 8008614:	79fb      	ldrb	r3, [r7, #7]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d001      	beq.n	800861e <f_mount+0x6a>
 800861a:	2300      	movs	r3, #0
 800861c:	e00a      	b.n	8008634 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800861e:	f107 010c 	add.w	r1, r7, #12
 8008622:	f107 0308 	add.w	r3, r7, #8
 8008626:	2200      	movs	r2, #0
 8008628:	4618      	mov	r0, r3
 800862a:	f7ff fd41 	bl	80080b0 <find_volume>
 800862e:	4603      	mov	r3, r0
 8008630:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008632:	7dfb      	ldrb	r3, [r7, #23]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3720      	adds	r7, #32
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	200005d4 	.word	0x200005d4

08008640 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b098      	sub	sp, #96	; 0x60
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	4613      	mov	r3, r2
 800864c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d101      	bne.n	8008658 <f_open+0x18>
 8008654:	2309      	movs	r3, #9
 8008656:	e1ad      	b.n	80089b4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008658:	79fb      	ldrb	r3, [r7, #7]
 800865a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800865e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008660:	79fa      	ldrb	r2, [r7, #7]
 8008662:	f107 0110 	add.w	r1, r7, #16
 8008666:	f107 0308 	add.w	r3, r7, #8
 800866a:	4618      	mov	r0, r3
 800866c:	f7ff fd20 	bl	80080b0 <find_volume>
 8008670:	4603      	mov	r3, r0
 8008672:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008676:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800867a:	2b00      	cmp	r3, #0
 800867c:	f040 8191 	bne.w	80089a2 <f_open+0x362>
		dj.obj.fs = fs;
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	f107 0314 	add.w	r3, r7, #20
 800868a:	4611      	mov	r1, r2
 800868c:	4618      	mov	r0, r3
 800868e:	f7ff fc03 	bl	8007e98 <follow_path>
 8008692:	4603      	mov	r3, r0
 8008694:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008698:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800869c:	2b00      	cmp	r3, #0
 800869e:	d11a      	bne.n	80086d6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80086a0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80086a4:	b25b      	sxtb	r3, r3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	da03      	bge.n	80086b2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80086aa:	2306      	movs	r3, #6
 80086ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80086b0:	e011      	b.n	80086d6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80086b2:	79fb      	ldrb	r3, [r7, #7]
 80086b4:	f023 0301 	bic.w	r3, r3, #1
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	bf14      	ite	ne
 80086bc:	2301      	movne	r3, #1
 80086be:	2300      	moveq	r3, #0
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	461a      	mov	r2, r3
 80086c4:	f107 0314 	add.w	r3, r7, #20
 80086c8:	4611      	mov	r1, r2
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fe fbd4 	bl	8006e78 <chk_lock>
 80086d0:	4603      	mov	r3, r0
 80086d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80086d6:	79fb      	ldrb	r3, [r7, #7]
 80086d8:	f003 031c 	and.w	r3, r3, #28
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d07f      	beq.n	80087e0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80086e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d017      	beq.n	8008718 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80086e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	d10e      	bne.n	800870e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80086f0:	f7fe fc1e 	bl	8006f30 <enq_lock>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d006      	beq.n	8008708 <f_open+0xc8>
 80086fa:	f107 0314 	add.w	r3, r7, #20
 80086fe:	4618      	mov	r0, r3
 8008700:	f7ff fb03 	bl	8007d0a <dir_register>
 8008704:	4603      	mov	r3, r0
 8008706:	e000      	b.n	800870a <f_open+0xca>
 8008708:	2312      	movs	r3, #18
 800870a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	f043 0308 	orr.w	r3, r3, #8
 8008714:	71fb      	strb	r3, [r7, #7]
 8008716:	e010      	b.n	800873a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008718:	7ebb      	ldrb	r3, [r7, #26]
 800871a:	f003 0311 	and.w	r3, r3, #17
 800871e:	2b00      	cmp	r3, #0
 8008720:	d003      	beq.n	800872a <f_open+0xea>
					res = FR_DENIED;
 8008722:	2307      	movs	r3, #7
 8008724:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008728:	e007      	b.n	800873a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800872a:	79fb      	ldrb	r3, [r7, #7]
 800872c:	f003 0304 	and.w	r3, r3, #4
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <f_open+0xfa>
 8008734:	2308      	movs	r3, #8
 8008736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800873a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800873e:	2b00      	cmp	r3, #0
 8008740:	d168      	bne.n	8008814 <f_open+0x1d4>
 8008742:	79fb      	ldrb	r3, [r7, #7]
 8008744:	f003 0308 	and.w	r3, r3, #8
 8008748:	2b00      	cmp	r3, #0
 800874a:	d063      	beq.n	8008814 <f_open+0x1d4>
				dw = GET_FATTIME();
 800874c:	f7fd fcb8 	bl	80060c0 <get_fattime>
 8008750:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008754:	330e      	adds	r3, #14
 8008756:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008758:	4618      	mov	r0, r3
 800875a:	f7fe fae3 	bl	8006d24 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800875e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008760:	3316      	adds	r3, #22
 8008762:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008764:	4618      	mov	r0, r3
 8008766:	f7fe fadd 	bl	8006d24 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800876a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800876c:	330b      	adds	r3, #11
 800876e:	2220      	movs	r2, #32
 8008770:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008776:	4611      	mov	r1, r2
 8008778:	4618      	mov	r0, r3
 800877a:	f7ff fa32 	bl	8007be2 <ld_clust>
 800877e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008784:	2200      	movs	r2, #0
 8008786:	4618      	mov	r0, r3
 8008788:	f7ff fa4a 	bl	8007c20 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800878c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878e:	331c      	adds	r3, #28
 8008790:	2100      	movs	r1, #0
 8008792:	4618      	mov	r0, r3
 8008794:	f7fe fac6 	bl	8006d24 <st_dword>
					fs->wflag = 1;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	2201      	movs	r2, #1
 800879c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800879e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d037      	beq.n	8008814 <f_open+0x1d4>
						dw = fs->winsect;
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80087aa:	f107 0314 	add.w	r3, r7, #20
 80087ae:	2200      	movs	r2, #0
 80087b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fe ff5d 	bl	8007672 <remove_chain>
 80087b8:	4603      	mov	r3, r0
 80087ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80087be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d126      	bne.n	8008814 <f_open+0x1d4>
							res = move_window(fs, dw);
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fe fd04 	bl	80071d8 <move_window>
 80087d0:	4603      	mov	r3, r0
 80087d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087da:	3a01      	subs	r2, #1
 80087dc:	60da      	str	r2, [r3, #12]
 80087de:	e019      	b.n	8008814 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80087e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d115      	bne.n	8008814 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80087e8:	7ebb      	ldrb	r3, [r7, #26]
 80087ea:	f003 0310 	and.w	r3, r3, #16
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d003      	beq.n	80087fa <f_open+0x1ba>
					res = FR_NO_FILE;
 80087f2:	2304      	movs	r3, #4
 80087f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80087f8:	e00c      	b.n	8008814 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80087fa:	79fb      	ldrb	r3, [r7, #7]
 80087fc:	f003 0302 	and.w	r3, r3, #2
 8008800:	2b00      	cmp	r3, #0
 8008802:	d007      	beq.n	8008814 <f_open+0x1d4>
 8008804:	7ebb      	ldrb	r3, [r7, #26]
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d002      	beq.n	8008814 <f_open+0x1d4>
						res = FR_DENIED;
 800880e:	2307      	movs	r3, #7
 8008810:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008814:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008818:	2b00      	cmp	r3, #0
 800881a:	d128      	bne.n	800886e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800881c:	79fb      	ldrb	r3, [r7, #7]
 800881e:	f003 0308 	and.w	r3, r3, #8
 8008822:	2b00      	cmp	r3, #0
 8008824:	d003      	beq.n	800882e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800882c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008836:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800883c:	79fb      	ldrb	r3, [r7, #7]
 800883e:	f023 0301 	bic.w	r3, r3, #1
 8008842:	2b00      	cmp	r3, #0
 8008844:	bf14      	ite	ne
 8008846:	2301      	movne	r3, #1
 8008848:	2300      	moveq	r3, #0
 800884a:	b2db      	uxtb	r3, r3
 800884c:	461a      	mov	r2, r3
 800884e:	f107 0314 	add.w	r3, r7, #20
 8008852:	4611      	mov	r1, r2
 8008854:	4618      	mov	r0, r3
 8008856:	f7fe fb8d 	bl	8006f74 <inc_lock>
 800885a:	4602      	mov	r2, r0
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d102      	bne.n	800886e <f_open+0x22e>
 8008868:	2302      	movs	r3, #2
 800886a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800886e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008872:	2b00      	cmp	r3, #0
 8008874:	f040 8095 	bne.w	80089a2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800887c:	4611      	mov	r1, r2
 800887e:	4618      	mov	r0, r3
 8008880:	f7ff f9af 	bl	8007be2 <ld_clust>
 8008884:	4602      	mov	r2, r0
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800888a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888c:	331c      	adds	r3, #28
 800888e:	4618      	mov	r0, r3
 8008890:	f7fe fa0a 	bl	8006ca8 <ld_dword>
 8008894:	4602      	mov	r2, r0
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	88da      	ldrh	r2, [r3, #6]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	79fa      	ldrb	r2, [r7, #7]
 80088b2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3330      	adds	r3, #48	; 0x30
 80088ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088ce:	2100      	movs	r1, #0
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fe fa74 	bl	8006dbe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80088d6:	79fb      	ldrb	r3, [r7, #7]
 80088d8:	f003 0320 	and.w	r3, r3, #32
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d060      	beq.n	80089a2 <f_open+0x362>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d05c      	beq.n	80089a2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	68da      	ldr	r2, [r3, #12]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	895b      	ldrh	r3, [r3, #10]
 80088f4:	025b      	lsls	r3, r3, #9
 80088f6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	657b      	str	r3, [r7, #84]	; 0x54
 8008904:	e016      	b.n	8008934 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800890a:	4618      	mov	r0, r3
 800890c:	f7fe fd1f 	bl	800734e <get_fat>
 8008910:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008912:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008914:	2b01      	cmp	r3, #1
 8008916:	d802      	bhi.n	800891e <f_open+0x2de>
 8008918:	2302      	movs	r3, #2
 800891a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800891e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008924:	d102      	bne.n	800892c <f_open+0x2ec>
 8008926:	2301      	movs	r3, #1
 8008928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800892c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800892e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	657b      	str	r3, [r7, #84]	; 0x54
 8008934:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008938:	2b00      	cmp	r3, #0
 800893a:	d103      	bne.n	8008944 <f_open+0x304>
 800893c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800893e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008940:	429a      	cmp	r2, r3
 8008942:	d8e0      	bhi.n	8008906 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008948:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800894a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800894e:	2b00      	cmp	r3, #0
 8008950:	d127      	bne.n	80089a2 <f_open+0x362>
 8008952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008958:	2b00      	cmp	r3, #0
 800895a:	d022      	beq.n	80089a2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008960:	4618      	mov	r0, r3
 8008962:	f7fe fcd5 	bl	8007310 <clust2sect>
 8008966:	6478      	str	r0, [r7, #68]	; 0x44
 8008968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800896a:	2b00      	cmp	r3, #0
 800896c:	d103      	bne.n	8008976 <f_open+0x336>
						res = FR_INT_ERR;
 800896e:	2302      	movs	r3, #2
 8008970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008974:	e015      	b.n	80089a2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008978:	0a5a      	lsrs	r2, r3, #9
 800897a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800897c:	441a      	add	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	7858      	ldrb	r0, [r3, #1]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6a1a      	ldr	r2, [r3, #32]
 8008990:	2301      	movs	r3, #1
 8008992:	f7fe f913 	bl	8006bbc <disk_read>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <f_open+0x362>
 800899c:	2301      	movs	r3, #1
 800899e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80089a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d002      	beq.n	80089b0 <f_open+0x370>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80089b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3760      	adds	r7, #96	; 0x60
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08c      	sub	sp, #48	; 0x30
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
 80089c8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	2200      	movs	r2, #0
 80089d2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f107 0210 	add.w	r2, r7, #16
 80089da:	4611      	mov	r1, r2
 80089dc:	4618      	mov	r0, r3
 80089de:	f7ff fdb3 	bl	8008548 <validate>
 80089e2:	4603      	mov	r3, r0
 80089e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80089e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d107      	bne.n	8008a00 <f_write+0x44>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	7d5b      	ldrb	r3, [r3, #21]
 80089f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80089f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d002      	beq.n	8008a06 <f_write+0x4a>
 8008a00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a04:	e14b      	b.n	8008c9e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	7d1b      	ldrb	r3, [r3, #20]
 8008a0a:	f003 0302 	and.w	r3, r3, #2
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d101      	bne.n	8008a16 <f_write+0x5a>
 8008a12:	2307      	movs	r3, #7
 8008a14:	e143      	b.n	8008c9e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	699a      	ldr	r2, [r3, #24]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	441a      	add	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	f080 812d 	bcs.w	8008c82 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	43db      	mvns	r3, r3
 8008a2e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008a30:	e127      	b.n	8008c82 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f040 80e3 	bne.w	8008c06 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	0a5b      	lsrs	r3, r3, #9
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	8952      	ldrh	r2, [r2, #10]
 8008a4a:	3a01      	subs	r2, #1
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d143      	bne.n	8008ade <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	699b      	ldr	r3, [r3, #24]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d10c      	bne.n	8008a78 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d11a      	bne.n	8008aa0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fe64 	bl	800773c <create_chain>
 8008a74:	62b8      	str	r0, [r7, #40]	; 0x28
 8008a76:	e013      	b.n	8008aa0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d007      	beq.n	8008a90 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	4619      	mov	r1, r3
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f7fe fef0 	bl	800786c <clmt_clust>
 8008a8c:	62b8      	str	r0, [r7, #40]	; 0x28
 8008a8e:	e007      	b.n	8008aa0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	69db      	ldr	r3, [r3, #28]
 8008a96:	4619      	mov	r1, r3
 8008a98:	4610      	mov	r0, r2
 8008a9a:	f7fe fe4f 	bl	800773c <create_chain>
 8008a9e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 80f2 	beq.w	8008c8c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d104      	bne.n	8008ab8 <f_write+0xfc>
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2202      	movs	r2, #2
 8008ab2:	755a      	strb	r2, [r3, #21]
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	e0f2      	b.n	8008c9e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008abe:	d104      	bne.n	8008aca <f_write+0x10e>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	755a      	strb	r2, [r3, #21]
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e0e9      	b.n	8008c9e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ace:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d102      	bne.n	8008ade <f_write+0x122>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008adc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	7d1b      	ldrb	r3, [r3, #20]
 8008ae2:	b25b      	sxtb	r3, r3
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	da18      	bge.n	8008b1a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	7858      	ldrb	r0, [r3, #1]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6a1a      	ldr	r2, [r3, #32]
 8008af6:	2301      	movs	r3, #1
 8008af8:	f7fe f880 	bl	8006bfc <disk_write>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d004      	beq.n	8008b0c <f_write+0x150>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2201      	movs	r2, #1
 8008b06:	755a      	strb	r2, [r3, #21]
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e0c8      	b.n	8008c9e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	7d1b      	ldrb	r3, [r3, #20]
 8008b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	69db      	ldr	r3, [r3, #28]
 8008b20:	4619      	mov	r1, r3
 8008b22:	4610      	mov	r0, r2
 8008b24:	f7fe fbf4 	bl	8007310 <clust2sect>
 8008b28:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d104      	bne.n	8008b3a <f_write+0x17e>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2202      	movs	r2, #2
 8008b34:	755a      	strb	r2, [r3, #21]
 8008b36:	2302      	movs	r3, #2
 8008b38:	e0b1      	b.n	8008c9e <f_write+0x2e2>
			sect += csect;
 8008b3a:	697a      	ldr	r2, [r7, #20]
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	4413      	add	r3, r2
 8008b40:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	0a5b      	lsrs	r3, r3, #9
 8008b46:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d03c      	beq.n	8008bc8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008b4e:	69ba      	ldr	r2, [r7, #24]
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	4413      	add	r3, r2
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	8952      	ldrh	r2, [r2, #10]
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d905      	bls.n	8008b68 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	895b      	ldrh	r3, [r3, #10]
 8008b60:	461a      	mov	r2, r3
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	7858      	ldrb	r0, [r3, #1]
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	69f9      	ldr	r1, [r7, #28]
 8008b72:	f7fe f843 	bl	8006bfc <disk_write>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d004      	beq.n	8008b86 <f_write+0x1ca>
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	755a      	strb	r2, [r3, #21]
 8008b82:	2301      	movs	r3, #1
 8008b84:	e08b      	b.n	8008c9e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6a1a      	ldr	r2, [r3, #32]
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	6a3a      	ldr	r2, [r7, #32]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d915      	bls.n	8008bc0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6a1a      	ldr	r2, [r3, #32]
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	025b      	lsls	r3, r3, #9
 8008ba4:	69fa      	ldr	r2, [r7, #28]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bac:	4619      	mov	r1, r3
 8008bae:	f7fe f8e5 	bl	8006d7c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	7d1b      	ldrb	r3, [r3, #20]
 8008bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	025b      	lsls	r3, r3, #9
 8008bc4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008bc6:	e03f      	b.n	8008c48 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6a1b      	ldr	r3, [r3, #32]
 8008bcc:	697a      	ldr	r2, [r7, #20]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d016      	beq.n	8008c00 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	699a      	ldr	r2, [r3, #24]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d210      	bcs.n	8008c00 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	7858      	ldrb	r0, [r3, #1]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008be8:	2301      	movs	r3, #1
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	f7fd ffe6 	bl	8006bbc <disk_read>
 8008bf0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d004      	beq.n	8008c00 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	755a      	strb	r2, [r3, #21]
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e04e      	b.n	8008c9e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c0e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008c12:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d901      	bls.n	8008c20 <f_write+0x264>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c2e:	4413      	add	r3, r2
 8008c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c32:	69f9      	ldr	r1, [r7, #28]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fe f8a1 	bl	8006d7c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	7d1b      	ldrb	r3, [r3, #20]
 8008c3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008c48:	69fa      	ldr	r2, [r7, #28]
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	4413      	add	r3, r2
 8008c4e:	61fb      	str	r3, [r7, #28]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	699a      	ldr	r2, [r3, #24]
 8008c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c56:	441a      	add	r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	619a      	str	r2, [r3, #24]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	68da      	ldr	r2, [r3, #12]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	bf38      	it	cc
 8008c68:	461a      	movcc	r2, r3
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	60da      	str	r2, [r3, #12]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c74:	441a      	add	r2, r3
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	601a      	str	r2, [r3, #0]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f47f aed4 	bne.w	8008a32 <f_write+0x76>
 8008c8a:	e000      	b.n	8008c8e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008c8c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	7d1b      	ldrb	r3, [r3, #20]
 8008c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c96:	b2da      	uxtb	r2, r3
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3730      	adds	r7, #48	; 0x30
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b086      	sub	sp, #24
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f107 0208 	add.w	r2, r7, #8
 8008cb4:	4611      	mov	r1, r2
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff fc46 	bl	8008548 <validate>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008cc0:	7dfb      	ldrb	r3, [r7, #23]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d168      	bne.n	8008d98 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	7d1b      	ldrb	r3, [r3, #20]
 8008cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d062      	beq.n	8008d98 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	7d1b      	ldrb	r3, [r3, #20]
 8008cd6:	b25b      	sxtb	r3, r3
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	da15      	bge.n	8008d08 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	7858      	ldrb	r0, [r3, #1]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a1a      	ldr	r2, [r3, #32]
 8008cea:	2301      	movs	r3, #1
 8008cec:	f7fd ff86 	bl	8006bfc <disk_write>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <f_sync+0x54>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e04f      	b.n	8008d9a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	7d1b      	ldrb	r3, [r3, #20]
 8008cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008d08:	f7fd f9da 	bl	80060c0 <get_fattime>
 8008d0c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d14:	4619      	mov	r1, r3
 8008d16:	4610      	mov	r0, r2
 8008d18:	f7fe fa5e 	bl	80071d8 <move_window>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008d20:	7dfb      	ldrb	r3, [r7, #23]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d138      	bne.n	8008d98 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	330b      	adds	r3, #11
 8008d30:	781a      	ldrb	r2, [r3, #0]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	330b      	adds	r3, #11
 8008d36:	f042 0220 	orr.w	r2, r2, #32
 8008d3a:	b2d2      	uxtb	r2, r2
 8008d3c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6818      	ldr	r0, [r3, #0]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	461a      	mov	r2, r3
 8008d48:	68f9      	ldr	r1, [r7, #12]
 8008d4a:	f7fe ff69 	bl	8007c20 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f103 021c 	add.w	r2, r3, #28
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	4619      	mov	r1, r3
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	f7fd ffe2 	bl	8006d24 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	3316      	adds	r3, #22
 8008d64:	6939      	ldr	r1, [r7, #16]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fd ffdc 	bl	8006d24 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	3312      	adds	r3, #18
 8008d70:	2100      	movs	r1, #0
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fd ffbb 	bl	8006cee <st_word>
					fs->wflag = 1;
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7fe fa57 	bl	8007234 <sync_fs>
 8008d86:	4603      	mov	r3, r0
 8008d88:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	7d1b      	ldrb	r3, [r3, #20]
 8008d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d92:	b2da      	uxtb	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3718      	adds	r7, #24
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b084      	sub	sp, #16
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f7ff ff7b 	bl	8008ca6 <f_sync>
 8008db0:	4603      	mov	r3, r0
 8008db2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d118      	bne.n	8008dec <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f107 0208 	add.w	r2, r7, #8
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7ff fbc0 	bl	8008548 <validate>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10c      	bne.n	8008dec <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fe f95a 	bl	8007090 <dec_lock>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d102      	bne.n	8008dec <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b090      	sub	sp, #64	; 0x40
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f107 0208 	add.w	r2, r7, #8
 8008e06:	4611      	mov	r1, r2
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7ff fb9d 	bl	8008548 <validate>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008e14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d103      	bne.n	8008e24 <f_lseek+0x2e>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	7d5b      	ldrb	r3, [r3, #21]
 8008e20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008e24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d002      	beq.n	8008e32 <f_lseek+0x3c>
 8008e2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e30:	e1e6      	b.n	8009200 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 80d1 	beq.w	8008fde <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e42:	d15a      	bne.n	8008efa <f_lseek+0x104>
			tbl = fp->cltbl;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e48:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	1d1a      	adds	r2, r3, #4
 8008e4e:	627a      	str	r2, [r7, #36]	; 0x24
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	617b      	str	r3, [r7, #20]
 8008e54:	2302      	movs	r3, #2
 8008e56:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d03a      	beq.n	8008eda <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e66:	613b      	str	r3, [r7, #16]
 8008e68:	2300      	movs	r3, #0
 8008e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6e:	3302      	adds	r3, #2
 8008e70:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e74:	60fb      	str	r3, [r7, #12]
 8008e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e78:	3301      	adds	r3, #1
 8008e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7fe fa64 	bl	800734e <get_fat>
 8008e86:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d804      	bhi.n	8008e98 <f_lseek+0xa2>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2202      	movs	r2, #2
 8008e92:	755a      	strb	r2, [r3, #21]
 8008e94:	2302      	movs	r3, #2
 8008e96:	e1b3      	b.n	8009200 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9e:	d104      	bne.n	8008eaa <f_lseek+0xb4>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	755a      	strb	r2, [r3, #21]
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e1aa      	b.n	8009200 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	3301      	adds	r3, #1
 8008eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d0de      	beq.n	8008e72 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d809      	bhi.n	8008ed0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	1d1a      	adds	r2, r3, #4
 8008ec0:	627a      	str	r2, [r7, #36]	; 0x24
 8008ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ec4:	601a      	str	r2, [r3, #0]
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec8:	1d1a      	adds	r2, r3, #4
 8008eca:	627a      	str	r2, [r7, #36]	; 0x24
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	695b      	ldr	r3, [r3, #20]
 8008ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d3c4      	bcc.n	8008e64 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ee0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d803      	bhi.n	8008ef2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eec:	2200      	movs	r2, #0
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	e184      	b.n	80091fc <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008ef2:	2311      	movs	r3, #17
 8008ef4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008ef8:	e180      	b.n	80091fc <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d902      	bls.n	8008f0a <f_lseek+0x114>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 8172 	beq.w	80091fc <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7fe fca4 	bl	800786c <clmt_clust>
 8008f24:	4602      	mov	r2, r0
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	69db      	ldr	r3, [r3, #28]
 8008f30:	4619      	mov	r1, r3
 8008f32:	4610      	mov	r0, r2
 8008f34:	f7fe f9ec 	bl	8007310 <clust2sect>
 8008f38:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d104      	bne.n	8008f4a <f_lseek+0x154>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2202      	movs	r2, #2
 8008f44:	755a      	strb	r2, [r3, #21]
 8008f46:	2302      	movs	r3, #2
 8008f48:	e15a      	b.n	8009200 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	0a5b      	lsrs	r3, r3, #9
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	8952      	ldrh	r2, [r2, #10]
 8008f54:	3a01      	subs	r2, #1
 8008f56:	4013      	ands	r3, r2
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f000 8148 	beq.w	80091fc <f_lseek+0x406>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a1b      	ldr	r3, [r3, #32]
 8008f70:	69ba      	ldr	r2, [r7, #24]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	f000 8142 	beq.w	80091fc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	7d1b      	ldrb	r3, [r3, #20]
 8008f7c:	b25b      	sxtb	r3, r3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	da18      	bge.n	8008fb4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	7858      	ldrb	r0, [r3, #1]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a1a      	ldr	r2, [r3, #32]
 8008f90:	2301      	movs	r3, #1
 8008f92:	f7fd fe33 	bl	8006bfc <disk_write>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d004      	beq.n	8008fa6 <f_lseek+0x1b0>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	755a      	strb	r2, [r3, #21]
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e12c      	b.n	8009200 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	7d1b      	ldrb	r3, [r3, #20]
 8008faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	7858      	ldrb	r0, [r3, #1]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	69ba      	ldr	r2, [r7, #24]
 8008fc2:	f7fd fdfb 	bl	8006bbc <disk_read>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d004      	beq.n	8008fd6 <f_lseek+0x1e0>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	755a      	strb	r2, [r3, #21]
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e114      	b.n	8009200 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	69ba      	ldr	r2, [r7, #24]
 8008fda:	621a      	str	r2, [r3, #32]
 8008fdc:	e10e      	b.n	80091fc <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d908      	bls.n	8008ffa <f_lseek+0x204>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	7d1b      	ldrb	r3, [r3, #20]
 8008fec:	f003 0302 	and.w	r3, r3, #2
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d102      	bne.n	8008ffa <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009000:	2300      	movs	r3, #0
 8009002:	637b      	str	r3, [r7, #52]	; 0x34
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009008:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 80a7 	beq.w	8009160 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	895b      	ldrh	r3, [r3, #10]
 8009016:	025b      	lsls	r3, r3, #9
 8009018:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800901a:	6a3b      	ldr	r3, [r7, #32]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d01b      	beq.n	8009058 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	1e5a      	subs	r2, r3, #1
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	fbb2 f2f3 	udiv	r2, r2, r3
 800902a:	6a3b      	ldr	r3, [r7, #32]
 800902c:	1e59      	subs	r1, r3, #1
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009034:	429a      	cmp	r2, r3
 8009036:	d30f      	bcc.n	8009058 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009038:	6a3b      	ldr	r3, [r7, #32]
 800903a:	1e5a      	subs	r2, r3, #1
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	425b      	negs	r3, r3
 8009040:	401a      	ands	r2, r3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	1ad3      	subs	r3, r2, r3
 800904e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	69db      	ldr	r3, [r3, #28]
 8009054:	63bb      	str	r3, [r7, #56]	; 0x38
 8009056:	e022      	b.n	800909e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800905e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009060:	2b00      	cmp	r3, #0
 8009062:	d119      	bne.n	8009098 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2100      	movs	r1, #0
 8009068:	4618      	mov	r0, r3
 800906a:	f7fe fb67 	bl	800773c <create_chain>
 800906e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009072:	2b01      	cmp	r3, #1
 8009074:	d104      	bne.n	8009080 <f_lseek+0x28a>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2202      	movs	r2, #2
 800907a:	755a      	strb	r2, [r3, #21]
 800907c:	2302      	movs	r3, #2
 800907e:	e0bf      	b.n	8009200 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009086:	d104      	bne.n	8009092 <f_lseek+0x29c>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	755a      	strb	r2, [r3, #21]
 800908e:	2301      	movs	r3, #1
 8009090:	e0b6      	b.n	8009200 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009096:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800909c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800909e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d05d      	beq.n	8009160 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80090a4:	e03a      	b.n	800911c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	603b      	str	r3, [r7, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	699a      	ldr	r2, [r3, #24]
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	441a      	add	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	7d1b      	ldrb	r3, [r3, #20]
 80090be:	f003 0302 	and.w	r3, r3, #2
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00b      	beq.n	80090de <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fe fb36 	bl	800773c <create_chain>
 80090d0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80090d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d108      	bne.n	80090ea <f_lseek+0x2f4>
							ofs = 0; break;
 80090d8:	2300      	movs	r3, #0
 80090da:	603b      	str	r3, [r7, #0]
 80090dc:	e022      	b.n	8009124 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fe f933 	bl	800734e <get_fat>
 80090e8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80090ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f0:	d104      	bne.n	80090fc <f_lseek+0x306>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2201      	movs	r2, #1
 80090f6:	755a      	strb	r2, [r3, #21]
 80090f8:	2301      	movs	r3, #1
 80090fa:	e081      	b.n	8009200 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80090fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d904      	bls.n	800910c <f_lseek+0x316>
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009108:	429a      	cmp	r2, r3
 800910a:	d304      	bcc.n	8009116 <f_lseek+0x320>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2202      	movs	r2, #2
 8009110:	755a      	strb	r2, [r3, #21]
 8009112:	2302      	movs	r3, #2
 8009114:	e074      	b.n	8009200 <f_lseek+0x40a>
					fp->clust = clst;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800911a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	429a      	cmp	r2, r3
 8009122:	d8c0      	bhi.n	80090a6 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	699a      	ldr	r2, [r3, #24]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	441a      	add	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009136:	2b00      	cmp	r3, #0
 8009138:	d012      	beq.n	8009160 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800913e:	4618      	mov	r0, r3
 8009140:	f7fe f8e6 	bl	8007310 <clust2sect>
 8009144:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009148:	2b00      	cmp	r3, #0
 800914a:	d104      	bne.n	8009156 <f_lseek+0x360>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2202      	movs	r2, #2
 8009150:	755a      	strb	r2, [r3, #21]
 8009152:	2302      	movs	r3, #2
 8009154:	e054      	b.n	8009200 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	0a5b      	lsrs	r3, r3, #9
 800915a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800915c:	4413      	add	r3, r2
 800915e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	699a      	ldr	r2, [r3, #24]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	429a      	cmp	r2, r3
 800916a:	d90a      	bls.n	8009182 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	699a      	ldr	r2, [r3, #24]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	7d1b      	ldrb	r3, [r3, #20]
 8009178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800917c:	b2da      	uxtb	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800918a:	2b00      	cmp	r3, #0
 800918c:	d036      	beq.n	80091fc <f_lseek+0x406>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009194:	429a      	cmp	r2, r3
 8009196:	d031      	beq.n	80091fc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	7d1b      	ldrb	r3, [r3, #20]
 800919c:	b25b      	sxtb	r3, r3
 800919e:	2b00      	cmp	r3, #0
 80091a0:	da18      	bge.n	80091d4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	7858      	ldrb	r0, [r3, #1]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a1a      	ldr	r2, [r3, #32]
 80091b0:	2301      	movs	r3, #1
 80091b2:	f7fd fd23 	bl	8006bfc <disk_write>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d004      	beq.n	80091c6 <f_lseek+0x3d0>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	755a      	strb	r2, [r3, #21]
 80091c2:	2301      	movs	r3, #1
 80091c4:	e01c      	b.n	8009200 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	7d1b      	ldrb	r3, [r3, #20]
 80091ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ce:	b2da      	uxtb	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	7858      	ldrb	r0, [r3, #1]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80091de:	2301      	movs	r3, #1
 80091e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091e2:	f7fd fceb 	bl	8006bbc <disk_read>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d004      	beq.n	80091f6 <f_lseek+0x400>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	755a      	strb	r2, [r3, #21]
 80091f2:	2301      	movs	r3, #1
 80091f4:	e004      	b.n	8009200 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091fa:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80091fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009200:	4618      	mov	r0, r3
 8009202:	3740      	adds	r7, #64	; 0x40
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b092      	sub	sp, #72	; 0x48
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009214:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009218:	f107 030c 	add.w	r3, r7, #12
 800921c:	2200      	movs	r2, #0
 800921e:	4618      	mov	r0, r3
 8009220:	f7fe ff46 	bl	80080b0 <find_volume>
 8009224:	4603      	mov	r3, r0
 8009226:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800922a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800922e:	2b00      	cmp	r3, #0
 8009230:	f040 8099 	bne.w	8009366 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800923a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923c:	691a      	ldr	r2, [r3, #16]
 800923e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	3b02      	subs	r3, #2
 8009244:	429a      	cmp	r2, r3
 8009246:	d804      	bhi.n	8009252 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924a:	691a      	ldr	r2, [r3, #16]
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	601a      	str	r2, [r3, #0]
 8009250:	e089      	b.n	8009366 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009252:	2300      	movs	r3, #0
 8009254:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d128      	bne.n	80092b0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800925e:	2302      	movs	r3, #2
 8009260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009264:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009266:	f107 0314 	add.w	r3, r7, #20
 800926a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800926c:	4618      	mov	r0, r3
 800926e:	f7fe f86e 	bl	800734e <get_fat>
 8009272:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800927a:	d103      	bne.n	8009284 <f_getfree+0x7c>
 800927c:	2301      	movs	r3, #1
 800927e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009282:	e063      	b.n	800934c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009286:	2b01      	cmp	r3, #1
 8009288:	d103      	bne.n	8009292 <f_getfree+0x8a>
 800928a:	2302      	movs	r3, #2
 800928c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009290:	e05c      	b.n	800934c <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009294:	2b00      	cmp	r3, #0
 8009296:	d102      	bne.n	800929e <f_getfree+0x96>
 8009298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800929a:	3301      	adds	r3, #1
 800929c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800929e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092a0:	3301      	adds	r3, #1
 80092a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a6:	695b      	ldr	r3, [r3, #20]
 80092a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d3db      	bcc.n	8009266 <f_getfree+0x5e>
 80092ae:	e04d      	b.n	800934c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80092b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b2:	695b      	ldr	r3, [r3, #20]
 80092b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b8:	6a1b      	ldr	r3, [r3, #32]
 80092ba:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80092bc:	2300      	movs	r3, #0
 80092be:	637b      	str	r3, [r7, #52]	; 0x34
 80092c0:	2300      	movs	r3, #0
 80092c2:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80092c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d113      	bne.n	80092f2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80092ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ce:	1c5a      	adds	r2, r3, #1
 80092d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80092d2:	4619      	mov	r1, r3
 80092d4:	f7fd ff80 	bl	80071d8 <move_window>
 80092d8:	4603      	mov	r3, r0
 80092da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80092de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d131      	bne.n	800934a <f_getfree+0x142>
							p = fs->win;
 80092e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e8:	3330      	adds	r3, #48	; 0x30
 80092ea:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80092ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092f0:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80092f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d10f      	bne.n	800931a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80092fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092fc:	f7fd fcbc 	bl	8006c78 <ld_word>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d102      	bne.n	800930c <f_getfree+0x104>
 8009306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009308:	3301      	adds	r3, #1
 800930a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800930c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930e:	3302      	adds	r3, #2
 8009310:	633b      	str	r3, [r7, #48]	; 0x30
 8009312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009314:	3b02      	subs	r3, #2
 8009316:	637b      	str	r3, [r7, #52]	; 0x34
 8009318:	e010      	b.n	800933c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800931a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800931c:	f7fd fcc4 	bl	8006ca8 <ld_dword>
 8009320:	4603      	mov	r3, r0
 8009322:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009326:	2b00      	cmp	r3, #0
 8009328:	d102      	bne.n	8009330 <f_getfree+0x128>
 800932a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800932c:	3301      	adds	r3, #1
 800932e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8009330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009332:	3304      	adds	r3, #4
 8009334:	633b      	str	r3, [r7, #48]	; 0x30
 8009336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009338:	3b04      	subs	r3, #4
 800933a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800933c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800933e:	3b01      	subs	r3, #1
 8009340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1bd      	bne.n	80092c4 <f_getfree+0xbc>
 8009348:	e000      	b.n	800934c <f_getfree+0x144>
							if (res != FR_OK) break;
 800934a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009350:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009354:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009356:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935a:	791a      	ldrb	r2, [r3, #4]
 800935c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935e:	f042 0201 	orr.w	r2, r2, #1
 8009362:	b2d2      	uxtb	r2, r2
 8009364:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009366:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800936a:	4618      	mov	r0, r3
 800936c:	3748      	adds	r7, #72	; 0x48
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
	...

08009374 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009374:	b480      	push	{r7}
 8009376:	b087      	sub	sp, #28
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	4613      	mov	r3, r2
 8009380:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009382:	2301      	movs	r3, #1
 8009384:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009386:	2300      	movs	r3, #0
 8009388:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800938a:	4b1f      	ldr	r3, [pc, #124]	; (8009408 <FATFS_LinkDriverEx+0x94>)
 800938c:	7a5b      	ldrb	r3, [r3, #9]
 800938e:	b2db      	uxtb	r3, r3
 8009390:	2b00      	cmp	r3, #0
 8009392:	d131      	bne.n	80093f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009394:	4b1c      	ldr	r3, [pc, #112]	; (8009408 <FATFS_LinkDriverEx+0x94>)
 8009396:	7a5b      	ldrb	r3, [r3, #9]
 8009398:	b2db      	uxtb	r3, r3
 800939a:	461a      	mov	r2, r3
 800939c:	4b1a      	ldr	r3, [pc, #104]	; (8009408 <FATFS_LinkDriverEx+0x94>)
 800939e:	2100      	movs	r1, #0
 80093a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80093a2:	4b19      	ldr	r3, [pc, #100]	; (8009408 <FATFS_LinkDriverEx+0x94>)
 80093a4:	7a5b      	ldrb	r3, [r3, #9]
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	4a17      	ldr	r2, [pc, #92]	; (8009408 <FATFS_LinkDriverEx+0x94>)
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80093b2:	4b15      	ldr	r3, [pc, #84]	; (8009408 <FATFS_LinkDriverEx+0x94>)
 80093b4:	7a5b      	ldrb	r3, [r3, #9]
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	461a      	mov	r2, r3
 80093ba:	4b13      	ldr	r3, [pc, #76]	; (8009408 <FATFS_LinkDriverEx+0x94>)
 80093bc:	4413      	add	r3, r2
 80093be:	79fa      	ldrb	r2, [r7, #7]
 80093c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80093c2:	4b11      	ldr	r3, [pc, #68]	; (8009408 <FATFS_LinkDriverEx+0x94>)
 80093c4:	7a5b      	ldrb	r3, [r3, #9]
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	b2d1      	uxtb	r1, r2
 80093cc:	4a0e      	ldr	r2, [pc, #56]	; (8009408 <FATFS_LinkDriverEx+0x94>)
 80093ce:	7251      	strb	r1, [r2, #9]
 80093d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80093d2:	7dbb      	ldrb	r3, [r7, #22]
 80093d4:	3330      	adds	r3, #48	; 0x30
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	3301      	adds	r3, #1
 80093e0:	223a      	movs	r2, #58	; 0x3a
 80093e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	3302      	adds	r3, #2
 80093e8:	222f      	movs	r2, #47	; 0x2f
 80093ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	3303      	adds	r3, #3
 80093f0:	2200      	movs	r2, #0
 80093f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80093f4:	2300      	movs	r3, #0
 80093f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80093f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	371c      	adds	r7, #28
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	200005fc 	.word	0x200005fc

0800940c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009416:	2200      	movs	r2, #0
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7ff ffaa 	bl	8009374 <FATFS_LinkDriverEx>
 8009420:	4603      	mov	r3, r0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <__cvt>:
 800942a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800942e:	ec55 4b10 	vmov	r4, r5, d0
 8009432:	2d00      	cmp	r5, #0
 8009434:	460e      	mov	r6, r1
 8009436:	4619      	mov	r1, r3
 8009438:	462b      	mov	r3, r5
 800943a:	bfbb      	ittet	lt
 800943c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009440:	461d      	movlt	r5, r3
 8009442:	2300      	movge	r3, #0
 8009444:	232d      	movlt	r3, #45	; 0x2d
 8009446:	700b      	strb	r3, [r1, #0]
 8009448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800944a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800944e:	4691      	mov	r9, r2
 8009450:	f023 0820 	bic.w	r8, r3, #32
 8009454:	bfbc      	itt	lt
 8009456:	4622      	movlt	r2, r4
 8009458:	4614      	movlt	r4, r2
 800945a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800945e:	d005      	beq.n	800946c <__cvt+0x42>
 8009460:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009464:	d100      	bne.n	8009468 <__cvt+0x3e>
 8009466:	3601      	adds	r6, #1
 8009468:	2102      	movs	r1, #2
 800946a:	e000      	b.n	800946e <__cvt+0x44>
 800946c:	2103      	movs	r1, #3
 800946e:	ab03      	add	r3, sp, #12
 8009470:	9301      	str	r3, [sp, #4]
 8009472:	ab02      	add	r3, sp, #8
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	ec45 4b10 	vmov	d0, r4, r5
 800947a:	4653      	mov	r3, sl
 800947c:	4632      	mov	r2, r6
 800947e:	f000 fea3 	bl	800a1c8 <_dtoa_r>
 8009482:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009486:	4607      	mov	r7, r0
 8009488:	d102      	bne.n	8009490 <__cvt+0x66>
 800948a:	f019 0f01 	tst.w	r9, #1
 800948e:	d022      	beq.n	80094d6 <__cvt+0xac>
 8009490:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009494:	eb07 0906 	add.w	r9, r7, r6
 8009498:	d110      	bne.n	80094bc <__cvt+0x92>
 800949a:	783b      	ldrb	r3, [r7, #0]
 800949c:	2b30      	cmp	r3, #48	; 0x30
 800949e:	d10a      	bne.n	80094b6 <__cvt+0x8c>
 80094a0:	2200      	movs	r2, #0
 80094a2:	2300      	movs	r3, #0
 80094a4:	4620      	mov	r0, r4
 80094a6:	4629      	mov	r1, r5
 80094a8:	f7f7 fb0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80094ac:	b918      	cbnz	r0, 80094b6 <__cvt+0x8c>
 80094ae:	f1c6 0601 	rsb	r6, r6, #1
 80094b2:	f8ca 6000 	str.w	r6, [sl]
 80094b6:	f8da 3000 	ldr.w	r3, [sl]
 80094ba:	4499      	add	r9, r3
 80094bc:	2200      	movs	r2, #0
 80094be:	2300      	movs	r3, #0
 80094c0:	4620      	mov	r0, r4
 80094c2:	4629      	mov	r1, r5
 80094c4:	f7f7 fb00 	bl	8000ac8 <__aeabi_dcmpeq>
 80094c8:	b108      	cbz	r0, 80094ce <__cvt+0xa4>
 80094ca:	f8cd 900c 	str.w	r9, [sp, #12]
 80094ce:	2230      	movs	r2, #48	; 0x30
 80094d0:	9b03      	ldr	r3, [sp, #12]
 80094d2:	454b      	cmp	r3, r9
 80094d4:	d307      	bcc.n	80094e6 <__cvt+0xbc>
 80094d6:	9b03      	ldr	r3, [sp, #12]
 80094d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094da:	1bdb      	subs	r3, r3, r7
 80094dc:	4638      	mov	r0, r7
 80094de:	6013      	str	r3, [r2, #0]
 80094e0:	b004      	add	sp, #16
 80094e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e6:	1c59      	adds	r1, r3, #1
 80094e8:	9103      	str	r1, [sp, #12]
 80094ea:	701a      	strb	r2, [r3, #0]
 80094ec:	e7f0      	b.n	80094d0 <__cvt+0xa6>

080094ee <__exponent>:
 80094ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094f0:	4603      	mov	r3, r0
 80094f2:	2900      	cmp	r1, #0
 80094f4:	bfb8      	it	lt
 80094f6:	4249      	neglt	r1, r1
 80094f8:	f803 2b02 	strb.w	r2, [r3], #2
 80094fc:	bfb4      	ite	lt
 80094fe:	222d      	movlt	r2, #45	; 0x2d
 8009500:	222b      	movge	r2, #43	; 0x2b
 8009502:	2909      	cmp	r1, #9
 8009504:	7042      	strb	r2, [r0, #1]
 8009506:	dd2a      	ble.n	800955e <__exponent+0x70>
 8009508:	f10d 0207 	add.w	r2, sp, #7
 800950c:	4617      	mov	r7, r2
 800950e:	260a      	movs	r6, #10
 8009510:	4694      	mov	ip, r2
 8009512:	fb91 f5f6 	sdiv	r5, r1, r6
 8009516:	fb06 1415 	mls	r4, r6, r5, r1
 800951a:	3430      	adds	r4, #48	; 0x30
 800951c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009520:	460c      	mov	r4, r1
 8009522:	2c63      	cmp	r4, #99	; 0x63
 8009524:	f102 32ff 	add.w	r2, r2, #4294967295
 8009528:	4629      	mov	r1, r5
 800952a:	dcf1      	bgt.n	8009510 <__exponent+0x22>
 800952c:	3130      	adds	r1, #48	; 0x30
 800952e:	f1ac 0402 	sub.w	r4, ip, #2
 8009532:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009536:	1c41      	adds	r1, r0, #1
 8009538:	4622      	mov	r2, r4
 800953a:	42ba      	cmp	r2, r7
 800953c:	d30a      	bcc.n	8009554 <__exponent+0x66>
 800953e:	f10d 0209 	add.w	r2, sp, #9
 8009542:	eba2 020c 	sub.w	r2, r2, ip
 8009546:	42bc      	cmp	r4, r7
 8009548:	bf88      	it	hi
 800954a:	2200      	movhi	r2, #0
 800954c:	4413      	add	r3, r2
 800954e:	1a18      	subs	r0, r3, r0
 8009550:	b003      	add	sp, #12
 8009552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009554:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009558:	f801 5f01 	strb.w	r5, [r1, #1]!
 800955c:	e7ed      	b.n	800953a <__exponent+0x4c>
 800955e:	2330      	movs	r3, #48	; 0x30
 8009560:	3130      	adds	r1, #48	; 0x30
 8009562:	7083      	strb	r3, [r0, #2]
 8009564:	70c1      	strb	r1, [r0, #3]
 8009566:	1d03      	adds	r3, r0, #4
 8009568:	e7f1      	b.n	800954e <__exponent+0x60>
	...

0800956c <_printf_float>:
 800956c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009570:	ed2d 8b02 	vpush	{d8}
 8009574:	b08d      	sub	sp, #52	; 0x34
 8009576:	460c      	mov	r4, r1
 8009578:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800957c:	4616      	mov	r6, r2
 800957e:	461f      	mov	r7, r3
 8009580:	4605      	mov	r5, r0
 8009582:	f000 fd1f 	bl	8009fc4 <_localeconv_r>
 8009586:	f8d0 a000 	ldr.w	sl, [r0]
 800958a:	4650      	mov	r0, sl
 800958c:	f7f6 fe70 	bl	8000270 <strlen>
 8009590:	2300      	movs	r3, #0
 8009592:	930a      	str	r3, [sp, #40]	; 0x28
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	9305      	str	r3, [sp, #20]
 8009598:	f8d8 3000 	ldr.w	r3, [r8]
 800959c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80095a0:	3307      	adds	r3, #7
 80095a2:	f023 0307 	bic.w	r3, r3, #7
 80095a6:	f103 0208 	add.w	r2, r3, #8
 80095aa:	f8c8 2000 	str.w	r2, [r8]
 80095ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80095b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80095b6:	9307      	str	r3, [sp, #28]
 80095b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80095bc:	ee08 0a10 	vmov	s16, r0
 80095c0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80095c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095c8:	4b9e      	ldr	r3, [pc, #632]	; (8009844 <_printf_float+0x2d8>)
 80095ca:	f04f 32ff 	mov.w	r2, #4294967295
 80095ce:	f7f7 faad 	bl	8000b2c <__aeabi_dcmpun>
 80095d2:	bb88      	cbnz	r0, 8009638 <_printf_float+0xcc>
 80095d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095d8:	4b9a      	ldr	r3, [pc, #616]	; (8009844 <_printf_float+0x2d8>)
 80095da:	f04f 32ff 	mov.w	r2, #4294967295
 80095de:	f7f7 fa87 	bl	8000af0 <__aeabi_dcmple>
 80095e2:	bb48      	cbnz	r0, 8009638 <_printf_float+0xcc>
 80095e4:	2200      	movs	r2, #0
 80095e6:	2300      	movs	r3, #0
 80095e8:	4640      	mov	r0, r8
 80095ea:	4649      	mov	r1, r9
 80095ec:	f7f7 fa76 	bl	8000adc <__aeabi_dcmplt>
 80095f0:	b110      	cbz	r0, 80095f8 <_printf_float+0x8c>
 80095f2:	232d      	movs	r3, #45	; 0x2d
 80095f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095f8:	4a93      	ldr	r2, [pc, #588]	; (8009848 <_printf_float+0x2dc>)
 80095fa:	4b94      	ldr	r3, [pc, #592]	; (800984c <_printf_float+0x2e0>)
 80095fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009600:	bf94      	ite	ls
 8009602:	4690      	movls	r8, r2
 8009604:	4698      	movhi	r8, r3
 8009606:	2303      	movs	r3, #3
 8009608:	6123      	str	r3, [r4, #16]
 800960a:	9b05      	ldr	r3, [sp, #20]
 800960c:	f023 0304 	bic.w	r3, r3, #4
 8009610:	6023      	str	r3, [r4, #0]
 8009612:	f04f 0900 	mov.w	r9, #0
 8009616:	9700      	str	r7, [sp, #0]
 8009618:	4633      	mov	r3, r6
 800961a:	aa0b      	add	r2, sp, #44	; 0x2c
 800961c:	4621      	mov	r1, r4
 800961e:	4628      	mov	r0, r5
 8009620:	f000 f9da 	bl	80099d8 <_printf_common>
 8009624:	3001      	adds	r0, #1
 8009626:	f040 8090 	bne.w	800974a <_printf_float+0x1de>
 800962a:	f04f 30ff 	mov.w	r0, #4294967295
 800962e:	b00d      	add	sp, #52	; 0x34
 8009630:	ecbd 8b02 	vpop	{d8}
 8009634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009638:	4642      	mov	r2, r8
 800963a:	464b      	mov	r3, r9
 800963c:	4640      	mov	r0, r8
 800963e:	4649      	mov	r1, r9
 8009640:	f7f7 fa74 	bl	8000b2c <__aeabi_dcmpun>
 8009644:	b140      	cbz	r0, 8009658 <_printf_float+0xec>
 8009646:	464b      	mov	r3, r9
 8009648:	2b00      	cmp	r3, #0
 800964a:	bfbc      	itt	lt
 800964c:	232d      	movlt	r3, #45	; 0x2d
 800964e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009652:	4a7f      	ldr	r2, [pc, #508]	; (8009850 <_printf_float+0x2e4>)
 8009654:	4b7f      	ldr	r3, [pc, #508]	; (8009854 <_printf_float+0x2e8>)
 8009656:	e7d1      	b.n	80095fc <_printf_float+0x90>
 8009658:	6863      	ldr	r3, [r4, #4]
 800965a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800965e:	9206      	str	r2, [sp, #24]
 8009660:	1c5a      	adds	r2, r3, #1
 8009662:	d13f      	bne.n	80096e4 <_printf_float+0x178>
 8009664:	2306      	movs	r3, #6
 8009666:	6063      	str	r3, [r4, #4]
 8009668:	9b05      	ldr	r3, [sp, #20]
 800966a:	6861      	ldr	r1, [r4, #4]
 800966c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009670:	2300      	movs	r3, #0
 8009672:	9303      	str	r3, [sp, #12]
 8009674:	ab0a      	add	r3, sp, #40	; 0x28
 8009676:	e9cd b301 	strd	fp, r3, [sp, #4]
 800967a:	ab09      	add	r3, sp, #36	; 0x24
 800967c:	ec49 8b10 	vmov	d0, r8, r9
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	6022      	str	r2, [r4, #0]
 8009684:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009688:	4628      	mov	r0, r5
 800968a:	f7ff fece 	bl	800942a <__cvt>
 800968e:	9b06      	ldr	r3, [sp, #24]
 8009690:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009692:	2b47      	cmp	r3, #71	; 0x47
 8009694:	4680      	mov	r8, r0
 8009696:	d108      	bne.n	80096aa <_printf_float+0x13e>
 8009698:	1cc8      	adds	r0, r1, #3
 800969a:	db02      	blt.n	80096a2 <_printf_float+0x136>
 800969c:	6863      	ldr	r3, [r4, #4]
 800969e:	4299      	cmp	r1, r3
 80096a0:	dd41      	ble.n	8009726 <_printf_float+0x1ba>
 80096a2:	f1ab 0302 	sub.w	r3, fp, #2
 80096a6:	fa5f fb83 	uxtb.w	fp, r3
 80096aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80096ae:	d820      	bhi.n	80096f2 <_printf_float+0x186>
 80096b0:	3901      	subs	r1, #1
 80096b2:	465a      	mov	r2, fp
 80096b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80096b8:	9109      	str	r1, [sp, #36]	; 0x24
 80096ba:	f7ff ff18 	bl	80094ee <__exponent>
 80096be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096c0:	1813      	adds	r3, r2, r0
 80096c2:	2a01      	cmp	r2, #1
 80096c4:	4681      	mov	r9, r0
 80096c6:	6123      	str	r3, [r4, #16]
 80096c8:	dc02      	bgt.n	80096d0 <_printf_float+0x164>
 80096ca:	6822      	ldr	r2, [r4, #0]
 80096cc:	07d2      	lsls	r2, r2, #31
 80096ce:	d501      	bpl.n	80096d4 <_printf_float+0x168>
 80096d0:	3301      	adds	r3, #1
 80096d2:	6123      	str	r3, [r4, #16]
 80096d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d09c      	beq.n	8009616 <_printf_float+0xaa>
 80096dc:	232d      	movs	r3, #45	; 0x2d
 80096de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096e2:	e798      	b.n	8009616 <_printf_float+0xaa>
 80096e4:	9a06      	ldr	r2, [sp, #24]
 80096e6:	2a47      	cmp	r2, #71	; 0x47
 80096e8:	d1be      	bne.n	8009668 <_printf_float+0xfc>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1bc      	bne.n	8009668 <_printf_float+0xfc>
 80096ee:	2301      	movs	r3, #1
 80096f0:	e7b9      	b.n	8009666 <_printf_float+0xfa>
 80096f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80096f6:	d118      	bne.n	800972a <_printf_float+0x1be>
 80096f8:	2900      	cmp	r1, #0
 80096fa:	6863      	ldr	r3, [r4, #4]
 80096fc:	dd0b      	ble.n	8009716 <_printf_float+0x1aa>
 80096fe:	6121      	str	r1, [r4, #16]
 8009700:	b913      	cbnz	r3, 8009708 <_printf_float+0x19c>
 8009702:	6822      	ldr	r2, [r4, #0]
 8009704:	07d0      	lsls	r0, r2, #31
 8009706:	d502      	bpl.n	800970e <_printf_float+0x1a2>
 8009708:	3301      	adds	r3, #1
 800970a:	440b      	add	r3, r1
 800970c:	6123      	str	r3, [r4, #16]
 800970e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009710:	f04f 0900 	mov.w	r9, #0
 8009714:	e7de      	b.n	80096d4 <_printf_float+0x168>
 8009716:	b913      	cbnz	r3, 800971e <_printf_float+0x1b2>
 8009718:	6822      	ldr	r2, [r4, #0]
 800971a:	07d2      	lsls	r2, r2, #31
 800971c:	d501      	bpl.n	8009722 <_printf_float+0x1b6>
 800971e:	3302      	adds	r3, #2
 8009720:	e7f4      	b.n	800970c <_printf_float+0x1a0>
 8009722:	2301      	movs	r3, #1
 8009724:	e7f2      	b.n	800970c <_printf_float+0x1a0>
 8009726:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800972a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800972c:	4299      	cmp	r1, r3
 800972e:	db05      	blt.n	800973c <_printf_float+0x1d0>
 8009730:	6823      	ldr	r3, [r4, #0]
 8009732:	6121      	str	r1, [r4, #16]
 8009734:	07d8      	lsls	r0, r3, #31
 8009736:	d5ea      	bpl.n	800970e <_printf_float+0x1a2>
 8009738:	1c4b      	adds	r3, r1, #1
 800973a:	e7e7      	b.n	800970c <_printf_float+0x1a0>
 800973c:	2900      	cmp	r1, #0
 800973e:	bfd4      	ite	le
 8009740:	f1c1 0202 	rsble	r2, r1, #2
 8009744:	2201      	movgt	r2, #1
 8009746:	4413      	add	r3, r2
 8009748:	e7e0      	b.n	800970c <_printf_float+0x1a0>
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	055a      	lsls	r2, r3, #21
 800974e:	d407      	bmi.n	8009760 <_printf_float+0x1f4>
 8009750:	6923      	ldr	r3, [r4, #16]
 8009752:	4642      	mov	r2, r8
 8009754:	4631      	mov	r1, r6
 8009756:	4628      	mov	r0, r5
 8009758:	47b8      	blx	r7
 800975a:	3001      	adds	r0, #1
 800975c:	d12c      	bne.n	80097b8 <_printf_float+0x24c>
 800975e:	e764      	b.n	800962a <_printf_float+0xbe>
 8009760:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009764:	f240 80e0 	bls.w	8009928 <_printf_float+0x3bc>
 8009768:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800976c:	2200      	movs	r2, #0
 800976e:	2300      	movs	r3, #0
 8009770:	f7f7 f9aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8009774:	2800      	cmp	r0, #0
 8009776:	d034      	beq.n	80097e2 <_printf_float+0x276>
 8009778:	4a37      	ldr	r2, [pc, #220]	; (8009858 <_printf_float+0x2ec>)
 800977a:	2301      	movs	r3, #1
 800977c:	4631      	mov	r1, r6
 800977e:	4628      	mov	r0, r5
 8009780:	47b8      	blx	r7
 8009782:	3001      	adds	r0, #1
 8009784:	f43f af51 	beq.w	800962a <_printf_float+0xbe>
 8009788:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800978c:	429a      	cmp	r2, r3
 800978e:	db02      	blt.n	8009796 <_printf_float+0x22a>
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	07d8      	lsls	r0, r3, #31
 8009794:	d510      	bpl.n	80097b8 <_printf_float+0x24c>
 8009796:	ee18 3a10 	vmov	r3, s16
 800979a:	4652      	mov	r2, sl
 800979c:	4631      	mov	r1, r6
 800979e:	4628      	mov	r0, r5
 80097a0:	47b8      	blx	r7
 80097a2:	3001      	adds	r0, #1
 80097a4:	f43f af41 	beq.w	800962a <_printf_float+0xbe>
 80097a8:	f04f 0800 	mov.w	r8, #0
 80097ac:	f104 091a 	add.w	r9, r4, #26
 80097b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097b2:	3b01      	subs	r3, #1
 80097b4:	4543      	cmp	r3, r8
 80097b6:	dc09      	bgt.n	80097cc <_printf_float+0x260>
 80097b8:	6823      	ldr	r3, [r4, #0]
 80097ba:	079b      	lsls	r3, r3, #30
 80097bc:	f100 8107 	bmi.w	80099ce <_printf_float+0x462>
 80097c0:	68e0      	ldr	r0, [r4, #12]
 80097c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097c4:	4298      	cmp	r0, r3
 80097c6:	bfb8      	it	lt
 80097c8:	4618      	movlt	r0, r3
 80097ca:	e730      	b.n	800962e <_printf_float+0xc2>
 80097cc:	2301      	movs	r3, #1
 80097ce:	464a      	mov	r2, r9
 80097d0:	4631      	mov	r1, r6
 80097d2:	4628      	mov	r0, r5
 80097d4:	47b8      	blx	r7
 80097d6:	3001      	adds	r0, #1
 80097d8:	f43f af27 	beq.w	800962a <_printf_float+0xbe>
 80097dc:	f108 0801 	add.w	r8, r8, #1
 80097e0:	e7e6      	b.n	80097b0 <_printf_float+0x244>
 80097e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	dc39      	bgt.n	800985c <_printf_float+0x2f0>
 80097e8:	4a1b      	ldr	r2, [pc, #108]	; (8009858 <_printf_float+0x2ec>)
 80097ea:	2301      	movs	r3, #1
 80097ec:	4631      	mov	r1, r6
 80097ee:	4628      	mov	r0, r5
 80097f0:	47b8      	blx	r7
 80097f2:	3001      	adds	r0, #1
 80097f4:	f43f af19 	beq.w	800962a <_printf_float+0xbe>
 80097f8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80097fc:	4313      	orrs	r3, r2
 80097fe:	d102      	bne.n	8009806 <_printf_float+0x29a>
 8009800:	6823      	ldr	r3, [r4, #0]
 8009802:	07d9      	lsls	r1, r3, #31
 8009804:	d5d8      	bpl.n	80097b8 <_printf_float+0x24c>
 8009806:	ee18 3a10 	vmov	r3, s16
 800980a:	4652      	mov	r2, sl
 800980c:	4631      	mov	r1, r6
 800980e:	4628      	mov	r0, r5
 8009810:	47b8      	blx	r7
 8009812:	3001      	adds	r0, #1
 8009814:	f43f af09 	beq.w	800962a <_printf_float+0xbe>
 8009818:	f04f 0900 	mov.w	r9, #0
 800981c:	f104 0a1a 	add.w	sl, r4, #26
 8009820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009822:	425b      	negs	r3, r3
 8009824:	454b      	cmp	r3, r9
 8009826:	dc01      	bgt.n	800982c <_printf_float+0x2c0>
 8009828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800982a:	e792      	b.n	8009752 <_printf_float+0x1e6>
 800982c:	2301      	movs	r3, #1
 800982e:	4652      	mov	r2, sl
 8009830:	4631      	mov	r1, r6
 8009832:	4628      	mov	r0, r5
 8009834:	47b8      	blx	r7
 8009836:	3001      	adds	r0, #1
 8009838:	f43f aef7 	beq.w	800962a <_printf_float+0xbe>
 800983c:	f109 0901 	add.w	r9, r9, #1
 8009840:	e7ee      	b.n	8009820 <_printf_float+0x2b4>
 8009842:	bf00      	nop
 8009844:	7fefffff 	.word	0x7fefffff
 8009848:	0800c44c 	.word	0x0800c44c
 800984c:	0800c450 	.word	0x0800c450
 8009850:	0800c454 	.word	0x0800c454
 8009854:	0800c458 	.word	0x0800c458
 8009858:	0800c45c 	.word	0x0800c45c
 800985c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800985e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009860:	429a      	cmp	r2, r3
 8009862:	bfa8      	it	ge
 8009864:	461a      	movge	r2, r3
 8009866:	2a00      	cmp	r2, #0
 8009868:	4691      	mov	r9, r2
 800986a:	dc37      	bgt.n	80098dc <_printf_float+0x370>
 800986c:	f04f 0b00 	mov.w	fp, #0
 8009870:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009874:	f104 021a 	add.w	r2, r4, #26
 8009878:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800987a:	9305      	str	r3, [sp, #20]
 800987c:	eba3 0309 	sub.w	r3, r3, r9
 8009880:	455b      	cmp	r3, fp
 8009882:	dc33      	bgt.n	80098ec <_printf_float+0x380>
 8009884:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009888:	429a      	cmp	r2, r3
 800988a:	db3b      	blt.n	8009904 <_printf_float+0x398>
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	07da      	lsls	r2, r3, #31
 8009890:	d438      	bmi.n	8009904 <_printf_float+0x398>
 8009892:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009896:	eba2 0903 	sub.w	r9, r2, r3
 800989a:	9b05      	ldr	r3, [sp, #20]
 800989c:	1ad2      	subs	r2, r2, r3
 800989e:	4591      	cmp	r9, r2
 80098a0:	bfa8      	it	ge
 80098a2:	4691      	movge	r9, r2
 80098a4:	f1b9 0f00 	cmp.w	r9, #0
 80098a8:	dc35      	bgt.n	8009916 <_printf_float+0x3aa>
 80098aa:	f04f 0800 	mov.w	r8, #0
 80098ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098b2:	f104 0a1a 	add.w	sl, r4, #26
 80098b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098ba:	1a9b      	subs	r3, r3, r2
 80098bc:	eba3 0309 	sub.w	r3, r3, r9
 80098c0:	4543      	cmp	r3, r8
 80098c2:	f77f af79 	ble.w	80097b8 <_printf_float+0x24c>
 80098c6:	2301      	movs	r3, #1
 80098c8:	4652      	mov	r2, sl
 80098ca:	4631      	mov	r1, r6
 80098cc:	4628      	mov	r0, r5
 80098ce:	47b8      	blx	r7
 80098d0:	3001      	adds	r0, #1
 80098d2:	f43f aeaa 	beq.w	800962a <_printf_float+0xbe>
 80098d6:	f108 0801 	add.w	r8, r8, #1
 80098da:	e7ec      	b.n	80098b6 <_printf_float+0x34a>
 80098dc:	4613      	mov	r3, r2
 80098de:	4631      	mov	r1, r6
 80098e0:	4642      	mov	r2, r8
 80098e2:	4628      	mov	r0, r5
 80098e4:	47b8      	blx	r7
 80098e6:	3001      	adds	r0, #1
 80098e8:	d1c0      	bne.n	800986c <_printf_float+0x300>
 80098ea:	e69e      	b.n	800962a <_printf_float+0xbe>
 80098ec:	2301      	movs	r3, #1
 80098ee:	4631      	mov	r1, r6
 80098f0:	4628      	mov	r0, r5
 80098f2:	9205      	str	r2, [sp, #20]
 80098f4:	47b8      	blx	r7
 80098f6:	3001      	adds	r0, #1
 80098f8:	f43f ae97 	beq.w	800962a <_printf_float+0xbe>
 80098fc:	9a05      	ldr	r2, [sp, #20]
 80098fe:	f10b 0b01 	add.w	fp, fp, #1
 8009902:	e7b9      	b.n	8009878 <_printf_float+0x30c>
 8009904:	ee18 3a10 	vmov	r3, s16
 8009908:	4652      	mov	r2, sl
 800990a:	4631      	mov	r1, r6
 800990c:	4628      	mov	r0, r5
 800990e:	47b8      	blx	r7
 8009910:	3001      	adds	r0, #1
 8009912:	d1be      	bne.n	8009892 <_printf_float+0x326>
 8009914:	e689      	b.n	800962a <_printf_float+0xbe>
 8009916:	9a05      	ldr	r2, [sp, #20]
 8009918:	464b      	mov	r3, r9
 800991a:	4442      	add	r2, r8
 800991c:	4631      	mov	r1, r6
 800991e:	4628      	mov	r0, r5
 8009920:	47b8      	blx	r7
 8009922:	3001      	adds	r0, #1
 8009924:	d1c1      	bne.n	80098aa <_printf_float+0x33e>
 8009926:	e680      	b.n	800962a <_printf_float+0xbe>
 8009928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800992a:	2a01      	cmp	r2, #1
 800992c:	dc01      	bgt.n	8009932 <_printf_float+0x3c6>
 800992e:	07db      	lsls	r3, r3, #31
 8009930:	d53a      	bpl.n	80099a8 <_printf_float+0x43c>
 8009932:	2301      	movs	r3, #1
 8009934:	4642      	mov	r2, r8
 8009936:	4631      	mov	r1, r6
 8009938:	4628      	mov	r0, r5
 800993a:	47b8      	blx	r7
 800993c:	3001      	adds	r0, #1
 800993e:	f43f ae74 	beq.w	800962a <_printf_float+0xbe>
 8009942:	ee18 3a10 	vmov	r3, s16
 8009946:	4652      	mov	r2, sl
 8009948:	4631      	mov	r1, r6
 800994a:	4628      	mov	r0, r5
 800994c:	47b8      	blx	r7
 800994e:	3001      	adds	r0, #1
 8009950:	f43f ae6b 	beq.w	800962a <_printf_float+0xbe>
 8009954:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009958:	2200      	movs	r2, #0
 800995a:	2300      	movs	r3, #0
 800995c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009960:	f7f7 f8b2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009964:	b9d8      	cbnz	r0, 800999e <_printf_float+0x432>
 8009966:	f10a 33ff 	add.w	r3, sl, #4294967295
 800996a:	f108 0201 	add.w	r2, r8, #1
 800996e:	4631      	mov	r1, r6
 8009970:	4628      	mov	r0, r5
 8009972:	47b8      	blx	r7
 8009974:	3001      	adds	r0, #1
 8009976:	d10e      	bne.n	8009996 <_printf_float+0x42a>
 8009978:	e657      	b.n	800962a <_printf_float+0xbe>
 800997a:	2301      	movs	r3, #1
 800997c:	4652      	mov	r2, sl
 800997e:	4631      	mov	r1, r6
 8009980:	4628      	mov	r0, r5
 8009982:	47b8      	blx	r7
 8009984:	3001      	adds	r0, #1
 8009986:	f43f ae50 	beq.w	800962a <_printf_float+0xbe>
 800998a:	f108 0801 	add.w	r8, r8, #1
 800998e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009990:	3b01      	subs	r3, #1
 8009992:	4543      	cmp	r3, r8
 8009994:	dcf1      	bgt.n	800997a <_printf_float+0x40e>
 8009996:	464b      	mov	r3, r9
 8009998:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800999c:	e6da      	b.n	8009754 <_printf_float+0x1e8>
 800999e:	f04f 0800 	mov.w	r8, #0
 80099a2:	f104 0a1a 	add.w	sl, r4, #26
 80099a6:	e7f2      	b.n	800998e <_printf_float+0x422>
 80099a8:	2301      	movs	r3, #1
 80099aa:	4642      	mov	r2, r8
 80099ac:	e7df      	b.n	800996e <_printf_float+0x402>
 80099ae:	2301      	movs	r3, #1
 80099b0:	464a      	mov	r2, r9
 80099b2:	4631      	mov	r1, r6
 80099b4:	4628      	mov	r0, r5
 80099b6:	47b8      	blx	r7
 80099b8:	3001      	adds	r0, #1
 80099ba:	f43f ae36 	beq.w	800962a <_printf_float+0xbe>
 80099be:	f108 0801 	add.w	r8, r8, #1
 80099c2:	68e3      	ldr	r3, [r4, #12]
 80099c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099c6:	1a5b      	subs	r3, r3, r1
 80099c8:	4543      	cmp	r3, r8
 80099ca:	dcf0      	bgt.n	80099ae <_printf_float+0x442>
 80099cc:	e6f8      	b.n	80097c0 <_printf_float+0x254>
 80099ce:	f04f 0800 	mov.w	r8, #0
 80099d2:	f104 0919 	add.w	r9, r4, #25
 80099d6:	e7f4      	b.n	80099c2 <_printf_float+0x456>

080099d8 <_printf_common>:
 80099d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099dc:	4616      	mov	r6, r2
 80099de:	4699      	mov	r9, r3
 80099e0:	688a      	ldr	r2, [r1, #8]
 80099e2:	690b      	ldr	r3, [r1, #16]
 80099e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099e8:	4293      	cmp	r3, r2
 80099ea:	bfb8      	it	lt
 80099ec:	4613      	movlt	r3, r2
 80099ee:	6033      	str	r3, [r6, #0]
 80099f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099f4:	4607      	mov	r7, r0
 80099f6:	460c      	mov	r4, r1
 80099f8:	b10a      	cbz	r2, 80099fe <_printf_common+0x26>
 80099fa:	3301      	adds	r3, #1
 80099fc:	6033      	str	r3, [r6, #0]
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	0699      	lsls	r1, r3, #26
 8009a02:	bf42      	ittt	mi
 8009a04:	6833      	ldrmi	r3, [r6, #0]
 8009a06:	3302      	addmi	r3, #2
 8009a08:	6033      	strmi	r3, [r6, #0]
 8009a0a:	6825      	ldr	r5, [r4, #0]
 8009a0c:	f015 0506 	ands.w	r5, r5, #6
 8009a10:	d106      	bne.n	8009a20 <_printf_common+0x48>
 8009a12:	f104 0a19 	add.w	sl, r4, #25
 8009a16:	68e3      	ldr	r3, [r4, #12]
 8009a18:	6832      	ldr	r2, [r6, #0]
 8009a1a:	1a9b      	subs	r3, r3, r2
 8009a1c:	42ab      	cmp	r3, r5
 8009a1e:	dc26      	bgt.n	8009a6e <_printf_common+0x96>
 8009a20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a24:	1e13      	subs	r3, r2, #0
 8009a26:	6822      	ldr	r2, [r4, #0]
 8009a28:	bf18      	it	ne
 8009a2a:	2301      	movne	r3, #1
 8009a2c:	0692      	lsls	r2, r2, #26
 8009a2e:	d42b      	bmi.n	8009a88 <_printf_common+0xb0>
 8009a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a34:	4649      	mov	r1, r9
 8009a36:	4638      	mov	r0, r7
 8009a38:	47c0      	blx	r8
 8009a3a:	3001      	adds	r0, #1
 8009a3c:	d01e      	beq.n	8009a7c <_printf_common+0xa4>
 8009a3e:	6823      	ldr	r3, [r4, #0]
 8009a40:	6922      	ldr	r2, [r4, #16]
 8009a42:	f003 0306 	and.w	r3, r3, #6
 8009a46:	2b04      	cmp	r3, #4
 8009a48:	bf02      	ittt	eq
 8009a4a:	68e5      	ldreq	r5, [r4, #12]
 8009a4c:	6833      	ldreq	r3, [r6, #0]
 8009a4e:	1aed      	subeq	r5, r5, r3
 8009a50:	68a3      	ldr	r3, [r4, #8]
 8009a52:	bf0c      	ite	eq
 8009a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a58:	2500      	movne	r5, #0
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	bfc4      	itt	gt
 8009a5e:	1a9b      	subgt	r3, r3, r2
 8009a60:	18ed      	addgt	r5, r5, r3
 8009a62:	2600      	movs	r6, #0
 8009a64:	341a      	adds	r4, #26
 8009a66:	42b5      	cmp	r5, r6
 8009a68:	d11a      	bne.n	8009aa0 <_printf_common+0xc8>
 8009a6a:	2000      	movs	r0, #0
 8009a6c:	e008      	b.n	8009a80 <_printf_common+0xa8>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	4652      	mov	r2, sl
 8009a72:	4649      	mov	r1, r9
 8009a74:	4638      	mov	r0, r7
 8009a76:	47c0      	blx	r8
 8009a78:	3001      	adds	r0, #1
 8009a7a:	d103      	bne.n	8009a84 <_printf_common+0xac>
 8009a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a84:	3501      	adds	r5, #1
 8009a86:	e7c6      	b.n	8009a16 <_printf_common+0x3e>
 8009a88:	18e1      	adds	r1, r4, r3
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	2030      	movs	r0, #48	; 0x30
 8009a8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a92:	4422      	add	r2, r4
 8009a94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a9c:	3302      	adds	r3, #2
 8009a9e:	e7c7      	b.n	8009a30 <_printf_common+0x58>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	4622      	mov	r2, r4
 8009aa4:	4649      	mov	r1, r9
 8009aa6:	4638      	mov	r0, r7
 8009aa8:	47c0      	blx	r8
 8009aaa:	3001      	adds	r0, #1
 8009aac:	d0e6      	beq.n	8009a7c <_printf_common+0xa4>
 8009aae:	3601      	adds	r6, #1
 8009ab0:	e7d9      	b.n	8009a66 <_printf_common+0x8e>
	...

08009ab4 <_printf_i>:
 8009ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab8:	7e0f      	ldrb	r7, [r1, #24]
 8009aba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009abc:	2f78      	cmp	r7, #120	; 0x78
 8009abe:	4691      	mov	r9, r2
 8009ac0:	4680      	mov	r8, r0
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	469a      	mov	sl, r3
 8009ac6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009aca:	d807      	bhi.n	8009adc <_printf_i+0x28>
 8009acc:	2f62      	cmp	r7, #98	; 0x62
 8009ace:	d80a      	bhi.n	8009ae6 <_printf_i+0x32>
 8009ad0:	2f00      	cmp	r7, #0
 8009ad2:	f000 80d4 	beq.w	8009c7e <_printf_i+0x1ca>
 8009ad6:	2f58      	cmp	r7, #88	; 0x58
 8009ad8:	f000 80c0 	beq.w	8009c5c <_printf_i+0x1a8>
 8009adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ae4:	e03a      	b.n	8009b5c <_printf_i+0xa8>
 8009ae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009aea:	2b15      	cmp	r3, #21
 8009aec:	d8f6      	bhi.n	8009adc <_printf_i+0x28>
 8009aee:	a101      	add	r1, pc, #4	; (adr r1, 8009af4 <_printf_i+0x40>)
 8009af0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009af4:	08009b4d 	.word	0x08009b4d
 8009af8:	08009b61 	.word	0x08009b61
 8009afc:	08009add 	.word	0x08009add
 8009b00:	08009add 	.word	0x08009add
 8009b04:	08009add 	.word	0x08009add
 8009b08:	08009add 	.word	0x08009add
 8009b0c:	08009b61 	.word	0x08009b61
 8009b10:	08009add 	.word	0x08009add
 8009b14:	08009add 	.word	0x08009add
 8009b18:	08009add 	.word	0x08009add
 8009b1c:	08009add 	.word	0x08009add
 8009b20:	08009c65 	.word	0x08009c65
 8009b24:	08009b8d 	.word	0x08009b8d
 8009b28:	08009c1f 	.word	0x08009c1f
 8009b2c:	08009add 	.word	0x08009add
 8009b30:	08009add 	.word	0x08009add
 8009b34:	08009c87 	.word	0x08009c87
 8009b38:	08009add 	.word	0x08009add
 8009b3c:	08009b8d 	.word	0x08009b8d
 8009b40:	08009add 	.word	0x08009add
 8009b44:	08009add 	.word	0x08009add
 8009b48:	08009c27 	.word	0x08009c27
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	1d1a      	adds	r2, r3, #4
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	602a      	str	r2, [r5, #0]
 8009b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e09f      	b.n	8009ca0 <_printf_i+0x1ec>
 8009b60:	6820      	ldr	r0, [r4, #0]
 8009b62:	682b      	ldr	r3, [r5, #0]
 8009b64:	0607      	lsls	r7, r0, #24
 8009b66:	f103 0104 	add.w	r1, r3, #4
 8009b6a:	6029      	str	r1, [r5, #0]
 8009b6c:	d501      	bpl.n	8009b72 <_printf_i+0xbe>
 8009b6e:	681e      	ldr	r6, [r3, #0]
 8009b70:	e003      	b.n	8009b7a <_printf_i+0xc6>
 8009b72:	0646      	lsls	r6, r0, #25
 8009b74:	d5fb      	bpl.n	8009b6e <_printf_i+0xba>
 8009b76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009b7a:	2e00      	cmp	r6, #0
 8009b7c:	da03      	bge.n	8009b86 <_printf_i+0xd2>
 8009b7e:	232d      	movs	r3, #45	; 0x2d
 8009b80:	4276      	negs	r6, r6
 8009b82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b86:	485a      	ldr	r0, [pc, #360]	; (8009cf0 <_printf_i+0x23c>)
 8009b88:	230a      	movs	r3, #10
 8009b8a:	e012      	b.n	8009bb2 <_printf_i+0xfe>
 8009b8c:	682b      	ldr	r3, [r5, #0]
 8009b8e:	6820      	ldr	r0, [r4, #0]
 8009b90:	1d19      	adds	r1, r3, #4
 8009b92:	6029      	str	r1, [r5, #0]
 8009b94:	0605      	lsls	r5, r0, #24
 8009b96:	d501      	bpl.n	8009b9c <_printf_i+0xe8>
 8009b98:	681e      	ldr	r6, [r3, #0]
 8009b9a:	e002      	b.n	8009ba2 <_printf_i+0xee>
 8009b9c:	0641      	lsls	r1, r0, #25
 8009b9e:	d5fb      	bpl.n	8009b98 <_printf_i+0xe4>
 8009ba0:	881e      	ldrh	r6, [r3, #0]
 8009ba2:	4853      	ldr	r0, [pc, #332]	; (8009cf0 <_printf_i+0x23c>)
 8009ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8009ba6:	bf0c      	ite	eq
 8009ba8:	2308      	moveq	r3, #8
 8009baa:	230a      	movne	r3, #10
 8009bac:	2100      	movs	r1, #0
 8009bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bb2:	6865      	ldr	r5, [r4, #4]
 8009bb4:	60a5      	str	r5, [r4, #8]
 8009bb6:	2d00      	cmp	r5, #0
 8009bb8:	bfa2      	ittt	ge
 8009bba:	6821      	ldrge	r1, [r4, #0]
 8009bbc:	f021 0104 	bicge.w	r1, r1, #4
 8009bc0:	6021      	strge	r1, [r4, #0]
 8009bc2:	b90e      	cbnz	r6, 8009bc8 <_printf_i+0x114>
 8009bc4:	2d00      	cmp	r5, #0
 8009bc6:	d04b      	beq.n	8009c60 <_printf_i+0x1ac>
 8009bc8:	4615      	mov	r5, r2
 8009bca:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bce:	fb03 6711 	mls	r7, r3, r1, r6
 8009bd2:	5dc7      	ldrb	r7, [r0, r7]
 8009bd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bd8:	4637      	mov	r7, r6
 8009bda:	42bb      	cmp	r3, r7
 8009bdc:	460e      	mov	r6, r1
 8009bde:	d9f4      	bls.n	8009bca <_printf_i+0x116>
 8009be0:	2b08      	cmp	r3, #8
 8009be2:	d10b      	bne.n	8009bfc <_printf_i+0x148>
 8009be4:	6823      	ldr	r3, [r4, #0]
 8009be6:	07de      	lsls	r6, r3, #31
 8009be8:	d508      	bpl.n	8009bfc <_printf_i+0x148>
 8009bea:	6923      	ldr	r3, [r4, #16]
 8009bec:	6861      	ldr	r1, [r4, #4]
 8009bee:	4299      	cmp	r1, r3
 8009bf0:	bfde      	ittt	le
 8009bf2:	2330      	movle	r3, #48	; 0x30
 8009bf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009bfc:	1b52      	subs	r2, r2, r5
 8009bfe:	6122      	str	r2, [r4, #16]
 8009c00:	f8cd a000 	str.w	sl, [sp]
 8009c04:	464b      	mov	r3, r9
 8009c06:	aa03      	add	r2, sp, #12
 8009c08:	4621      	mov	r1, r4
 8009c0a:	4640      	mov	r0, r8
 8009c0c:	f7ff fee4 	bl	80099d8 <_printf_common>
 8009c10:	3001      	adds	r0, #1
 8009c12:	d14a      	bne.n	8009caa <_printf_i+0x1f6>
 8009c14:	f04f 30ff 	mov.w	r0, #4294967295
 8009c18:	b004      	add	sp, #16
 8009c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	f043 0320 	orr.w	r3, r3, #32
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	4833      	ldr	r0, [pc, #204]	; (8009cf4 <_printf_i+0x240>)
 8009c28:	2778      	movs	r7, #120	; 0x78
 8009c2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c2e:	6823      	ldr	r3, [r4, #0]
 8009c30:	6829      	ldr	r1, [r5, #0]
 8009c32:	061f      	lsls	r7, r3, #24
 8009c34:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c38:	d402      	bmi.n	8009c40 <_printf_i+0x18c>
 8009c3a:	065f      	lsls	r7, r3, #25
 8009c3c:	bf48      	it	mi
 8009c3e:	b2b6      	uxthmi	r6, r6
 8009c40:	07df      	lsls	r7, r3, #31
 8009c42:	bf48      	it	mi
 8009c44:	f043 0320 	orrmi.w	r3, r3, #32
 8009c48:	6029      	str	r1, [r5, #0]
 8009c4a:	bf48      	it	mi
 8009c4c:	6023      	strmi	r3, [r4, #0]
 8009c4e:	b91e      	cbnz	r6, 8009c58 <_printf_i+0x1a4>
 8009c50:	6823      	ldr	r3, [r4, #0]
 8009c52:	f023 0320 	bic.w	r3, r3, #32
 8009c56:	6023      	str	r3, [r4, #0]
 8009c58:	2310      	movs	r3, #16
 8009c5a:	e7a7      	b.n	8009bac <_printf_i+0xf8>
 8009c5c:	4824      	ldr	r0, [pc, #144]	; (8009cf0 <_printf_i+0x23c>)
 8009c5e:	e7e4      	b.n	8009c2a <_printf_i+0x176>
 8009c60:	4615      	mov	r5, r2
 8009c62:	e7bd      	b.n	8009be0 <_printf_i+0x12c>
 8009c64:	682b      	ldr	r3, [r5, #0]
 8009c66:	6826      	ldr	r6, [r4, #0]
 8009c68:	6961      	ldr	r1, [r4, #20]
 8009c6a:	1d18      	adds	r0, r3, #4
 8009c6c:	6028      	str	r0, [r5, #0]
 8009c6e:	0635      	lsls	r5, r6, #24
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	d501      	bpl.n	8009c78 <_printf_i+0x1c4>
 8009c74:	6019      	str	r1, [r3, #0]
 8009c76:	e002      	b.n	8009c7e <_printf_i+0x1ca>
 8009c78:	0670      	lsls	r0, r6, #25
 8009c7a:	d5fb      	bpl.n	8009c74 <_printf_i+0x1c0>
 8009c7c:	8019      	strh	r1, [r3, #0]
 8009c7e:	2300      	movs	r3, #0
 8009c80:	6123      	str	r3, [r4, #16]
 8009c82:	4615      	mov	r5, r2
 8009c84:	e7bc      	b.n	8009c00 <_printf_i+0x14c>
 8009c86:	682b      	ldr	r3, [r5, #0]
 8009c88:	1d1a      	adds	r2, r3, #4
 8009c8a:	602a      	str	r2, [r5, #0]
 8009c8c:	681d      	ldr	r5, [r3, #0]
 8009c8e:	6862      	ldr	r2, [r4, #4]
 8009c90:	2100      	movs	r1, #0
 8009c92:	4628      	mov	r0, r5
 8009c94:	f7f6 fa9c 	bl	80001d0 <memchr>
 8009c98:	b108      	cbz	r0, 8009c9e <_printf_i+0x1ea>
 8009c9a:	1b40      	subs	r0, r0, r5
 8009c9c:	6060      	str	r0, [r4, #4]
 8009c9e:	6863      	ldr	r3, [r4, #4]
 8009ca0:	6123      	str	r3, [r4, #16]
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ca8:	e7aa      	b.n	8009c00 <_printf_i+0x14c>
 8009caa:	6923      	ldr	r3, [r4, #16]
 8009cac:	462a      	mov	r2, r5
 8009cae:	4649      	mov	r1, r9
 8009cb0:	4640      	mov	r0, r8
 8009cb2:	47d0      	blx	sl
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d0ad      	beq.n	8009c14 <_printf_i+0x160>
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	079b      	lsls	r3, r3, #30
 8009cbc:	d413      	bmi.n	8009ce6 <_printf_i+0x232>
 8009cbe:	68e0      	ldr	r0, [r4, #12]
 8009cc0:	9b03      	ldr	r3, [sp, #12]
 8009cc2:	4298      	cmp	r0, r3
 8009cc4:	bfb8      	it	lt
 8009cc6:	4618      	movlt	r0, r3
 8009cc8:	e7a6      	b.n	8009c18 <_printf_i+0x164>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	4632      	mov	r2, r6
 8009cce:	4649      	mov	r1, r9
 8009cd0:	4640      	mov	r0, r8
 8009cd2:	47d0      	blx	sl
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	d09d      	beq.n	8009c14 <_printf_i+0x160>
 8009cd8:	3501      	adds	r5, #1
 8009cda:	68e3      	ldr	r3, [r4, #12]
 8009cdc:	9903      	ldr	r1, [sp, #12]
 8009cde:	1a5b      	subs	r3, r3, r1
 8009ce0:	42ab      	cmp	r3, r5
 8009ce2:	dcf2      	bgt.n	8009cca <_printf_i+0x216>
 8009ce4:	e7eb      	b.n	8009cbe <_printf_i+0x20a>
 8009ce6:	2500      	movs	r5, #0
 8009ce8:	f104 0619 	add.w	r6, r4, #25
 8009cec:	e7f5      	b.n	8009cda <_printf_i+0x226>
 8009cee:	bf00      	nop
 8009cf0:	0800c45e 	.word	0x0800c45e
 8009cf4:	0800c46f 	.word	0x0800c46f

08009cf8 <std>:
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	b510      	push	{r4, lr}
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8009d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d06:	6083      	str	r3, [r0, #8]
 8009d08:	8181      	strh	r1, [r0, #12]
 8009d0a:	6643      	str	r3, [r0, #100]	; 0x64
 8009d0c:	81c2      	strh	r2, [r0, #14]
 8009d0e:	6183      	str	r3, [r0, #24]
 8009d10:	4619      	mov	r1, r3
 8009d12:	2208      	movs	r2, #8
 8009d14:	305c      	adds	r0, #92	; 0x5c
 8009d16:	f000 f94d 	bl	8009fb4 <memset>
 8009d1a:	4b0d      	ldr	r3, [pc, #52]	; (8009d50 <std+0x58>)
 8009d1c:	6263      	str	r3, [r4, #36]	; 0x24
 8009d1e:	4b0d      	ldr	r3, [pc, #52]	; (8009d54 <std+0x5c>)
 8009d20:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d22:	4b0d      	ldr	r3, [pc, #52]	; (8009d58 <std+0x60>)
 8009d24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d26:	4b0d      	ldr	r3, [pc, #52]	; (8009d5c <std+0x64>)
 8009d28:	6323      	str	r3, [r4, #48]	; 0x30
 8009d2a:	4b0d      	ldr	r3, [pc, #52]	; (8009d60 <std+0x68>)
 8009d2c:	6224      	str	r4, [r4, #32]
 8009d2e:	429c      	cmp	r4, r3
 8009d30:	d006      	beq.n	8009d40 <std+0x48>
 8009d32:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009d36:	4294      	cmp	r4, r2
 8009d38:	d002      	beq.n	8009d40 <std+0x48>
 8009d3a:	33d0      	adds	r3, #208	; 0xd0
 8009d3c:	429c      	cmp	r4, r3
 8009d3e:	d105      	bne.n	8009d4c <std+0x54>
 8009d40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d48:	f000 b9b0 	b.w	800a0ac <__retarget_lock_init_recursive>
 8009d4c:	bd10      	pop	{r4, pc}
 8009d4e:	bf00      	nop
 8009d50:	08009ebd 	.word	0x08009ebd
 8009d54:	08009edf 	.word	0x08009edf
 8009d58:	08009f17 	.word	0x08009f17
 8009d5c:	08009f3b 	.word	0x08009f3b
 8009d60:	20000608 	.word	0x20000608

08009d64 <stdio_exit_handler>:
 8009d64:	4a02      	ldr	r2, [pc, #8]	; (8009d70 <stdio_exit_handler+0xc>)
 8009d66:	4903      	ldr	r1, [pc, #12]	; (8009d74 <stdio_exit_handler+0x10>)
 8009d68:	4803      	ldr	r0, [pc, #12]	; (8009d78 <stdio_exit_handler+0x14>)
 8009d6a:	f000 b869 	b.w	8009e40 <_fwalk_sglue>
 8009d6e:	bf00      	nop
 8009d70:	2000002c 	.word	0x2000002c
 8009d74:	0800ba61 	.word	0x0800ba61
 8009d78:	20000038 	.word	0x20000038

08009d7c <cleanup_stdio>:
 8009d7c:	6841      	ldr	r1, [r0, #4]
 8009d7e:	4b0c      	ldr	r3, [pc, #48]	; (8009db0 <cleanup_stdio+0x34>)
 8009d80:	4299      	cmp	r1, r3
 8009d82:	b510      	push	{r4, lr}
 8009d84:	4604      	mov	r4, r0
 8009d86:	d001      	beq.n	8009d8c <cleanup_stdio+0x10>
 8009d88:	f001 fe6a 	bl	800ba60 <_fflush_r>
 8009d8c:	68a1      	ldr	r1, [r4, #8]
 8009d8e:	4b09      	ldr	r3, [pc, #36]	; (8009db4 <cleanup_stdio+0x38>)
 8009d90:	4299      	cmp	r1, r3
 8009d92:	d002      	beq.n	8009d9a <cleanup_stdio+0x1e>
 8009d94:	4620      	mov	r0, r4
 8009d96:	f001 fe63 	bl	800ba60 <_fflush_r>
 8009d9a:	68e1      	ldr	r1, [r4, #12]
 8009d9c:	4b06      	ldr	r3, [pc, #24]	; (8009db8 <cleanup_stdio+0x3c>)
 8009d9e:	4299      	cmp	r1, r3
 8009da0:	d004      	beq.n	8009dac <cleanup_stdio+0x30>
 8009da2:	4620      	mov	r0, r4
 8009da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009da8:	f001 be5a 	b.w	800ba60 <_fflush_r>
 8009dac:	bd10      	pop	{r4, pc}
 8009dae:	bf00      	nop
 8009db0:	20000608 	.word	0x20000608
 8009db4:	20000670 	.word	0x20000670
 8009db8:	200006d8 	.word	0x200006d8

08009dbc <global_stdio_init.part.0>:
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	4b0b      	ldr	r3, [pc, #44]	; (8009dec <global_stdio_init.part.0+0x30>)
 8009dc0:	4c0b      	ldr	r4, [pc, #44]	; (8009df0 <global_stdio_init.part.0+0x34>)
 8009dc2:	4a0c      	ldr	r2, [pc, #48]	; (8009df4 <global_stdio_init.part.0+0x38>)
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	2200      	movs	r2, #0
 8009dca:	2104      	movs	r1, #4
 8009dcc:	f7ff ff94 	bl	8009cf8 <std>
 8009dd0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	2109      	movs	r1, #9
 8009dd8:	f7ff ff8e 	bl	8009cf8 <std>
 8009ddc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009de0:	2202      	movs	r2, #2
 8009de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009de6:	2112      	movs	r1, #18
 8009de8:	f7ff bf86 	b.w	8009cf8 <std>
 8009dec:	20000740 	.word	0x20000740
 8009df0:	20000608 	.word	0x20000608
 8009df4:	08009d65 	.word	0x08009d65

08009df8 <__sfp_lock_acquire>:
 8009df8:	4801      	ldr	r0, [pc, #4]	; (8009e00 <__sfp_lock_acquire+0x8>)
 8009dfa:	f000 b958 	b.w	800a0ae <__retarget_lock_acquire_recursive>
 8009dfe:	bf00      	nop
 8009e00:	20000749 	.word	0x20000749

08009e04 <__sfp_lock_release>:
 8009e04:	4801      	ldr	r0, [pc, #4]	; (8009e0c <__sfp_lock_release+0x8>)
 8009e06:	f000 b953 	b.w	800a0b0 <__retarget_lock_release_recursive>
 8009e0a:	bf00      	nop
 8009e0c:	20000749 	.word	0x20000749

08009e10 <__sinit>:
 8009e10:	b510      	push	{r4, lr}
 8009e12:	4604      	mov	r4, r0
 8009e14:	f7ff fff0 	bl	8009df8 <__sfp_lock_acquire>
 8009e18:	6a23      	ldr	r3, [r4, #32]
 8009e1a:	b11b      	cbz	r3, 8009e24 <__sinit+0x14>
 8009e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e20:	f7ff bff0 	b.w	8009e04 <__sfp_lock_release>
 8009e24:	4b04      	ldr	r3, [pc, #16]	; (8009e38 <__sinit+0x28>)
 8009e26:	6223      	str	r3, [r4, #32]
 8009e28:	4b04      	ldr	r3, [pc, #16]	; (8009e3c <__sinit+0x2c>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d1f5      	bne.n	8009e1c <__sinit+0xc>
 8009e30:	f7ff ffc4 	bl	8009dbc <global_stdio_init.part.0>
 8009e34:	e7f2      	b.n	8009e1c <__sinit+0xc>
 8009e36:	bf00      	nop
 8009e38:	08009d7d 	.word	0x08009d7d
 8009e3c:	20000740 	.word	0x20000740

08009e40 <_fwalk_sglue>:
 8009e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e44:	4607      	mov	r7, r0
 8009e46:	4688      	mov	r8, r1
 8009e48:	4614      	mov	r4, r2
 8009e4a:	2600      	movs	r6, #0
 8009e4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e50:	f1b9 0901 	subs.w	r9, r9, #1
 8009e54:	d505      	bpl.n	8009e62 <_fwalk_sglue+0x22>
 8009e56:	6824      	ldr	r4, [r4, #0]
 8009e58:	2c00      	cmp	r4, #0
 8009e5a:	d1f7      	bne.n	8009e4c <_fwalk_sglue+0xc>
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e62:	89ab      	ldrh	r3, [r5, #12]
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d907      	bls.n	8009e78 <_fwalk_sglue+0x38>
 8009e68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	d003      	beq.n	8009e78 <_fwalk_sglue+0x38>
 8009e70:	4629      	mov	r1, r5
 8009e72:	4638      	mov	r0, r7
 8009e74:	47c0      	blx	r8
 8009e76:	4306      	orrs	r6, r0
 8009e78:	3568      	adds	r5, #104	; 0x68
 8009e7a:	e7e9      	b.n	8009e50 <_fwalk_sglue+0x10>

08009e7c <siprintf>:
 8009e7c:	b40e      	push	{r1, r2, r3}
 8009e7e:	b500      	push	{lr}
 8009e80:	b09c      	sub	sp, #112	; 0x70
 8009e82:	ab1d      	add	r3, sp, #116	; 0x74
 8009e84:	9002      	str	r0, [sp, #8]
 8009e86:	9006      	str	r0, [sp, #24]
 8009e88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e8c:	4809      	ldr	r0, [pc, #36]	; (8009eb4 <siprintf+0x38>)
 8009e8e:	9107      	str	r1, [sp, #28]
 8009e90:	9104      	str	r1, [sp, #16]
 8009e92:	4909      	ldr	r1, [pc, #36]	; (8009eb8 <siprintf+0x3c>)
 8009e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e98:	9105      	str	r1, [sp, #20]
 8009e9a:	6800      	ldr	r0, [r0, #0]
 8009e9c:	9301      	str	r3, [sp, #4]
 8009e9e:	a902      	add	r1, sp, #8
 8009ea0:	f001 fc5a 	bl	800b758 <_svfiprintf_r>
 8009ea4:	9b02      	ldr	r3, [sp, #8]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	701a      	strb	r2, [r3, #0]
 8009eaa:	b01c      	add	sp, #112	; 0x70
 8009eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eb0:	b003      	add	sp, #12
 8009eb2:	4770      	bx	lr
 8009eb4:	20000084 	.word	0x20000084
 8009eb8:	ffff0208 	.word	0xffff0208

08009ebc <__sread>:
 8009ebc:	b510      	push	{r4, lr}
 8009ebe:	460c      	mov	r4, r1
 8009ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec4:	f000 f8a4 	bl	800a010 <_read_r>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	bfab      	itete	ge
 8009ecc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ece:	89a3      	ldrhlt	r3, [r4, #12]
 8009ed0:	181b      	addge	r3, r3, r0
 8009ed2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ed6:	bfac      	ite	ge
 8009ed8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009eda:	81a3      	strhlt	r3, [r4, #12]
 8009edc:	bd10      	pop	{r4, pc}

08009ede <__swrite>:
 8009ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee2:	461f      	mov	r7, r3
 8009ee4:	898b      	ldrh	r3, [r1, #12]
 8009ee6:	05db      	lsls	r3, r3, #23
 8009ee8:	4605      	mov	r5, r0
 8009eea:	460c      	mov	r4, r1
 8009eec:	4616      	mov	r6, r2
 8009eee:	d505      	bpl.n	8009efc <__swrite+0x1e>
 8009ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ef4:	2302      	movs	r3, #2
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f000 f878 	bl	8009fec <_lseek_r>
 8009efc:	89a3      	ldrh	r3, [r4, #12]
 8009efe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f06:	81a3      	strh	r3, [r4, #12]
 8009f08:	4632      	mov	r2, r6
 8009f0a:	463b      	mov	r3, r7
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f12:	f000 b88f 	b.w	800a034 <_write_r>

08009f16 <__sseek>:
 8009f16:	b510      	push	{r4, lr}
 8009f18:	460c      	mov	r4, r1
 8009f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f1e:	f000 f865 	bl	8009fec <_lseek_r>
 8009f22:	1c43      	adds	r3, r0, #1
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	bf15      	itete	ne
 8009f28:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f32:	81a3      	strheq	r3, [r4, #12]
 8009f34:	bf18      	it	ne
 8009f36:	81a3      	strhne	r3, [r4, #12]
 8009f38:	bd10      	pop	{r4, pc}

08009f3a <__sclose>:
 8009f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f3e:	f000 b845 	b.w	8009fcc <_close_r>

08009f42 <_vsniprintf_r>:
 8009f42:	b530      	push	{r4, r5, lr}
 8009f44:	4614      	mov	r4, r2
 8009f46:	2c00      	cmp	r4, #0
 8009f48:	b09b      	sub	sp, #108	; 0x6c
 8009f4a:	4605      	mov	r5, r0
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	da05      	bge.n	8009f5c <_vsniprintf_r+0x1a>
 8009f50:	238b      	movs	r3, #139	; 0x8b
 8009f52:	6003      	str	r3, [r0, #0]
 8009f54:	f04f 30ff 	mov.w	r0, #4294967295
 8009f58:	b01b      	add	sp, #108	; 0x6c
 8009f5a:	bd30      	pop	{r4, r5, pc}
 8009f5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009f60:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009f64:	bf14      	ite	ne
 8009f66:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009f6a:	4623      	moveq	r3, r4
 8009f6c:	9302      	str	r3, [sp, #8]
 8009f6e:	9305      	str	r3, [sp, #20]
 8009f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f74:	9100      	str	r1, [sp, #0]
 8009f76:	9104      	str	r1, [sp, #16]
 8009f78:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009f7c:	4669      	mov	r1, sp
 8009f7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009f80:	f001 fbea 	bl	800b758 <_svfiprintf_r>
 8009f84:	1c43      	adds	r3, r0, #1
 8009f86:	bfbc      	itt	lt
 8009f88:	238b      	movlt	r3, #139	; 0x8b
 8009f8a:	602b      	strlt	r3, [r5, #0]
 8009f8c:	2c00      	cmp	r4, #0
 8009f8e:	d0e3      	beq.n	8009f58 <_vsniprintf_r+0x16>
 8009f90:	9b00      	ldr	r3, [sp, #0]
 8009f92:	2200      	movs	r2, #0
 8009f94:	701a      	strb	r2, [r3, #0]
 8009f96:	e7df      	b.n	8009f58 <_vsniprintf_r+0x16>

08009f98 <vsniprintf>:
 8009f98:	b507      	push	{r0, r1, r2, lr}
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	460a      	mov	r2, r1
 8009fa0:	4601      	mov	r1, r0
 8009fa2:	4803      	ldr	r0, [pc, #12]	; (8009fb0 <vsniprintf+0x18>)
 8009fa4:	6800      	ldr	r0, [r0, #0]
 8009fa6:	f7ff ffcc 	bl	8009f42 <_vsniprintf_r>
 8009faa:	b003      	add	sp, #12
 8009fac:	f85d fb04 	ldr.w	pc, [sp], #4
 8009fb0:	20000084 	.word	0x20000084

08009fb4 <memset>:
 8009fb4:	4402      	add	r2, r0
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d100      	bne.n	8009fbe <memset+0xa>
 8009fbc:	4770      	bx	lr
 8009fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8009fc2:	e7f9      	b.n	8009fb8 <memset+0x4>

08009fc4 <_localeconv_r>:
 8009fc4:	4800      	ldr	r0, [pc, #0]	; (8009fc8 <_localeconv_r+0x4>)
 8009fc6:	4770      	bx	lr
 8009fc8:	20000178 	.word	0x20000178

08009fcc <_close_r>:
 8009fcc:	b538      	push	{r3, r4, r5, lr}
 8009fce:	4d06      	ldr	r5, [pc, #24]	; (8009fe8 <_close_r+0x1c>)
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	4608      	mov	r0, r1
 8009fd6:	602b      	str	r3, [r5, #0]
 8009fd8:	f7f7 fe65 	bl	8001ca6 <_close>
 8009fdc:	1c43      	adds	r3, r0, #1
 8009fde:	d102      	bne.n	8009fe6 <_close_r+0x1a>
 8009fe0:	682b      	ldr	r3, [r5, #0]
 8009fe2:	b103      	cbz	r3, 8009fe6 <_close_r+0x1a>
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}
 8009fe8:	20000744 	.word	0x20000744

08009fec <_lseek_r>:
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	4d07      	ldr	r5, [pc, #28]	; (800a00c <_lseek_r+0x20>)
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	4608      	mov	r0, r1
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	602a      	str	r2, [r5, #0]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	f7f7 fe7a 	bl	8001cf4 <_lseek>
 800a000:	1c43      	adds	r3, r0, #1
 800a002:	d102      	bne.n	800a00a <_lseek_r+0x1e>
 800a004:	682b      	ldr	r3, [r5, #0]
 800a006:	b103      	cbz	r3, 800a00a <_lseek_r+0x1e>
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	bd38      	pop	{r3, r4, r5, pc}
 800a00c:	20000744 	.word	0x20000744

0800a010 <_read_r>:
 800a010:	b538      	push	{r3, r4, r5, lr}
 800a012:	4d07      	ldr	r5, [pc, #28]	; (800a030 <_read_r+0x20>)
 800a014:	4604      	mov	r4, r0
 800a016:	4608      	mov	r0, r1
 800a018:	4611      	mov	r1, r2
 800a01a:	2200      	movs	r2, #0
 800a01c:	602a      	str	r2, [r5, #0]
 800a01e:	461a      	mov	r2, r3
 800a020:	f7f7 fe08 	bl	8001c34 <_read>
 800a024:	1c43      	adds	r3, r0, #1
 800a026:	d102      	bne.n	800a02e <_read_r+0x1e>
 800a028:	682b      	ldr	r3, [r5, #0]
 800a02a:	b103      	cbz	r3, 800a02e <_read_r+0x1e>
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	bd38      	pop	{r3, r4, r5, pc}
 800a030:	20000744 	.word	0x20000744

0800a034 <_write_r>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	4d07      	ldr	r5, [pc, #28]	; (800a054 <_write_r+0x20>)
 800a038:	4604      	mov	r4, r0
 800a03a:	4608      	mov	r0, r1
 800a03c:	4611      	mov	r1, r2
 800a03e:	2200      	movs	r2, #0
 800a040:	602a      	str	r2, [r5, #0]
 800a042:	461a      	mov	r2, r3
 800a044:	f7f7 fe13 	bl	8001c6e <_write>
 800a048:	1c43      	adds	r3, r0, #1
 800a04a:	d102      	bne.n	800a052 <_write_r+0x1e>
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	b103      	cbz	r3, 800a052 <_write_r+0x1e>
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	20000744 	.word	0x20000744

0800a058 <__errno>:
 800a058:	4b01      	ldr	r3, [pc, #4]	; (800a060 <__errno+0x8>)
 800a05a:	6818      	ldr	r0, [r3, #0]
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	20000084 	.word	0x20000084

0800a064 <__libc_init_array>:
 800a064:	b570      	push	{r4, r5, r6, lr}
 800a066:	4d0d      	ldr	r5, [pc, #52]	; (800a09c <__libc_init_array+0x38>)
 800a068:	4c0d      	ldr	r4, [pc, #52]	; (800a0a0 <__libc_init_array+0x3c>)
 800a06a:	1b64      	subs	r4, r4, r5
 800a06c:	10a4      	asrs	r4, r4, #2
 800a06e:	2600      	movs	r6, #0
 800a070:	42a6      	cmp	r6, r4
 800a072:	d109      	bne.n	800a088 <__libc_init_array+0x24>
 800a074:	4d0b      	ldr	r5, [pc, #44]	; (800a0a4 <__libc_init_array+0x40>)
 800a076:	4c0c      	ldr	r4, [pc, #48]	; (800a0a8 <__libc_init_array+0x44>)
 800a078:	f002 f896 	bl	800c1a8 <_init>
 800a07c:	1b64      	subs	r4, r4, r5
 800a07e:	10a4      	asrs	r4, r4, #2
 800a080:	2600      	movs	r6, #0
 800a082:	42a6      	cmp	r6, r4
 800a084:	d105      	bne.n	800a092 <__libc_init_array+0x2e>
 800a086:	bd70      	pop	{r4, r5, r6, pc}
 800a088:	f855 3b04 	ldr.w	r3, [r5], #4
 800a08c:	4798      	blx	r3
 800a08e:	3601      	adds	r6, #1
 800a090:	e7ee      	b.n	800a070 <__libc_init_array+0xc>
 800a092:	f855 3b04 	ldr.w	r3, [r5], #4
 800a096:	4798      	blx	r3
 800a098:	3601      	adds	r6, #1
 800a09a:	e7f2      	b.n	800a082 <__libc_init_array+0x1e>
 800a09c:	0800c7c4 	.word	0x0800c7c4
 800a0a0:	0800c7c4 	.word	0x0800c7c4
 800a0a4:	0800c7c4 	.word	0x0800c7c4
 800a0a8:	0800c7c8 	.word	0x0800c7c8

0800a0ac <__retarget_lock_init_recursive>:
 800a0ac:	4770      	bx	lr

0800a0ae <__retarget_lock_acquire_recursive>:
 800a0ae:	4770      	bx	lr

0800a0b0 <__retarget_lock_release_recursive>:
 800a0b0:	4770      	bx	lr

0800a0b2 <quorem>:
 800a0b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b6:	6903      	ldr	r3, [r0, #16]
 800a0b8:	690c      	ldr	r4, [r1, #16]
 800a0ba:	42a3      	cmp	r3, r4
 800a0bc:	4607      	mov	r7, r0
 800a0be:	db7e      	blt.n	800a1be <quorem+0x10c>
 800a0c0:	3c01      	subs	r4, #1
 800a0c2:	f101 0814 	add.w	r8, r1, #20
 800a0c6:	f100 0514 	add.w	r5, r0, #20
 800a0ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0ce:	9301      	str	r3, [sp, #4]
 800a0d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a0d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a0e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0e8:	d331      	bcc.n	800a14e <quorem+0x9c>
 800a0ea:	f04f 0e00 	mov.w	lr, #0
 800a0ee:	4640      	mov	r0, r8
 800a0f0:	46ac      	mov	ip, r5
 800a0f2:	46f2      	mov	sl, lr
 800a0f4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a0f8:	b293      	uxth	r3, r2
 800a0fa:	fb06 e303 	mla	r3, r6, r3, lr
 800a0fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a102:	0c1a      	lsrs	r2, r3, #16
 800a104:	b29b      	uxth	r3, r3
 800a106:	ebaa 0303 	sub.w	r3, sl, r3
 800a10a:	f8dc a000 	ldr.w	sl, [ip]
 800a10e:	fa13 f38a 	uxtah	r3, r3, sl
 800a112:	fb06 220e 	mla	r2, r6, lr, r2
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	9b00      	ldr	r3, [sp, #0]
 800a11a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a11e:	b292      	uxth	r2, r2
 800a120:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a124:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a128:	f8bd 3000 	ldrh.w	r3, [sp]
 800a12c:	4581      	cmp	r9, r0
 800a12e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a132:	f84c 3b04 	str.w	r3, [ip], #4
 800a136:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a13a:	d2db      	bcs.n	800a0f4 <quorem+0x42>
 800a13c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a140:	b92b      	cbnz	r3, 800a14e <quorem+0x9c>
 800a142:	9b01      	ldr	r3, [sp, #4]
 800a144:	3b04      	subs	r3, #4
 800a146:	429d      	cmp	r5, r3
 800a148:	461a      	mov	r2, r3
 800a14a:	d32c      	bcc.n	800a1a6 <quorem+0xf4>
 800a14c:	613c      	str	r4, [r7, #16]
 800a14e:	4638      	mov	r0, r7
 800a150:	f001 f9a8 	bl	800b4a4 <__mcmp>
 800a154:	2800      	cmp	r0, #0
 800a156:	db22      	blt.n	800a19e <quorem+0xec>
 800a158:	3601      	adds	r6, #1
 800a15a:	4629      	mov	r1, r5
 800a15c:	2000      	movs	r0, #0
 800a15e:	f858 2b04 	ldr.w	r2, [r8], #4
 800a162:	f8d1 c000 	ldr.w	ip, [r1]
 800a166:	b293      	uxth	r3, r2
 800a168:	1ac3      	subs	r3, r0, r3
 800a16a:	0c12      	lsrs	r2, r2, #16
 800a16c:	fa13 f38c 	uxtah	r3, r3, ip
 800a170:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a174:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a178:	b29b      	uxth	r3, r3
 800a17a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a17e:	45c1      	cmp	r9, r8
 800a180:	f841 3b04 	str.w	r3, [r1], #4
 800a184:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a188:	d2e9      	bcs.n	800a15e <quorem+0xac>
 800a18a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a18e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a192:	b922      	cbnz	r2, 800a19e <quorem+0xec>
 800a194:	3b04      	subs	r3, #4
 800a196:	429d      	cmp	r5, r3
 800a198:	461a      	mov	r2, r3
 800a19a:	d30a      	bcc.n	800a1b2 <quorem+0x100>
 800a19c:	613c      	str	r4, [r7, #16]
 800a19e:	4630      	mov	r0, r6
 800a1a0:	b003      	add	sp, #12
 800a1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a6:	6812      	ldr	r2, [r2, #0]
 800a1a8:	3b04      	subs	r3, #4
 800a1aa:	2a00      	cmp	r2, #0
 800a1ac:	d1ce      	bne.n	800a14c <quorem+0x9a>
 800a1ae:	3c01      	subs	r4, #1
 800a1b0:	e7c9      	b.n	800a146 <quorem+0x94>
 800a1b2:	6812      	ldr	r2, [r2, #0]
 800a1b4:	3b04      	subs	r3, #4
 800a1b6:	2a00      	cmp	r2, #0
 800a1b8:	d1f0      	bne.n	800a19c <quorem+0xea>
 800a1ba:	3c01      	subs	r4, #1
 800a1bc:	e7eb      	b.n	800a196 <quorem+0xe4>
 800a1be:	2000      	movs	r0, #0
 800a1c0:	e7ee      	b.n	800a1a0 <quorem+0xee>
 800a1c2:	0000      	movs	r0, r0
 800a1c4:	0000      	movs	r0, r0
	...

0800a1c8 <_dtoa_r>:
 800a1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1cc:	ed2d 8b04 	vpush	{d8-d9}
 800a1d0:	69c5      	ldr	r5, [r0, #28]
 800a1d2:	b093      	sub	sp, #76	; 0x4c
 800a1d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a1d8:	ec57 6b10 	vmov	r6, r7, d0
 800a1dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a1e0:	9107      	str	r1, [sp, #28]
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	920a      	str	r2, [sp, #40]	; 0x28
 800a1e6:	930d      	str	r3, [sp, #52]	; 0x34
 800a1e8:	b975      	cbnz	r5, 800a208 <_dtoa_r+0x40>
 800a1ea:	2010      	movs	r0, #16
 800a1ec:	f000 fe2a 	bl	800ae44 <malloc>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	61e0      	str	r0, [r4, #28]
 800a1f4:	b920      	cbnz	r0, 800a200 <_dtoa_r+0x38>
 800a1f6:	4bae      	ldr	r3, [pc, #696]	; (800a4b0 <_dtoa_r+0x2e8>)
 800a1f8:	21ef      	movs	r1, #239	; 0xef
 800a1fa:	48ae      	ldr	r0, [pc, #696]	; (800a4b4 <_dtoa_r+0x2ec>)
 800a1fc:	f001 fc90 	bl	800bb20 <__assert_func>
 800a200:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a204:	6005      	str	r5, [r0, #0]
 800a206:	60c5      	str	r5, [r0, #12]
 800a208:	69e3      	ldr	r3, [r4, #28]
 800a20a:	6819      	ldr	r1, [r3, #0]
 800a20c:	b151      	cbz	r1, 800a224 <_dtoa_r+0x5c>
 800a20e:	685a      	ldr	r2, [r3, #4]
 800a210:	604a      	str	r2, [r1, #4]
 800a212:	2301      	movs	r3, #1
 800a214:	4093      	lsls	r3, r2
 800a216:	608b      	str	r3, [r1, #8]
 800a218:	4620      	mov	r0, r4
 800a21a:	f000 ff07 	bl	800b02c <_Bfree>
 800a21e:	69e3      	ldr	r3, [r4, #28]
 800a220:	2200      	movs	r2, #0
 800a222:	601a      	str	r2, [r3, #0]
 800a224:	1e3b      	subs	r3, r7, #0
 800a226:	bfbb      	ittet	lt
 800a228:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a22c:	9303      	strlt	r3, [sp, #12]
 800a22e:	2300      	movge	r3, #0
 800a230:	2201      	movlt	r2, #1
 800a232:	bfac      	ite	ge
 800a234:	f8c8 3000 	strge.w	r3, [r8]
 800a238:	f8c8 2000 	strlt.w	r2, [r8]
 800a23c:	4b9e      	ldr	r3, [pc, #632]	; (800a4b8 <_dtoa_r+0x2f0>)
 800a23e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a242:	ea33 0308 	bics.w	r3, r3, r8
 800a246:	d11b      	bne.n	800a280 <_dtoa_r+0xb8>
 800a248:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a24a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a24e:	6013      	str	r3, [r2, #0]
 800a250:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a254:	4333      	orrs	r3, r6
 800a256:	f000 8593 	beq.w	800ad80 <_dtoa_r+0xbb8>
 800a25a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a25c:	b963      	cbnz	r3, 800a278 <_dtoa_r+0xb0>
 800a25e:	4b97      	ldr	r3, [pc, #604]	; (800a4bc <_dtoa_r+0x2f4>)
 800a260:	e027      	b.n	800a2b2 <_dtoa_r+0xea>
 800a262:	4b97      	ldr	r3, [pc, #604]	; (800a4c0 <_dtoa_r+0x2f8>)
 800a264:	9300      	str	r3, [sp, #0]
 800a266:	3308      	adds	r3, #8
 800a268:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a26a:	6013      	str	r3, [r2, #0]
 800a26c:	9800      	ldr	r0, [sp, #0]
 800a26e:	b013      	add	sp, #76	; 0x4c
 800a270:	ecbd 8b04 	vpop	{d8-d9}
 800a274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a278:	4b90      	ldr	r3, [pc, #576]	; (800a4bc <_dtoa_r+0x2f4>)
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	3303      	adds	r3, #3
 800a27e:	e7f3      	b.n	800a268 <_dtoa_r+0xa0>
 800a280:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a284:	2200      	movs	r2, #0
 800a286:	ec51 0b17 	vmov	r0, r1, d7
 800a28a:	eeb0 8a47 	vmov.f32	s16, s14
 800a28e:	eef0 8a67 	vmov.f32	s17, s15
 800a292:	2300      	movs	r3, #0
 800a294:	f7f6 fc18 	bl	8000ac8 <__aeabi_dcmpeq>
 800a298:	4681      	mov	r9, r0
 800a29a:	b160      	cbz	r0, 800a2b6 <_dtoa_r+0xee>
 800a29c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a29e:	2301      	movs	r3, #1
 800a2a0:	6013      	str	r3, [r2, #0]
 800a2a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f000 8568 	beq.w	800ad7a <_dtoa_r+0xbb2>
 800a2aa:	4b86      	ldr	r3, [pc, #536]	; (800a4c4 <_dtoa_r+0x2fc>)
 800a2ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2ae:	6013      	str	r3, [r2, #0]
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	e7da      	b.n	800a26c <_dtoa_r+0xa4>
 800a2b6:	aa10      	add	r2, sp, #64	; 0x40
 800a2b8:	a911      	add	r1, sp, #68	; 0x44
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	eeb0 0a48 	vmov.f32	s0, s16
 800a2c0:	eef0 0a68 	vmov.f32	s1, s17
 800a2c4:	f001 f994 	bl	800b5f0 <__d2b>
 800a2c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a2cc:	4682      	mov	sl, r0
 800a2ce:	2d00      	cmp	r5, #0
 800a2d0:	d07f      	beq.n	800a3d2 <_dtoa_r+0x20a>
 800a2d2:	ee18 3a90 	vmov	r3, s17
 800a2d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a2de:	ec51 0b18 	vmov	r0, r1, d8
 800a2e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a2e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a2ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	4b75      	ldr	r3, [pc, #468]	; (800a4c8 <_dtoa_r+0x300>)
 800a2f4:	f7f5 ffc8 	bl	8000288 <__aeabi_dsub>
 800a2f8:	a367      	add	r3, pc, #412	; (adr r3, 800a498 <_dtoa_r+0x2d0>)
 800a2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fe:	f7f6 f97b 	bl	80005f8 <__aeabi_dmul>
 800a302:	a367      	add	r3, pc, #412	; (adr r3, 800a4a0 <_dtoa_r+0x2d8>)
 800a304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a308:	f7f5 ffc0 	bl	800028c <__adddf3>
 800a30c:	4606      	mov	r6, r0
 800a30e:	4628      	mov	r0, r5
 800a310:	460f      	mov	r7, r1
 800a312:	f7f6 f907 	bl	8000524 <__aeabi_i2d>
 800a316:	a364      	add	r3, pc, #400	; (adr r3, 800a4a8 <_dtoa_r+0x2e0>)
 800a318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31c:	f7f6 f96c 	bl	80005f8 <__aeabi_dmul>
 800a320:	4602      	mov	r2, r0
 800a322:	460b      	mov	r3, r1
 800a324:	4630      	mov	r0, r6
 800a326:	4639      	mov	r1, r7
 800a328:	f7f5 ffb0 	bl	800028c <__adddf3>
 800a32c:	4606      	mov	r6, r0
 800a32e:	460f      	mov	r7, r1
 800a330:	f7f6 fc12 	bl	8000b58 <__aeabi_d2iz>
 800a334:	2200      	movs	r2, #0
 800a336:	4683      	mov	fp, r0
 800a338:	2300      	movs	r3, #0
 800a33a:	4630      	mov	r0, r6
 800a33c:	4639      	mov	r1, r7
 800a33e:	f7f6 fbcd 	bl	8000adc <__aeabi_dcmplt>
 800a342:	b148      	cbz	r0, 800a358 <_dtoa_r+0x190>
 800a344:	4658      	mov	r0, fp
 800a346:	f7f6 f8ed 	bl	8000524 <__aeabi_i2d>
 800a34a:	4632      	mov	r2, r6
 800a34c:	463b      	mov	r3, r7
 800a34e:	f7f6 fbbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a352:	b908      	cbnz	r0, 800a358 <_dtoa_r+0x190>
 800a354:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a358:	f1bb 0f16 	cmp.w	fp, #22
 800a35c:	d857      	bhi.n	800a40e <_dtoa_r+0x246>
 800a35e:	4b5b      	ldr	r3, [pc, #364]	; (800a4cc <_dtoa_r+0x304>)
 800a360:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a368:	ec51 0b18 	vmov	r0, r1, d8
 800a36c:	f7f6 fbb6 	bl	8000adc <__aeabi_dcmplt>
 800a370:	2800      	cmp	r0, #0
 800a372:	d04e      	beq.n	800a412 <_dtoa_r+0x24a>
 800a374:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a378:	2300      	movs	r3, #0
 800a37a:	930c      	str	r3, [sp, #48]	; 0x30
 800a37c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a37e:	1b5b      	subs	r3, r3, r5
 800a380:	1e5a      	subs	r2, r3, #1
 800a382:	bf45      	ittet	mi
 800a384:	f1c3 0301 	rsbmi	r3, r3, #1
 800a388:	9305      	strmi	r3, [sp, #20]
 800a38a:	2300      	movpl	r3, #0
 800a38c:	2300      	movmi	r3, #0
 800a38e:	9206      	str	r2, [sp, #24]
 800a390:	bf54      	ite	pl
 800a392:	9305      	strpl	r3, [sp, #20]
 800a394:	9306      	strmi	r3, [sp, #24]
 800a396:	f1bb 0f00 	cmp.w	fp, #0
 800a39a:	db3c      	blt.n	800a416 <_dtoa_r+0x24e>
 800a39c:	9b06      	ldr	r3, [sp, #24]
 800a39e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a3a2:	445b      	add	r3, fp
 800a3a4:	9306      	str	r3, [sp, #24]
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	9308      	str	r3, [sp, #32]
 800a3aa:	9b07      	ldr	r3, [sp, #28]
 800a3ac:	2b09      	cmp	r3, #9
 800a3ae:	d868      	bhi.n	800a482 <_dtoa_r+0x2ba>
 800a3b0:	2b05      	cmp	r3, #5
 800a3b2:	bfc4      	itt	gt
 800a3b4:	3b04      	subgt	r3, #4
 800a3b6:	9307      	strgt	r3, [sp, #28]
 800a3b8:	9b07      	ldr	r3, [sp, #28]
 800a3ba:	f1a3 0302 	sub.w	r3, r3, #2
 800a3be:	bfcc      	ite	gt
 800a3c0:	2500      	movgt	r5, #0
 800a3c2:	2501      	movle	r5, #1
 800a3c4:	2b03      	cmp	r3, #3
 800a3c6:	f200 8085 	bhi.w	800a4d4 <_dtoa_r+0x30c>
 800a3ca:	e8df f003 	tbb	[pc, r3]
 800a3ce:	3b2e      	.short	0x3b2e
 800a3d0:	5839      	.short	0x5839
 800a3d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a3d6:	441d      	add	r5, r3
 800a3d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a3dc:	2b20      	cmp	r3, #32
 800a3de:	bfc1      	itttt	gt
 800a3e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a3e4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a3e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a3ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a3f0:	bfd6      	itet	le
 800a3f2:	f1c3 0320 	rsble	r3, r3, #32
 800a3f6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a3fa:	fa06 f003 	lslle.w	r0, r6, r3
 800a3fe:	f7f6 f881 	bl	8000504 <__aeabi_ui2d>
 800a402:	2201      	movs	r2, #1
 800a404:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a408:	3d01      	subs	r5, #1
 800a40a:	920e      	str	r2, [sp, #56]	; 0x38
 800a40c:	e76f      	b.n	800a2ee <_dtoa_r+0x126>
 800a40e:	2301      	movs	r3, #1
 800a410:	e7b3      	b.n	800a37a <_dtoa_r+0x1b2>
 800a412:	900c      	str	r0, [sp, #48]	; 0x30
 800a414:	e7b2      	b.n	800a37c <_dtoa_r+0x1b4>
 800a416:	9b05      	ldr	r3, [sp, #20]
 800a418:	eba3 030b 	sub.w	r3, r3, fp
 800a41c:	9305      	str	r3, [sp, #20]
 800a41e:	f1cb 0300 	rsb	r3, fp, #0
 800a422:	9308      	str	r3, [sp, #32]
 800a424:	2300      	movs	r3, #0
 800a426:	930b      	str	r3, [sp, #44]	; 0x2c
 800a428:	e7bf      	b.n	800a3aa <_dtoa_r+0x1e2>
 800a42a:	2300      	movs	r3, #0
 800a42c:	9309      	str	r3, [sp, #36]	; 0x24
 800a42e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a430:	2b00      	cmp	r3, #0
 800a432:	dc52      	bgt.n	800a4da <_dtoa_r+0x312>
 800a434:	2301      	movs	r3, #1
 800a436:	9301      	str	r3, [sp, #4]
 800a438:	9304      	str	r3, [sp, #16]
 800a43a:	461a      	mov	r2, r3
 800a43c:	920a      	str	r2, [sp, #40]	; 0x28
 800a43e:	e00b      	b.n	800a458 <_dtoa_r+0x290>
 800a440:	2301      	movs	r3, #1
 800a442:	e7f3      	b.n	800a42c <_dtoa_r+0x264>
 800a444:	2300      	movs	r3, #0
 800a446:	9309      	str	r3, [sp, #36]	; 0x24
 800a448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a44a:	445b      	add	r3, fp
 800a44c:	9301      	str	r3, [sp, #4]
 800a44e:	3301      	adds	r3, #1
 800a450:	2b01      	cmp	r3, #1
 800a452:	9304      	str	r3, [sp, #16]
 800a454:	bfb8      	it	lt
 800a456:	2301      	movlt	r3, #1
 800a458:	69e0      	ldr	r0, [r4, #28]
 800a45a:	2100      	movs	r1, #0
 800a45c:	2204      	movs	r2, #4
 800a45e:	f102 0614 	add.w	r6, r2, #20
 800a462:	429e      	cmp	r6, r3
 800a464:	d93d      	bls.n	800a4e2 <_dtoa_r+0x31a>
 800a466:	6041      	str	r1, [r0, #4]
 800a468:	4620      	mov	r0, r4
 800a46a:	f000 fd9f 	bl	800afac <_Balloc>
 800a46e:	9000      	str	r0, [sp, #0]
 800a470:	2800      	cmp	r0, #0
 800a472:	d139      	bne.n	800a4e8 <_dtoa_r+0x320>
 800a474:	4b16      	ldr	r3, [pc, #88]	; (800a4d0 <_dtoa_r+0x308>)
 800a476:	4602      	mov	r2, r0
 800a478:	f240 11af 	movw	r1, #431	; 0x1af
 800a47c:	e6bd      	b.n	800a1fa <_dtoa_r+0x32>
 800a47e:	2301      	movs	r3, #1
 800a480:	e7e1      	b.n	800a446 <_dtoa_r+0x27e>
 800a482:	2501      	movs	r5, #1
 800a484:	2300      	movs	r3, #0
 800a486:	9307      	str	r3, [sp, #28]
 800a488:	9509      	str	r5, [sp, #36]	; 0x24
 800a48a:	f04f 33ff 	mov.w	r3, #4294967295
 800a48e:	9301      	str	r3, [sp, #4]
 800a490:	9304      	str	r3, [sp, #16]
 800a492:	2200      	movs	r2, #0
 800a494:	2312      	movs	r3, #18
 800a496:	e7d1      	b.n	800a43c <_dtoa_r+0x274>
 800a498:	636f4361 	.word	0x636f4361
 800a49c:	3fd287a7 	.word	0x3fd287a7
 800a4a0:	8b60c8b3 	.word	0x8b60c8b3
 800a4a4:	3fc68a28 	.word	0x3fc68a28
 800a4a8:	509f79fb 	.word	0x509f79fb
 800a4ac:	3fd34413 	.word	0x3fd34413
 800a4b0:	0800c48d 	.word	0x0800c48d
 800a4b4:	0800c4a4 	.word	0x0800c4a4
 800a4b8:	7ff00000 	.word	0x7ff00000
 800a4bc:	0800c489 	.word	0x0800c489
 800a4c0:	0800c480 	.word	0x0800c480
 800a4c4:	0800c45d 	.word	0x0800c45d
 800a4c8:	3ff80000 	.word	0x3ff80000
 800a4cc:	0800c590 	.word	0x0800c590
 800a4d0:	0800c4fc 	.word	0x0800c4fc
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d8:	e7d7      	b.n	800a48a <_dtoa_r+0x2c2>
 800a4da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4dc:	9301      	str	r3, [sp, #4]
 800a4de:	9304      	str	r3, [sp, #16]
 800a4e0:	e7ba      	b.n	800a458 <_dtoa_r+0x290>
 800a4e2:	3101      	adds	r1, #1
 800a4e4:	0052      	lsls	r2, r2, #1
 800a4e6:	e7ba      	b.n	800a45e <_dtoa_r+0x296>
 800a4e8:	69e3      	ldr	r3, [r4, #28]
 800a4ea:	9a00      	ldr	r2, [sp, #0]
 800a4ec:	601a      	str	r2, [r3, #0]
 800a4ee:	9b04      	ldr	r3, [sp, #16]
 800a4f0:	2b0e      	cmp	r3, #14
 800a4f2:	f200 80a8 	bhi.w	800a646 <_dtoa_r+0x47e>
 800a4f6:	2d00      	cmp	r5, #0
 800a4f8:	f000 80a5 	beq.w	800a646 <_dtoa_r+0x47e>
 800a4fc:	f1bb 0f00 	cmp.w	fp, #0
 800a500:	dd38      	ble.n	800a574 <_dtoa_r+0x3ac>
 800a502:	4bc0      	ldr	r3, [pc, #768]	; (800a804 <_dtoa_r+0x63c>)
 800a504:	f00b 020f 	and.w	r2, fp, #15
 800a508:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a50c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a510:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a514:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a518:	d019      	beq.n	800a54e <_dtoa_r+0x386>
 800a51a:	4bbb      	ldr	r3, [pc, #748]	; (800a808 <_dtoa_r+0x640>)
 800a51c:	ec51 0b18 	vmov	r0, r1, d8
 800a520:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a524:	f7f6 f992 	bl	800084c <__aeabi_ddiv>
 800a528:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a52c:	f008 080f 	and.w	r8, r8, #15
 800a530:	2503      	movs	r5, #3
 800a532:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a808 <_dtoa_r+0x640>
 800a536:	f1b8 0f00 	cmp.w	r8, #0
 800a53a:	d10a      	bne.n	800a552 <_dtoa_r+0x38a>
 800a53c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a540:	4632      	mov	r2, r6
 800a542:	463b      	mov	r3, r7
 800a544:	f7f6 f982 	bl	800084c <__aeabi_ddiv>
 800a548:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a54c:	e02b      	b.n	800a5a6 <_dtoa_r+0x3de>
 800a54e:	2502      	movs	r5, #2
 800a550:	e7ef      	b.n	800a532 <_dtoa_r+0x36a>
 800a552:	f018 0f01 	tst.w	r8, #1
 800a556:	d008      	beq.n	800a56a <_dtoa_r+0x3a2>
 800a558:	4630      	mov	r0, r6
 800a55a:	4639      	mov	r1, r7
 800a55c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a560:	f7f6 f84a 	bl	80005f8 <__aeabi_dmul>
 800a564:	3501      	adds	r5, #1
 800a566:	4606      	mov	r6, r0
 800a568:	460f      	mov	r7, r1
 800a56a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a56e:	f109 0908 	add.w	r9, r9, #8
 800a572:	e7e0      	b.n	800a536 <_dtoa_r+0x36e>
 800a574:	f000 809f 	beq.w	800a6b6 <_dtoa_r+0x4ee>
 800a578:	f1cb 0600 	rsb	r6, fp, #0
 800a57c:	4ba1      	ldr	r3, [pc, #644]	; (800a804 <_dtoa_r+0x63c>)
 800a57e:	4fa2      	ldr	r7, [pc, #648]	; (800a808 <_dtoa_r+0x640>)
 800a580:	f006 020f 	and.w	r2, r6, #15
 800a584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58c:	ec51 0b18 	vmov	r0, r1, d8
 800a590:	f7f6 f832 	bl	80005f8 <__aeabi_dmul>
 800a594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a598:	1136      	asrs	r6, r6, #4
 800a59a:	2300      	movs	r3, #0
 800a59c:	2502      	movs	r5, #2
 800a59e:	2e00      	cmp	r6, #0
 800a5a0:	d17e      	bne.n	800a6a0 <_dtoa_r+0x4d8>
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d1d0      	bne.n	800a548 <_dtoa_r+0x380>
 800a5a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f000 8084 	beq.w	800a6ba <_dtoa_r+0x4f2>
 800a5b2:	4b96      	ldr	r3, [pc, #600]	; (800a80c <_dtoa_r+0x644>)
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	4640      	mov	r0, r8
 800a5b8:	4649      	mov	r1, r9
 800a5ba:	f7f6 fa8f 	bl	8000adc <__aeabi_dcmplt>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d07b      	beq.n	800a6ba <_dtoa_r+0x4f2>
 800a5c2:	9b04      	ldr	r3, [sp, #16]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d078      	beq.n	800a6ba <_dtoa_r+0x4f2>
 800a5c8:	9b01      	ldr	r3, [sp, #4]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	dd39      	ble.n	800a642 <_dtoa_r+0x47a>
 800a5ce:	4b90      	ldr	r3, [pc, #576]	; (800a810 <_dtoa_r+0x648>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	4649      	mov	r1, r9
 800a5d6:	f7f6 f80f 	bl	80005f8 <__aeabi_dmul>
 800a5da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5de:	9e01      	ldr	r6, [sp, #4]
 800a5e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a5e4:	3501      	adds	r5, #1
 800a5e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	f7f5 ff9a 	bl	8000524 <__aeabi_i2d>
 800a5f0:	4642      	mov	r2, r8
 800a5f2:	464b      	mov	r3, r9
 800a5f4:	f7f6 f800 	bl	80005f8 <__aeabi_dmul>
 800a5f8:	4b86      	ldr	r3, [pc, #536]	; (800a814 <_dtoa_r+0x64c>)
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f7f5 fe46 	bl	800028c <__adddf3>
 800a600:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a608:	9303      	str	r3, [sp, #12]
 800a60a:	2e00      	cmp	r6, #0
 800a60c:	d158      	bne.n	800a6c0 <_dtoa_r+0x4f8>
 800a60e:	4b82      	ldr	r3, [pc, #520]	; (800a818 <_dtoa_r+0x650>)
 800a610:	2200      	movs	r2, #0
 800a612:	4640      	mov	r0, r8
 800a614:	4649      	mov	r1, r9
 800a616:	f7f5 fe37 	bl	8000288 <__aeabi_dsub>
 800a61a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a61e:	4680      	mov	r8, r0
 800a620:	4689      	mov	r9, r1
 800a622:	f7f6 fa79 	bl	8000b18 <__aeabi_dcmpgt>
 800a626:	2800      	cmp	r0, #0
 800a628:	f040 8296 	bne.w	800ab58 <_dtoa_r+0x990>
 800a62c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a630:	4640      	mov	r0, r8
 800a632:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a636:	4649      	mov	r1, r9
 800a638:	f7f6 fa50 	bl	8000adc <__aeabi_dcmplt>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	f040 8289 	bne.w	800ab54 <_dtoa_r+0x98c>
 800a642:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a646:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f2c0 814e 	blt.w	800a8ea <_dtoa_r+0x722>
 800a64e:	f1bb 0f0e 	cmp.w	fp, #14
 800a652:	f300 814a 	bgt.w	800a8ea <_dtoa_r+0x722>
 800a656:	4b6b      	ldr	r3, [pc, #428]	; (800a804 <_dtoa_r+0x63c>)
 800a658:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a65c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a662:	2b00      	cmp	r3, #0
 800a664:	f280 80dc 	bge.w	800a820 <_dtoa_r+0x658>
 800a668:	9b04      	ldr	r3, [sp, #16]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f300 80d8 	bgt.w	800a820 <_dtoa_r+0x658>
 800a670:	f040 826f 	bne.w	800ab52 <_dtoa_r+0x98a>
 800a674:	4b68      	ldr	r3, [pc, #416]	; (800a818 <_dtoa_r+0x650>)
 800a676:	2200      	movs	r2, #0
 800a678:	4640      	mov	r0, r8
 800a67a:	4649      	mov	r1, r9
 800a67c:	f7f5 ffbc 	bl	80005f8 <__aeabi_dmul>
 800a680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a684:	f7f6 fa3e 	bl	8000b04 <__aeabi_dcmpge>
 800a688:	9e04      	ldr	r6, [sp, #16]
 800a68a:	4637      	mov	r7, r6
 800a68c:	2800      	cmp	r0, #0
 800a68e:	f040 8245 	bne.w	800ab1c <_dtoa_r+0x954>
 800a692:	9d00      	ldr	r5, [sp, #0]
 800a694:	2331      	movs	r3, #49	; 0x31
 800a696:	f805 3b01 	strb.w	r3, [r5], #1
 800a69a:	f10b 0b01 	add.w	fp, fp, #1
 800a69e:	e241      	b.n	800ab24 <_dtoa_r+0x95c>
 800a6a0:	07f2      	lsls	r2, r6, #31
 800a6a2:	d505      	bpl.n	800a6b0 <_dtoa_r+0x4e8>
 800a6a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6a8:	f7f5 ffa6 	bl	80005f8 <__aeabi_dmul>
 800a6ac:	3501      	adds	r5, #1
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	1076      	asrs	r6, r6, #1
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	e773      	b.n	800a59e <_dtoa_r+0x3d6>
 800a6b6:	2502      	movs	r5, #2
 800a6b8:	e775      	b.n	800a5a6 <_dtoa_r+0x3de>
 800a6ba:	9e04      	ldr	r6, [sp, #16]
 800a6bc:	465f      	mov	r7, fp
 800a6be:	e792      	b.n	800a5e6 <_dtoa_r+0x41e>
 800a6c0:	9900      	ldr	r1, [sp, #0]
 800a6c2:	4b50      	ldr	r3, [pc, #320]	; (800a804 <_dtoa_r+0x63c>)
 800a6c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a6c8:	4431      	add	r1, r6
 800a6ca:	9102      	str	r1, [sp, #8]
 800a6cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6ce:	eeb0 9a47 	vmov.f32	s18, s14
 800a6d2:	eef0 9a67 	vmov.f32	s19, s15
 800a6d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a6da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a6de:	2900      	cmp	r1, #0
 800a6e0:	d044      	beq.n	800a76c <_dtoa_r+0x5a4>
 800a6e2:	494e      	ldr	r1, [pc, #312]	; (800a81c <_dtoa_r+0x654>)
 800a6e4:	2000      	movs	r0, #0
 800a6e6:	f7f6 f8b1 	bl	800084c <__aeabi_ddiv>
 800a6ea:	ec53 2b19 	vmov	r2, r3, d9
 800a6ee:	f7f5 fdcb 	bl	8000288 <__aeabi_dsub>
 800a6f2:	9d00      	ldr	r5, [sp, #0]
 800a6f4:	ec41 0b19 	vmov	d9, r0, r1
 800a6f8:	4649      	mov	r1, r9
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	f7f6 fa2c 	bl	8000b58 <__aeabi_d2iz>
 800a700:	4606      	mov	r6, r0
 800a702:	f7f5 ff0f 	bl	8000524 <__aeabi_i2d>
 800a706:	4602      	mov	r2, r0
 800a708:	460b      	mov	r3, r1
 800a70a:	4640      	mov	r0, r8
 800a70c:	4649      	mov	r1, r9
 800a70e:	f7f5 fdbb 	bl	8000288 <__aeabi_dsub>
 800a712:	3630      	adds	r6, #48	; 0x30
 800a714:	f805 6b01 	strb.w	r6, [r5], #1
 800a718:	ec53 2b19 	vmov	r2, r3, d9
 800a71c:	4680      	mov	r8, r0
 800a71e:	4689      	mov	r9, r1
 800a720:	f7f6 f9dc 	bl	8000adc <__aeabi_dcmplt>
 800a724:	2800      	cmp	r0, #0
 800a726:	d164      	bne.n	800a7f2 <_dtoa_r+0x62a>
 800a728:	4642      	mov	r2, r8
 800a72a:	464b      	mov	r3, r9
 800a72c:	4937      	ldr	r1, [pc, #220]	; (800a80c <_dtoa_r+0x644>)
 800a72e:	2000      	movs	r0, #0
 800a730:	f7f5 fdaa 	bl	8000288 <__aeabi_dsub>
 800a734:	ec53 2b19 	vmov	r2, r3, d9
 800a738:	f7f6 f9d0 	bl	8000adc <__aeabi_dcmplt>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	f040 80b6 	bne.w	800a8ae <_dtoa_r+0x6e6>
 800a742:	9b02      	ldr	r3, [sp, #8]
 800a744:	429d      	cmp	r5, r3
 800a746:	f43f af7c 	beq.w	800a642 <_dtoa_r+0x47a>
 800a74a:	4b31      	ldr	r3, [pc, #196]	; (800a810 <_dtoa_r+0x648>)
 800a74c:	ec51 0b19 	vmov	r0, r1, d9
 800a750:	2200      	movs	r2, #0
 800a752:	f7f5 ff51 	bl	80005f8 <__aeabi_dmul>
 800a756:	4b2e      	ldr	r3, [pc, #184]	; (800a810 <_dtoa_r+0x648>)
 800a758:	ec41 0b19 	vmov	d9, r0, r1
 800a75c:	2200      	movs	r2, #0
 800a75e:	4640      	mov	r0, r8
 800a760:	4649      	mov	r1, r9
 800a762:	f7f5 ff49 	bl	80005f8 <__aeabi_dmul>
 800a766:	4680      	mov	r8, r0
 800a768:	4689      	mov	r9, r1
 800a76a:	e7c5      	b.n	800a6f8 <_dtoa_r+0x530>
 800a76c:	ec51 0b17 	vmov	r0, r1, d7
 800a770:	f7f5 ff42 	bl	80005f8 <__aeabi_dmul>
 800a774:	9b02      	ldr	r3, [sp, #8]
 800a776:	9d00      	ldr	r5, [sp, #0]
 800a778:	930f      	str	r3, [sp, #60]	; 0x3c
 800a77a:	ec41 0b19 	vmov	d9, r0, r1
 800a77e:	4649      	mov	r1, r9
 800a780:	4640      	mov	r0, r8
 800a782:	f7f6 f9e9 	bl	8000b58 <__aeabi_d2iz>
 800a786:	4606      	mov	r6, r0
 800a788:	f7f5 fecc 	bl	8000524 <__aeabi_i2d>
 800a78c:	3630      	adds	r6, #48	; 0x30
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4640      	mov	r0, r8
 800a794:	4649      	mov	r1, r9
 800a796:	f7f5 fd77 	bl	8000288 <__aeabi_dsub>
 800a79a:	f805 6b01 	strb.w	r6, [r5], #1
 800a79e:	9b02      	ldr	r3, [sp, #8]
 800a7a0:	429d      	cmp	r5, r3
 800a7a2:	4680      	mov	r8, r0
 800a7a4:	4689      	mov	r9, r1
 800a7a6:	f04f 0200 	mov.w	r2, #0
 800a7aa:	d124      	bne.n	800a7f6 <_dtoa_r+0x62e>
 800a7ac:	4b1b      	ldr	r3, [pc, #108]	; (800a81c <_dtoa_r+0x654>)
 800a7ae:	ec51 0b19 	vmov	r0, r1, d9
 800a7b2:	f7f5 fd6b 	bl	800028c <__adddf3>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	4640      	mov	r0, r8
 800a7bc:	4649      	mov	r1, r9
 800a7be:	f7f6 f9ab 	bl	8000b18 <__aeabi_dcmpgt>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	d173      	bne.n	800a8ae <_dtoa_r+0x6e6>
 800a7c6:	ec53 2b19 	vmov	r2, r3, d9
 800a7ca:	4914      	ldr	r1, [pc, #80]	; (800a81c <_dtoa_r+0x654>)
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	f7f5 fd5b 	bl	8000288 <__aeabi_dsub>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	4640      	mov	r0, r8
 800a7d8:	4649      	mov	r1, r9
 800a7da:	f7f6 f97f 	bl	8000adc <__aeabi_dcmplt>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	f43f af2f 	beq.w	800a642 <_dtoa_r+0x47a>
 800a7e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a7e6:	1e6b      	subs	r3, r5, #1
 800a7e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a7ee:	2b30      	cmp	r3, #48	; 0x30
 800a7f0:	d0f8      	beq.n	800a7e4 <_dtoa_r+0x61c>
 800a7f2:	46bb      	mov	fp, r7
 800a7f4:	e04a      	b.n	800a88c <_dtoa_r+0x6c4>
 800a7f6:	4b06      	ldr	r3, [pc, #24]	; (800a810 <_dtoa_r+0x648>)
 800a7f8:	f7f5 fefe 	bl	80005f8 <__aeabi_dmul>
 800a7fc:	4680      	mov	r8, r0
 800a7fe:	4689      	mov	r9, r1
 800a800:	e7bd      	b.n	800a77e <_dtoa_r+0x5b6>
 800a802:	bf00      	nop
 800a804:	0800c590 	.word	0x0800c590
 800a808:	0800c568 	.word	0x0800c568
 800a80c:	3ff00000 	.word	0x3ff00000
 800a810:	40240000 	.word	0x40240000
 800a814:	401c0000 	.word	0x401c0000
 800a818:	40140000 	.word	0x40140000
 800a81c:	3fe00000 	.word	0x3fe00000
 800a820:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a824:	9d00      	ldr	r5, [sp, #0]
 800a826:	4642      	mov	r2, r8
 800a828:	464b      	mov	r3, r9
 800a82a:	4630      	mov	r0, r6
 800a82c:	4639      	mov	r1, r7
 800a82e:	f7f6 f80d 	bl	800084c <__aeabi_ddiv>
 800a832:	f7f6 f991 	bl	8000b58 <__aeabi_d2iz>
 800a836:	9001      	str	r0, [sp, #4]
 800a838:	f7f5 fe74 	bl	8000524 <__aeabi_i2d>
 800a83c:	4642      	mov	r2, r8
 800a83e:	464b      	mov	r3, r9
 800a840:	f7f5 feda 	bl	80005f8 <__aeabi_dmul>
 800a844:	4602      	mov	r2, r0
 800a846:	460b      	mov	r3, r1
 800a848:	4630      	mov	r0, r6
 800a84a:	4639      	mov	r1, r7
 800a84c:	f7f5 fd1c 	bl	8000288 <__aeabi_dsub>
 800a850:	9e01      	ldr	r6, [sp, #4]
 800a852:	9f04      	ldr	r7, [sp, #16]
 800a854:	3630      	adds	r6, #48	; 0x30
 800a856:	f805 6b01 	strb.w	r6, [r5], #1
 800a85a:	9e00      	ldr	r6, [sp, #0]
 800a85c:	1bae      	subs	r6, r5, r6
 800a85e:	42b7      	cmp	r7, r6
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	d134      	bne.n	800a8d0 <_dtoa_r+0x708>
 800a866:	f7f5 fd11 	bl	800028c <__adddf3>
 800a86a:	4642      	mov	r2, r8
 800a86c:	464b      	mov	r3, r9
 800a86e:	4606      	mov	r6, r0
 800a870:	460f      	mov	r7, r1
 800a872:	f7f6 f951 	bl	8000b18 <__aeabi_dcmpgt>
 800a876:	b9c8      	cbnz	r0, 800a8ac <_dtoa_r+0x6e4>
 800a878:	4642      	mov	r2, r8
 800a87a:	464b      	mov	r3, r9
 800a87c:	4630      	mov	r0, r6
 800a87e:	4639      	mov	r1, r7
 800a880:	f7f6 f922 	bl	8000ac8 <__aeabi_dcmpeq>
 800a884:	b110      	cbz	r0, 800a88c <_dtoa_r+0x6c4>
 800a886:	9b01      	ldr	r3, [sp, #4]
 800a888:	07db      	lsls	r3, r3, #31
 800a88a:	d40f      	bmi.n	800a8ac <_dtoa_r+0x6e4>
 800a88c:	4651      	mov	r1, sl
 800a88e:	4620      	mov	r0, r4
 800a890:	f000 fbcc 	bl	800b02c <_Bfree>
 800a894:	2300      	movs	r3, #0
 800a896:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a898:	702b      	strb	r3, [r5, #0]
 800a89a:	f10b 0301 	add.w	r3, fp, #1
 800a89e:	6013      	str	r3, [r2, #0]
 800a8a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f43f ace2 	beq.w	800a26c <_dtoa_r+0xa4>
 800a8a8:	601d      	str	r5, [r3, #0]
 800a8aa:	e4df      	b.n	800a26c <_dtoa_r+0xa4>
 800a8ac:	465f      	mov	r7, fp
 800a8ae:	462b      	mov	r3, r5
 800a8b0:	461d      	mov	r5, r3
 800a8b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8b6:	2a39      	cmp	r2, #57	; 0x39
 800a8b8:	d106      	bne.n	800a8c8 <_dtoa_r+0x700>
 800a8ba:	9a00      	ldr	r2, [sp, #0]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d1f7      	bne.n	800a8b0 <_dtoa_r+0x6e8>
 800a8c0:	9900      	ldr	r1, [sp, #0]
 800a8c2:	2230      	movs	r2, #48	; 0x30
 800a8c4:	3701      	adds	r7, #1
 800a8c6:	700a      	strb	r2, [r1, #0]
 800a8c8:	781a      	ldrb	r2, [r3, #0]
 800a8ca:	3201      	adds	r2, #1
 800a8cc:	701a      	strb	r2, [r3, #0]
 800a8ce:	e790      	b.n	800a7f2 <_dtoa_r+0x62a>
 800a8d0:	4ba3      	ldr	r3, [pc, #652]	; (800ab60 <_dtoa_r+0x998>)
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f7f5 fe90 	bl	80005f8 <__aeabi_dmul>
 800a8d8:	2200      	movs	r2, #0
 800a8da:	2300      	movs	r3, #0
 800a8dc:	4606      	mov	r6, r0
 800a8de:	460f      	mov	r7, r1
 800a8e0:	f7f6 f8f2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	d09e      	beq.n	800a826 <_dtoa_r+0x65e>
 800a8e8:	e7d0      	b.n	800a88c <_dtoa_r+0x6c4>
 800a8ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8ec:	2a00      	cmp	r2, #0
 800a8ee:	f000 80ca 	beq.w	800aa86 <_dtoa_r+0x8be>
 800a8f2:	9a07      	ldr	r2, [sp, #28]
 800a8f4:	2a01      	cmp	r2, #1
 800a8f6:	f300 80ad 	bgt.w	800aa54 <_dtoa_r+0x88c>
 800a8fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8fc:	2a00      	cmp	r2, #0
 800a8fe:	f000 80a5 	beq.w	800aa4c <_dtoa_r+0x884>
 800a902:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a906:	9e08      	ldr	r6, [sp, #32]
 800a908:	9d05      	ldr	r5, [sp, #20]
 800a90a:	9a05      	ldr	r2, [sp, #20]
 800a90c:	441a      	add	r2, r3
 800a90e:	9205      	str	r2, [sp, #20]
 800a910:	9a06      	ldr	r2, [sp, #24]
 800a912:	2101      	movs	r1, #1
 800a914:	441a      	add	r2, r3
 800a916:	4620      	mov	r0, r4
 800a918:	9206      	str	r2, [sp, #24]
 800a91a:	f000 fc3d 	bl	800b198 <__i2b>
 800a91e:	4607      	mov	r7, r0
 800a920:	b165      	cbz	r5, 800a93c <_dtoa_r+0x774>
 800a922:	9b06      	ldr	r3, [sp, #24]
 800a924:	2b00      	cmp	r3, #0
 800a926:	dd09      	ble.n	800a93c <_dtoa_r+0x774>
 800a928:	42ab      	cmp	r3, r5
 800a92a:	9a05      	ldr	r2, [sp, #20]
 800a92c:	bfa8      	it	ge
 800a92e:	462b      	movge	r3, r5
 800a930:	1ad2      	subs	r2, r2, r3
 800a932:	9205      	str	r2, [sp, #20]
 800a934:	9a06      	ldr	r2, [sp, #24]
 800a936:	1aed      	subs	r5, r5, r3
 800a938:	1ad3      	subs	r3, r2, r3
 800a93a:	9306      	str	r3, [sp, #24]
 800a93c:	9b08      	ldr	r3, [sp, #32]
 800a93e:	b1f3      	cbz	r3, 800a97e <_dtoa_r+0x7b6>
 800a940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a942:	2b00      	cmp	r3, #0
 800a944:	f000 80a3 	beq.w	800aa8e <_dtoa_r+0x8c6>
 800a948:	2e00      	cmp	r6, #0
 800a94a:	dd10      	ble.n	800a96e <_dtoa_r+0x7a6>
 800a94c:	4639      	mov	r1, r7
 800a94e:	4632      	mov	r2, r6
 800a950:	4620      	mov	r0, r4
 800a952:	f000 fce1 	bl	800b318 <__pow5mult>
 800a956:	4652      	mov	r2, sl
 800a958:	4601      	mov	r1, r0
 800a95a:	4607      	mov	r7, r0
 800a95c:	4620      	mov	r0, r4
 800a95e:	f000 fc31 	bl	800b1c4 <__multiply>
 800a962:	4651      	mov	r1, sl
 800a964:	4680      	mov	r8, r0
 800a966:	4620      	mov	r0, r4
 800a968:	f000 fb60 	bl	800b02c <_Bfree>
 800a96c:	46c2      	mov	sl, r8
 800a96e:	9b08      	ldr	r3, [sp, #32]
 800a970:	1b9a      	subs	r2, r3, r6
 800a972:	d004      	beq.n	800a97e <_dtoa_r+0x7b6>
 800a974:	4651      	mov	r1, sl
 800a976:	4620      	mov	r0, r4
 800a978:	f000 fcce 	bl	800b318 <__pow5mult>
 800a97c:	4682      	mov	sl, r0
 800a97e:	2101      	movs	r1, #1
 800a980:	4620      	mov	r0, r4
 800a982:	f000 fc09 	bl	800b198 <__i2b>
 800a986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a988:	2b00      	cmp	r3, #0
 800a98a:	4606      	mov	r6, r0
 800a98c:	f340 8081 	ble.w	800aa92 <_dtoa_r+0x8ca>
 800a990:	461a      	mov	r2, r3
 800a992:	4601      	mov	r1, r0
 800a994:	4620      	mov	r0, r4
 800a996:	f000 fcbf 	bl	800b318 <__pow5mult>
 800a99a:	9b07      	ldr	r3, [sp, #28]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	4606      	mov	r6, r0
 800a9a0:	dd7a      	ble.n	800aa98 <_dtoa_r+0x8d0>
 800a9a2:	f04f 0800 	mov.w	r8, #0
 800a9a6:	6933      	ldr	r3, [r6, #16]
 800a9a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a9ac:	6918      	ldr	r0, [r3, #16]
 800a9ae:	f000 fba5 	bl	800b0fc <__hi0bits>
 800a9b2:	f1c0 0020 	rsb	r0, r0, #32
 800a9b6:	9b06      	ldr	r3, [sp, #24]
 800a9b8:	4418      	add	r0, r3
 800a9ba:	f010 001f 	ands.w	r0, r0, #31
 800a9be:	f000 8094 	beq.w	800aaea <_dtoa_r+0x922>
 800a9c2:	f1c0 0320 	rsb	r3, r0, #32
 800a9c6:	2b04      	cmp	r3, #4
 800a9c8:	f340 8085 	ble.w	800aad6 <_dtoa_r+0x90e>
 800a9cc:	9b05      	ldr	r3, [sp, #20]
 800a9ce:	f1c0 001c 	rsb	r0, r0, #28
 800a9d2:	4403      	add	r3, r0
 800a9d4:	9305      	str	r3, [sp, #20]
 800a9d6:	9b06      	ldr	r3, [sp, #24]
 800a9d8:	4403      	add	r3, r0
 800a9da:	4405      	add	r5, r0
 800a9dc:	9306      	str	r3, [sp, #24]
 800a9de:	9b05      	ldr	r3, [sp, #20]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	dd05      	ble.n	800a9f0 <_dtoa_r+0x828>
 800a9e4:	4651      	mov	r1, sl
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f000 fcef 	bl	800b3cc <__lshift>
 800a9ee:	4682      	mov	sl, r0
 800a9f0:	9b06      	ldr	r3, [sp, #24]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	dd05      	ble.n	800aa02 <_dtoa_r+0x83a>
 800a9f6:	4631      	mov	r1, r6
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f000 fce6 	bl	800b3cc <__lshift>
 800aa00:	4606      	mov	r6, r0
 800aa02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d072      	beq.n	800aaee <_dtoa_r+0x926>
 800aa08:	4631      	mov	r1, r6
 800aa0a:	4650      	mov	r0, sl
 800aa0c:	f000 fd4a 	bl	800b4a4 <__mcmp>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	da6c      	bge.n	800aaee <_dtoa_r+0x926>
 800aa14:	2300      	movs	r3, #0
 800aa16:	4651      	mov	r1, sl
 800aa18:	220a      	movs	r2, #10
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f000 fb28 	bl	800b070 <__multadd>
 800aa20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa22:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa26:	4682      	mov	sl, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f000 81b0 	beq.w	800ad8e <_dtoa_r+0xbc6>
 800aa2e:	2300      	movs	r3, #0
 800aa30:	4639      	mov	r1, r7
 800aa32:	220a      	movs	r2, #10
 800aa34:	4620      	mov	r0, r4
 800aa36:	f000 fb1b 	bl	800b070 <__multadd>
 800aa3a:	9b01      	ldr	r3, [sp, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	4607      	mov	r7, r0
 800aa40:	f300 8096 	bgt.w	800ab70 <_dtoa_r+0x9a8>
 800aa44:	9b07      	ldr	r3, [sp, #28]
 800aa46:	2b02      	cmp	r3, #2
 800aa48:	dc59      	bgt.n	800aafe <_dtoa_r+0x936>
 800aa4a:	e091      	b.n	800ab70 <_dtoa_r+0x9a8>
 800aa4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aa52:	e758      	b.n	800a906 <_dtoa_r+0x73e>
 800aa54:	9b04      	ldr	r3, [sp, #16]
 800aa56:	1e5e      	subs	r6, r3, #1
 800aa58:	9b08      	ldr	r3, [sp, #32]
 800aa5a:	42b3      	cmp	r3, r6
 800aa5c:	bfbf      	itttt	lt
 800aa5e:	9b08      	ldrlt	r3, [sp, #32]
 800aa60:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800aa62:	9608      	strlt	r6, [sp, #32]
 800aa64:	1af3      	sublt	r3, r6, r3
 800aa66:	bfb4      	ite	lt
 800aa68:	18d2      	addlt	r2, r2, r3
 800aa6a:	1b9e      	subge	r6, r3, r6
 800aa6c:	9b04      	ldr	r3, [sp, #16]
 800aa6e:	bfbc      	itt	lt
 800aa70:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800aa72:	2600      	movlt	r6, #0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	bfb7      	itett	lt
 800aa78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800aa7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800aa80:	1a9d      	sublt	r5, r3, r2
 800aa82:	2300      	movlt	r3, #0
 800aa84:	e741      	b.n	800a90a <_dtoa_r+0x742>
 800aa86:	9e08      	ldr	r6, [sp, #32]
 800aa88:	9d05      	ldr	r5, [sp, #20]
 800aa8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aa8c:	e748      	b.n	800a920 <_dtoa_r+0x758>
 800aa8e:	9a08      	ldr	r2, [sp, #32]
 800aa90:	e770      	b.n	800a974 <_dtoa_r+0x7ac>
 800aa92:	9b07      	ldr	r3, [sp, #28]
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	dc19      	bgt.n	800aacc <_dtoa_r+0x904>
 800aa98:	9b02      	ldr	r3, [sp, #8]
 800aa9a:	b9bb      	cbnz	r3, 800aacc <_dtoa_r+0x904>
 800aa9c:	9b03      	ldr	r3, [sp, #12]
 800aa9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaa2:	b99b      	cbnz	r3, 800aacc <_dtoa_r+0x904>
 800aaa4:	9b03      	ldr	r3, [sp, #12]
 800aaa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aaaa:	0d1b      	lsrs	r3, r3, #20
 800aaac:	051b      	lsls	r3, r3, #20
 800aaae:	b183      	cbz	r3, 800aad2 <_dtoa_r+0x90a>
 800aab0:	9b05      	ldr	r3, [sp, #20]
 800aab2:	3301      	adds	r3, #1
 800aab4:	9305      	str	r3, [sp, #20]
 800aab6:	9b06      	ldr	r3, [sp, #24]
 800aab8:	3301      	adds	r3, #1
 800aaba:	9306      	str	r3, [sp, #24]
 800aabc:	f04f 0801 	mov.w	r8, #1
 800aac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f47f af6f 	bne.w	800a9a6 <_dtoa_r+0x7de>
 800aac8:	2001      	movs	r0, #1
 800aaca:	e774      	b.n	800a9b6 <_dtoa_r+0x7ee>
 800aacc:	f04f 0800 	mov.w	r8, #0
 800aad0:	e7f6      	b.n	800aac0 <_dtoa_r+0x8f8>
 800aad2:	4698      	mov	r8, r3
 800aad4:	e7f4      	b.n	800aac0 <_dtoa_r+0x8f8>
 800aad6:	d082      	beq.n	800a9de <_dtoa_r+0x816>
 800aad8:	9a05      	ldr	r2, [sp, #20]
 800aada:	331c      	adds	r3, #28
 800aadc:	441a      	add	r2, r3
 800aade:	9205      	str	r2, [sp, #20]
 800aae0:	9a06      	ldr	r2, [sp, #24]
 800aae2:	441a      	add	r2, r3
 800aae4:	441d      	add	r5, r3
 800aae6:	9206      	str	r2, [sp, #24]
 800aae8:	e779      	b.n	800a9de <_dtoa_r+0x816>
 800aaea:	4603      	mov	r3, r0
 800aaec:	e7f4      	b.n	800aad8 <_dtoa_r+0x910>
 800aaee:	9b04      	ldr	r3, [sp, #16]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	dc37      	bgt.n	800ab64 <_dtoa_r+0x99c>
 800aaf4:	9b07      	ldr	r3, [sp, #28]
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	dd34      	ble.n	800ab64 <_dtoa_r+0x99c>
 800aafa:	9b04      	ldr	r3, [sp, #16]
 800aafc:	9301      	str	r3, [sp, #4]
 800aafe:	9b01      	ldr	r3, [sp, #4]
 800ab00:	b963      	cbnz	r3, 800ab1c <_dtoa_r+0x954>
 800ab02:	4631      	mov	r1, r6
 800ab04:	2205      	movs	r2, #5
 800ab06:	4620      	mov	r0, r4
 800ab08:	f000 fab2 	bl	800b070 <__multadd>
 800ab0c:	4601      	mov	r1, r0
 800ab0e:	4606      	mov	r6, r0
 800ab10:	4650      	mov	r0, sl
 800ab12:	f000 fcc7 	bl	800b4a4 <__mcmp>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	f73f adbb 	bgt.w	800a692 <_dtoa_r+0x4ca>
 800ab1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab1e:	9d00      	ldr	r5, [sp, #0]
 800ab20:	ea6f 0b03 	mvn.w	fp, r3
 800ab24:	f04f 0800 	mov.w	r8, #0
 800ab28:	4631      	mov	r1, r6
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f000 fa7e 	bl	800b02c <_Bfree>
 800ab30:	2f00      	cmp	r7, #0
 800ab32:	f43f aeab 	beq.w	800a88c <_dtoa_r+0x6c4>
 800ab36:	f1b8 0f00 	cmp.w	r8, #0
 800ab3a:	d005      	beq.n	800ab48 <_dtoa_r+0x980>
 800ab3c:	45b8      	cmp	r8, r7
 800ab3e:	d003      	beq.n	800ab48 <_dtoa_r+0x980>
 800ab40:	4641      	mov	r1, r8
 800ab42:	4620      	mov	r0, r4
 800ab44:	f000 fa72 	bl	800b02c <_Bfree>
 800ab48:	4639      	mov	r1, r7
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f000 fa6e 	bl	800b02c <_Bfree>
 800ab50:	e69c      	b.n	800a88c <_dtoa_r+0x6c4>
 800ab52:	2600      	movs	r6, #0
 800ab54:	4637      	mov	r7, r6
 800ab56:	e7e1      	b.n	800ab1c <_dtoa_r+0x954>
 800ab58:	46bb      	mov	fp, r7
 800ab5a:	4637      	mov	r7, r6
 800ab5c:	e599      	b.n	800a692 <_dtoa_r+0x4ca>
 800ab5e:	bf00      	nop
 800ab60:	40240000 	.word	0x40240000
 800ab64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f000 80c8 	beq.w	800acfc <_dtoa_r+0xb34>
 800ab6c:	9b04      	ldr	r3, [sp, #16]
 800ab6e:	9301      	str	r3, [sp, #4]
 800ab70:	2d00      	cmp	r5, #0
 800ab72:	dd05      	ble.n	800ab80 <_dtoa_r+0x9b8>
 800ab74:	4639      	mov	r1, r7
 800ab76:	462a      	mov	r2, r5
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f000 fc27 	bl	800b3cc <__lshift>
 800ab7e:	4607      	mov	r7, r0
 800ab80:	f1b8 0f00 	cmp.w	r8, #0
 800ab84:	d05b      	beq.n	800ac3e <_dtoa_r+0xa76>
 800ab86:	6879      	ldr	r1, [r7, #4]
 800ab88:	4620      	mov	r0, r4
 800ab8a:	f000 fa0f 	bl	800afac <_Balloc>
 800ab8e:	4605      	mov	r5, r0
 800ab90:	b928      	cbnz	r0, 800ab9e <_dtoa_r+0x9d6>
 800ab92:	4b83      	ldr	r3, [pc, #524]	; (800ada0 <_dtoa_r+0xbd8>)
 800ab94:	4602      	mov	r2, r0
 800ab96:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ab9a:	f7ff bb2e 	b.w	800a1fa <_dtoa_r+0x32>
 800ab9e:	693a      	ldr	r2, [r7, #16]
 800aba0:	3202      	adds	r2, #2
 800aba2:	0092      	lsls	r2, r2, #2
 800aba4:	f107 010c 	add.w	r1, r7, #12
 800aba8:	300c      	adds	r0, #12
 800abaa:	f000 ffab 	bl	800bb04 <memcpy>
 800abae:	2201      	movs	r2, #1
 800abb0:	4629      	mov	r1, r5
 800abb2:	4620      	mov	r0, r4
 800abb4:	f000 fc0a 	bl	800b3cc <__lshift>
 800abb8:	9b00      	ldr	r3, [sp, #0]
 800abba:	3301      	adds	r3, #1
 800abbc:	9304      	str	r3, [sp, #16]
 800abbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abc2:	4413      	add	r3, r2
 800abc4:	9308      	str	r3, [sp, #32]
 800abc6:	9b02      	ldr	r3, [sp, #8]
 800abc8:	f003 0301 	and.w	r3, r3, #1
 800abcc:	46b8      	mov	r8, r7
 800abce:	9306      	str	r3, [sp, #24]
 800abd0:	4607      	mov	r7, r0
 800abd2:	9b04      	ldr	r3, [sp, #16]
 800abd4:	4631      	mov	r1, r6
 800abd6:	3b01      	subs	r3, #1
 800abd8:	4650      	mov	r0, sl
 800abda:	9301      	str	r3, [sp, #4]
 800abdc:	f7ff fa69 	bl	800a0b2 <quorem>
 800abe0:	4641      	mov	r1, r8
 800abe2:	9002      	str	r0, [sp, #8]
 800abe4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800abe8:	4650      	mov	r0, sl
 800abea:	f000 fc5b 	bl	800b4a4 <__mcmp>
 800abee:	463a      	mov	r2, r7
 800abf0:	9005      	str	r0, [sp, #20]
 800abf2:	4631      	mov	r1, r6
 800abf4:	4620      	mov	r0, r4
 800abf6:	f000 fc71 	bl	800b4dc <__mdiff>
 800abfa:	68c2      	ldr	r2, [r0, #12]
 800abfc:	4605      	mov	r5, r0
 800abfe:	bb02      	cbnz	r2, 800ac42 <_dtoa_r+0xa7a>
 800ac00:	4601      	mov	r1, r0
 800ac02:	4650      	mov	r0, sl
 800ac04:	f000 fc4e 	bl	800b4a4 <__mcmp>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ac10:	f000 fa0c 	bl	800b02c <_Bfree>
 800ac14:	9b07      	ldr	r3, [sp, #28]
 800ac16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac18:	9d04      	ldr	r5, [sp, #16]
 800ac1a:	ea43 0102 	orr.w	r1, r3, r2
 800ac1e:	9b06      	ldr	r3, [sp, #24]
 800ac20:	4319      	orrs	r1, r3
 800ac22:	d110      	bne.n	800ac46 <_dtoa_r+0xa7e>
 800ac24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac28:	d029      	beq.n	800ac7e <_dtoa_r+0xab6>
 800ac2a:	9b05      	ldr	r3, [sp, #20]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	dd02      	ble.n	800ac36 <_dtoa_r+0xa6e>
 800ac30:	9b02      	ldr	r3, [sp, #8]
 800ac32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ac36:	9b01      	ldr	r3, [sp, #4]
 800ac38:	f883 9000 	strb.w	r9, [r3]
 800ac3c:	e774      	b.n	800ab28 <_dtoa_r+0x960>
 800ac3e:	4638      	mov	r0, r7
 800ac40:	e7ba      	b.n	800abb8 <_dtoa_r+0x9f0>
 800ac42:	2201      	movs	r2, #1
 800ac44:	e7e1      	b.n	800ac0a <_dtoa_r+0xa42>
 800ac46:	9b05      	ldr	r3, [sp, #20]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	db04      	blt.n	800ac56 <_dtoa_r+0xa8e>
 800ac4c:	9907      	ldr	r1, [sp, #28]
 800ac4e:	430b      	orrs	r3, r1
 800ac50:	9906      	ldr	r1, [sp, #24]
 800ac52:	430b      	orrs	r3, r1
 800ac54:	d120      	bne.n	800ac98 <_dtoa_r+0xad0>
 800ac56:	2a00      	cmp	r2, #0
 800ac58:	dded      	ble.n	800ac36 <_dtoa_r+0xa6e>
 800ac5a:	4651      	mov	r1, sl
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f000 fbb4 	bl	800b3cc <__lshift>
 800ac64:	4631      	mov	r1, r6
 800ac66:	4682      	mov	sl, r0
 800ac68:	f000 fc1c 	bl	800b4a4 <__mcmp>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	dc03      	bgt.n	800ac78 <_dtoa_r+0xab0>
 800ac70:	d1e1      	bne.n	800ac36 <_dtoa_r+0xa6e>
 800ac72:	f019 0f01 	tst.w	r9, #1
 800ac76:	d0de      	beq.n	800ac36 <_dtoa_r+0xa6e>
 800ac78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac7c:	d1d8      	bne.n	800ac30 <_dtoa_r+0xa68>
 800ac7e:	9a01      	ldr	r2, [sp, #4]
 800ac80:	2339      	movs	r3, #57	; 0x39
 800ac82:	7013      	strb	r3, [r2, #0]
 800ac84:	462b      	mov	r3, r5
 800ac86:	461d      	mov	r5, r3
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ac8e:	2a39      	cmp	r2, #57	; 0x39
 800ac90:	d06c      	beq.n	800ad6c <_dtoa_r+0xba4>
 800ac92:	3201      	adds	r2, #1
 800ac94:	701a      	strb	r2, [r3, #0]
 800ac96:	e747      	b.n	800ab28 <_dtoa_r+0x960>
 800ac98:	2a00      	cmp	r2, #0
 800ac9a:	dd07      	ble.n	800acac <_dtoa_r+0xae4>
 800ac9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aca0:	d0ed      	beq.n	800ac7e <_dtoa_r+0xab6>
 800aca2:	9a01      	ldr	r2, [sp, #4]
 800aca4:	f109 0301 	add.w	r3, r9, #1
 800aca8:	7013      	strb	r3, [r2, #0]
 800acaa:	e73d      	b.n	800ab28 <_dtoa_r+0x960>
 800acac:	9b04      	ldr	r3, [sp, #16]
 800acae:	9a08      	ldr	r2, [sp, #32]
 800acb0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d043      	beq.n	800ad40 <_dtoa_r+0xb78>
 800acb8:	4651      	mov	r1, sl
 800acba:	2300      	movs	r3, #0
 800acbc:	220a      	movs	r2, #10
 800acbe:	4620      	mov	r0, r4
 800acc0:	f000 f9d6 	bl	800b070 <__multadd>
 800acc4:	45b8      	cmp	r8, r7
 800acc6:	4682      	mov	sl, r0
 800acc8:	f04f 0300 	mov.w	r3, #0
 800accc:	f04f 020a 	mov.w	r2, #10
 800acd0:	4641      	mov	r1, r8
 800acd2:	4620      	mov	r0, r4
 800acd4:	d107      	bne.n	800ace6 <_dtoa_r+0xb1e>
 800acd6:	f000 f9cb 	bl	800b070 <__multadd>
 800acda:	4680      	mov	r8, r0
 800acdc:	4607      	mov	r7, r0
 800acde:	9b04      	ldr	r3, [sp, #16]
 800ace0:	3301      	adds	r3, #1
 800ace2:	9304      	str	r3, [sp, #16]
 800ace4:	e775      	b.n	800abd2 <_dtoa_r+0xa0a>
 800ace6:	f000 f9c3 	bl	800b070 <__multadd>
 800acea:	4639      	mov	r1, r7
 800acec:	4680      	mov	r8, r0
 800acee:	2300      	movs	r3, #0
 800acf0:	220a      	movs	r2, #10
 800acf2:	4620      	mov	r0, r4
 800acf4:	f000 f9bc 	bl	800b070 <__multadd>
 800acf8:	4607      	mov	r7, r0
 800acfa:	e7f0      	b.n	800acde <_dtoa_r+0xb16>
 800acfc:	9b04      	ldr	r3, [sp, #16]
 800acfe:	9301      	str	r3, [sp, #4]
 800ad00:	9d00      	ldr	r5, [sp, #0]
 800ad02:	4631      	mov	r1, r6
 800ad04:	4650      	mov	r0, sl
 800ad06:	f7ff f9d4 	bl	800a0b2 <quorem>
 800ad0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ad0e:	9b00      	ldr	r3, [sp, #0]
 800ad10:	f805 9b01 	strb.w	r9, [r5], #1
 800ad14:	1aea      	subs	r2, r5, r3
 800ad16:	9b01      	ldr	r3, [sp, #4]
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	dd07      	ble.n	800ad2c <_dtoa_r+0xb64>
 800ad1c:	4651      	mov	r1, sl
 800ad1e:	2300      	movs	r3, #0
 800ad20:	220a      	movs	r2, #10
 800ad22:	4620      	mov	r0, r4
 800ad24:	f000 f9a4 	bl	800b070 <__multadd>
 800ad28:	4682      	mov	sl, r0
 800ad2a:	e7ea      	b.n	800ad02 <_dtoa_r+0xb3a>
 800ad2c:	9b01      	ldr	r3, [sp, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	bfc8      	it	gt
 800ad32:	461d      	movgt	r5, r3
 800ad34:	9b00      	ldr	r3, [sp, #0]
 800ad36:	bfd8      	it	le
 800ad38:	2501      	movle	r5, #1
 800ad3a:	441d      	add	r5, r3
 800ad3c:	f04f 0800 	mov.w	r8, #0
 800ad40:	4651      	mov	r1, sl
 800ad42:	2201      	movs	r2, #1
 800ad44:	4620      	mov	r0, r4
 800ad46:	f000 fb41 	bl	800b3cc <__lshift>
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	4682      	mov	sl, r0
 800ad4e:	f000 fba9 	bl	800b4a4 <__mcmp>
 800ad52:	2800      	cmp	r0, #0
 800ad54:	dc96      	bgt.n	800ac84 <_dtoa_r+0xabc>
 800ad56:	d102      	bne.n	800ad5e <_dtoa_r+0xb96>
 800ad58:	f019 0f01 	tst.w	r9, #1
 800ad5c:	d192      	bne.n	800ac84 <_dtoa_r+0xabc>
 800ad5e:	462b      	mov	r3, r5
 800ad60:	461d      	mov	r5, r3
 800ad62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad66:	2a30      	cmp	r2, #48	; 0x30
 800ad68:	d0fa      	beq.n	800ad60 <_dtoa_r+0xb98>
 800ad6a:	e6dd      	b.n	800ab28 <_dtoa_r+0x960>
 800ad6c:	9a00      	ldr	r2, [sp, #0]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d189      	bne.n	800ac86 <_dtoa_r+0xabe>
 800ad72:	f10b 0b01 	add.w	fp, fp, #1
 800ad76:	2331      	movs	r3, #49	; 0x31
 800ad78:	e796      	b.n	800aca8 <_dtoa_r+0xae0>
 800ad7a:	4b0a      	ldr	r3, [pc, #40]	; (800ada4 <_dtoa_r+0xbdc>)
 800ad7c:	f7ff ba99 	b.w	800a2b2 <_dtoa_r+0xea>
 800ad80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f47f aa6d 	bne.w	800a262 <_dtoa_r+0x9a>
 800ad88:	4b07      	ldr	r3, [pc, #28]	; (800ada8 <_dtoa_r+0xbe0>)
 800ad8a:	f7ff ba92 	b.w	800a2b2 <_dtoa_r+0xea>
 800ad8e:	9b01      	ldr	r3, [sp, #4]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	dcb5      	bgt.n	800ad00 <_dtoa_r+0xb38>
 800ad94:	9b07      	ldr	r3, [sp, #28]
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	f73f aeb1 	bgt.w	800aafe <_dtoa_r+0x936>
 800ad9c:	e7b0      	b.n	800ad00 <_dtoa_r+0xb38>
 800ad9e:	bf00      	nop
 800ada0:	0800c4fc 	.word	0x0800c4fc
 800ada4:	0800c45c 	.word	0x0800c45c
 800ada8:	0800c480 	.word	0x0800c480

0800adac <_free_r>:
 800adac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adae:	2900      	cmp	r1, #0
 800adb0:	d044      	beq.n	800ae3c <_free_r+0x90>
 800adb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adb6:	9001      	str	r0, [sp, #4]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f1a1 0404 	sub.w	r4, r1, #4
 800adbe:	bfb8      	it	lt
 800adc0:	18e4      	addlt	r4, r4, r3
 800adc2:	f000 f8e7 	bl	800af94 <__malloc_lock>
 800adc6:	4a1e      	ldr	r2, [pc, #120]	; (800ae40 <_free_r+0x94>)
 800adc8:	9801      	ldr	r0, [sp, #4]
 800adca:	6813      	ldr	r3, [r2, #0]
 800adcc:	b933      	cbnz	r3, 800addc <_free_r+0x30>
 800adce:	6063      	str	r3, [r4, #4]
 800add0:	6014      	str	r4, [r2, #0]
 800add2:	b003      	add	sp, #12
 800add4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800add8:	f000 b8e2 	b.w	800afa0 <__malloc_unlock>
 800addc:	42a3      	cmp	r3, r4
 800adde:	d908      	bls.n	800adf2 <_free_r+0x46>
 800ade0:	6825      	ldr	r5, [r4, #0]
 800ade2:	1961      	adds	r1, r4, r5
 800ade4:	428b      	cmp	r3, r1
 800ade6:	bf01      	itttt	eq
 800ade8:	6819      	ldreq	r1, [r3, #0]
 800adea:	685b      	ldreq	r3, [r3, #4]
 800adec:	1949      	addeq	r1, r1, r5
 800adee:	6021      	streq	r1, [r4, #0]
 800adf0:	e7ed      	b.n	800adce <_free_r+0x22>
 800adf2:	461a      	mov	r2, r3
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	b10b      	cbz	r3, 800adfc <_free_r+0x50>
 800adf8:	42a3      	cmp	r3, r4
 800adfa:	d9fa      	bls.n	800adf2 <_free_r+0x46>
 800adfc:	6811      	ldr	r1, [r2, #0]
 800adfe:	1855      	adds	r5, r2, r1
 800ae00:	42a5      	cmp	r5, r4
 800ae02:	d10b      	bne.n	800ae1c <_free_r+0x70>
 800ae04:	6824      	ldr	r4, [r4, #0]
 800ae06:	4421      	add	r1, r4
 800ae08:	1854      	adds	r4, r2, r1
 800ae0a:	42a3      	cmp	r3, r4
 800ae0c:	6011      	str	r1, [r2, #0]
 800ae0e:	d1e0      	bne.n	800add2 <_free_r+0x26>
 800ae10:	681c      	ldr	r4, [r3, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	6053      	str	r3, [r2, #4]
 800ae16:	440c      	add	r4, r1
 800ae18:	6014      	str	r4, [r2, #0]
 800ae1a:	e7da      	b.n	800add2 <_free_r+0x26>
 800ae1c:	d902      	bls.n	800ae24 <_free_r+0x78>
 800ae1e:	230c      	movs	r3, #12
 800ae20:	6003      	str	r3, [r0, #0]
 800ae22:	e7d6      	b.n	800add2 <_free_r+0x26>
 800ae24:	6825      	ldr	r5, [r4, #0]
 800ae26:	1961      	adds	r1, r4, r5
 800ae28:	428b      	cmp	r3, r1
 800ae2a:	bf04      	itt	eq
 800ae2c:	6819      	ldreq	r1, [r3, #0]
 800ae2e:	685b      	ldreq	r3, [r3, #4]
 800ae30:	6063      	str	r3, [r4, #4]
 800ae32:	bf04      	itt	eq
 800ae34:	1949      	addeq	r1, r1, r5
 800ae36:	6021      	streq	r1, [r4, #0]
 800ae38:	6054      	str	r4, [r2, #4]
 800ae3a:	e7ca      	b.n	800add2 <_free_r+0x26>
 800ae3c:	b003      	add	sp, #12
 800ae3e:	bd30      	pop	{r4, r5, pc}
 800ae40:	2000074c 	.word	0x2000074c

0800ae44 <malloc>:
 800ae44:	4b02      	ldr	r3, [pc, #8]	; (800ae50 <malloc+0xc>)
 800ae46:	4601      	mov	r1, r0
 800ae48:	6818      	ldr	r0, [r3, #0]
 800ae4a:	f000 b823 	b.w	800ae94 <_malloc_r>
 800ae4e:	bf00      	nop
 800ae50:	20000084 	.word	0x20000084

0800ae54 <sbrk_aligned>:
 800ae54:	b570      	push	{r4, r5, r6, lr}
 800ae56:	4e0e      	ldr	r6, [pc, #56]	; (800ae90 <sbrk_aligned+0x3c>)
 800ae58:	460c      	mov	r4, r1
 800ae5a:	6831      	ldr	r1, [r6, #0]
 800ae5c:	4605      	mov	r5, r0
 800ae5e:	b911      	cbnz	r1, 800ae66 <sbrk_aligned+0x12>
 800ae60:	f000 fe40 	bl	800bae4 <_sbrk_r>
 800ae64:	6030      	str	r0, [r6, #0]
 800ae66:	4621      	mov	r1, r4
 800ae68:	4628      	mov	r0, r5
 800ae6a:	f000 fe3b 	bl	800bae4 <_sbrk_r>
 800ae6e:	1c43      	adds	r3, r0, #1
 800ae70:	d00a      	beq.n	800ae88 <sbrk_aligned+0x34>
 800ae72:	1cc4      	adds	r4, r0, #3
 800ae74:	f024 0403 	bic.w	r4, r4, #3
 800ae78:	42a0      	cmp	r0, r4
 800ae7a:	d007      	beq.n	800ae8c <sbrk_aligned+0x38>
 800ae7c:	1a21      	subs	r1, r4, r0
 800ae7e:	4628      	mov	r0, r5
 800ae80:	f000 fe30 	bl	800bae4 <_sbrk_r>
 800ae84:	3001      	adds	r0, #1
 800ae86:	d101      	bne.n	800ae8c <sbrk_aligned+0x38>
 800ae88:	f04f 34ff 	mov.w	r4, #4294967295
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	bd70      	pop	{r4, r5, r6, pc}
 800ae90:	20000750 	.word	0x20000750

0800ae94 <_malloc_r>:
 800ae94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae98:	1ccd      	adds	r5, r1, #3
 800ae9a:	f025 0503 	bic.w	r5, r5, #3
 800ae9e:	3508      	adds	r5, #8
 800aea0:	2d0c      	cmp	r5, #12
 800aea2:	bf38      	it	cc
 800aea4:	250c      	movcc	r5, #12
 800aea6:	2d00      	cmp	r5, #0
 800aea8:	4607      	mov	r7, r0
 800aeaa:	db01      	blt.n	800aeb0 <_malloc_r+0x1c>
 800aeac:	42a9      	cmp	r1, r5
 800aeae:	d905      	bls.n	800aebc <_malloc_r+0x28>
 800aeb0:	230c      	movs	r3, #12
 800aeb2:	603b      	str	r3, [r7, #0]
 800aeb4:	2600      	movs	r6, #0
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aebc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800af90 <_malloc_r+0xfc>
 800aec0:	f000 f868 	bl	800af94 <__malloc_lock>
 800aec4:	f8d8 3000 	ldr.w	r3, [r8]
 800aec8:	461c      	mov	r4, r3
 800aeca:	bb5c      	cbnz	r4, 800af24 <_malloc_r+0x90>
 800aecc:	4629      	mov	r1, r5
 800aece:	4638      	mov	r0, r7
 800aed0:	f7ff ffc0 	bl	800ae54 <sbrk_aligned>
 800aed4:	1c43      	adds	r3, r0, #1
 800aed6:	4604      	mov	r4, r0
 800aed8:	d155      	bne.n	800af86 <_malloc_r+0xf2>
 800aeda:	f8d8 4000 	ldr.w	r4, [r8]
 800aede:	4626      	mov	r6, r4
 800aee0:	2e00      	cmp	r6, #0
 800aee2:	d145      	bne.n	800af70 <_malloc_r+0xdc>
 800aee4:	2c00      	cmp	r4, #0
 800aee6:	d048      	beq.n	800af7a <_malloc_r+0xe6>
 800aee8:	6823      	ldr	r3, [r4, #0]
 800aeea:	4631      	mov	r1, r6
 800aeec:	4638      	mov	r0, r7
 800aeee:	eb04 0903 	add.w	r9, r4, r3
 800aef2:	f000 fdf7 	bl	800bae4 <_sbrk_r>
 800aef6:	4581      	cmp	r9, r0
 800aef8:	d13f      	bne.n	800af7a <_malloc_r+0xe6>
 800aefa:	6821      	ldr	r1, [r4, #0]
 800aefc:	1a6d      	subs	r5, r5, r1
 800aefe:	4629      	mov	r1, r5
 800af00:	4638      	mov	r0, r7
 800af02:	f7ff ffa7 	bl	800ae54 <sbrk_aligned>
 800af06:	3001      	adds	r0, #1
 800af08:	d037      	beq.n	800af7a <_malloc_r+0xe6>
 800af0a:	6823      	ldr	r3, [r4, #0]
 800af0c:	442b      	add	r3, r5
 800af0e:	6023      	str	r3, [r4, #0]
 800af10:	f8d8 3000 	ldr.w	r3, [r8]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d038      	beq.n	800af8a <_malloc_r+0xf6>
 800af18:	685a      	ldr	r2, [r3, #4]
 800af1a:	42a2      	cmp	r2, r4
 800af1c:	d12b      	bne.n	800af76 <_malloc_r+0xe2>
 800af1e:	2200      	movs	r2, #0
 800af20:	605a      	str	r2, [r3, #4]
 800af22:	e00f      	b.n	800af44 <_malloc_r+0xb0>
 800af24:	6822      	ldr	r2, [r4, #0]
 800af26:	1b52      	subs	r2, r2, r5
 800af28:	d41f      	bmi.n	800af6a <_malloc_r+0xd6>
 800af2a:	2a0b      	cmp	r2, #11
 800af2c:	d917      	bls.n	800af5e <_malloc_r+0xca>
 800af2e:	1961      	adds	r1, r4, r5
 800af30:	42a3      	cmp	r3, r4
 800af32:	6025      	str	r5, [r4, #0]
 800af34:	bf18      	it	ne
 800af36:	6059      	strne	r1, [r3, #4]
 800af38:	6863      	ldr	r3, [r4, #4]
 800af3a:	bf08      	it	eq
 800af3c:	f8c8 1000 	streq.w	r1, [r8]
 800af40:	5162      	str	r2, [r4, r5]
 800af42:	604b      	str	r3, [r1, #4]
 800af44:	4638      	mov	r0, r7
 800af46:	f104 060b 	add.w	r6, r4, #11
 800af4a:	f000 f829 	bl	800afa0 <__malloc_unlock>
 800af4e:	f026 0607 	bic.w	r6, r6, #7
 800af52:	1d23      	adds	r3, r4, #4
 800af54:	1af2      	subs	r2, r6, r3
 800af56:	d0ae      	beq.n	800aeb6 <_malloc_r+0x22>
 800af58:	1b9b      	subs	r3, r3, r6
 800af5a:	50a3      	str	r3, [r4, r2]
 800af5c:	e7ab      	b.n	800aeb6 <_malloc_r+0x22>
 800af5e:	42a3      	cmp	r3, r4
 800af60:	6862      	ldr	r2, [r4, #4]
 800af62:	d1dd      	bne.n	800af20 <_malloc_r+0x8c>
 800af64:	f8c8 2000 	str.w	r2, [r8]
 800af68:	e7ec      	b.n	800af44 <_malloc_r+0xb0>
 800af6a:	4623      	mov	r3, r4
 800af6c:	6864      	ldr	r4, [r4, #4]
 800af6e:	e7ac      	b.n	800aeca <_malloc_r+0x36>
 800af70:	4634      	mov	r4, r6
 800af72:	6876      	ldr	r6, [r6, #4]
 800af74:	e7b4      	b.n	800aee0 <_malloc_r+0x4c>
 800af76:	4613      	mov	r3, r2
 800af78:	e7cc      	b.n	800af14 <_malloc_r+0x80>
 800af7a:	230c      	movs	r3, #12
 800af7c:	603b      	str	r3, [r7, #0]
 800af7e:	4638      	mov	r0, r7
 800af80:	f000 f80e 	bl	800afa0 <__malloc_unlock>
 800af84:	e797      	b.n	800aeb6 <_malloc_r+0x22>
 800af86:	6025      	str	r5, [r4, #0]
 800af88:	e7dc      	b.n	800af44 <_malloc_r+0xb0>
 800af8a:	605b      	str	r3, [r3, #4]
 800af8c:	deff      	udf	#255	; 0xff
 800af8e:	bf00      	nop
 800af90:	2000074c 	.word	0x2000074c

0800af94 <__malloc_lock>:
 800af94:	4801      	ldr	r0, [pc, #4]	; (800af9c <__malloc_lock+0x8>)
 800af96:	f7ff b88a 	b.w	800a0ae <__retarget_lock_acquire_recursive>
 800af9a:	bf00      	nop
 800af9c:	20000748 	.word	0x20000748

0800afa0 <__malloc_unlock>:
 800afa0:	4801      	ldr	r0, [pc, #4]	; (800afa8 <__malloc_unlock+0x8>)
 800afa2:	f7ff b885 	b.w	800a0b0 <__retarget_lock_release_recursive>
 800afa6:	bf00      	nop
 800afa8:	20000748 	.word	0x20000748

0800afac <_Balloc>:
 800afac:	b570      	push	{r4, r5, r6, lr}
 800afae:	69c6      	ldr	r6, [r0, #28]
 800afb0:	4604      	mov	r4, r0
 800afb2:	460d      	mov	r5, r1
 800afb4:	b976      	cbnz	r6, 800afd4 <_Balloc+0x28>
 800afb6:	2010      	movs	r0, #16
 800afb8:	f7ff ff44 	bl	800ae44 <malloc>
 800afbc:	4602      	mov	r2, r0
 800afbe:	61e0      	str	r0, [r4, #28]
 800afc0:	b920      	cbnz	r0, 800afcc <_Balloc+0x20>
 800afc2:	4b18      	ldr	r3, [pc, #96]	; (800b024 <_Balloc+0x78>)
 800afc4:	4818      	ldr	r0, [pc, #96]	; (800b028 <_Balloc+0x7c>)
 800afc6:	216b      	movs	r1, #107	; 0x6b
 800afc8:	f000 fdaa 	bl	800bb20 <__assert_func>
 800afcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afd0:	6006      	str	r6, [r0, #0]
 800afd2:	60c6      	str	r6, [r0, #12]
 800afd4:	69e6      	ldr	r6, [r4, #28]
 800afd6:	68f3      	ldr	r3, [r6, #12]
 800afd8:	b183      	cbz	r3, 800affc <_Balloc+0x50>
 800afda:	69e3      	ldr	r3, [r4, #28]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afe2:	b9b8      	cbnz	r0, 800b014 <_Balloc+0x68>
 800afe4:	2101      	movs	r1, #1
 800afe6:	fa01 f605 	lsl.w	r6, r1, r5
 800afea:	1d72      	adds	r2, r6, #5
 800afec:	0092      	lsls	r2, r2, #2
 800afee:	4620      	mov	r0, r4
 800aff0:	f000 fdb4 	bl	800bb5c <_calloc_r>
 800aff4:	b160      	cbz	r0, 800b010 <_Balloc+0x64>
 800aff6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800affa:	e00e      	b.n	800b01a <_Balloc+0x6e>
 800affc:	2221      	movs	r2, #33	; 0x21
 800affe:	2104      	movs	r1, #4
 800b000:	4620      	mov	r0, r4
 800b002:	f000 fdab 	bl	800bb5c <_calloc_r>
 800b006:	69e3      	ldr	r3, [r4, #28]
 800b008:	60f0      	str	r0, [r6, #12]
 800b00a:	68db      	ldr	r3, [r3, #12]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d1e4      	bne.n	800afda <_Balloc+0x2e>
 800b010:	2000      	movs	r0, #0
 800b012:	bd70      	pop	{r4, r5, r6, pc}
 800b014:	6802      	ldr	r2, [r0, #0]
 800b016:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b01a:	2300      	movs	r3, #0
 800b01c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b020:	e7f7      	b.n	800b012 <_Balloc+0x66>
 800b022:	bf00      	nop
 800b024:	0800c48d 	.word	0x0800c48d
 800b028:	0800c50d 	.word	0x0800c50d

0800b02c <_Bfree>:
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	69c6      	ldr	r6, [r0, #28]
 800b030:	4605      	mov	r5, r0
 800b032:	460c      	mov	r4, r1
 800b034:	b976      	cbnz	r6, 800b054 <_Bfree+0x28>
 800b036:	2010      	movs	r0, #16
 800b038:	f7ff ff04 	bl	800ae44 <malloc>
 800b03c:	4602      	mov	r2, r0
 800b03e:	61e8      	str	r0, [r5, #28]
 800b040:	b920      	cbnz	r0, 800b04c <_Bfree+0x20>
 800b042:	4b09      	ldr	r3, [pc, #36]	; (800b068 <_Bfree+0x3c>)
 800b044:	4809      	ldr	r0, [pc, #36]	; (800b06c <_Bfree+0x40>)
 800b046:	218f      	movs	r1, #143	; 0x8f
 800b048:	f000 fd6a 	bl	800bb20 <__assert_func>
 800b04c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b050:	6006      	str	r6, [r0, #0]
 800b052:	60c6      	str	r6, [r0, #12]
 800b054:	b13c      	cbz	r4, 800b066 <_Bfree+0x3a>
 800b056:	69eb      	ldr	r3, [r5, #28]
 800b058:	6862      	ldr	r2, [r4, #4]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b060:	6021      	str	r1, [r4, #0]
 800b062:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b066:	bd70      	pop	{r4, r5, r6, pc}
 800b068:	0800c48d 	.word	0x0800c48d
 800b06c:	0800c50d 	.word	0x0800c50d

0800b070 <__multadd>:
 800b070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b074:	690d      	ldr	r5, [r1, #16]
 800b076:	4607      	mov	r7, r0
 800b078:	460c      	mov	r4, r1
 800b07a:	461e      	mov	r6, r3
 800b07c:	f101 0c14 	add.w	ip, r1, #20
 800b080:	2000      	movs	r0, #0
 800b082:	f8dc 3000 	ldr.w	r3, [ip]
 800b086:	b299      	uxth	r1, r3
 800b088:	fb02 6101 	mla	r1, r2, r1, r6
 800b08c:	0c1e      	lsrs	r6, r3, #16
 800b08e:	0c0b      	lsrs	r3, r1, #16
 800b090:	fb02 3306 	mla	r3, r2, r6, r3
 800b094:	b289      	uxth	r1, r1
 800b096:	3001      	adds	r0, #1
 800b098:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b09c:	4285      	cmp	r5, r0
 800b09e:	f84c 1b04 	str.w	r1, [ip], #4
 800b0a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b0a6:	dcec      	bgt.n	800b082 <__multadd+0x12>
 800b0a8:	b30e      	cbz	r6, 800b0ee <__multadd+0x7e>
 800b0aa:	68a3      	ldr	r3, [r4, #8]
 800b0ac:	42ab      	cmp	r3, r5
 800b0ae:	dc19      	bgt.n	800b0e4 <__multadd+0x74>
 800b0b0:	6861      	ldr	r1, [r4, #4]
 800b0b2:	4638      	mov	r0, r7
 800b0b4:	3101      	adds	r1, #1
 800b0b6:	f7ff ff79 	bl	800afac <_Balloc>
 800b0ba:	4680      	mov	r8, r0
 800b0bc:	b928      	cbnz	r0, 800b0ca <__multadd+0x5a>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	4b0c      	ldr	r3, [pc, #48]	; (800b0f4 <__multadd+0x84>)
 800b0c2:	480d      	ldr	r0, [pc, #52]	; (800b0f8 <__multadd+0x88>)
 800b0c4:	21ba      	movs	r1, #186	; 0xba
 800b0c6:	f000 fd2b 	bl	800bb20 <__assert_func>
 800b0ca:	6922      	ldr	r2, [r4, #16]
 800b0cc:	3202      	adds	r2, #2
 800b0ce:	f104 010c 	add.w	r1, r4, #12
 800b0d2:	0092      	lsls	r2, r2, #2
 800b0d4:	300c      	adds	r0, #12
 800b0d6:	f000 fd15 	bl	800bb04 <memcpy>
 800b0da:	4621      	mov	r1, r4
 800b0dc:	4638      	mov	r0, r7
 800b0de:	f7ff ffa5 	bl	800b02c <_Bfree>
 800b0e2:	4644      	mov	r4, r8
 800b0e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0e8:	3501      	adds	r5, #1
 800b0ea:	615e      	str	r6, [r3, #20]
 800b0ec:	6125      	str	r5, [r4, #16]
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0f4:	0800c4fc 	.word	0x0800c4fc
 800b0f8:	0800c50d 	.word	0x0800c50d

0800b0fc <__hi0bits>:
 800b0fc:	0c03      	lsrs	r3, r0, #16
 800b0fe:	041b      	lsls	r3, r3, #16
 800b100:	b9d3      	cbnz	r3, 800b138 <__hi0bits+0x3c>
 800b102:	0400      	lsls	r0, r0, #16
 800b104:	2310      	movs	r3, #16
 800b106:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b10a:	bf04      	itt	eq
 800b10c:	0200      	lsleq	r0, r0, #8
 800b10e:	3308      	addeq	r3, #8
 800b110:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b114:	bf04      	itt	eq
 800b116:	0100      	lsleq	r0, r0, #4
 800b118:	3304      	addeq	r3, #4
 800b11a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b11e:	bf04      	itt	eq
 800b120:	0080      	lsleq	r0, r0, #2
 800b122:	3302      	addeq	r3, #2
 800b124:	2800      	cmp	r0, #0
 800b126:	db05      	blt.n	800b134 <__hi0bits+0x38>
 800b128:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b12c:	f103 0301 	add.w	r3, r3, #1
 800b130:	bf08      	it	eq
 800b132:	2320      	moveq	r3, #32
 800b134:	4618      	mov	r0, r3
 800b136:	4770      	bx	lr
 800b138:	2300      	movs	r3, #0
 800b13a:	e7e4      	b.n	800b106 <__hi0bits+0xa>

0800b13c <__lo0bits>:
 800b13c:	6803      	ldr	r3, [r0, #0]
 800b13e:	f013 0207 	ands.w	r2, r3, #7
 800b142:	d00c      	beq.n	800b15e <__lo0bits+0x22>
 800b144:	07d9      	lsls	r1, r3, #31
 800b146:	d422      	bmi.n	800b18e <__lo0bits+0x52>
 800b148:	079a      	lsls	r2, r3, #30
 800b14a:	bf49      	itett	mi
 800b14c:	085b      	lsrmi	r3, r3, #1
 800b14e:	089b      	lsrpl	r3, r3, #2
 800b150:	6003      	strmi	r3, [r0, #0]
 800b152:	2201      	movmi	r2, #1
 800b154:	bf5c      	itt	pl
 800b156:	6003      	strpl	r3, [r0, #0]
 800b158:	2202      	movpl	r2, #2
 800b15a:	4610      	mov	r0, r2
 800b15c:	4770      	bx	lr
 800b15e:	b299      	uxth	r1, r3
 800b160:	b909      	cbnz	r1, 800b166 <__lo0bits+0x2a>
 800b162:	0c1b      	lsrs	r3, r3, #16
 800b164:	2210      	movs	r2, #16
 800b166:	b2d9      	uxtb	r1, r3
 800b168:	b909      	cbnz	r1, 800b16e <__lo0bits+0x32>
 800b16a:	3208      	adds	r2, #8
 800b16c:	0a1b      	lsrs	r3, r3, #8
 800b16e:	0719      	lsls	r1, r3, #28
 800b170:	bf04      	itt	eq
 800b172:	091b      	lsreq	r3, r3, #4
 800b174:	3204      	addeq	r2, #4
 800b176:	0799      	lsls	r1, r3, #30
 800b178:	bf04      	itt	eq
 800b17a:	089b      	lsreq	r3, r3, #2
 800b17c:	3202      	addeq	r2, #2
 800b17e:	07d9      	lsls	r1, r3, #31
 800b180:	d403      	bmi.n	800b18a <__lo0bits+0x4e>
 800b182:	085b      	lsrs	r3, r3, #1
 800b184:	f102 0201 	add.w	r2, r2, #1
 800b188:	d003      	beq.n	800b192 <__lo0bits+0x56>
 800b18a:	6003      	str	r3, [r0, #0]
 800b18c:	e7e5      	b.n	800b15a <__lo0bits+0x1e>
 800b18e:	2200      	movs	r2, #0
 800b190:	e7e3      	b.n	800b15a <__lo0bits+0x1e>
 800b192:	2220      	movs	r2, #32
 800b194:	e7e1      	b.n	800b15a <__lo0bits+0x1e>
	...

0800b198 <__i2b>:
 800b198:	b510      	push	{r4, lr}
 800b19a:	460c      	mov	r4, r1
 800b19c:	2101      	movs	r1, #1
 800b19e:	f7ff ff05 	bl	800afac <_Balloc>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	b928      	cbnz	r0, 800b1b2 <__i2b+0x1a>
 800b1a6:	4b05      	ldr	r3, [pc, #20]	; (800b1bc <__i2b+0x24>)
 800b1a8:	4805      	ldr	r0, [pc, #20]	; (800b1c0 <__i2b+0x28>)
 800b1aa:	f240 1145 	movw	r1, #325	; 0x145
 800b1ae:	f000 fcb7 	bl	800bb20 <__assert_func>
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	6144      	str	r4, [r0, #20]
 800b1b6:	6103      	str	r3, [r0, #16]
 800b1b8:	bd10      	pop	{r4, pc}
 800b1ba:	bf00      	nop
 800b1bc:	0800c4fc 	.word	0x0800c4fc
 800b1c0:	0800c50d 	.word	0x0800c50d

0800b1c4 <__multiply>:
 800b1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c8:	4691      	mov	r9, r2
 800b1ca:	690a      	ldr	r2, [r1, #16]
 800b1cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	bfb8      	it	lt
 800b1d4:	460b      	movlt	r3, r1
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	bfbc      	itt	lt
 800b1da:	464c      	movlt	r4, r9
 800b1dc:	4699      	movlt	r9, r3
 800b1de:	6927      	ldr	r7, [r4, #16]
 800b1e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b1e4:	68a3      	ldr	r3, [r4, #8]
 800b1e6:	6861      	ldr	r1, [r4, #4]
 800b1e8:	eb07 060a 	add.w	r6, r7, sl
 800b1ec:	42b3      	cmp	r3, r6
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	bfb8      	it	lt
 800b1f2:	3101      	addlt	r1, #1
 800b1f4:	f7ff feda 	bl	800afac <_Balloc>
 800b1f8:	b930      	cbnz	r0, 800b208 <__multiply+0x44>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	4b44      	ldr	r3, [pc, #272]	; (800b310 <__multiply+0x14c>)
 800b1fe:	4845      	ldr	r0, [pc, #276]	; (800b314 <__multiply+0x150>)
 800b200:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b204:	f000 fc8c 	bl	800bb20 <__assert_func>
 800b208:	f100 0514 	add.w	r5, r0, #20
 800b20c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b210:	462b      	mov	r3, r5
 800b212:	2200      	movs	r2, #0
 800b214:	4543      	cmp	r3, r8
 800b216:	d321      	bcc.n	800b25c <__multiply+0x98>
 800b218:	f104 0314 	add.w	r3, r4, #20
 800b21c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b220:	f109 0314 	add.w	r3, r9, #20
 800b224:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b228:	9202      	str	r2, [sp, #8]
 800b22a:	1b3a      	subs	r2, r7, r4
 800b22c:	3a15      	subs	r2, #21
 800b22e:	f022 0203 	bic.w	r2, r2, #3
 800b232:	3204      	adds	r2, #4
 800b234:	f104 0115 	add.w	r1, r4, #21
 800b238:	428f      	cmp	r7, r1
 800b23a:	bf38      	it	cc
 800b23c:	2204      	movcc	r2, #4
 800b23e:	9201      	str	r2, [sp, #4]
 800b240:	9a02      	ldr	r2, [sp, #8]
 800b242:	9303      	str	r3, [sp, #12]
 800b244:	429a      	cmp	r2, r3
 800b246:	d80c      	bhi.n	800b262 <__multiply+0x9e>
 800b248:	2e00      	cmp	r6, #0
 800b24a:	dd03      	ble.n	800b254 <__multiply+0x90>
 800b24c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b250:	2b00      	cmp	r3, #0
 800b252:	d05b      	beq.n	800b30c <__multiply+0x148>
 800b254:	6106      	str	r6, [r0, #16]
 800b256:	b005      	add	sp, #20
 800b258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b25c:	f843 2b04 	str.w	r2, [r3], #4
 800b260:	e7d8      	b.n	800b214 <__multiply+0x50>
 800b262:	f8b3 a000 	ldrh.w	sl, [r3]
 800b266:	f1ba 0f00 	cmp.w	sl, #0
 800b26a:	d024      	beq.n	800b2b6 <__multiply+0xf2>
 800b26c:	f104 0e14 	add.w	lr, r4, #20
 800b270:	46a9      	mov	r9, r5
 800b272:	f04f 0c00 	mov.w	ip, #0
 800b276:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b27a:	f8d9 1000 	ldr.w	r1, [r9]
 800b27e:	fa1f fb82 	uxth.w	fp, r2
 800b282:	b289      	uxth	r1, r1
 800b284:	fb0a 110b 	mla	r1, sl, fp, r1
 800b288:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b28c:	f8d9 2000 	ldr.w	r2, [r9]
 800b290:	4461      	add	r1, ip
 800b292:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b296:	fb0a c20b 	mla	r2, sl, fp, ip
 800b29a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b29e:	b289      	uxth	r1, r1
 800b2a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b2a4:	4577      	cmp	r7, lr
 800b2a6:	f849 1b04 	str.w	r1, [r9], #4
 800b2aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b2ae:	d8e2      	bhi.n	800b276 <__multiply+0xb2>
 800b2b0:	9a01      	ldr	r2, [sp, #4]
 800b2b2:	f845 c002 	str.w	ip, [r5, r2]
 800b2b6:	9a03      	ldr	r2, [sp, #12]
 800b2b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b2bc:	3304      	adds	r3, #4
 800b2be:	f1b9 0f00 	cmp.w	r9, #0
 800b2c2:	d021      	beq.n	800b308 <__multiply+0x144>
 800b2c4:	6829      	ldr	r1, [r5, #0]
 800b2c6:	f104 0c14 	add.w	ip, r4, #20
 800b2ca:	46ae      	mov	lr, r5
 800b2cc:	f04f 0a00 	mov.w	sl, #0
 800b2d0:	f8bc b000 	ldrh.w	fp, [ip]
 800b2d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b2d8:	fb09 220b 	mla	r2, r9, fp, r2
 800b2dc:	4452      	add	r2, sl
 800b2de:	b289      	uxth	r1, r1
 800b2e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b2e4:	f84e 1b04 	str.w	r1, [lr], #4
 800b2e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b2ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b2f0:	f8be 1000 	ldrh.w	r1, [lr]
 800b2f4:	fb09 110a 	mla	r1, r9, sl, r1
 800b2f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b2fc:	4567      	cmp	r7, ip
 800b2fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b302:	d8e5      	bhi.n	800b2d0 <__multiply+0x10c>
 800b304:	9a01      	ldr	r2, [sp, #4]
 800b306:	50a9      	str	r1, [r5, r2]
 800b308:	3504      	adds	r5, #4
 800b30a:	e799      	b.n	800b240 <__multiply+0x7c>
 800b30c:	3e01      	subs	r6, #1
 800b30e:	e79b      	b.n	800b248 <__multiply+0x84>
 800b310:	0800c4fc 	.word	0x0800c4fc
 800b314:	0800c50d 	.word	0x0800c50d

0800b318 <__pow5mult>:
 800b318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b31c:	4615      	mov	r5, r2
 800b31e:	f012 0203 	ands.w	r2, r2, #3
 800b322:	4606      	mov	r6, r0
 800b324:	460f      	mov	r7, r1
 800b326:	d007      	beq.n	800b338 <__pow5mult+0x20>
 800b328:	4c25      	ldr	r4, [pc, #148]	; (800b3c0 <__pow5mult+0xa8>)
 800b32a:	3a01      	subs	r2, #1
 800b32c:	2300      	movs	r3, #0
 800b32e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b332:	f7ff fe9d 	bl	800b070 <__multadd>
 800b336:	4607      	mov	r7, r0
 800b338:	10ad      	asrs	r5, r5, #2
 800b33a:	d03d      	beq.n	800b3b8 <__pow5mult+0xa0>
 800b33c:	69f4      	ldr	r4, [r6, #28]
 800b33e:	b97c      	cbnz	r4, 800b360 <__pow5mult+0x48>
 800b340:	2010      	movs	r0, #16
 800b342:	f7ff fd7f 	bl	800ae44 <malloc>
 800b346:	4602      	mov	r2, r0
 800b348:	61f0      	str	r0, [r6, #28]
 800b34a:	b928      	cbnz	r0, 800b358 <__pow5mult+0x40>
 800b34c:	4b1d      	ldr	r3, [pc, #116]	; (800b3c4 <__pow5mult+0xac>)
 800b34e:	481e      	ldr	r0, [pc, #120]	; (800b3c8 <__pow5mult+0xb0>)
 800b350:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b354:	f000 fbe4 	bl	800bb20 <__assert_func>
 800b358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b35c:	6004      	str	r4, [r0, #0]
 800b35e:	60c4      	str	r4, [r0, #12]
 800b360:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b368:	b94c      	cbnz	r4, 800b37e <__pow5mult+0x66>
 800b36a:	f240 2171 	movw	r1, #625	; 0x271
 800b36e:	4630      	mov	r0, r6
 800b370:	f7ff ff12 	bl	800b198 <__i2b>
 800b374:	2300      	movs	r3, #0
 800b376:	f8c8 0008 	str.w	r0, [r8, #8]
 800b37a:	4604      	mov	r4, r0
 800b37c:	6003      	str	r3, [r0, #0]
 800b37e:	f04f 0900 	mov.w	r9, #0
 800b382:	07eb      	lsls	r3, r5, #31
 800b384:	d50a      	bpl.n	800b39c <__pow5mult+0x84>
 800b386:	4639      	mov	r1, r7
 800b388:	4622      	mov	r2, r4
 800b38a:	4630      	mov	r0, r6
 800b38c:	f7ff ff1a 	bl	800b1c4 <__multiply>
 800b390:	4639      	mov	r1, r7
 800b392:	4680      	mov	r8, r0
 800b394:	4630      	mov	r0, r6
 800b396:	f7ff fe49 	bl	800b02c <_Bfree>
 800b39a:	4647      	mov	r7, r8
 800b39c:	106d      	asrs	r5, r5, #1
 800b39e:	d00b      	beq.n	800b3b8 <__pow5mult+0xa0>
 800b3a0:	6820      	ldr	r0, [r4, #0]
 800b3a2:	b938      	cbnz	r0, 800b3b4 <__pow5mult+0x9c>
 800b3a4:	4622      	mov	r2, r4
 800b3a6:	4621      	mov	r1, r4
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	f7ff ff0b 	bl	800b1c4 <__multiply>
 800b3ae:	6020      	str	r0, [r4, #0]
 800b3b0:	f8c0 9000 	str.w	r9, [r0]
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	e7e4      	b.n	800b382 <__pow5mult+0x6a>
 800b3b8:	4638      	mov	r0, r7
 800b3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3be:	bf00      	nop
 800b3c0:	0800c658 	.word	0x0800c658
 800b3c4:	0800c48d 	.word	0x0800c48d
 800b3c8:	0800c50d 	.word	0x0800c50d

0800b3cc <__lshift>:
 800b3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3d0:	460c      	mov	r4, r1
 800b3d2:	6849      	ldr	r1, [r1, #4]
 800b3d4:	6923      	ldr	r3, [r4, #16]
 800b3d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b3da:	68a3      	ldr	r3, [r4, #8]
 800b3dc:	4607      	mov	r7, r0
 800b3de:	4691      	mov	r9, r2
 800b3e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3e4:	f108 0601 	add.w	r6, r8, #1
 800b3e8:	42b3      	cmp	r3, r6
 800b3ea:	db0b      	blt.n	800b404 <__lshift+0x38>
 800b3ec:	4638      	mov	r0, r7
 800b3ee:	f7ff fddd 	bl	800afac <_Balloc>
 800b3f2:	4605      	mov	r5, r0
 800b3f4:	b948      	cbnz	r0, 800b40a <__lshift+0x3e>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	4b28      	ldr	r3, [pc, #160]	; (800b49c <__lshift+0xd0>)
 800b3fa:	4829      	ldr	r0, [pc, #164]	; (800b4a0 <__lshift+0xd4>)
 800b3fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b400:	f000 fb8e 	bl	800bb20 <__assert_func>
 800b404:	3101      	adds	r1, #1
 800b406:	005b      	lsls	r3, r3, #1
 800b408:	e7ee      	b.n	800b3e8 <__lshift+0x1c>
 800b40a:	2300      	movs	r3, #0
 800b40c:	f100 0114 	add.w	r1, r0, #20
 800b410:	f100 0210 	add.w	r2, r0, #16
 800b414:	4618      	mov	r0, r3
 800b416:	4553      	cmp	r3, sl
 800b418:	db33      	blt.n	800b482 <__lshift+0xb6>
 800b41a:	6920      	ldr	r0, [r4, #16]
 800b41c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b420:	f104 0314 	add.w	r3, r4, #20
 800b424:	f019 091f 	ands.w	r9, r9, #31
 800b428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b42c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b430:	d02b      	beq.n	800b48a <__lshift+0xbe>
 800b432:	f1c9 0e20 	rsb	lr, r9, #32
 800b436:	468a      	mov	sl, r1
 800b438:	2200      	movs	r2, #0
 800b43a:	6818      	ldr	r0, [r3, #0]
 800b43c:	fa00 f009 	lsl.w	r0, r0, r9
 800b440:	4310      	orrs	r0, r2
 800b442:	f84a 0b04 	str.w	r0, [sl], #4
 800b446:	f853 2b04 	ldr.w	r2, [r3], #4
 800b44a:	459c      	cmp	ip, r3
 800b44c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b450:	d8f3      	bhi.n	800b43a <__lshift+0x6e>
 800b452:	ebac 0304 	sub.w	r3, ip, r4
 800b456:	3b15      	subs	r3, #21
 800b458:	f023 0303 	bic.w	r3, r3, #3
 800b45c:	3304      	adds	r3, #4
 800b45e:	f104 0015 	add.w	r0, r4, #21
 800b462:	4584      	cmp	ip, r0
 800b464:	bf38      	it	cc
 800b466:	2304      	movcc	r3, #4
 800b468:	50ca      	str	r2, [r1, r3]
 800b46a:	b10a      	cbz	r2, 800b470 <__lshift+0xa4>
 800b46c:	f108 0602 	add.w	r6, r8, #2
 800b470:	3e01      	subs	r6, #1
 800b472:	4638      	mov	r0, r7
 800b474:	612e      	str	r6, [r5, #16]
 800b476:	4621      	mov	r1, r4
 800b478:	f7ff fdd8 	bl	800b02c <_Bfree>
 800b47c:	4628      	mov	r0, r5
 800b47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b482:	f842 0f04 	str.w	r0, [r2, #4]!
 800b486:	3301      	adds	r3, #1
 800b488:	e7c5      	b.n	800b416 <__lshift+0x4a>
 800b48a:	3904      	subs	r1, #4
 800b48c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b490:	f841 2f04 	str.w	r2, [r1, #4]!
 800b494:	459c      	cmp	ip, r3
 800b496:	d8f9      	bhi.n	800b48c <__lshift+0xc0>
 800b498:	e7ea      	b.n	800b470 <__lshift+0xa4>
 800b49a:	bf00      	nop
 800b49c:	0800c4fc 	.word	0x0800c4fc
 800b4a0:	0800c50d 	.word	0x0800c50d

0800b4a4 <__mcmp>:
 800b4a4:	b530      	push	{r4, r5, lr}
 800b4a6:	6902      	ldr	r2, [r0, #16]
 800b4a8:	690c      	ldr	r4, [r1, #16]
 800b4aa:	1b12      	subs	r2, r2, r4
 800b4ac:	d10e      	bne.n	800b4cc <__mcmp+0x28>
 800b4ae:	f100 0314 	add.w	r3, r0, #20
 800b4b2:	3114      	adds	r1, #20
 800b4b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b4b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b4bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b4c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b4c4:	42a5      	cmp	r5, r4
 800b4c6:	d003      	beq.n	800b4d0 <__mcmp+0x2c>
 800b4c8:	d305      	bcc.n	800b4d6 <__mcmp+0x32>
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	bd30      	pop	{r4, r5, pc}
 800b4d0:	4283      	cmp	r3, r0
 800b4d2:	d3f3      	bcc.n	800b4bc <__mcmp+0x18>
 800b4d4:	e7fa      	b.n	800b4cc <__mcmp+0x28>
 800b4d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4da:	e7f7      	b.n	800b4cc <__mcmp+0x28>

0800b4dc <__mdiff>:
 800b4dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e0:	460c      	mov	r4, r1
 800b4e2:	4606      	mov	r6, r0
 800b4e4:	4611      	mov	r1, r2
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	4690      	mov	r8, r2
 800b4ea:	f7ff ffdb 	bl	800b4a4 <__mcmp>
 800b4ee:	1e05      	subs	r5, r0, #0
 800b4f0:	d110      	bne.n	800b514 <__mdiff+0x38>
 800b4f2:	4629      	mov	r1, r5
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	f7ff fd59 	bl	800afac <_Balloc>
 800b4fa:	b930      	cbnz	r0, 800b50a <__mdiff+0x2e>
 800b4fc:	4b3a      	ldr	r3, [pc, #232]	; (800b5e8 <__mdiff+0x10c>)
 800b4fe:	4602      	mov	r2, r0
 800b500:	f240 2137 	movw	r1, #567	; 0x237
 800b504:	4839      	ldr	r0, [pc, #228]	; (800b5ec <__mdiff+0x110>)
 800b506:	f000 fb0b 	bl	800bb20 <__assert_func>
 800b50a:	2301      	movs	r3, #1
 800b50c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b514:	bfa4      	itt	ge
 800b516:	4643      	movge	r3, r8
 800b518:	46a0      	movge	r8, r4
 800b51a:	4630      	mov	r0, r6
 800b51c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b520:	bfa6      	itte	ge
 800b522:	461c      	movge	r4, r3
 800b524:	2500      	movge	r5, #0
 800b526:	2501      	movlt	r5, #1
 800b528:	f7ff fd40 	bl	800afac <_Balloc>
 800b52c:	b920      	cbnz	r0, 800b538 <__mdiff+0x5c>
 800b52e:	4b2e      	ldr	r3, [pc, #184]	; (800b5e8 <__mdiff+0x10c>)
 800b530:	4602      	mov	r2, r0
 800b532:	f240 2145 	movw	r1, #581	; 0x245
 800b536:	e7e5      	b.n	800b504 <__mdiff+0x28>
 800b538:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b53c:	6926      	ldr	r6, [r4, #16]
 800b53e:	60c5      	str	r5, [r0, #12]
 800b540:	f104 0914 	add.w	r9, r4, #20
 800b544:	f108 0514 	add.w	r5, r8, #20
 800b548:	f100 0e14 	add.w	lr, r0, #20
 800b54c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b550:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b554:	f108 0210 	add.w	r2, r8, #16
 800b558:	46f2      	mov	sl, lr
 800b55a:	2100      	movs	r1, #0
 800b55c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b560:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b564:	fa11 f88b 	uxtah	r8, r1, fp
 800b568:	b299      	uxth	r1, r3
 800b56a:	0c1b      	lsrs	r3, r3, #16
 800b56c:	eba8 0801 	sub.w	r8, r8, r1
 800b570:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b574:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b578:	fa1f f888 	uxth.w	r8, r8
 800b57c:	1419      	asrs	r1, r3, #16
 800b57e:	454e      	cmp	r6, r9
 800b580:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b584:	f84a 3b04 	str.w	r3, [sl], #4
 800b588:	d8e8      	bhi.n	800b55c <__mdiff+0x80>
 800b58a:	1b33      	subs	r3, r6, r4
 800b58c:	3b15      	subs	r3, #21
 800b58e:	f023 0303 	bic.w	r3, r3, #3
 800b592:	3304      	adds	r3, #4
 800b594:	3415      	adds	r4, #21
 800b596:	42a6      	cmp	r6, r4
 800b598:	bf38      	it	cc
 800b59a:	2304      	movcc	r3, #4
 800b59c:	441d      	add	r5, r3
 800b59e:	4473      	add	r3, lr
 800b5a0:	469e      	mov	lr, r3
 800b5a2:	462e      	mov	r6, r5
 800b5a4:	4566      	cmp	r6, ip
 800b5a6:	d30e      	bcc.n	800b5c6 <__mdiff+0xea>
 800b5a8:	f10c 0203 	add.w	r2, ip, #3
 800b5ac:	1b52      	subs	r2, r2, r5
 800b5ae:	f022 0203 	bic.w	r2, r2, #3
 800b5b2:	3d03      	subs	r5, #3
 800b5b4:	45ac      	cmp	ip, r5
 800b5b6:	bf38      	it	cc
 800b5b8:	2200      	movcc	r2, #0
 800b5ba:	4413      	add	r3, r2
 800b5bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b5c0:	b17a      	cbz	r2, 800b5e2 <__mdiff+0x106>
 800b5c2:	6107      	str	r7, [r0, #16]
 800b5c4:	e7a4      	b.n	800b510 <__mdiff+0x34>
 800b5c6:	f856 8b04 	ldr.w	r8, [r6], #4
 800b5ca:	fa11 f288 	uxtah	r2, r1, r8
 800b5ce:	1414      	asrs	r4, r2, #16
 800b5d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b5d4:	b292      	uxth	r2, r2
 800b5d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b5da:	f84e 2b04 	str.w	r2, [lr], #4
 800b5de:	1421      	asrs	r1, r4, #16
 800b5e0:	e7e0      	b.n	800b5a4 <__mdiff+0xc8>
 800b5e2:	3f01      	subs	r7, #1
 800b5e4:	e7ea      	b.n	800b5bc <__mdiff+0xe0>
 800b5e6:	bf00      	nop
 800b5e8:	0800c4fc 	.word	0x0800c4fc
 800b5ec:	0800c50d 	.word	0x0800c50d

0800b5f0 <__d2b>:
 800b5f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5f4:	460f      	mov	r7, r1
 800b5f6:	2101      	movs	r1, #1
 800b5f8:	ec59 8b10 	vmov	r8, r9, d0
 800b5fc:	4616      	mov	r6, r2
 800b5fe:	f7ff fcd5 	bl	800afac <_Balloc>
 800b602:	4604      	mov	r4, r0
 800b604:	b930      	cbnz	r0, 800b614 <__d2b+0x24>
 800b606:	4602      	mov	r2, r0
 800b608:	4b24      	ldr	r3, [pc, #144]	; (800b69c <__d2b+0xac>)
 800b60a:	4825      	ldr	r0, [pc, #148]	; (800b6a0 <__d2b+0xb0>)
 800b60c:	f240 310f 	movw	r1, #783	; 0x30f
 800b610:	f000 fa86 	bl	800bb20 <__assert_func>
 800b614:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b618:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b61c:	bb2d      	cbnz	r5, 800b66a <__d2b+0x7a>
 800b61e:	9301      	str	r3, [sp, #4]
 800b620:	f1b8 0300 	subs.w	r3, r8, #0
 800b624:	d026      	beq.n	800b674 <__d2b+0x84>
 800b626:	4668      	mov	r0, sp
 800b628:	9300      	str	r3, [sp, #0]
 800b62a:	f7ff fd87 	bl	800b13c <__lo0bits>
 800b62e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b632:	b1e8      	cbz	r0, 800b670 <__d2b+0x80>
 800b634:	f1c0 0320 	rsb	r3, r0, #32
 800b638:	fa02 f303 	lsl.w	r3, r2, r3
 800b63c:	430b      	orrs	r3, r1
 800b63e:	40c2      	lsrs	r2, r0
 800b640:	6163      	str	r3, [r4, #20]
 800b642:	9201      	str	r2, [sp, #4]
 800b644:	9b01      	ldr	r3, [sp, #4]
 800b646:	61a3      	str	r3, [r4, #24]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	bf14      	ite	ne
 800b64c:	2202      	movne	r2, #2
 800b64e:	2201      	moveq	r2, #1
 800b650:	6122      	str	r2, [r4, #16]
 800b652:	b1bd      	cbz	r5, 800b684 <__d2b+0x94>
 800b654:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b658:	4405      	add	r5, r0
 800b65a:	603d      	str	r5, [r7, #0]
 800b65c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b660:	6030      	str	r0, [r6, #0]
 800b662:	4620      	mov	r0, r4
 800b664:	b003      	add	sp, #12
 800b666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b66a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b66e:	e7d6      	b.n	800b61e <__d2b+0x2e>
 800b670:	6161      	str	r1, [r4, #20]
 800b672:	e7e7      	b.n	800b644 <__d2b+0x54>
 800b674:	a801      	add	r0, sp, #4
 800b676:	f7ff fd61 	bl	800b13c <__lo0bits>
 800b67a:	9b01      	ldr	r3, [sp, #4]
 800b67c:	6163      	str	r3, [r4, #20]
 800b67e:	3020      	adds	r0, #32
 800b680:	2201      	movs	r2, #1
 800b682:	e7e5      	b.n	800b650 <__d2b+0x60>
 800b684:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b688:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b68c:	6038      	str	r0, [r7, #0]
 800b68e:	6918      	ldr	r0, [r3, #16]
 800b690:	f7ff fd34 	bl	800b0fc <__hi0bits>
 800b694:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b698:	e7e2      	b.n	800b660 <__d2b+0x70>
 800b69a:	bf00      	nop
 800b69c:	0800c4fc 	.word	0x0800c4fc
 800b6a0:	0800c50d 	.word	0x0800c50d

0800b6a4 <__ssputs_r>:
 800b6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a8:	688e      	ldr	r6, [r1, #8]
 800b6aa:	461f      	mov	r7, r3
 800b6ac:	42be      	cmp	r6, r7
 800b6ae:	680b      	ldr	r3, [r1, #0]
 800b6b0:	4682      	mov	sl, r0
 800b6b2:	460c      	mov	r4, r1
 800b6b4:	4690      	mov	r8, r2
 800b6b6:	d82c      	bhi.n	800b712 <__ssputs_r+0x6e>
 800b6b8:	898a      	ldrh	r2, [r1, #12]
 800b6ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6be:	d026      	beq.n	800b70e <__ssputs_r+0x6a>
 800b6c0:	6965      	ldr	r5, [r4, #20]
 800b6c2:	6909      	ldr	r1, [r1, #16]
 800b6c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6c8:	eba3 0901 	sub.w	r9, r3, r1
 800b6cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6d0:	1c7b      	adds	r3, r7, #1
 800b6d2:	444b      	add	r3, r9
 800b6d4:	106d      	asrs	r5, r5, #1
 800b6d6:	429d      	cmp	r5, r3
 800b6d8:	bf38      	it	cc
 800b6da:	461d      	movcc	r5, r3
 800b6dc:	0553      	lsls	r3, r2, #21
 800b6de:	d527      	bpl.n	800b730 <__ssputs_r+0x8c>
 800b6e0:	4629      	mov	r1, r5
 800b6e2:	f7ff fbd7 	bl	800ae94 <_malloc_r>
 800b6e6:	4606      	mov	r6, r0
 800b6e8:	b360      	cbz	r0, 800b744 <__ssputs_r+0xa0>
 800b6ea:	6921      	ldr	r1, [r4, #16]
 800b6ec:	464a      	mov	r2, r9
 800b6ee:	f000 fa09 	bl	800bb04 <memcpy>
 800b6f2:	89a3      	ldrh	r3, [r4, #12]
 800b6f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6fc:	81a3      	strh	r3, [r4, #12]
 800b6fe:	6126      	str	r6, [r4, #16]
 800b700:	6165      	str	r5, [r4, #20]
 800b702:	444e      	add	r6, r9
 800b704:	eba5 0509 	sub.w	r5, r5, r9
 800b708:	6026      	str	r6, [r4, #0]
 800b70a:	60a5      	str	r5, [r4, #8]
 800b70c:	463e      	mov	r6, r7
 800b70e:	42be      	cmp	r6, r7
 800b710:	d900      	bls.n	800b714 <__ssputs_r+0x70>
 800b712:	463e      	mov	r6, r7
 800b714:	6820      	ldr	r0, [r4, #0]
 800b716:	4632      	mov	r2, r6
 800b718:	4641      	mov	r1, r8
 800b71a:	f000 f9c9 	bl	800bab0 <memmove>
 800b71e:	68a3      	ldr	r3, [r4, #8]
 800b720:	1b9b      	subs	r3, r3, r6
 800b722:	60a3      	str	r3, [r4, #8]
 800b724:	6823      	ldr	r3, [r4, #0]
 800b726:	4433      	add	r3, r6
 800b728:	6023      	str	r3, [r4, #0]
 800b72a:	2000      	movs	r0, #0
 800b72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b730:	462a      	mov	r2, r5
 800b732:	f000 fa3b 	bl	800bbac <_realloc_r>
 800b736:	4606      	mov	r6, r0
 800b738:	2800      	cmp	r0, #0
 800b73a:	d1e0      	bne.n	800b6fe <__ssputs_r+0x5a>
 800b73c:	6921      	ldr	r1, [r4, #16]
 800b73e:	4650      	mov	r0, sl
 800b740:	f7ff fb34 	bl	800adac <_free_r>
 800b744:	230c      	movs	r3, #12
 800b746:	f8ca 3000 	str.w	r3, [sl]
 800b74a:	89a3      	ldrh	r3, [r4, #12]
 800b74c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b750:	81a3      	strh	r3, [r4, #12]
 800b752:	f04f 30ff 	mov.w	r0, #4294967295
 800b756:	e7e9      	b.n	800b72c <__ssputs_r+0x88>

0800b758 <_svfiprintf_r>:
 800b758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75c:	4698      	mov	r8, r3
 800b75e:	898b      	ldrh	r3, [r1, #12]
 800b760:	061b      	lsls	r3, r3, #24
 800b762:	b09d      	sub	sp, #116	; 0x74
 800b764:	4607      	mov	r7, r0
 800b766:	460d      	mov	r5, r1
 800b768:	4614      	mov	r4, r2
 800b76a:	d50e      	bpl.n	800b78a <_svfiprintf_r+0x32>
 800b76c:	690b      	ldr	r3, [r1, #16]
 800b76e:	b963      	cbnz	r3, 800b78a <_svfiprintf_r+0x32>
 800b770:	2140      	movs	r1, #64	; 0x40
 800b772:	f7ff fb8f 	bl	800ae94 <_malloc_r>
 800b776:	6028      	str	r0, [r5, #0]
 800b778:	6128      	str	r0, [r5, #16]
 800b77a:	b920      	cbnz	r0, 800b786 <_svfiprintf_r+0x2e>
 800b77c:	230c      	movs	r3, #12
 800b77e:	603b      	str	r3, [r7, #0]
 800b780:	f04f 30ff 	mov.w	r0, #4294967295
 800b784:	e0d0      	b.n	800b928 <_svfiprintf_r+0x1d0>
 800b786:	2340      	movs	r3, #64	; 0x40
 800b788:	616b      	str	r3, [r5, #20]
 800b78a:	2300      	movs	r3, #0
 800b78c:	9309      	str	r3, [sp, #36]	; 0x24
 800b78e:	2320      	movs	r3, #32
 800b790:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b794:	f8cd 800c 	str.w	r8, [sp, #12]
 800b798:	2330      	movs	r3, #48	; 0x30
 800b79a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b940 <_svfiprintf_r+0x1e8>
 800b79e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7a2:	f04f 0901 	mov.w	r9, #1
 800b7a6:	4623      	mov	r3, r4
 800b7a8:	469a      	mov	sl, r3
 800b7aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7ae:	b10a      	cbz	r2, 800b7b4 <_svfiprintf_r+0x5c>
 800b7b0:	2a25      	cmp	r2, #37	; 0x25
 800b7b2:	d1f9      	bne.n	800b7a8 <_svfiprintf_r+0x50>
 800b7b4:	ebba 0b04 	subs.w	fp, sl, r4
 800b7b8:	d00b      	beq.n	800b7d2 <_svfiprintf_r+0x7a>
 800b7ba:	465b      	mov	r3, fp
 800b7bc:	4622      	mov	r2, r4
 800b7be:	4629      	mov	r1, r5
 800b7c0:	4638      	mov	r0, r7
 800b7c2:	f7ff ff6f 	bl	800b6a4 <__ssputs_r>
 800b7c6:	3001      	adds	r0, #1
 800b7c8:	f000 80a9 	beq.w	800b91e <_svfiprintf_r+0x1c6>
 800b7cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7ce:	445a      	add	r2, fp
 800b7d0:	9209      	str	r2, [sp, #36]	; 0x24
 800b7d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	f000 80a1 	beq.w	800b91e <_svfiprintf_r+0x1c6>
 800b7dc:	2300      	movs	r3, #0
 800b7de:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7e6:	f10a 0a01 	add.w	sl, sl, #1
 800b7ea:	9304      	str	r3, [sp, #16]
 800b7ec:	9307      	str	r3, [sp, #28]
 800b7ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7f2:	931a      	str	r3, [sp, #104]	; 0x68
 800b7f4:	4654      	mov	r4, sl
 800b7f6:	2205      	movs	r2, #5
 800b7f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7fc:	4850      	ldr	r0, [pc, #320]	; (800b940 <_svfiprintf_r+0x1e8>)
 800b7fe:	f7f4 fce7 	bl	80001d0 <memchr>
 800b802:	9a04      	ldr	r2, [sp, #16]
 800b804:	b9d8      	cbnz	r0, 800b83e <_svfiprintf_r+0xe6>
 800b806:	06d0      	lsls	r0, r2, #27
 800b808:	bf44      	itt	mi
 800b80a:	2320      	movmi	r3, #32
 800b80c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b810:	0711      	lsls	r1, r2, #28
 800b812:	bf44      	itt	mi
 800b814:	232b      	movmi	r3, #43	; 0x2b
 800b816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b81a:	f89a 3000 	ldrb.w	r3, [sl]
 800b81e:	2b2a      	cmp	r3, #42	; 0x2a
 800b820:	d015      	beq.n	800b84e <_svfiprintf_r+0xf6>
 800b822:	9a07      	ldr	r2, [sp, #28]
 800b824:	4654      	mov	r4, sl
 800b826:	2000      	movs	r0, #0
 800b828:	f04f 0c0a 	mov.w	ip, #10
 800b82c:	4621      	mov	r1, r4
 800b82e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b832:	3b30      	subs	r3, #48	; 0x30
 800b834:	2b09      	cmp	r3, #9
 800b836:	d94d      	bls.n	800b8d4 <_svfiprintf_r+0x17c>
 800b838:	b1b0      	cbz	r0, 800b868 <_svfiprintf_r+0x110>
 800b83a:	9207      	str	r2, [sp, #28]
 800b83c:	e014      	b.n	800b868 <_svfiprintf_r+0x110>
 800b83e:	eba0 0308 	sub.w	r3, r0, r8
 800b842:	fa09 f303 	lsl.w	r3, r9, r3
 800b846:	4313      	orrs	r3, r2
 800b848:	9304      	str	r3, [sp, #16]
 800b84a:	46a2      	mov	sl, r4
 800b84c:	e7d2      	b.n	800b7f4 <_svfiprintf_r+0x9c>
 800b84e:	9b03      	ldr	r3, [sp, #12]
 800b850:	1d19      	adds	r1, r3, #4
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	9103      	str	r1, [sp, #12]
 800b856:	2b00      	cmp	r3, #0
 800b858:	bfbb      	ittet	lt
 800b85a:	425b      	neglt	r3, r3
 800b85c:	f042 0202 	orrlt.w	r2, r2, #2
 800b860:	9307      	strge	r3, [sp, #28]
 800b862:	9307      	strlt	r3, [sp, #28]
 800b864:	bfb8      	it	lt
 800b866:	9204      	strlt	r2, [sp, #16]
 800b868:	7823      	ldrb	r3, [r4, #0]
 800b86a:	2b2e      	cmp	r3, #46	; 0x2e
 800b86c:	d10c      	bne.n	800b888 <_svfiprintf_r+0x130>
 800b86e:	7863      	ldrb	r3, [r4, #1]
 800b870:	2b2a      	cmp	r3, #42	; 0x2a
 800b872:	d134      	bne.n	800b8de <_svfiprintf_r+0x186>
 800b874:	9b03      	ldr	r3, [sp, #12]
 800b876:	1d1a      	adds	r2, r3, #4
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	9203      	str	r2, [sp, #12]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	bfb8      	it	lt
 800b880:	f04f 33ff 	movlt.w	r3, #4294967295
 800b884:	3402      	adds	r4, #2
 800b886:	9305      	str	r3, [sp, #20]
 800b888:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b950 <_svfiprintf_r+0x1f8>
 800b88c:	7821      	ldrb	r1, [r4, #0]
 800b88e:	2203      	movs	r2, #3
 800b890:	4650      	mov	r0, sl
 800b892:	f7f4 fc9d 	bl	80001d0 <memchr>
 800b896:	b138      	cbz	r0, 800b8a8 <_svfiprintf_r+0x150>
 800b898:	9b04      	ldr	r3, [sp, #16]
 800b89a:	eba0 000a 	sub.w	r0, r0, sl
 800b89e:	2240      	movs	r2, #64	; 0x40
 800b8a0:	4082      	lsls	r2, r0
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	3401      	adds	r4, #1
 800b8a6:	9304      	str	r3, [sp, #16]
 800b8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ac:	4825      	ldr	r0, [pc, #148]	; (800b944 <_svfiprintf_r+0x1ec>)
 800b8ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8b2:	2206      	movs	r2, #6
 800b8b4:	f7f4 fc8c 	bl	80001d0 <memchr>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	d038      	beq.n	800b92e <_svfiprintf_r+0x1d6>
 800b8bc:	4b22      	ldr	r3, [pc, #136]	; (800b948 <_svfiprintf_r+0x1f0>)
 800b8be:	bb1b      	cbnz	r3, 800b908 <_svfiprintf_r+0x1b0>
 800b8c0:	9b03      	ldr	r3, [sp, #12]
 800b8c2:	3307      	adds	r3, #7
 800b8c4:	f023 0307 	bic.w	r3, r3, #7
 800b8c8:	3308      	adds	r3, #8
 800b8ca:	9303      	str	r3, [sp, #12]
 800b8cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ce:	4433      	add	r3, r6
 800b8d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b8d2:	e768      	b.n	800b7a6 <_svfiprintf_r+0x4e>
 800b8d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8d8:	460c      	mov	r4, r1
 800b8da:	2001      	movs	r0, #1
 800b8dc:	e7a6      	b.n	800b82c <_svfiprintf_r+0xd4>
 800b8de:	2300      	movs	r3, #0
 800b8e0:	3401      	adds	r4, #1
 800b8e2:	9305      	str	r3, [sp, #20]
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	f04f 0c0a 	mov.w	ip, #10
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8f0:	3a30      	subs	r2, #48	; 0x30
 800b8f2:	2a09      	cmp	r2, #9
 800b8f4:	d903      	bls.n	800b8fe <_svfiprintf_r+0x1a6>
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d0c6      	beq.n	800b888 <_svfiprintf_r+0x130>
 800b8fa:	9105      	str	r1, [sp, #20]
 800b8fc:	e7c4      	b.n	800b888 <_svfiprintf_r+0x130>
 800b8fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800b902:	4604      	mov	r4, r0
 800b904:	2301      	movs	r3, #1
 800b906:	e7f0      	b.n	800b8ea <_svfiprintf_r+0x192>
 800b908:	ab03      	add	r3, sp, #12
 800b90a:	9300      	str	r3, [sp, #0]
 800b90c:	462a      	mov	r2, r5
 800b90e:	4b0f      	ldr	r3, [pc, #60]	; (800b94c <_svfiprintf_r+0x1f4>)
 800b910:	a904      	add	r1, sp, #16
 800b912:	4638      	mov	r0, r7
 800b914:	f7fd fe2a 	bl	800956c <_printf_float>
 800b918:	1c42      	adds	r2, r0, #1
 800b91a:	4606      	mov	r6, r0
 800b91c:	d1d6      	bne.n	800b8cc <_svfiprintf_r+0x174>
 800b91e:	89ab      	ldrh	r3, [r5, #12]
 800b920:	065b      	lsls	r3, r3, #25
 800b922:	f53f af2d 	bmi.w	800b780 <_svfiprintf_r+0x28>
 800b926:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b928:	b01d      	add	sp, #116	; 0x74
 800b92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b92e:	ab03      	add	r3, sp, #12
 800b930:	9300      	str	r3, [sp, #0]
 800b932:	462a      	mov	r2, r5
 800b934:	4b05      	ldr	r3, [pc, #20]	; (800b94c <_svfiprintf_r+0x1f4>)
 800b936:	a904      	add	r1, sp, #16
 800b938:	4638      	mov	r0, r7
 800b93a:	f7fe f8bb 	bl	8009ab4 <_printf_i>
 800b93e:	e7eb      	b.n	800b918 <_svfiprintf_r+0x1c0>
 800b940:	0800c664 	.word	0x0800c664
 800b944:	0800c66e 	.word	0x0800c66e
 800b948:	0800956d 	.word	0x0800956d
 800b94c:	0800b6a5 	.word	0x0800b6a5
 800b950:	0800c66a 	.word	0x0800c66a

0800b954 <__sflush_r>:
 800b954:	898a      	ldrh	r2, [r1, #12]
 800b956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b95a:	4605      	mov	r5, r0
 800b95c:	0710      	lsls	r0, r2, #28
 800b95e:	460c      	mov	r4, r1
 800b960:	d458      	bmi.n	800ba14 <__sflush_r+0xc0>
 800b962:	684b      	ldr	r3, [r1, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	dc05      	bgt.n	800b974 <__sflush_r+0x20>
 800b968:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	dc02      	bgt.n	800b974 <__sflush_r+0x20>
 800b96e:	2000      	movs	r0, #0
 800b970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b976:	2e00      	cmp	r6, #0
 800b978:	d0f9      	beq.n	800b96e <__sflush_r+0x1a>
 800b97a:	2300      	movs	r3, #0
 800b97c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b980:	682f      	ldr	r7, [r5, #0]
 800b982:	6a21      	ldr	r1, [r4, #32]
 800b984:	602b      	str	r3, [r5, #0]
 800b986:	d032      	beq.n	800b9ee <__sflush_r+0x9a>
 800b988:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b98a:	89a3      	ldrh	r3, [r4, #12]
 800b98c:	075a      	lsls	r2, r3, #29
 800b98e:	d505      	bpl.n	800b99c <__sflush_r+0x48>
 800b990:	6863      	ldr	r3, [r4, #4]
 800b992:	1ac0      	subs	r0, r0, r3
 800b994:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b996:	b10b      	cbz	r3, 800b99c <__sflush_r+0x48>
 800b998:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b99a:	1ac0      	subs	r0, r0, r3
 800b99c:	2300      	movs	r3, #0
 800b99e:	4602      	mov	r2, r0
 800b9a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9a2:	6a21      	ldr	r1, [r4, #32]
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	47b0      	blx	r6
 800b9a8:	1c43      	adds	r3, r0, #1
 800b9aa:	89a3      	ldrh	r3, [r4, #12]
 800b9ac:	d106      	bne.n	800b9bc <__sflush_r+0x68>
 800b9ae:	6829      	ldr	r1, [r5, #0]
 800b9b0:	291d      	cmp	r1, #29
 800b9b2:	d82b      	bhi.n	800ba0c <__sflush_r+0xb8>
 800b9b4:	4a29      	ldr	r2, [pc, #164]	; (800ba5c <__sflush_r+0x108>)
 800b9b6:	410a      	asrs	r2, r1
 800b9b8:	07d6      	lsls	r6, r2, #31
 800b9ba:	d427      	bmi.n	800ba0c <__sflush_r+0xb8>
 800b9bc:	2200      	movs	r2, #0
 800b9be:	6062      	str	r2, [r4, #4]
 800b9c0:	04d9      	lsls	r1, r3, #19
 800b9c2:	6922      	ldr	r2, [r4, #16]
 800b9c4:	6022      	str	r2, [r4, #0]
 800b9c6:	d504      	bpl.n	800b9d2 <__sflush_r+0x7e>
 800b9c8:	1c42      	adds	r2, r0, #1
 800b9ca:	d101      	bne.n	800b9d0 <__sflush_r+0x7c>
 800b9cc:	682b      	ldr	r3, [r5, #0]
 800b9ce:	b903      	cbnz	r3, 800b9d2 <__sflush_r+0x7e>
 800b9d0:	6560      	str	r0, [r4, #84]	; 0x54
 800b9d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9d4:	602f      	str	r7, [r5, #0]
 800b9d6:	2900      	cmp	r1, #0
 800b9d8:	d0c9      	beq.n	800b96e <__sflush_r+0x1a>
 800b9da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9de:	4299      	cmp	r1, r3
 800b9e0:	d002      	beq.n	800b9e8 <__sflush_r+0x94>
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	f7ff f9e2 	bl	800adac <_free_r>
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	6360      	str	r0, [r4, #52]	; 0x34
 800b9ec:	e7c0      	b.n	800b970 <__sflush_r+0x1c>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	47b0      	blx	r6
 800b9f4:	1c41      	adds	r1, r0, #1
 800b9f6:	d1c8      	bne.n	800b98a <__sflush_r+0x36>
 800b9f8:	682b      	ldr	r3, [r5, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d0c5      	beq.n	800b98a <__sflush_r+0x36>
 800b9fe:	2b1d      	cmp	r3, #29
 800ba00:	d001      	beq.n	800ba06 <__sflush_r+0xb2>
 800ba02:	2b16      	cmp	r3, #22
 800ba04:	d101      	bne.n	800ba0a <__sflush_r+0xb6>
 800ba06:	602f      	str	r7, [r5, #0]
 800ba08:	e7b1      	b.n	800b96e <__sflush_r+0x1a>
 800ba0a:	89a3      	ldrh	r3, [r4, #12]
 800ba0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba10:	81a3      	strh	r3, [r4, #12]
 800ba12:	e7ad      	b.n	800b970 <__sflush_r+0x1c>
 800ba14:	690f      	ldr	r7, [r1, #16]
 800ba16:	2f00      	cmp	r7, #0
 800ba18:	d0a9      	beq.n	800b96e <__sflush_r+0x1a>
 800ba1a:	0793      	lsls	r3, r2, #30
 800ba1c:	680e      	ldr	r6, [r1, #0]
 800ba1e:	bf08      	it	eq
 800ba20:	694b      	ldreq	r3, [r1, #20]
 800ba22:	600f      	str	r7, [r1, #0]
 800ba24:	bf18      	it	ne
 800ba26:	2300      	movne	r3, #0
 800ba28:	eba6 0807 	sub.w	r8, r6, r7
 800ba2c:	608b      	str	r3, [r1, #8]
 800ba2e:	f1b8 0f00 	cmp.w	r8, #0
 800ba32:	dd9c      	ble.n	800b96e <__sflush_r+0x1a>
 800ba34:	6a21      	ldr	r1, [r4, #32]
 800ba36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba38:	4643      	mov	r3, r8
 800ba3a:	463a      	mov	r2, r7
 800ba3c:	4628      	mov	r0, r5
 800ba3e:	47b0      	blx	r6
 800ba40:	2800      	cmp	r0, #0
 800ba42:	dc06      	bgt.n	800ba52 <__sflush_r+0xfe>
 800ba44:	89a3      	ldrh	r3, [r4, #12]
 800ba46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba4a:	81a3      	strh	r3, [r4, #12]
 800ba4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba50:	e78e      	b.n	800b970 <__sflush_r+0x1c>
 800ba52:	4407      	add	r7, r0
 800ba54:	eba8 0800 	sub.w	r8, r8, r0
 800ba58:	e7e9      	b.n	800ba2e <__sflush_r+0xda>
 800ba5a:	bf00      	nop
 800ba5c:	dfbffffe 	.word	0xdfbffffe

0800ba60 <_fflush_r>:
 800ba60:	b538      	push	{r3, r4, r5, lr}
 800ba62:	690b      	ldr	r3, [r1, #16]
 800ba64:	4605      	mov	r5, r0
 800ba66:	460c      	mov	r4, r1
 800ba68:	b913      	cbnz	r3, 800ba70 <_fflush_r+0x10>
 800ba6a:	2500      	movs	r5, #0
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	bd38      	pop	{r3, r4, r5, pc}
 800ba70:	b118      	cbz	r0, 800ba7a <_fflush_r+0x1a>
 800ba72:	6a03      	ldr	r3, [r0, #32]
 800ba74:	b90b      	cbnz	r3, 800ba7a <_fflush_r+0x1a>
 800ba76:	f7fe f9cb 	bl	8009e10 <__sinit>
 800ba7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d0f3      	beq.n	800ba6a <_fflush_r+0xa>
 800ba82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba84:	07d0      	lsls	r0, r2, #31
 800ba86:	d404      	bmi.n	800ba92 <_fflush_r+0x32>
 800ba88:	0599      	lsls	r1, r3, #22
 800ba8a:	d402      	bmi.n	800ba92 <_fflush_r+0x32>
 800ba8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba8e:	f7fe fb0e 	bl	800a0ae <__retarget_lock_acquire_recursive>
 800ba92:	4628      	mov	r0, r5
 800ba94:	4621      	mov	r1, r4
 800ba96:	f7ff ff5d 	bl	800b954 <__sflush_r>
 800ba9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba9c:	07da      	lsls	r2, r3, #31
 800ba9e:	4605      	mov	r5, r0
 800baa0:	d4e4      	bmi.n	800ba6c <_fflush_r+0xc>
 800baa2:	89a3      	ldrh	r3, [r4, #12]
 800baa4:	059b      	lsls	r3, r3, #22
 800baa6:	d4e1      	bmi.n	800ba6c <_fflush_r+0xc>
 800baa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800baaa:	f7fe fb01 	bl	800a0b0 <__retarget_lock_release_recursive>
 800baae:	e7dd      	b.n	800ba6c <_fflush_r+0xc>

0800bab0 <memmove>:
 800bab0:	4288      	cmp	r0, r1
 800bab2:	b510      	push	{r4, lr}
 800bab4:	eb01 0402 	add.w	r4, r1, r2
 800bab8:	d902      	bls.n	800bac0 <memmove+0x10>
 800baba:	4284      	cmp	r4, r0
 800babc:	4623      	mov	r3, r4
 800babe:	d807      	bhi.n	800bad0 <memmove+0x20>
 800bac0:	1e43      	subs	r3, r0, #1
 800bac2:	42a1      	cmp	r1, r4
 800bac4:	d008      	beq.n	800bad8 <memmove+0x28>
 800bac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bace:	e7f8      	b.n	800bac2 <memmove+0x12>
 800bad0:	4402      	add	r2, r0
 800bad2:	4601      	mov	r1, r0
 800bad4:	428a      	cmp	r2, r1
 800bad6:	d100      	bne.n	800bada <memmove+0x2a>
 800bad8:	bd10      	pop	{r4, pc}
 800bada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bae2:	e7f7      	b.n	800bad4 <memmove+0x24>

0800bae4 <_sbrk_r>:
 800bae4:	b538      	push	{r3, r4, r5, lr}
 800bae6:	4d06      	ldr	r5, [pc, #24]	; (800bb00 <_sbrk_r+0x1c>)
 800bae8:	2300      	movs	r3, #0
 800baea:	4604      	mov	r4, r0
 800baec:	4608      	mov	r0, r1
 800baee:	602b      	str	r3, [r5, #0]
 800baf0:	f7f6 f90e 	bl	8001d10 <_sbrk>
 800baf4:	1c43      	adds	r3, r0, #1
 800baf6:	d102      	bne.n	800bafe <_sbrk_r+0x1a>
 800baf8:	682b      	ldr	r3, [r5, #0]
 800bafa:	b103      	cbz	r3, 800bafe <_sbrk_r+0x1a>
 800bafc:	6023      	str	r3, [r4, #0]
 800bafe:	bd38      	pop	{r3, r4, r5, pc}
 800bb00:	20000744 	.word	0x20000744

0800bb04 <memcpy>:
 800bb04:	440a      	add	r2, r1
 800bb06:	4291      	cmp	r1, r2
 800bb08:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb0c:	d100      	bne.n	800bb10 <memcpy+0xc>
 800bb0e:	4770      	bx	lr
 800bb10:	b510      	push	{r4, lr}
 800bb12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb1a:	4291      	cmp	r1, r2
 800bb1c:	d1f9      	bne.n	800bb12 <memcpy+0xe>
 800bb1e:	bd10      	pop	{r4, pc}

0800bb20 <__assert_func>:
 800bb20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb22:	4614      	mov	r4, r2
 800bb24:	461a      	mov	r2, r3
 800bb26:	4b09      	ldr	r3, [pc, #36]	; (800bb4c <__assert_func+0x2c>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4605      	mov	r5, r0
 800bb2c:	68d8      	ldr	r0, [r3, #12]
 800bb2e:	b14c      	cbz	r4, 800bb44 <__assert_func+0x24>
 800bb30:	4b07      	ldr	r3, [pc, #28]	; (800bb50 <__assert_func+0x30>)
 800bb32:	9100      	str	r1, [sp, #0]
 800bb34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb38:	4906      	ldr	r1, [pc, #24]	; (800bb54 <__assert_func+0x34>)
 800bb3a:	462b      	mov	r3, r5
 800bb3c:	f000 f872 	bl	800bc24 <fiprintf>
 800bb40:	f000 f882 	bl	800bc48 <abort>
 800bb44:	4b04      	ldr	r3, [pc, #16]	; (800bb58 <__assert_func+0x38>)
 800bb46:	461c      	mov	r4, r3
 800bb48:	e7f3      	b.n	800bb32 <__assert_func+0x12>
 800bb4a:	bf00      	nop
 800bb4c:	20000084 	.word	0x20000084
 800bb50:	0800c67f 	.word	0x0800c67f
 800bb54:	0800c68c 	.word	0x0800c68c
 800bb58:	0800c6ba 	.word	0x0800c6ba

0800bb5c <_calloc_r>:
 800bb5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb5e:	fba1 2402 	umull	r2, r4, r1, r2
 800bb62:	b94c      	cbnz	r4, 800bb78 <_calloc_r+0x1c>
 800bb64:	4611      	mov	r1, r2
 800bb66:	9201      	str	r2, [sp, #4]
 800bb68:	f7ff f994 	bl	800ae94 <_malloc_r>
 800bb6c:	9a01      	ldr	r2, [sp, #4]
 800bb6e:	4605      	mov	r5, r0
 800bb70:	b930      	cbnz	r0, 800bb80 <_calloc_r+0x24>
 800bb72:	4628      	mov	r0, r5
 800bb74:	b003      	add	sp, #12
 800bb76:	bd30      	pop	{r4, r5, pc}
 800bb78:	220c      	movs	r2, #12
 800bb7a:	6002      	str	r2, [r0, #0]
 800bb7c:	2500      	movs	r5, #0
 800bb7e:	e7f8      	b.n	800bb72 <_calloc_r+0x16>
 800bb80:	4621      	mov	r1, r4
 800bb82:	f7fe fa17 	bl	8009fb4 <memset>
 800bb86:	e7f4      	b.n	800bb72 <_calloc_r+0x16>

0800bb88 <__ascii_mbtowc>:
 800bb88:	b082      	sub	sp, #8
 800bb8a:	b901      	cbnz	r1, 800bb8e <__ascii_mbtowc+0x6>
 800bb8c:	a901      	add	r1, sp, #4
 800bb8e:	b142      	cbz	r2, 800bba2 <__ascii_mbtowc+0x1a>
 800bb90:	b14b      	cbz	r3, 800bba6 <__ascii_mbtowc+0x1e>
 800bb92:	7813      	ldrb	r3, [r2, #0]
 800bb94:	600b      	str	r3, [r1, #0]
 800bb96:	7812      	ldrb	r2, [r2, #0]
 800bb98:	1e10      	subs	r0, r2, #0
 800bb9a:	bf18      	it	ne
 800bb9c:	2001      	movne	r0, #1
 800bb9e:	b002      	add	sp, #8
 800bba0:	4770      	bx	lr
 800bba2:	4610      	mov	r0, r2
 800bba4:	e7fb      	b.n	800bb9e <__ascii_mbtowc+0x16>
 800bba6:	f06f 0001 	mvn.w	r0, #1
 800bbaa:	e7f8      	b.n	800bb9e <__ascii_mbtowc+0x16>

0800bbac <_realloc_r>:
 800bbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb0:	4680      	mov	r8, r0
 800bbb2:	4614      	mov	r4, r2
 800bbb4:	460e      	mov	r6, r1
 800bbb6:	b921      	cbnz	r1, 800bbc2 <_realloc_r+0x16>
 800bbb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbbc:	4611      	mov	r1, r2
 800bbbe:	f7ff b969 	b.w	800ae94 <_malloc_r>
 800bbc2:	b92a      	cbnz	r2, 800bbd0 <_realloc_r+0x24>
 800bbc4:	f7ff f8f2 	bl	800adac <_free_r>
 800bbc8:	4625      	mov	r5, r4
 800bbca:	4628      	mov	r0, r5
 800bbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbd0:	f000 f841 	bl	800bc56 <_malloc_usable_size_r>
 800bbd4:	4284      	cmp	r4, r0
 800bbd6:	4607      	mov	r7, r0
 800bbd8:	d802      	bhi.n	800bbe0 <_realloc_r+0x34>
 800bbda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbde:	d812      	bhi.n	800bc06 <_realloc_r+0x5a>
 800bbe0:	4621      	mov	r1, r4
 800bbe2:	4640      	mov	r0, r8
 800bbe4:	f7ff f956 	bl	800ae94 <_malloc_r>
 800bbe8:	4605      	mov	r5, r0
 800bbea:	2800      	cmp	r0, #0
 800bbec:	d0ed      	beq.n	800bbca <_realloc_r+0x1e>
 800bbee:	42bc      	cmp	r4, r7
 800bbf0:	4622      	mov	r2, r4
 800bbf2:	4631      	mov	r1, r6
 800bbf4:	bf28      	it	cs
 800bbf6:	463a      	movcs	r2, r7
 800bbf8:	f7ff ff84 	bl	800bb04 <memcpy>
 800bbfc:	4631      	mov	r1, r6
 800bbfe:	4640      	mov	r0, r8
 800bc00:	f7ff f8d4 	bl	800adac <_free_r>
 800bc04:	e7e1      	b.n	800bbca <_realloc_r+0x1e>
 800bc06:	4635      	mov	r5, r6
 800bc08:	e7df      	b.n	800bbca <_realloc_r+0x1e>

0800bc0a <__ascii_wctomb>:
 800bc0a:	b149      	cbz	r1, 800bc20 <__ascii_wctomb+0x16>
 800bc0c:	2aff      	cmp	r2, #255	; 0xff
 800bc0e:	bf85      	ittet	hi
 800bc10:	238a      	movhi	r3, #138	; 0x8a
 800bc12:	6003      	strhi	r3, [r0, #0]
 800bc14:	700a      	strbls	r2, [r1, #0]
 800bc16:	f04f 30ff 	movhi.w	r0, #4294967295
 800bc1a:	bf98      	it	ls
 800bc1c:	2001      	movls	r0, #1
 800bc1e:	4770      	bx	lr
 800bc20:	4608      	mov	r0, r1
 800bc22:	4770      	bx	lr

0800bc24 <fiprintf>:
 800bc24:	b40e      	push	{r1, r2, r3}
 800bc26:	b503      	push	{r0, r1, lr}
 800bc28:	4601      	mov	r1, r0
 800bc2a:	ab03      	add	r3, sp, #12
 800bc2c:	4805      	ldr	r0, [pc, #20]	; (800bc44 <fiprintf+0x20>)
 800bc2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc32:	6800      	ldr	r0, [r0, #0]
 800bc34:	9301      	str	r3, [sp, #4]
 800bc36:	f000 f83f 	bl	800bcb8 <_vfiprintf_r>
 800bc3a:	b002      	add	sp, #8
 800bc3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc40:	b003      	add	sp, #12
 800bc42:	4770      	bx	lr
 800bc44:	20000084 	.word	0x20000084

0800bc48 <abort>:
 800bc48:	b508      	push	{r3, lr}
 800bc4a:	2006      	movs	r0, #6
 800bc4c:	f000 fa0c 	bl	800c068 <raise>
 800bc50:	2001      	movs	r0, #1
 800bc52:	f7f5 ffe5 	bl	8001c20 <_exit>

0800bc56 <_malloc_usable_size_r>:
 800bc56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc5a:	1f18      	subs	r0, r3, #4
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	bfbc      	itt	lt
 800bc60:	580b      	ldrlt	r3, [r1, r0]
 800bc62:	18c0      	addlt	r0, r0, r3
 800bc64:	4770      	bx	lr

0800bc66 <__sfputc_r>:
 800bc66:	6893      	ldr	r3, [r2, #8]
 800bc68:	3b01      	subs	r3, #1
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	b410      	push	{r4}
 800bc6e:	6093      	str	r3, [r2, #8]
 800bc70:	da08      	bge.n	800bc84 <__sfputc_r+0x1e>
 800bc72:	6994      	ldr	r4, [r2, #24]
 800bc74:	42a3      	cmp	r3, r4
 800bc76:	db01      	blt.n	800bc7c <__sfputc_r+0x16>
 800bc78:	290a      	cmp	r1, #10
 800bc7a:	d103      	bne.n	800bc84 <__sfputc_r+0x1e>
 800bc7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc80:	f000 b934 	b.w	800beec <__swbuf_r>
 800bc84:	6813      	ldr	r3, [r2, #0]
 800bc86:	1c58      	adds	r0, r3, #1
 800bc88:	6010      	str	r0, [r2, #0]
 800bc8a:	7019      	strb	r1, [r3, #0]
 800bc8c:	4608      	mov	r0, r1
 800bc8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <__sfputs_r>:
 800bc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc96:	4606      	mov	r6, r0
 800bc98:	460f      	mov	r7, r1
 800bc9a:	4614      	mov	r4, r2
 800bc9c:	18d5      	adds	r5, r2, r3
 800bc9e:	42ac      	cmp	r4, r5
 800bca0:	d101      	bne.n	800bca6 <__sfputs_r+0x12>
 800bca2:	2000      	movs	r0, #0
 800bca4:	e007      	b.n	800bcb6 <__sfputs_r+0x22>
 800bca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcaa:	463a      	mov	r2, r7
 800bcac:	4630      	mov	r0, r6
 800bcae:	f7ff ffda 	bl	800bc66 <__sfputc_r>
 800bcb2:	1c43      	adds	r3, r0, #1
 800bcb4:	d1f3      	bne.n	800bc9e <__sfputs_r+0xa>
 800bcb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bcb8 <_vfiprintf_r>:
 800bcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcbc:	460d      	mov	r5, r1
 800bcbe:	b09d      	sub	sp, #116	; 0x74
 800bcc0:	4614      	mov	r4, r2
 800bcc2:	4698      	mov	r8, r3
 800bcc4:	4606      	mov	r6, r0
 800bcc6:	b118      	cbz	r0, 800bcd0 <_vfiprintf_r+0x18>
 800bcc8:	6a03      	ldr	r3, [r0, #32]
 800bcca:	b90b      	cbnz	r3, 800bcd0 <_vfiprintf_r+0x18>
 800bccc:	f7fe f8a0 	bl	8009e10 <__sinit>
 800bcd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcd2:	07d9      	lsls	r1, r3, #31
 800bcd4:	d405      	bmi.n	800bce2 <_vfiprintf_r+0x2a>
 800bcd6:	89ab      	ldrh	r3, [r5, #12]
 800bcd8:	059a      	lsls	r2, r3, #22
 800bcda:	d402      	bmi.n	800bce2 <_vfiprintf_r+0x2a>
 800bcdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcde:	f7fe f9e6 	bl	800a0ae <__retarget_lock_acquire_recursive>
 800bce2:	89ab      	ldrh	r3, [r5, #12]
 800bce4:	071b      	lsls	r3, r3, #28
 800bce6:	d501      	bpl.n	800bcec <_vfiprintf_r+0x34>
 800bce8:	692b      	ldr	r3, [r5, #16]
 800bcea:	b99b      	cbnz	r3, 800bd14 <_vfiprintf_r+0x5c>
 800bcec:	4629      	mov	r1, r5
 800bcee:	4630      	mov	r0, r6
 800bcf0:	f000 f93a 	bl	800bf68 <__swsetup_r>
 800bcf4:	b170      	cbz	r0, 800bd14 <_vfiprintf_r+0x5c>
 800bcf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcf8:	07dc      	lsls	r4, r3, #31
 800bcfa:	d504      	bpl.n	800bd06 <_vfiprintf_r+0x4e>
 800bcfc:	f04f 30ff 	mov.w	r0, #4294967295
 800bd00:	b01d      	add	sp, #116	; 0x74
 800bd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd06:	89ab      	ldrh	r3, [r5, #12]
 800bd08:	0598      	lsls	r0, r3, #22
 800bd0a:	d4f7      	bmi.n	800bcfc <_vfiprintf_r+0x44>
 800bd0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd0e:	f7fe f9cf 	bl	800a0b0 <__retarget_lock_release_recursive>
 800bd12:	e7f3      	b.n	800bcfc <_vfiprintf_r+0x44>
 800bd14:	2300      	movs	r3, #0
 800bd16:	9309      	str	r3, [sp, #36]	; 0x24
 800bd18:	2320      	movs	r3, #32
 800bd1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd22:	2330      	movs	r3, #48	; 0x30
 800bd24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bed8 <_vfiprintf_r+0x220>
 800bd28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd2c:	f04f 0901 	mov.w	r9, #1
 800bd30:	4623      	mov	r3, r4
 800bd32:	469a      	mov	sl, r3
 800bd34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd38:	b10a      	cbz	r2, 800bd3e <_vfiprintf_r+0x86>
 800bd3a:	2a25      	cmp	r2, #37	; 0x25
 800bd3c:	d1f9      	bne.n	800bd32 <_vfiprintf_r+0x7a>
 800bd3e:	ebba 0b04 	subs.w	fp, sl, r4
 800bd42:	d00b      	beq.n	800bd5c <_vfiprintf_r+0xa4>
 800bd44:	465b      	mov	r3, fp
 800bd46:	4622      	mov	r2, r4
 800bd48:	4629      	mov	r1, r5
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	f7ff ffa2 	bl	800bc94 <__sfputs_r>
 800bd50:	3001      	adds	r0, #1
 800bd52:	f000 80a9 	beq.w	800bea8 <_vfiprintf_r+0x1f0>
 800bd56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd58:	445a      	add	r2, fp
 800bd5a:	9209      	str	r2, [sp, #36]	; 0x24
 800bd5c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	f000 80a1 	beq.w	800bea8 <_vfiprintf_r+0x1f0>
 800bd66:	2300      	movs	r3, #0
 800bd68:	f04f 32ff 	mov.w	r2, #4294967295
 800bd6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd70:	f10a 0a01 	add.w	sl, sl, #1
 800bd74:	9304      	str	r3, [sp, #16]
 800bd76:	9307      	str	r3, [sp, #28]
 800bd78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd7c:	931a      	str	r3, [sp, #104]	; 0x68
 800bd7e:	4654      	mov	r4, sl
 800bd80:	2205      	movs	r2, #5
 800bd82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd86:	4854      	ldr	r0, [pc, #336]	; (800bed8 <_vfiprintf_r+0x220>)
 800bd88:	f7f4 fa22 	bl	80001d0 <memchr>
 800bd8c:	9a04      	ldr	r2, [sp, #16]
 800bd8e:	b9d8      	cbnz	r0, 800bdc8 <_vfiprintf_r+0x110>
 800bd90:	06d1      	lsls	r1, r2, #27
 800bd92:	bf44      	itt	mi
 800bd94:	2320      	movmi	r3, #32
 800bd96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd9a:	0713      	lsls	r3, r2, #28
 800bd9c:	bf44      	itt	mi
 800bd9e:	232b      	movmi	r3, #43	; 0x2b
 800bda0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bda4:	f89a 3000 	ldrb.w	r3, [sl]
 800bda8:	2b2a      	cmp	r3, #42	; 0x2a
 800bdaa:	d015      	beq.n	800bdd8 <_vfiprintf_r+0x120>
 800bdac:	9a07      	ldr	r2, [sp, #28]
 800bdae:	4654      	mov	r4, sl
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	f04f 0c0a 	mov.w	ip, #10
 800bdb6:	4621      	mov	r1, r4
 800bdb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdbc:	3b30      	subs	r3, #48	; 0x30
 800bdbe:	2b09      	cmp	r3, #9
 800bdc0:	d94d      	bls.n	800be5e <_vfiprintf_r+0x1a6>
 800bdc2:	b1b0      	cbz	r0, 800bdf2 <_vfiprintf_r+0x13a>
 800bdc4:	9207      	str	r2, [sp, #28]
 800bdc6:	e014      	b.n	800bdf2 <_vfiprintf_r+0x13a>
 800bdc8:	eba0 0308 	sub.w	r3, r0, r8
 800bdcc:	fa09 f303 	lsl.w	r3, r9, r3
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	9304      	str	r3, [sp, #16]
 800bdd4:	46a2      	mov	sl, r4
 800bdd6:	e7d2      	b.n	800bd7e <_vfiprintf_r+0xc6>
 800bdd8:	9b03      	ldr	r3, [sp, #12]
 800bdda:	1d19      	adds	r1, r3, #4
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	9103      	str	r1, [sp, #12]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	bfbb      	ittet	lt
 800bde4:	425b      	neglt	r3, r3
 800bde6:	f042 0202 	orrlt.w	r2, r2, #2
 800bdea:	9307      	strge	r3, [sp, #28]
 800bdec:	9307      	strlt	r3, [sp, #28]
 800bdee:	bfb8      	it	lt
 800bdf0:	9204      	strlt	r2, [sp, #16]
 800bdf2:	7823      	ldrb	r3, [r4, #0]
 800bdf4:	2b2e      	cmp	r3, #46	; 0x2e
 800bdf6:	d10c      	bne.n	800be12 <_vfiprintf_r+0x15a>
 800bdf8:	7863      	ldrb	r3, [r4, #1]
 800bdfa:	2b2a      	cmp	r3, #42	; 0x2a
 800bdfc:	d134      	bne.n	800be68 <_vfiprintf_r+0x1b0>
 800bdfe:	9b03      	ldr	r3, [sp, #12]
 800be00:	1d1a      	adds	r2, r3, #4
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	9203      	str	r2, [sp, #12]
 800be06:	2b00      	cmp	r3, #0
 800be08:	bfb8      	it	lt
 800be0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800be0e:	3402      	adds	r4, #2
 800be10:	9305      	str	r3, [sp, #20]
 800be12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bee8 <_vfiprintf_r+0x230>
 800be16:	7821      	ldrb	r1, [r4, #0]
 800be18:	2203      	movs	r2, #3
 800be1a:	4650      	mov	r0, sl
 800be1c:	f7f4 f9d8 	bl	80001d0 <memchr>
 800be20:	b138      	cbz	r0, 800be32 <_vfiprintf_r+0x17a>
 800be22:	9b04      	ldr	r3, [sp, #16]
 800be24:	eba0 000a 	sub.w	r0, r0, sl
 800be28:	2240      	movs	r2, #64	; 0x40
 800be2a:	4082      	lsls	r2, r0
 800be2c:	4313      	orrs	r3, r2
 800be2e:	3401      	adds	r4, #1
 800be30:	9304      	str	r3, [sp, #16]
 800be32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be36:	4829      	ldr	r0, [pc, #164]	; (800bedc <_vfiprintf_r+0x224>)
 800be38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be3c:	2206      	movs	r2, #6
 800be3e:	f7f4 f9c7 	bl	80001d0 <memchr>
 800be42:	2800      	cmp	r0, #0
 800be44:	d03f      	beq.n	800bec6 <_vfiprintf_r+0x20e>
 800be46:	4b26      	ldr	r3, [pc, #152]	; (800bee0 <_vfiprintf_r+0x228>)
 800be48:	bb1b      	cbnz	r3, 800be92 <_vfiprintf_r+0x1da>
 800be4a:	9b03      	ldr	r3, [sp, #12]
 800be4c:	3307      	adds	r3, #7
 800be4e:	f023 0307 	bic.w	r3, r3, #7
 800be52:	3308      	adds	r3, #8
 800be54:	9303      	str	r3, [sp, #12]
 800be56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be58:	443b      	add	r3, r7
 800be5a:	9309      	str	r3, [sp, #36]	; 0x24
 800be5c:	e768      	b.n	800bd30 <_vfiprintf_r+0x78>
 800be5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800be62:	460c      	mov	r4, r1
 800be64:	2001      	movs	r0, #1
 800be66:	e7a6      	b.n	800bdb6 <_vfiprintf_r+0xfe>
 800be68:	2300      	movs	r3, #0
 800be6a:	3401      	adds	r4, #1
 800be6c:	9305      	str	r3, [sp, #20]
 800be6e:	4619      	mov	r1, r3
 800be70:	f04f 0c0a 	mov.w	ip, #10
 800be74:	4620      	mov	r0, r4
 800be76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be7a:	3a30      	subs	r2, #48	; 0x30
 800be7c:	2a09      	cmp	r2, #9
 800be7e:	d903      	bls.n	800be88 <_vfiprintf_r+0x1d0>
 800be80:	2b00      	cmp	r3, #0
 800be82:	d0c6      	beq.n	800be12 <_vfiprintf_r+0x15a>
 800be84:	9105      	str	r1, [sp, #20]
 800be86:	e7c4      	b.n	800be12 <_vfiprintf_r+0x15a>
 800be88:	fb0c 2101 	mla	r1, ip, r1, r2
 800be8c:	4604      	mov	r4, r0
 800be8e:	2301      	movs	r3, #1
 800be90:	e7f0      	b.n	800be74 <_vfiprintf_r+0x1bc>
 800be92:	ab03      	add	r3, sp, #12
 800be94:	9300      	str	r3, [sp, #0]
 800be96:	462a      	mov	r2, r5
 800be98:	4b12      	ldr	r3, [pc, #72]	; (800bee4 <_vfiprintf_r+0x22c>)
 800be9a:	a904      	add	r1, sp, #16
 800be9c:	4630      	mov	r0, r6
 800be9e:	f7fd fb65 	bl	800956c <_printf_float>
 800bea2:	4607      	mov	r7, r0
 800bea4:	1c78      	adds	r0, r7, #1
 800bea6:	d1d6      	bne.n	800be56 <_vfiprintf_r+0x19e>
 800bea8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800beaa:	07d9      	lsls	r1, r3, #31
 800beac:	d405      	bmi.n	800beba <_vfiprintf_r+0x202>
 800beae:	89ab      	ldrh	r3, [r5, #12]
 800beb0:	059a      	lsls	r2, r3, #22
 800beb2:	d402      	bmi.n	800beba <_vfiprintf_r+0x202>
 800beb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800beb6:	f7fe f8fb 	bl	800a0b0 <__retarget_lock_release_recursive>
 800beba:	89ab      	ldrh	r3, [r5, #12]
 800bebc:	065b      	lsls	r3, r3, #25
 800bebe:	f53f af1d 	bmi.w	800bcfc <_vfiprintf_r+0x44>
 800bec2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bec4:	e71c      	b.n	800bd00 <_vfiprintf_r+0x48>
 800bec6:	ab03      	add	r3, sp, #12
 800bec8:	9300      	str	r3, [sp, #0]
 800beca:	462a      	mov	r2, r5
 800becc:	4b05      	ldr	r3, [pc, #20]	; (800bee4 <_vfiprintf_r+0x22c>)
 800bece:	a904      	add	r1, sp, #16
 800bed0:	4630      	mov	r0, r6
 800bed2:	f7fd fdef 	bl	8009ab4 <_printf_i>
 800bed6:	e7e4      	b.n	800bea2 <_vfiprintf_r+0x1ea>
 800bed8:	0800c664 	.word	0x0800c664
 800bedc:	0800c66e 	.word	0x0800c66e
 800bee0:	0800956d 	.word	0x0800956d
 800bee4:	0800bc95 	.word	0x0800bc95
 800bee8:	0800c66a 	.word	0x0800c66a

0800beec <__swbuf_r>:
 800beec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beee:	460e      	mov	r6, r1
 800bef0:	4614      	mov	r4, r2
 800bef2:	4605      	mov	r5, r0
 800bef4:	b118      	cbz	r0, 800befe <__swbuf_r+0x12>
 800bef6:	6a03      	ldr	r3, [r0, #32]
 800bef8:	b90b      	cbnz	r3, 800befe <__swbuf_r+0x12>
 800befa:	f7fd ff89 	bl	8009e10 <__sinit>
 800befe:	69a3      	ldr	r3, [r4, #24]
 800bf00:	60a3      	str	r3, [r4, #8]
 800bf02:	89a3      	ldrh	r3, [r4, #12]
 800bf04:	071a      	lsls	r2, r3, #28
 800bf06:	d525      	bpl.n	800bf54 <__swbuf_r+0x68>
 800bf08:	6923      	ldr	r3, [r4, #16]
 800bf0a:	b31b      	cbz	r3, 800bf54 <__swbuf_r+0x68>
 800bf0c:	6823      	ldr	r3, [r4, #0]
 800bf0e:	6922      	ldr	r2, [r4, #16]
 800bf10:	1a98      	subs	r0, r3, r2
 800bf12:	6963      	ldr	r3, [r4, #20]
 800bf14:	b2f6      	uxtb	r6, r6
 800bf16:	4283      	cmp	r3, r0
 800bf18:	4637      	mov	r7, r6
 800bf1a:	dc04      	bgt.n	800bf26 <__swbuf_r+0x3a>
 800bf1c:	4621      	mov	r1, r4
 800bf1e:	4628      	mov	r0, r5
 800bf20:	f7ff fd9e 	bl	800ba60 <_fflush_r>
 800bf24:	b9e0      	cbnz	r0, 800bf60 <__swbuf_r+0x74>
 800bf26:	68a3      	ldr	r3, [r4, #8]
 800bf28:	3b01      	subs	r3, #1
 800bf2a:	60a3      	str	r3, [r4, #8]
 800bf2c:	6823      	ldr	r3, [r4, #0]
 800bf2e:	1c5a      	adds	r2, r3, #1
 800bf30:	6022      	str	r2, [r4, #0]
 800bf32:	701e      	strb	r6, [r3, #0]
 800bf34:	6962      	ldr	r2, [r4, #20]
 800bf36:	1c43      	adds	r3, r0, #1
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d004      	beq.n	800bf46 <__swbuf_r+0x5a>
 800bf3c:	89a3      	ldrh	r3, [r4, #12]
 800bf3e:	07db      	lsls	r3, r3, #31
 800bf40:	d506      	bpl.n	800bf50 <__swbuf_r+0x64>
 800bf42:	2e0a      	cmp	r6, #10
 800bf44:	d104      	bne.n	800bf50 <__swbuf_r+0x64>
 800bf46:	4621      	mov	r1, r4
 800bf48:	4628      	mov	r0, r5
 800bf4a:	f7ff fd89 	bl	800ba60 <_fflush_r>
 800bf4e:	b938      	cbnz	r0, 800bf60 <__swbuf_r+0x74>
 800bf50:	4638      	mov	r0, r7
 800bf52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf54:	4621      	mov	r1, r4
 800bf56:	4628      	mov	r0, r5
 800bf58:	f000 f806 	bl	800bf68 <__swsetup_r>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d0d5      	beq.n	800bf0c <__swbuf_r+0x20>
 800bf60:	f04f 37ff 	mov.w	r7, #4294967295
 800bf64:	e7f4      	b.n	800bf50 <__swbuf_r+0x64>
	...

0800bf68 <__swsetup_r>:
 800bf68:	b538      	push	{r3, r4, r5, lr}
 800bf6a:	4b2a      	ldr	r3, [pc, #168]	; (800c014 <__swsetup_r+0xac>)
 800bf6c:	4605      	mov	r5, r0
 800bf6e:	6818      	ldr	r0, [r3, #0]
 800bf70:	460c      	mov	r4, r1
 800bf72:	b118      	cbz	r0, 800bf7c <__swsetup_r+0x14>
 800bf74:	6a03      	ldr	r3, [r0, #32]
 800bf76:	b90b      	cbnz	r3, 800bf7c <__swsetup_r+0x14>
 800bf78:	f7fd ff4a 	bl	8009e10 <__sinit>
 800bf7c:	89a3      	ldrh	r3, [r4, #12]
 800bf7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf82:	0718      	lsls	r0, r3, #28
 800bf84:	d422      	bmi.n	800bfcc <__swsetup_r+0x64>
 800bf86:	06d9      	lsls	r1, r3, #27
 800bf88:	d407      	bmi.n	800bf9a <__swsetup_r+0x32>
 800bf8a:	2309      	movs	r3, #9
 800bf8c:	602b      	str	r3, [r5, #0]
 800bf8e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf92:	81a3      	strh	r3, [r4, #12]
 800bf94:	f04f 30ff 	mov.w	r0, #4294967295
 800bf98:	e034      	b.n	800c004 <__swsetup_r+0x9c>
 800bf9a:	0758      	lsls	r0, r3, #29
 800bf9c:	d512      	bpl.n	800bfc4 <__swsetup_r+0x5c>
 800bf9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfa0:	b141      	cbz	r1, 800bfb4 <__swsetup_r+0x4c>
 800bfa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfa6:	4299      	cmp	r1, r3
 800bfa8:	d002      	beq.n	800bfb0 <__swsetup_r+0x48>
 800bfaa:	4628      	mov	r0, r5
 800bfac:	f7fe fefe 	bl	800adac <_free_r>
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	6363      	str	r3, [r4, #52]	; 0x34
 800bfb4:	89a3      	ldrh	r3, [r4, #12]
 800bfb6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bfba:	81a3      	strh	r3, [r4, #12]
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	6063      	str	r3, [r4, #4]
 800bfc0:	6923      	ldr	r3, [r4, #16]
 800bfc2:	6023      	str	r3, [r4, #0]
 800bfc4:	89a3      	ldrh	r3, [r4, #12]
 800bfc6:	f043 0308 	orr.w	r3, r3, #8
 800bfca:	81a3      	strh	r3, [r4, #12]
 800bfcc:	6923      	ldr	r3, [r4, #16]
 800bfce:	b94b      	cbnz	r3, 800bfe4 <__swsetup_r+0x7c>
 800bfd0:	89a3      	ldrh	r3, [r4, #12]
 800bfd2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bfd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfda:	d003      	beq.n	800bfe4 <__swsetup_r+0x7c>
 800bfdc:	4621      	mov	r1, r4
 800bfde:	4628      	mov	r0, r5
 800bfe0:	f000 f884 	bl	800c0ec <__smakebuf_r>
 800bfe4:	89a0      	ldrh	r0, [r4, #12]
 800bfe6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfea:	f010 0301 	ands.w	r3, r0, #1
 800bfee:	d00a      	beq.n	800c006 <__swsetup_r+0x9e>
 800bff0:	2300      	movs	r3, #0
 800bff2:	60a3      	str	r3, [r4, #8]
 800bff4:	6963      	ldr	r3, [r4, #20]
 800bff6:	425b      	negs	r3, r3
 800bff8:	61a3      	str	r3, [r4, #24]
 800bffa:	6923      	ldr	r3, [r4, #16]
 800bffc:	b943      	cbnz	r3, 800c010 <__swsetup_r+0xa8>
 800bffe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c002:	d1c4      	bne.n	800bf8e <__swsetup_r+0x26>
 800c004:	bd38      	pop	{r3, r4, r5, pc}
 800c006:	0781      	lsls	r1, r0, #30
 800c008:	bf58      	it	pl
 800c00a:	6963      	ldrpl	r3, [r4, #20]
 800c00c:	60a3      	str	r3, [r4, #8]
 800c00e:	e7f4      	b.n	800bffa <__swsetup_r+0x92>
 800c010:	2000      	movs	r0, #0
 800c012:	e7f7      	b.n	800c004 <__swsetup_r+0x9c>
 800c014:	20000084 	.word	0x20000084

0800c018 <_raise_r>:
 800c018:	291f      	cmp	r1, #31
 800c01a:	b538      	push	{r3, r4, r5, lr}
 800c01c:	4604      	mov	r4, r0
 800c01e:	460d      	mov	r5, r1
 800c020:	d904      	bls.n	800c02c <_raise_r+0x14>
 800c022:	2316      	movs	r3, #22
 800c024:	6003      	str	r3, [r0, #0]
 800c026:	f04f 30ff 	mov.w	r0, #4294967295
 800c02a:	bd38      	pop	{r3, r4, r5, pc}
 800c02c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c02e:	b112      	cbz	r2, 800c036 <_raise_r+0x1e>
 800c030:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c034:	b94b      	cbnz	r3, 800c04a <_raise_r+0x32>
 800c036:	4620      	mov	r0, r4
 800c038:	f000 f830 	bl	800c09c <_getpid_r>
 800c03c:	462a      	mov	r2, r5
 800c03e:	4601      	mov	r1, r0
 800c040:	4620      	mov	r0, r4
 800c042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c046:	f000 b817 	b.w	800c078 <_kill_r>
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d00a      	beq.n	800c064 <_raise_r+0x4c>
 800c04e:	1c59      	adds	r1, r3, #1
 800c050:	d103      	bne.n	800c05a <_raise_r+0x42>
 800c052:	2316      	movs	r3, #22
 800c054:	6003      	str	r3, [r0, #0]
 800c056:	2001      	movs	r0, #1
 800c058:	e7e7      	b.n	800c02a <_raise_r+0x12>
 800c05a:	2400      	movs	r4, #0
 800c05c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c060:	4628      	mov	r0, r5
 800c062:	4798      	blx	r3
 800c064:	2000      	movs	r0, #0
 800c066:	e7e0      	b.n	800c02a <_raise_r+0x12>

0800c068 <raise>:
 800c068:	4b02      	ldr	r3, [pc, #8]	; (800c074 <raise+0xc>)
 800c06a:	4601      	mov	r1, r0
 800c06c:	6818      	ldr	r0, [r3, #0]
 800c06e:	f7ff bfd3 	b.w	800c018 <_raise_r>
 800c072:	bf00      	nop
 800c074:	20000084 	.word	0x20000084

0800c078 <_kill_r>:
 800c078:	b538      	push	{r3, r4, r5, lr}
 800c07a:	4d07      	ldr	r5, [pc, #28]	; (800c098 <_kill_r+0x20>)
 800c07c:	2300      	movs	r3, #0
 800c07e:	4604      	mov	r4, r0
 800c080:	4608      	mov	r0, r1
 800c082:	4611      	mov	r1, r2
 800c084:	602b      	str	r3, [r5, #0]
 800c086:	f7f5 fdbb 	bl	8001c00 <_kill>
 800c08a:	1c43      	adds	r3, r0, #1
 800c08c:	d102      	bne.n	800c094 <_kill_r+0x1c>
 800c08e:	682b      	ldr	r3, [r5, #0]
 800c090:	b103      	cbz	r3, 800c094 <_kill_r+0x1c>
 800c092:	6023      	str	r3, [r4, #0]
 800c094:	bd38      	pop	{r3, r4, r5, pc}
 800c096:	bf00      	nop
 800c098:	20000744 	.word	0x20000744

0800c09c <_getpid_r>:
 800c09c:	f7f5 bda8 	b.w	8001bf0 <_getpid>

0800c0a0 <__swhatbuf_r>:
 800c0a0:	b570      	push	{r4, r5, r6, lr}
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0a8:	2900      	cmp	r1, #0
 800c0aa:	b096      	sub	sp, #88	; 0x58
 800c0ac:	4615      	mov	r5, r2
 800c0ae:	461e      	mov	r6, r3
 800c0b0:	da0d      	bge.n	800c0ce <__swhatbuf_r+0x2e>
 800c0b2:	89a3      	ldrh	r3, [r4, #12]
 800c0b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c0b8:	f04f 0100 	mov.w	r1, #0
 800c0bc:	bf0c      	ite	eq
 800c0be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c0c2:	2340      	movne	r3, #64	; 0x40
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	6031      	str	r1, [r6, #0]
 800c0c8:	602b      	str	r3, [r5, #0]
 800c0ca:	b016      	add	sp, #88	; 0x58
 800c0cc:	bd70      	pop	{r4, r5, r6, pc}
 800c0ce:	466a      	mov	r2, sp
 800c0d0:	f000 f848 	bl	800c164 <_fstat_r>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	dbec      	blt.n	800c0b2 <__swhatbuf_r+0x12>
 800c0d8:	9901      	ldr	r1, [sp, #4]
 800c0da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c0de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c0e2:	4259      	negs	r1, r3
 800c0e4:	4159      	adcs	r1, r3
 800c0e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0ea:	e7eb      	b.n	800c0c4 <__swhatbuf_r+0x24>

0800c0ec <__smakebuf_r>:
 800c0ec:	898b      	ldrh	r3, [r1, #12]
 800c0ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0f0:	079d      	lsls	r5, r3, #30
 800c0f2:	4606      	mov	r6, r0
 800c0f4:	460c      	mov	r4, r1
 800c0f6:	d507      	bpl.n	800c108 <__smakebuf_r+0x1c>
 800c0f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0fc:	6023      	str	r3, [r4, #0]
 800c0fe:	6123      	str	r3, [r4, #16]
 800c100:	2301      	movs	r3, #1
 800c102:	6163      	str	r3, [r4, #20]
 800c104:	b002      	add	sp, #8
 800c106:	bd70      	pop	{r4, r5, r6, pc}
 800c108:	ab01      	add	r3, sp, #4
 800c10a:	466a      	mov	r2, sp
 800c10c:	f7ff ffc8 	bl	800c0a0 <__swhatbuf_r>
 800c110:	9900      	ldr	r1, [sp, #0]
 800c112:	4605      	mov	r5, r0
 800c114:	4630      	mov	r0, r6
 800c116:	f7fe febd 	bl	800ae94 <_malloc_r>
 800c11a:	b948      	cbnz	r0, 800c130 <__smakebuf_r+0x44>
 800c11c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c120:	059a      	lsls	r2, r3, #22
 800c122:	d4ef      	bmi.n	800c104 <__smakebuf_r+0x18>
 800c124:	f023 0303 	bic.w	r3, r3, #3
 800c128:	f043 0302 	orr.w	r3, r3, #2
 800c12c:	81a3      	strh	r3, [r4, #12]
 800c12e:	e7e3      	b.n	800c0f8 <__smakebuf_r+0xc>
 800c130:	89a3      	ldrh	r3, [r4, #12]
 800c132:	6020      	str	r0, [r4, #0]
 800c134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c138:	81a3      	strh	r3, [r4, #12]
 800c13a:	9b00      	ldr	r3, [sp, #0]
 800c13c:	6163      	str	r3, [r4, #20]
 800c13e:	9b01      	ldr	r3, [sp, #4]
 800c140:	6120      	str	r0, [r4, #16]
 800c142:	b15b      	cbz	r3, 800c15c <__smakebuf_r+0x70>
 800c144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c148:	4630      	mov	r0, r6
 800c14a:	f000 f81d 	bl	800c188 <_isatty_r>
 800c14e:	b128      	cbz	r0, 800c15c <__smakebuf_r+0x70>
 800c150:	89a3      	ldrh	r3, [r4, #12]
 800c152:	f023 0303 	bic.w	r3, r3, #3
 800c156:	f043 0301 	orr.w	r3, r3, #1
 800c15a:	81a3      	strh	r3, [r4, #12]
 800c15c:	89a3      	ldrh	r3, [r4, #12]
 800c15e:	431d      	orrs	r5, r3
 800c160:	81a5      	strh	r5, [r4, #12]
 800c162:	e7cf      	b.n	800c104 <__smakebuf_r+0x18>

0800c164 <_fstat_r>:
 800c164:	b538      	push	{r3, r4, r5, lr}
 800c166:	4d07      	ldr	r5, [pc, #28]	; (800c184 <_fstat_r+0x20>)
 800c168:	2300      	movs	r3, #0
 800c16a:	4604      	mov	r4, r0
 800c16c:	4608      	mov	r0, r1
 800c16e:	4611      	mov	r1, r2
 800c170:	602b      	str	r3, [r5, #0]
 800c172:	f7f5 fda4 	bl	8001cbe <_fstat>
 800c176:	1c43      	adds	r3, r0, #1
 800c178:	d102      	bne.n	800c180 <_fstat_r+0x1c>
 800c17a:	682b      	ldr	r3, [r5, #0]
 800c17c:	b103      	cbz	r3, 800c180 <_fstat_r+0x1c>
 800c17e:	6023      	str	r3, [r4, #0]
 800c180:	bd38      	pop	{r3, r4, r5, pc}
 800c182:	bf00      	nop
 800c184:	20000744 	.word	0x20000744

0800c188 <_isatty_r>:
 800c188:	b538      	push	{r3, r4, r5, lr}
 800c18a:	4d06      	ldr	r5, [pc, #24]	; (800c1a4 <_isatty_r+0x1c>)
 800c18c:	2300      	movs	r3, #0
 800c18e:	4604      	mov	r4, r0
 800c190:	4608      	mov	r0, r1
 800c192:	602b      	str	r3, [r5, #0]
 800c194:	f7f5 fda3 	bl	8001cde <_isatty>
 800c198:	1c43      	adds	r3, r0, #1
 800c19a:	d102      	bne.n	800c1a2 <_isatty_r+0x1a>
 800c19c:	682b      	ldr	r3, [r5, #0]
 800c19e:	b103      	cbz	r3, 800c1a2 <_isatty_r+0x1a>
 800c1a0:	6023      	str	r3, [r4, #0]
 800c1a2:	bd38      	pop	{r3, r4, r5, pc}
 800c1a4:	20000744 	.word	0x20000744

0800c1a8 <_init>:
 800c1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1aa:	bf00      	nop
 800c1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ae:	bc08      	pop	{r3}
 800c1b0:	469e      	mov	lr, r3
 800c1b2:	4770      	bx	lr

0800c1b4 <_fini>:
 800c1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b6:	bf00      	nop
 800c1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ba:	bc08      	pop	{r3}
 800c1bc:	469e      	mov	lr, r3
 800c1be:	4770      	bx	lr
